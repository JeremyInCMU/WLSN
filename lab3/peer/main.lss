
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800200  0000639e  00006432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000639e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000779  00800370  00800370  000065a2  2**0
                  ALLOC
  3 .stab         00012a38  00000000  00000000  000065a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000098ff  00000000  00000000  00018fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000228db  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  000228ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00023a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00024abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00024adb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__ctors_end>
       4:	0c 94 7b 2a 	jmp	0x54f6	; 0x54f6 <__vector_1>
       8:	0c 94 ad 2a 	jmp	0x555a	; 0x555a <__vector_2>
       c:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__vector_3>
      10:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      14:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      18:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      20:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      24:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__vector_9>
      28:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      2c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      30:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      34:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__vector_13>
      38:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      3c:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__vector_13>
      40:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      44:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      48:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      4c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      50:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      54:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      58:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      5c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      60:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      64:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_25>
      68:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      6c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      70:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      74:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      78:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      7c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      80:	0c 94 db 28 	jmp	0x51b6	; 0x51b6 <__vector_32>
      84:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      88:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      8c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      90:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      94:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      98:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      9c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      ac:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      bc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      c0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      c4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      c8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      cc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      d0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      d4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      d8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      dc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      e0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      e4:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__vector_57>
      e8:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__vector_58>
      ec:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__vector_59>
      f0:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__vector_60>
      f4:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__vector_61>
      f8:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_62>
      fc:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__vector_63>
     100:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_64>
     104:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     108:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     10c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     110:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     114:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     118:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     11c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     120:	74 05       	cpc	r23, r4
     122:	78 05       	cpc	r23, r8
     124:	82 05       	cpc	r24, r2
     126:	88 05       	cpc	r24, r8
     128:	94 05       	cpc	r25, r4
     12a:	9f 05       	cpc	r25, r15
     12c:	a4 05       	cpc	r26, r4
     12e:	c6 05       	cpc	r28, r6
     130:	ce 05       	cpc	r28, r14
     132:	e9 05       	cpc	r30, r9
     134:	7b 06       	cpc	r7, r27
     136:	b7 06       	cpc	r11, r23
     138:	13 07       	cpc	r17, r19
     13a:	52 07       	cpc	r21, r18
     13c:	a4 07       	cpc	r26, r20
     13e:	46 12       	cpse	r4, r22
     140:	53 12       	cpse	r5, r19
     142:	60 12       	cpse	r6, r16
     144:	6d 12       	cpse	r6, r29
     146:	7a 12       	cpse	r7, r26
     148:	87 12       	cpse	r8, r23
     14a:	94 12       	cpse	r9, r20
     14c:	b7 12       	cpse	r11, r23
     14e:	c5 12       	cpse	r12, r21
     150:	d3 12       	cpse	r13, r19
     152:	e1 12       	cpse	r14, r17
     154:	ef 12       	cpse	r14, r31
     156:	fd 12       	cpse	r15, r29
     158:	fd 12       	cpse	r15, r29
     15a:	20 13       	cpse	r18, r16
     15c:	22 13       	cpse	r18, r18
     15e:	24 13       	cpse	r18, r20
     160:	26 13       	cpse	r18, r22
     162:	28 13       	cpse	r18, r24
     164:	2a 13       	cpse	r18, r26
     166:	2c 13       	cpse	r18, r28
     168:	4b 13       	cpse	r20, r27
     16a:	6e 13       	cpse	r22, r30
     16c:	92 13       	cpse	r25, r18
     16e:	b5 13       	cpse	r27, r21
     170:	d8 13       	cpse	r29, r24
     172:	fb 13       	cpse	r31, r27
     174:	1e 14       	cp	r1, r14
     176:	58 14       	cp	r5, r8
     178:	65 14       	cp	r6, r5
     17a:	72 14       	cp	r7, r2
     17c:	7f 14       	cp	r7, r15
     17e:	8c 14       	cp	r8, r12
     180:	99 14       	cp	r9, r9
     182:	a6 14       	cp	r10, r6
     184:	bf 14       	cp	r11, r15
     186:	cc 14       	cp	r12, r12
     188:	d9 14       	cp	r13, r9
     18a:	e6 14       	cp	r14, r6
     18c:	f3 14       	cp	r15, r3
     18e:	00 15       	cp	r16, r0
     190:	0d 15       	cp	r16, r13
     192:	9f 18       	sub	r9, r15
     194:	a5 18       	sub	r10, r5
     196:	a8 18       	sub	r10, r8
     198:	ab 18       	sub	r10, r11
     19a:	ae 18       	sub	r10, r14
     19c:	b1 18       	sub	r11, r1
     19e:	b7 18       	sub	r11, r7
     1a0:	b4 18       	sub	r11, r4
     1a2:	ba 18       	sub	r11, r10
     1a4:	bd 18       	sub	r11, r13
     1a6:	c0 18       	sub	r12, r0
     1a8:	c9 18       	sub	r12, r9
     1aa:	cc 18       	sub	r12, r12
     1ac:	cf 18       	sub	r12, r15
     1ae:	d2 18       	sub	r13, r2
     1b0:	c6 18       	sub	r12, r6
     1b2:	9c 18       	sub	r9, r12
     1b4:	a2 18       	sub	r10, r2
     1b6:	d5 18       	sub	r13, r5
     1b8:	d8 18       	sub	r13, r8
     1ba:	c3 18       	sub	r12, r3
     1bc:	99 18       	sub	r9, r9
     1be:	6f 19       	sub	r22, r15
     1c0:	72 19       	sub	r23, r2
     1c2:	7d 19       	sub	r23, r13
     1c4:	82 19       	sub	r24, r2
     1c6:	89 19       	sub	r24, r9
     1c8:	92 19       	sub	r25, r2
     1ca:	95 19       	sub	r25, r5
     1cc:	9a 19       	sub	r25, r10
     1ce:	a1 19       	sub	r26, r1
     1d0:	aa 19       	sub	r26, r10

000001d2 <__trampolines_end>:
     1d2:	50 65       	ori	r21, 0x50	; 80
     1d4:	65 72       	andi	r22, 0x25	; 37
     1d6:	20 54       	subi	r18, 0x40	; 64
     1d8:	61 73       	andi	r22, 0x31	; 49
     1da:	6b 20       	and	r6, r11
     1dc:	73 74       	andi	r23, 0x43	; 67
     1de:	61 72       	andi	r22, 0x21	; 33
     1e0:	74 65       	ori	r23, 0x54	; 84
     1e2:	64 0d       	add	r22, r4
     1e4:	0a 00       	.word	0x000a	; ????

000001e6 <__c.3835>:
     1e6:	2d 2d 3e 20 57 61 69 74 69 6e 67 20 74 6f 20 66     --> Waiting to f
     1f6:	6f 72 77 61 72 64 20 61 6e 79 20 6e 65 69 67 68     orward any neigh
     206:	62 6f 72 20 69 6e 66 6f 72 6d 61 74 69 6f 6e 20     bor information 
     216:	66 72 6f 6d 20 6f 74 68 65 72 20 6e 6f 64 65 73     from other nodes
     226:	0d 0a 00                                            ...

00000229 <__c.3831>:
     229:	2d 2d 3e 20 44 6f 6e 65 20 72 65 63 65 69 76 69     --> Done receivi
     239:	6e 67 20 41 43 4b 20 6d 65 73 73 61 67 65 73 20     ng ACK messages 
     249:	66 72 6f 6d 20 6e 65 61 72 62 79 20 70 65 65 72     from nearby peer
     259:	73 2c 20 73 65 6e 64 69 6e 67 20 72 65 73 75 6c     s, sending resul
     269:	74 73 20 74 6f 20 47 54 57 0d 0a 00                 ts to GTW...

00000275 <__c.3828>:
     275:	2d 2d 3e 20 52 65 63 65 69 76 65 64 20 61 20 53     --> Received a S
     285:	45 45 4e 20 63 6f 6d 6d 61 6e 64 20 66 72 6f 6d     EEN command from
     295:	20 6e 65 61 72 62 79 20 70 65 65 72 2c 20 77 61      nearby peer, wa
     2a5:	69 74 69 6e 67 20 66 6f 72 20 43 54 53 20 66 72     iting for CTS fr
     2b5:	6f 6d 20 47 54 57 0d 0a 00                          om GTW...

000002be <__c.3825>:
     2be:	2d 2d 3e 20 53 61 77 20 61 20 74 65 73 74 20 63     --> Saw a test c
     2ce:	6f 6d 6d 61 6e 64 2c 20 61 74 74 65 6d 70 74 69     ommand, attempti
     2de:	6e 67 20 74 6f 20 73 65 6e 64 20 61 63 6b 6e 6f     ng to send ackno
     2ee:	6c 65 64 67 65 6d 65 6e 74 0d 0a 00                 ledgement...

000002fa <__c.3821>:
     2fa:	2d 2d 3e 20 4c 69 73 74 65 6e 69 6e 67 20 66 6f     --> Listening fo
     30a:	72 20 54 45 53 54 20 63 6f 6d 6d 61 6e 64 73 20     r TEST commands 
     31a:	66 72 6f 6d 20 61 20 6e 65 61 72 62 79 20 6e 6f     from a nearby no
     32a:	64 65 20 0d 0a 00                                   de ...

00000330 <__c.3817>:
     330:	2d 2d 3e 20 52 65 63 65 69 76 65 64 20 43 54 53     --> Received CTS
     340:	20 63 6f 6d 6d 61 6e 64 20 66 72 6f 6d 20 47 54      command from GT
     350:	57 2e 20 54 65 73 74 69 6e 67 20 74 6f 20 73 65     W. Testing to se
     360:	65 20 69 66 20 6e 6f 64 65 73 20 61 72 65 20 69     e if nodes are i
     370:	6e 20 76 69 63 69 6e 69 74 79 2e 0d 0a 00           n vicinity....

0000037e <__c.3814>:
     37e:	2d 2d 3e 20 52 65 63 65 69 76 65 64 20 72 6f 75     --> Received rou
     38e:	74 69 6e 67 20 63 6f 6d 6d 61 6e 64 2c 20 73 74     ting command, st
     39e:	61 72 74 69 6e 67 20 74 6f 20 73 65 6e 64 20 52     arting to send R
     3ae:	54 53 20 6d 65 73 73 61 67 65 73 0d 0a 00           TS messages...

000003bc <__c.3810>:
     3bc:	2d 2d 3e 20 4e 6f 64 65 20 6a 75 73 74 20 74 75     --> Node just tu
     3cc:	72 6e 65 64 20 6f 6e 2c 20 77 61 69 74 69 6e 67     rned on, waiting
     3dc:	20 66 6f 72 20 72 6f 75 74 65 20 63 6f 6d 6d 61      for route comma
     3ec:	6e 64 0d 0a 00                                      nd...

000003f1 <__c.3741>:
     3f1:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     401:	69 74 21 0d 0a 00                                   it!...

00000407 <__c.3762>:
     407:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     417:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

00000423 <__c.3736>:
     423:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     433:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     443:	0d 0a 00                                            ...

00000446 <__c.3734>:
     446:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     456:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     466:	74 0d 0a 00                                         t...

0000046a <__c.3718>:
     46a:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     47a:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     48a:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000496 <__c.3716>:
     496:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     4a6:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     4b6:	61 69 6c 65 64 0d 0a 00                             ailed...

000004be <__c.3714>:
     4be:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     4ce:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     4de:	61 69 6c 65 64 0d 0a 00                             ailed...

000004e6 <__c.3125>:
     4e6:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     4f6:	65 64 0d 0a 00                                      ed...

000004fb <__c.3381>:
     4fb:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000502 <__c.3378>:
     502:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000511 <__c.3375>:
     511:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000522 <__c.3372>:
     522:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     532:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000053d <__c.3369>:
     53d:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     54d:	20 53 69 67 6e 61 6c 00                              Signal.

00000555 <__c.3366>:
     555:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     565:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000575 <__c.3363>:
     575:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     585:	72 6f 72 00                                         ror.

00000589 <__c.3360>:
     589:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000059a <__c.3357>:
     59a:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     5aa:	61 72 74 00                                         art.

000005ae <__c.3354>:
     5ae:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000005bd <__c.3351>:
     5bd:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     5cd:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000005d8 <__c.3348>:
     5d8:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000005e4 <__c.3345>:
     5e4:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     5f4:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     604:	20 6f 6b 3f 00                                       ok?.

00000609 <__c.3342>:
     609:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     619:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000627 <__c.3339>:
     627:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     637:	72 74 00                                            rt.

0000063a <__c.3336>:
     63a:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     64a:	49 44 00                                            ID.

0000064d <__c.3333>:
     64d:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     65d:	20 57 61 6b 65 75 70 00                              Wakeup.

00000665 <__c.3330>:
     665:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     675:	6c 61 74 65 64 00                                   lated.

0000067b <__c.3327>:
     67b:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     68b:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000696 <__c.3324>:
     696:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     6a6:	69 6e 74 65 72 00                                   inter.

000006ac <__c.3321>:
     6ac:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     6bc:	6c 6f 77 00                                         low.

000006c0 <__c.3318>:
     6c0:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     6d0:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     6e0:	6e 6f 75 67 68 21 00                                nough!.

000006e7 <__c.3314>:
     6e7:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     6f7:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     707:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     717:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000723 <__c.3311>:
     723:	29 3a 20 00                                         ): .

00000727 <__c.3309>:
     727:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000733 <__c.3246>:
     733:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000742 <__c.2228>:
     742:	45 46 47 65 66 67 00                                EFGefg.

00000749 <__c.2222>:
     749:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

0000075a <__ctors_end>:
     75a:	11 24       	eor	r1, r1
     75c:	1f be       	out	0x3f, r1	; 63
     75e:	cf ef       	ldi	r28, 0xFF	; 255
     760:	d1 e4       	ldi	r29, 0x41	; 65
     762:	de bf       	out	0x3e, r29	; 62
     764:	cd bf       	out	0x3d, r28	; 61

00000766 <__do_copy_data>:
     766:	13 e0       	ldi	r17, 0x03	; 3
     768:	a0 e0       	ldi	r26, 0x00	; 0
     76a:	b2 e0       	ldi	r27, 0x02	; 2
     76c:	ee e9       	ldi	r30, 0x9E	; 158
     76e:	f3 e6       	ldi	r31, 0x63	; 99
     770:	00 e0       	ldi	r16, 0x00	; 0
     772:	0b bf       	out	0x3b, r16	; 59
     774:	02 c0       	rjmp	.+4      	; 0x77a <__do_copy_data+0x14>
     776:	07 90       	elpm	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	a0 37       	cpi	r26, 0x70	; 112
     77c:	b1 07       	cpc	r27, r17
     77e:	d9 f7       	brne	.-10     	; 0x776 <__do_copy_data+0x10>

00000780 <__do_clear_bss>:
     780:	1a e0       	ldi	r17, 0x0A	; 10
     782:	a0 e7       	ldi	r26, 0x70	; 112
     784:	b3 e0       	ldi	r27, 0x03	; 3
     786:	01 c0       	rjmp	.+2      	; 0x78a <.do_clear_bss_start>

00000788 <.do_clear_bss_loop>:
     788:	1d 92       	st	X+, r1

0000078a <.do_clear_bss_start>:
     78a:	a9 3e       	cpi	r26, 0xE9	; 233
     78c:	b1 07       	cpc	r27, r17
     78e:	e1 f7       	brne	.-8      	; 0x788 <.do_clear_bss_loop>
     790:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <main>
     794:	0c 94 cd 31 	jmp	0x639a	; 0x639a <_exit>

00000798 <__bad_interrupt>:
     798:	0c 94 9e 28 	jmp	0x513c	; 0x513c <__vector_default>

0000079c <peer_receiveMessage>:
  *
  * @return true if received a message, false otherwise
  *
  */
bool peer_receiveMessage(void)
{
     79c:	4f 92       	push	r4
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
    /*
     *  Code takes care of receiving and sets timeout = true if there's a timeout receiving a packet
     */
    while(1)
    {
        if(bmac_rx_pkt_ready())
     7b4:	0e 94 ca 09 	call	0x1394	; 0x1394 <bmac_rx_pkt_ready>
     7b8:	88 23       	and	r24, r24
     7ba:	71 f0       	breq	.+28     	; 0x7d8 <peer_receiveMessage+0x3c>
        {
            peer_data.receive_buf = bmac_rx_pkt_get (&(peer_data.len), &(peer_data.rssi));
     7bc:	6d ef       	ldi	r22, 0xFD	; 253
     7be:	77 e0       	ldi	r23, 0x07	; 7
     7c0:	8c ef       	ldi	r24, 0xFC	; 252
     7c2:	97 e0       	ldi	r25, 0x07	; 7
     7c4:	0e 94 b2 09 	call	0x1364	; 0x1364 <bmac_rx_pkt_get>
     7c8:	90 93 87 07 	sts	0x0787, r25
     7cc:	80 93 86 07 	sts	0x0786, r24
            //     // printf ("%c", local_buf[i]);
            //     // printf ("]\r\n");
            // }
            
            // Release the RX buffer so future packets can arrive
            bmac_rx_pkt_release ();
     7d0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <bmac_rx_pkt_release>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	67 c0       	rjmp	.+206    	; 0x8a6 <peer_receiveMessage+0x10a>
            break;
        }
        
        // Implement timeouts
        nrk_time_get(&end_time_receive);
     7d8:	84 e9       	ldi	r24, 0x94	; 148
     7da:	98 e0       	ldi	r25, 0x08	; 8
     7dc:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>
        if(end_time_receive.nano_secs > start_time_receive.nano_secs)
     7e0:	80 90 98 08 	lds	r8, 0x0898
     7e4:	90 90 99 08 	lds	r9, 0x0899
     7e8:	a0 90 9a 08 	lds	r10, 0x089A
     7ec:	b0 90 9b 08 	lds	r11, 0x089B
     7f0:	c0 90 50 06 	lds	r12, 0x0650
     7f4:	d0 90 51 06 	lds	r13, 0x0651
     7f8:	e0 90 52 06 	lds	r14, 0x0652
     7fc:	f0 90 53 06 	lds	r15, 0x0653
        {
            if(((end_time_receive.secs-start_time_receive.secs)*1000+(end_time_receive.nano_secs-start_time_receive.nano_secs)/1000000) > 1000)
     800:	40 91 94 08 	lds	r20, 0x0894
     804:	50 91 95 08 	lds	r21, 0x0895
     808:	60 91 96 08 	lds	r22, 0x0896
     80c:	70 91 97 08 	lds	r23, 0x0897
     810:	80 91 4c 06 	lds	r24, 0x064C
     814:	90 91 4d 06 	lds	r25, 0x064D
     818:	a0 91 4e 06 	lds	r26, 0x064E
     81c:	b0 91 4f 06 	lds	r27, 0x064F
     820:	9a 01       	movw	r18, r20
     822:	ab 01       	movw	r20, r22
     824:	28 1b       	sub	r18, r24
     826:	39 0b       	sbc	r19, r25
     828:	4a 0b       	sbc	r20, r26
     82a:	5b 0b       	sbc	r21, r27
     82c:	a8 ee       	ldi	r26, 0xE8	; 232
     82e:	b3 e0       	ldi	r27, 0x03	; 3
     830:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
     834:	2b 01       	movw	r4, r22
     836:	3c 01       	movw	r6, r24
            break;
        }
        
        // Implement timeouts
        nrk_time_get(&end_time_receive);
        if(end_time_receive.nano_secs > start_time_receive.nano_secs)
     838:	c8 14       	cp	r12, r8
     83a:	d9 04       	cpc	r13, r9
     83c:	ea 04       	cpc	r14, r10
     83e:	fb 04       	cpc	r15, r11
     840:	c8 f4       	brcc	.+50     	; 0x874 <peer_receiveMessage+0xd8>
        {
            if(((end_time_receive.secs-start_time_receive.secs)*1000+(end_time_receive.nano_secs-start_time_receive.nano_secs)/1000000) > 1000)
     842:	c5 01       	movw	r24, r10
     844:	b4 01       	movw	r22, r8
     846:	6c 19       	sub	r22, r12
     848:	7d 09       	sbc	r23, r13
     84a:	8e 09       	sbc	r24, r14
     84c:	9f 09       	sbc	r25, r15
     84e:	20 e4       	ldi	r18, 0x40	; 64
     850:	32 e4       	ldi	r19, 0x42	; 66
     852:	4f e0       	ldi	r20, 0x0F	; 15
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
     85a:	d3 01       	movw	r26, r6
     85c:	c2 01       	movw	r24, r4
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	a4 1f       	adc	r26, r20
     864:	b5 1f       	adc	r27, r21
     866:	89 3e       	cpi	r24, 0xE9	; 233
     868:	93 40       	sbci	r25, 0x03	; 3
     86a:	a1 05       	cpc	r26, r1
     86c:	b1 05       	cpc	r27, r1
     86e:	08 f4       	brcc	.+2      	; 0x872 <peer_receiveMessage+0xd6>
     870:	a1 cf       	rjmp	.-190    	; 0x7b4 <peer_receiveMessage+0x18>
     872:	18 c0       	rjmp	.+48     	; 0x8a4 <peer_receiveMessage+0x108>
                break;
            }
        }
        else
        {
            if(((end_time_receive.secs-start_time_receive.secs)*1000-(start_time_receive.nano_secs-end_time_receive.nano_secs)/1000000) > 1000)
     874:	c7 01       	movw	r24, r14
     876:	b6 01       	movw	r22, r12
     878:	68 19       	sub	r22, r8
     87a:	79 09       	sbc	r23, r9
     87c:	8a 09       	sbc	r24, r10
     87e:	9b 09       	sbc	r25, r11
     880:	20 e4       	ldi	r18, 0x40	; 64
     882:	32 e4       	ldi	r19, 0x42	; 66
     884:	4f e0       	ldi	r20, 0x0F	; 15
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
     88c:	42 1a       	sub	r4, r18
     88e:	53 0a       	sbc	r5, r19
     890:	64 0a       	sbc	r6, r20
     892:	75 0a       	sbc	r7, r21
     894:	89 ee       	ldi	r24, 0xE9	; 233
     896:	48 16       	cp	r4, r24
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	58 06       	cpc	r5, r24
     89c:	61 04       	cpc	r6, r1
     89e:	71 04       	cpc	r7, r1
     8a0:	08 f4       	brcc	.+2      	; 0x8a4 <peer_receiveMessage+0x108>
     8a2:	88 cf       	rjmp	.-240    	; 0x7b4 <peer_receiveMessage+0x18>
        nrk_time_get(&end_time_receive);
        if(end_time_receive.nano_secs > start_time_receive.nano_secs)
        {
            if(((end_time_receive.secs-start_time_receive.secs)*1000+(end_time_receive.nano_secs-start_time_receive.nano_secs)/1000000) > 1000)
            {
                received = false;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
    }

    return received;
}
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	08 95       	ret

000008c0 <peer_sendMessage>:

/**
  * Sends a message placed in the tx_buf
  */
bool peer_sendMessage(void)
{
     8c0:	cf 93       	push	r28
    int8_t val;
    bool sent = true;

    val=bmac_tx_pkt(peer_data.tx_buf, strlen(peer_data.tx_buf)+1);
     8c2:	e8 e8       	ldi	r30, 0x88	; 136
     8c4:	f7 e0       	ldi	r31, 0x07	; 7
     8c6:	01 90       	ld	r0, Z+
     8c8:	00 20       	and	r0, r0
     8ca:	e9 f7       	brne	.-6      	; 0x8c6 <peer_sendMessage+0x6>
     8cc:	bf 01       	movw	r22, r30
     8ce:	69 58       	subi	r22, 0x89	; 137
     8d0:	77 40       	sbci	r23, 0x07	; 7
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	88 e8       	ldi	r24, 0x88	; 136
     8d6:	97 e0       	ldi	r25, 0x07	; 7
     8d8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <bmac_tx_pkt>

    if(val != NRK_OK)
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	51 f0       	breq	.+20     	; 0x8f4 <peer_sendMessage+0x34>
    {
        nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     8e0:	81 ef       	ldi	r24, 0xF1	; 241
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        sent = false;
        nrk_led_set(RED_LED);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
    val=bmac_tx_pkt(peer_data.tx_buf, strlen(peer_data.tx_buf)+1);

    if(val != NRK_OK)
    {
        nrk_kprintf(PSTR("Could not Transmit!\r\n"));
        sent = false;
     8f0:	c0 e0       	ldi	r28, 0x00	; 0
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <peer_sendMessage+0x3e>
        nrk_led_set(RED_LED);
    }
    else
    {
    	nrk_led_clr(RED_LED);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
  * Sends a message placed in the tx_buf
  */
bool peer_sendMessage(void)
{
    int8_t val;
    bool sent = true;
     8fc:	c1 e0       	ldi	r28, 0x01	; 1
    else
    {
    	nrk_led_clr(RED_LED);
    }

    nrk_time_get(&start_time_receive);
     8fe:	8c e4       	ldi	r24, 0x4C	; 76
     900:	96 e0       	ldi	r25, 0x06	; 6
     902:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>

    return sent;
}
     906:	8c 2f       	mov	r24, r28
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <peer_allowTransitionWaitToRTS>:
  */
inline bool peer_allowTransitionWaitToRTS(void)
{
	bool allowTransition = false;

	if((receivedMessage == true) && (strcmp(ROUTE_STRING, peer_data.receive_buf) == 0))
     90c:	80 91 6c 07 	lds	r24, 0x076C
     910:	88 23       	and	r24, r24
     912:	59 f0       	breq	.+22     	; 0x92a <peer_allowTransitionWaitToRTS+0x1e>
     914:	60 91 86 07 	lds	r22, 0x0786
     918:	70 91 87 07 	lds	r23, 0x0787
     91c:	8b e5       	ldi	r24, 0x5B	; 91
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <strcmp>
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	89 2b       	or	r24, r25
     928:	09 f0       	breq	.+2      	; 0x92c <peer_allowTransitionWaitToRTS+0x20>
  * gateway
  * @return true if transition is allowed, false otherwise
  */
inline bool peer_allowTransitionWaitToRTS(void)
{
	bool allowTransition = false;
     92a:	20 e0       	ldi	r18, 0x00	; 0
	{
		allowTransition = true;
	}

	return allowTransition;
}
     92c:	82 2f       	mov	r24, r18
     92e:	08 95       	ret

00000930 <peer_allowTransitionRTSToTest>:
inline bool peer_allowTransitionRTSToTest(void)
{
	bool allowTransition = false;
	uint16_t peerId = 0;

	if(receivedMessage == true)
     930:	80 91 6c 07 	lds	r24, 0x076C
     934:	88 23       	and	r24, r24
     936:	d9 f0       	breq	.+54     	; 0x96e <peer_allowTransitionRTSToTest+0x3e>
	{
		char *buf = (char*)peer_data.receive_buf;
     938:	e0 91 86 07 	lds	r30, 0x0786
     93c:	f0 91 87 07 	lds	r31, 0x0787

		// retreive peer id from Gateway command to see if it's this node's MAC
		if(peer_data.len > 4 && buf[0] == 'C' && buf[1] == 'T' && buf[2] == 'S' && buf[3] == ':')
     940:	80 91 fc 07 	lds	r24, 0x07FC
     944:	85 30       	cpi	r24, 0x05	; 5
     946:	98 f0       	brcs	.+38     	; 0x96e <peer_allowTransitionRTSToTest+0x3e>
     948:	80 81       	ld	r24, Z
     94a:	83 34       	cpi	r24, 0x43	; 67
     94c:	81 f4       	brne	.+32     	; 0x96e <peer_allowTransitionRTSToTest+0x3e>
     94e:	81 81       	ldd	r24, Z+1	; 0x01
     950:	84 35       	cpi	r24, 0x54	; 84
     952:	69 f4       	brne	.+26     	; 0x96e <peer_allowTransitionRTSToTest+0x3e>
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	83 35       	cpi	r24, 0x53	; 83
     958:	51 f4       	brne	.+20     	; 0x96e <peer_allowTransitionRTSToTest+0x3e>
     95a:	83 81       	ldd	r24, Z+3	; 0x03
     95c:	8a 33       	cpi	r24, 0x3A	; 58
     95e:	39 f4       	brne	.+14     	; 0x96e <peer_allowTransitionRTSToTest+0x3e>
		{
			buf = buf + 4;
			peerId = atoi(buf);
     960:	cf 01       	movw	r24, r30
     962:	04 96       	adiw	r24, 0x04	; 4
     964:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <atoi>

			if(peerId == MAC_ADDR)
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	89 2b       	or	r24, r25
     96c:	09 f0       	breq	.+2      	; 0x970 <peer_allowTransitionRTSToTest+0x40>
  * Allow transition from sending RTS to sending out TEST messages if we get a CTS:<my MAC>
  * from the Gateway
  */
inline bool peer_allowTransitionRTSToTest(void)
{
	bool allowTransition = false;
     96e:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
	}

	return allowTransition;
}
     970:	82 2f       	mov	r24, r18
     972:	08 95       	ret

00000974 <peer_allowTransitionRTSToListening>:
inline bool peer_allowTransitionRTSToListening(void)
{
	bool allowTransition = false;
	uint16_t peerId = 0;

	if(receivedMessage == true)
     974:	80 91 6c 07 	lds	r24, 0x076C
     978:	88 23       	and	r24, r24
     97a:	d9 f0       	breq	.+54     	; 0x9b2 <peer_allowTransitionRTSToListening+0x3e>
	{
		char *buf = (char*)peer_data.receive_buf;
     97c:	e0 91 86 07 	lds	r30, 0x0786
     980:	f0 91 87 07 	lds	r31, 0x0787

		// retreive peer id from Gateway command to see if it's this node's MAC
		if(peer_data.len > 4 && buf[0] == 'C' && buf[1] == 'T' && buf[2] == 'S' && buf[3] == ':')
     984:	80 91 fc 07 	lds	r24, 0x07FC
     988:	85 30       	cpi	r24, 0x05	; 5
     98a:	98 f0       	brcs	.+38     	; 0x9b2 <peer_allowTransitionRTSToListening+0x3e>
     98c:	80 81       	ld	r24, Z
     98e:	83 34       	cpi	r24, 0x43	; 67
     990:	81 f4       	brne	.+32     	; 0x9b2 <peer_allowTransitionRTSToListening+0x3e>
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	84 35       	cpi	r24, 0x54	; 84
     996:	69 f4       	brne	.+26     	; 0x9b2 <peer_allowTransitionRTSToListening+0x3e>
     998:	82 81       	ldd	r24, Z+2	; 0x02
     99a:	83 35       	cpi	r24, 0x53	; 83
     99c:	51 f4       	brne	.+20     	; 0x9b2 <peer_allowTransitionRTSToListening+0x3e>
     99e:	83 81       	ldd	r24, Z+3	; 0x03
     9a0:	8a 33       	cpi	r24, 0x3A	; 58
     9a2:	39 f4       	brne	.+14     	; 0x9b2 <peer_allowTransitionRTSToListening+0x3e>
		{
			buf = buf + 4;
			peerId = atoi((char*)buf);
     9a4:	cf 01       	movw	r24, r30
     9a6:	04 96       	adiw	r24, 0x04	; 4
     9a8:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <atoi>

			if(peerId != MAC_ADDR)
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	89 2b       	or	r24, r25
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <peer_allowTransitionRTSToListening+0x40>
  * Allow transition from sending RTS to listening for TEST messages if we get a CTS:<not my MAC> from the
  * Gateway
  */
inline bool peer_allowTransitionRTSToListening(void)
{
	bool allowTransition = false;
     9b2:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
	}

	return allowTransition;
}
     9b4:	82 2f       	mov	r24, r18
     9b6:	08 95       	ret

000009b8 <peer_allowTransitionTestToDone>:
  */
inline bool peer_allowTransitionTestToDone(void)
{
	bool allowTransition = false;

	nrk_time_get(&(peer_data.currentTime));
     9b8:	8e ef       	ldi	r24, 0xFE	; 254
     9ba:	97 e0       	ldi	r25, 0x07	; 7
     9bc:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>

	if((peer_data.currentTime.secs - peer_data.testStateLastReceivedAckMessage.secs) > MAX_SECONDS_TEST_STATE_NO_ACK)
     9c0:	40 91 fe 07 	lds	r20, 0x07FE
     9c4:	50 91 ff 07 	lds	r21, 0x07FF
     9c8:	60 91 00 08 	lds	r22, 0x0800
     9cc:	70 91 01 08 	lds	r23, 0x0801
     9d0:	80 91 0e 08 	lds	r24, 0x080E
     9d4:	90 91 0f 08 	lds	r25, 0x080F
     9d8:	a0 91 10 08 	lds	r26, 0x0810
     9dc:	b0 91 11 08 	lds	r27, 0x0811
     9e0:	48 1b       	sub	r20, r24
     9e2:	59 0b       	sbc	r21, r25
     9e4:	6a 0b       	sbc	r22, r26
     9e6:	7b 0b       	sbc	r23, r27
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	44 30       	cpi	r20, 0x04	; 4
     9ec:	51 05       	cpc	r21, r1
     9ee:	61 05       	cpc	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <peer_allowTransitionTestToDone+0x3e>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
	{
		allowTransition = true;
	}

	return allowTransition;
}
     9f6:	08 95       	ret

000009f8 <peer_allowTransitionListeningToSendingAcks>:
  */
inline bool peer_allowTransitionListeningToSendingAcks(void)
{
	bool allowTransition = false;

	if(peer_data.receivedTestMessage == true)
     9f8:	80 91 16 08 	lds	r24, 0x0816
     9fc:	88 23       	and	r24, r24
     9fe:	21 f0       	breq	.+8      	; 0xa08 <peer_allowTransitionListeningToSendingAcks+0x10>
	{
		allowTransition = true;
		peer_data.receivedTestMessage = false;
     a00:	10 92 16 08 	sts	0x0816, r1
{
	bool allowTransition = false;

	if(peer_data.receivedTestMessage == true)
	{
		allowTransition = true;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	08 95       	ret
  * Allow transition from the listening state to sending acknowledgement messages if we receive a test
  * message from another peer 
  */
inline bool peer_allowTransitionListeningToSendingAcks(void)
{
	bool allowTransition = false;
     a08:	80 e0       	ldi	r24, 0x00	; 0
		allowTransition = true;
		peer_data.receivedTestMessage = false;
	}

	return allowTransition;
}
     a0a:	08 95       	ret

00000a0c <peer_allowTransitionSendingAcksToGotAck>:
  */
inline bool peer_allowTransitionSendingAcksToGotAck(void)
{
	bool allowTransition = false;

	nrk_time_get(&(peer_data.currentTime));
     a0c:	8e ef       	ldi	r24, 0xFE	; 254
     a0e:	97 e0       	ldi	r25, 0x07	; 7
     a10:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>

	if(peer_data.receivedSeenMessage == true || peer_data.currentTime.secs - peer_data.transitionTime.secs > MAX_SENDING_ACK_SECS)
     a14:	80 91 17 08 	lds	r24, 0x0817
     a18:	81 11       	cpse	r24, r1
     a1a:	1c c0       	rjmp	.+56     	; 0xa54 <peer_allowTransitionSendingAcksToGotAck+0x48>
     a1c:	40 91 fe 07 	lds	r20, 0x07FE
     a20:	50 91 ff 07 	lds	r21, 0x07FF
     a24:	60 91 00 08 	lds	r22, 0x0800
     a28:	70 91 01 08 	lds	r23, 0x0801
     a2c:	80 91 06 08 	lds	r24, 0x0806
     a30:	90 91 07 08 	lds	r25, 0x0807
     a34:	a0 91 08 08 	lds	r26, 0x0808
     a38:	b0 91 09 08 	lds	r27, 0x0809
     a3c:	48 1b       	sub	r20, r24
     a3e:	59 0b       	sbc	r21, r25
     a40:	6a 0b       	sbc	r22, r26
     a42:	7b 0b       	sbc	r23, r27
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	46 30       	cpi	r20, 0x06	; 6
     a48:	51 05       	cpc	r21, r1
     a4a:	61 05       	cpc	r22, r1
     a4c:	71 05       	cpc	r23, r1
     a4e:	18 f4       	brcc	.+6      	; 0xa56 <peer_allowTransitionSendingAcksToGotAck+0x4a>
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 95       	ret
	{
		allowTransition = true;
     a54:	81 e0       	ldi	r24, 0x01	; 1
	}

	return allowTransition;
}
     a56:	08 95       	ret

00000a58 <peer_allowTransitionGotAckToTest>:
		allowTransition = true;
	}


	return allowTransition;
}
     a58:	80 91 18 08 	lds	r24, 0x0818
     a5c:	08 95       	ret

00000a5e <peer_allowTransitionDoneToForwarding>:
	{
		allowTransition = true;
	}

	return allowTransition;
}
     a5e:	80 91 19 08 	lds	r24, 0x0819
     a62:	08 95       	ret

00000a64 <peer_allowTransitionListeningToRTS>:
  */
inline bool peer_allowTransitionListeningToRTS(void)
{
	bool allowTransition = false;

	if((receivedMessage == true) && (strcmp(ROUTE_STRING, peer_data.receive_buf) == 0))
     a64:	80 91 6c 07 	lds	r24, 0x076C
     a68:	88 23       	and	r24, r24
     a6a:	59 f0       	breq	.+22     	; 0xa82 <peer_allowTransitionListeningToRTS+0x1e>
     a6c:	60 91 86 07 	lds	r22, 0x0786
     a70:	70 91 87 07 	lds	r23, 0x0787
     a74:	8b e5       	ldi	r24, 0x5B	; 91
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <strcmp>
     a7c:	21 e0       	ldi	r18, 0x01	; 1
     a7e:	89 2b       	or	r24, r25
     a80:	09 f0       	breq	.+2      	; 0xa84 <peer_allowTransitionListeningToRTS+0x20>
  * Allow transitin from listening to TEST messages to sending out RTS messages if we receieve
  * a ROUTE command from the gateway
  */
inline bool peer_allowTransitionListeningToRTS(void)
{
	bool allowTransition = false;
     a82:	20 e0       	ldi	r18, 0x00	; 0
	{
		allowTransition = true;
	}

	return allowTransition;
}
     a84:	82 2f       	mov	r24, r18
     a86:	08 95       	ret

00000a88 <peer_allowTransitionSendingAcksToRTS>:

inline bool peer_allowTransitionSendingAcksToRTS(void)
{
	bool allowTransition = false;

	if((receivedMessage == true) && peer_data.len > 5 && peer_data.receive_buf[0] == 'G' && peer_data.receive_buf[1] == 'T' 
     a88:	80 91 6c 07 	lds	r24, 0x076C
     a8c:	88 23       	and	r24, r24
     a8e:	c1 f0       	breq	.+48     	; 0xac0 <peer_allowTransitionSendingAcksToRTS+0x38>
     a90:	80 91 fc 07 	lds	r24, 0x07FC
     a94:	86 30       	cpi	r24, 0x06	; 6
     a96:	a0 f0       	brcs	.+40     	; 0xac0 <peer_allowTransitionSendingAcksToRTS+0x38>
     a98:	e0 91 86 07 	lds	r30, 0x0786
     a9c:	f0 91 87 07 	lds	r31, 0x0787
     aa0:	80 81       	ld	r24, Z
     aa2:	87 34       	cpi	r24, 0x47	; 71
     aa4:	69 f4       	brne	.+26     	; 0xac0 <peer_allowTransitionSendingAcksToRTS+0x38>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	84 35       	cpi	r24, 0x54	; 84
     aaa:	51 f4       	brne	.+20     	; 0xac0 <peer_allowTransitionSendingAcksToRTS+0x38>
		&& peer_data.receive_buf[2] == 'W' && peer_data.receive_buf[3] == ':' && peer_data.receive_buf[4] == 'R' )
     aac:	82 81       	ldd	r24, Z+2	; 0x02
     aae:	87 35       	cpi	r24, 0x57	; 87
     ab0:	39 f4       	brne	.+14     	; 0xac0 <peer_allowTransitionSendingAcksToRTS+0x38>
     ab2:	83 81       	ldd	r24, Z+3	; 0x03
     ab4:	8a 33       	cpi	r24, 0x3A	; 58
     ab6:	21 f4       	brne	.+8      	; 0xac0 <peer_allowTransitionSendingAcksToRTS+0x38>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	94 81       	ldd	r25, Z+4	; 0x04
     abc:	92 35       	cpi	r25, 0x52	; 82
     abe:	09 f0       	breq	.+2      	; 0xac2 <peer_allowTransitionSendingAcksToRTS+0x3a>
	return allowTransition;
}

inline bool peer_allowTransitionSendingAcksToRTS(void)
{
	bool allowTransition = false;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
	{
		allowTransition = true;
	}

	return allowTransition;
}
     ac2:	08 95       	ret

00000ac4 <peer_processData>:
 * Process inputs
 */
void peer_processData(void)
{
    // receive any messages
    receivedMessage = peer_receiveMessage();
     ac4:	0e 94 ce 03 	call	0x79c	; 0x79c <peer_receiveMessage>
     ac8:	80 93 6c 07 	sts	0x076C, r24
     acc:	08 95       	ret

00000ace <peer_getDesiredState>:
/*
 * Get the present state and determine if a state transition shall be performed. If so, set the 
 * desired state to that new state.
 */
void peer_getDesiredState(void)
{
     ace:	cf 93       	push	r28
  peer_state_E desiredState = peer_data.desiredState;
     ad0:	c0 91 7f 07 	lds	r28, 0x077F

  switch(desiredState)
     ad4:	8c 2f       	mov	r24, r28
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	87 30       	cpi	r24, 0x07	; 7
     ada:	91 05       	cpc	r25, r1
     adc:	e0 f5       	brcc	.+120    	; 0xb56 <peer_getDesiredState+0x88>
     ade:	fc 01       	movw	r30, r24
     ae0:	e0 57       	subi	r30, 0x70	; 112
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
  {
        case STATE_WAIT:
        	if(peer_allowTransitionWaitToRTS() == true)
     ae8:	0e 94 86 04 	call	0x90c	; 0x90c <peer_allowTransitionWaitToRTS>
     aec:	c8 2f       	mov	r28, r24
     aee:	33 c0       	rjmp	.+102    	; 0xb56 <peer_getDesiredState+0x88>
        	}

        	break;

	    case STATE_RTS:
	    	if(peer_allowTransitionRTSToTest() == true)
     af0:	0e 94 98 04 	call	0x930	; 0x930 <peer_allowTransitionRTSToTest>
     af4:	81 11       	cpse	r24, r1
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <peer_getDesiredState+0x86>
	    	{
	    		desiredState = STATE_TEST;
	    	}
	    	else if(peer_allowTransitionRTSToListening() == true)
     af8:	0e 94 ba 04 	call	0x974	; 0x974 <peer_allowTransitionRTSToListening>
     afc:	88 23       	and	r24, r24
     afe:	59 f1       	breq	.+86     	; 0xb56 <peer_getDesiredState+0x88>
	    	{
	    		desiredState = STATE_LISTENING;
     b00:	c3 e0       	ldi	r28, 0x03	; 3
     b02:	29 c0       	rjmp	.+82     	; 0xb56 <peer_getDesiredState+0x88>
	    	}

	    	break;

	    case STATE_TEST:
	    	if(peer_allowTransitionTestToDone() == true)
     b04:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <peer_allowTransitionTestToDone>
     b08:	88 23       	and	r24, r24
     b0a:	21 f1       	breq	.+72     	; 0xb54 <peer_getDesiredState+0x86>
	    	{
	    		desiredState = STATE_DONE;
     b0c:	c6 e0       	ldi	r28, 0x06	; 6
     b0e:	23 c0       	rjmp	.+70     	; 0xb56 <peer_getDesiredState+0x88>
	    	}

	    	break;

	    case STATE_LISTENING:
	    	if(peer_allowTransitionListeningToSendingAcks() == true)
     b10:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <peer_allowTransitionListeningToSendingAcks>
     b14:	88 23       	and	r24, r24
     b16:	11 f0       	breq	.+4      	; 0xb1c <peer_getDesiredState+0x4e>
	    	{
	    		desiredState = STATE_SENDING_ACKS;
     b18:	c4 e0       	ldi	r28, 0x04	; 4
     b1a:	1d c0       	rjmp	.+58     	; 0xb56 <peer_getDesiredState+0x88>
	    	}
	    	else if(peer_allowTransitionListeningToRTS() == true)
     b1c:	0e 94 32 05 	call	0xa64	; 0xa64 <peer_allowTransitionListeningToRTS>
     b20:	88 23       	and	r24, r24
     b22:	c9 f0       	breq	.+50     	; 0xb56 <peer_getDesiredState+0x88>
	    	{
	    		desiredState = STATE_RTS;
     b24:	c1 e0       	ldi	r28, 0x01	; 1
     b26:	17 c0       	rjmp	.+46     	; 0xb56 <peer_getDesiredState+0x88>
	    	}

	    	break;

	    case STATE_SENDING_ACKS:
	    	if(peer_allowTransitionSendingAcksToGotAck() == true)
     b28:	0e 94 06 05 	call	0xa0c	; 0xa0c <peer_allowTransitionSendingAcksToGotAck>
     b2c:	88 23       	and	r24, r24
     b2e:	11 f0       	breq	.+4      	; 0xb34 <peer_getDesiredState+0x66>
	    	{
	    		desiredState = STATE_GOT_ACK;
     b30:	c5 e0       	ldi	r28, 0x05	; 5
     b32:	11 c0       	rjmp	.+34     	; 0xb56 <peer_getDesiredState+0x88>
	    	}
	    	else if(peer_allowTransitionSendingAcksToRTS() == true)
     b34:	0e 94 44 05 	call	0xa88	; 0xa88 <peer_allowTransitionSendingAcksToRTS>
     b38:	81 11       	cpse	r24, r1
     b3a:	f4 cf       	rjmp	.-24     	; 0xb24 <peer_getDesiredState+0x56>
     b3c:	ed cf       	rjmp	.-38     	; 0xb18 <peer_getDesiredState+0x4a>
	    	}

	    	break;

	    case STATE_GOT_ACK:
	    	if(peer_allowTransitionGotAckToTest() == true)
     b3e:	0e 94 2c 05 	call	0xa58	; 0xa58 <peer_allowTransitionGotAckToTest>
     b42:	81 11       	cpse	r24, r1
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <peer_getDesiredState+0x86>
     b46:	f4 cf       	rjmp	.-24     	; 0xb30 <peer_getDesiredState+0x62>
	    	}

	    	break;

	    case STATE_DONE:
	    	if(peer_allowTransitionDoneToForwarding() == true)
     b48:	0e 94 2f 05 	call	0xa5e	; 0xa5e <peer_allowTransitionDoneToForwarding>
     b4c:	88 23       	and	r24, r24
     b4e:	19 f0       	breq	.+6      	; 0xb56 <peer_getDesiredState+0x88>
	    	{
	    		desiredState = STATE_FORWARDING;
     b50:	c7 e0       	ldi	r28, 0x07	; 7
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <peer_getDesiredState+0x88>
	    	break;

	    case STATE_GOT_ACK:
	    	if(peer_allowTransitionGotAckToTest() == true)
	    	{
	    		desiredState = STATE_TEST;
     b54:	c2 e0       	ldi	r28, 0x02	; 2
        default:
            // should never reach here, error
             break;
  }
    
    peer_data.desiredState = desiredState;
     b56:	c0 93 7f 07 	sts	0x077F, r28
}
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <peer_setCurrentState>:

/*
 * Perform any transition and state related outputs
 */
void peer_setCurrentState(void)
{
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
    peer_state_E state = peer_data.desiredState;
     b6e:	f0 90 7f 07 	lds	r15, 0x077F
    uint16_t peerId = 0;

    switch(state)
     b72:	8f 2d       	mov	r24, r15
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	91 05       	cpc	r25, r1
     b7a:	08 f0       	brcs	.+2      	; 0xb7e <peer_setCurrentState+0x20>
     b7c:	fb c1       	rjmp	.+1014   	; 0xf74 <peer_setCurrentState+0x416>
     b7e:	fc 01       	movw	r30, r24
     b80:	e9 56       	subi	r30, 0x69	; 105
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
        	}

	    	break;

	    case STATE_FORWARDING:
        	if(peer_data.stateTransition == true)
     b84:	80 91 81 07 	lds	r24, 0x0781
void peer_setCurrentState(void)
{
    peer_state_E state = peer_data.desiredState;
    uint16_t peerId = 0;

    switch(state)
     b88:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
    {
        case STATE_WAIT:
        	if(peer_data.stateTransition == true)
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <peer_setCurrentState+0x34>
     b90:	f1 c1       	rjmp	.+994    	; 0xf74 <peer_setCurrentState+0x416>
        	{
            	nrk_kprintf (PSTR ("--> Node just turned on, waiting for route command\r\n"));
     b92:	8c eb       	ldi	r24, 0xBC	; 188
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
     b9a:	ec c1       	rjmp	.+984    	; 0xf74 <peer_setCurrentState+0x416>
        	// do nothing in the wait state, just wait for GTW:ROUTE command

        	break;

	    case STATE_RTS:
        	if(peer_data.stateTransition == true)
     b9c:	88 23       	and	r24, r24
     b9e:	a1 f0       	breq	.+40     	; 0xbc8 <peer_setCurrentState+0x6a>
        	{
    			nrk_kprintf (PSTR ("--> Received routing command, starting to send RTS messages\r\n"));
     ba0:	8e e7       	ldi	r24, 0x7E	; 126
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
			nrk_led_clr(RED_LED);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
			nrk_led_clr(GREEN_LED);
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
			nrk_led_clr(ORANGE_LED);
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
	        	nrk_led_set(BLUE_LED);
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
        	}

        	/*
        	 * Send out RTS messages with this nodes MAC address, waiting for the GTW to respond
        	 */
        	sprintf((peer_data.tx_buf), "RTS:%d", MAC_ADDR);
     bc8:	1f 92       	push	r1
     bca:	1f 92       	push	r1
     bcc:	85 e6       	ldi	r24, 0x65	; 101
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	81 c0       	rjmp	.+258    	; 0xcd4 <peer_setCurrentState+0x176>
        	peer_sendMessage();
        
	    	break;

	    case STATE_TEST:
        	if(peer_data.stateTransition == true)
     bd2:	88 23       	and	r24, r24
     bd4:	c1 f0       	breq	.+48     	; 0xc06 <peer_setCurrentState+0xa8>
        	{
        		nrk_led_clr(BLUE_LED);
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
				nrk_led_clr(GREEN_LED);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
				nrk_led_clr(ORANGE_LED);
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
        		nrk_led_set(RED_LED);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>

        		nrk_kprintf (PSTR ("--> Received CTS command from GTW. Testing to see if nodes are in vicinity.\r\n"));
     bf6:	80 e3       	ldi	r24, 0x30	; 48
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>

        		// grab time transition into state
        		nrk_time_get(&(peer_data.testStateLastReceivedAckMessage));
     bfe:	8e e0       	ldi	r24, 0x0E	; 14
     c00:	98 e0       	ldi	r25, 0x08	; 8
     c02:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>
        	}

        	if(receivedMessage == true)
     c06:	80 91 6c 07 	lds	r24, 0x076C
     c0a:	88 23       	and	r24, r24
     c0c:	c1 f1       	breq	.+112    	; 0xc7e <peer_setCurrentState+0x120>
        	{
        		uint8_t *buf = (peer_data.receive_buf);
     c0e:	e0 91 86 07 	lds	r30, 0x0786
     c12:	f0 91 87 07 	lds	r31, 0x0787

        		// check to see if we received an ACK message from another peer and add them to the neighbors list
        		// to send to the gateway
        		if(peer_data.len > 4 && buf[0] == 'A' && buf[1] == 'C' && buf[2] == 'K' && buf[3] == ':')
     c16:	80 91 fc 07 	lds	r24, 0x07FC
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	80 f1       	brcs	.+96     	; 0xc7e <peer_setCurrentState+0x120>
     c1e:	80 81       	ld	r24, Z
     c20:	81 34       	cpi	r24, 0x41	; 65
     c22:	69 f5       	brne	.+90     	; 0xc7e <peer_setCurrentState+0x120>
     c24:	81 81       	ldd	r24, Z+1	; 0x01
     c26:	83 34       	cpi	r24, 0x43	; 67
     c28:	51 f5       	brne	.+84     	; 0xc7e <peer_setCurrentState+0x120>
     c2a:	82 81       	ldd	r24, Z+2	; 0x02
     c2c:	8b 34       	cpi	r24, 0x4B	; 75
     c2e:	39 f5       	brne	.+78     	; 0xc7e <peer_setCurrentState+0x120>
     c30:	83 81       	ldd	r24, Z+3	; 0x03
     c32:	8a 33       	cpi	r24, 0x3A	; 58
     c34:	21 f5       	brne	.+72     	; 0xc7e <peer_setCurrentState+0x120>
        		{
        			buf = buf + 4;
     c36:	8f 01       	movw	r16, r30
     c38:	0c 5f       	subi	r16, 0xFC	; 252
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255

        			peerId = atoi(buf);
     c3c:	c8 01       	movw	r24, r16
     c3e:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <atoi>
     c42:	ec 01       	movw	r28, r24

        			peer_data.sendSeen = true;
     c44:	ee 24       	eor	r14, r14
     c46:	e3 94       	inc	r14
     c48:	e0 92 1a 08 	sts	0x081A, r14

        			if(peer_data.nodesSeen[peerId] == 0)
     c4c:	80 57       	subi	r24, 0x70	; 112
     c4e:	97 4f       	sbci	r25, 0xF7	; 247
     c50:	6c 01       	movw	r12, r24
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	81 11       	cpse	r24, r1
     c58:	14 c0       	rjmp	.+40     	; 0xc82 <peer_setCurrentState+0x124>
        			{
						nrk_time_get(&(peer_data.testStateLastReceivedAckMessage));
     c5a:	8e e0       	ldi	r24, 0x0E	; 14
     c5c:	98 e0       	ldi	r25, 0x08	; 8
     c5e:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>

        				strcat(peer_data.done_message, buf);
     c62:	b8 01       	movw	r22, r16
     c64:	8c e1       	ldi	r24, 0x1C	; 28
     c66:	98 e0       	ldi	r25, 0x08	; 8
     c68:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <strcat>
        				strcat(peer_data.done_message, "\n");
     c6c:	6a ee       	ldi	r22, 0xEA	; 234
     c6e:	72 e0       	ldi	r23, 0x02	; 2
     c70:	8c e1       	ldi	r24, 0x1C	; 28
     c72:	98 e0       	ldi	r25, 0x08	; 8
     c74:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <strcat>
						peer_data.nodesSeen[peerId] = 1;
     c78:	f6 01       	movw	r30, r12
     c7a:	e0 82       	st	Z, r14
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <peer_setCurrentState+0x124>
 * Perform any transition and state related outputs
 */
void peer_setCurrentState(void)
{
    peer_state_E state = peer_data.desiredState;
    uint16_t peerId = 0;
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	d0 e0       	ldi	r29, 0x00	; 0
        			}

        		}
        	}

        	if(peer_data.sendSeen == true)
     c82:	80 91 1a 08 	lds	r24, 0x081A
     c86:	88 23       	and	r24, r24
     c88:	09 f1       	breq	.+66     	; 0xccc <peer_setCurrentState+0x16e>
        	{
				sprintf(peer_data.tx_buf, "SEEN:%d", peerId);
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	8c e6       	ldi	r24, 0x6C	; 108
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	88 e8       	ldi	r24, 0x88	; 136
     c98:	97 e0       	ldi	r25, 0x07	; 7
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
				peer_sendMessage();
     ca2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <peer_sendMessage>
				peer_data.sendSeenCount += 1;
     ca6:	80 91 1b 08 	lds	r24, 0x081B
     caa:	8f 5f       	subi	r24, 0xFF	; 255

				if(peer_data.sendSeenCount >= MAX_TIMES_SEND_SEEN)
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	18 f4       	brcc	.+6      	; 0xcc2 <peer_setCurrentState+0x164>

        	if(peer_data.sendSeen == true)
        	{
				sprintf(peer_data.tx_buf, "SEEN:%d", peerId);
				peer_sendMessage();
				peer_data.sendSeenCount += 1;
     cbc:	80 93 1b 08 	sts	0x081B, r24
     cc0:	59 c1       	rjmp	.+690    	; 0xf74 <peer_setCurrentState+0x416>

				if(peer_data.sendSeenCount >= MAX_TIMES_SEND_SEEN)
				{
					peer_data.sendSeenCount = 0;
     cc2:	10 92 1b 08 	sts	0x081B, r1
					peer_data.sendSeen = false;
     cc6:	10 92 1a 08 	sts	0x081A, r1
     cca:	54 c1       	rjmp	.+680    	; 0xf74 <peer_setCurrentState+0x416>
				}
			}
			else
			{
	        	sprintf((peer_data.tx_buf), "TEST:%d", MAC_ADDR);
     ccc:	1f 92       	push	r1
     cce:	1f 92       	push	r1
     cd0:	84 e7       	ldi	r24, 0x74	; 116
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	88 e8       	ldi	r24, 0x88	; 136
     cda:	97 e0       	ldi	r25, 0x07	; 7
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
        		peer_sendMessage();
     ce4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <peer_sendMessage>
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	3f c1       	rjmp	.+638    	; 0xf74 <peer_setCurrentState+0x416>


	    	break;

	    case STATE_LISTENING:
        	if(peer_data.stateTransition == true)
     cf6:	88 23       	and	r24, r24
     cf8:	21 f0       	breq	.+8      	; 0xd02 <peer_setCurrentState+0x1a4>
        	{
        		nrk_kprintf (PSTR ("--> Listening for TEST commands from a nearby node \r\n"));
     cfa:	8a ef       	ldi	r24, 0xFA	; 250
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        	}

		nrk_led_clr(BLUE_LED);
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
		nrk_led_set(GREEN_LED);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
		nrk_led_clr(ORANGE_LED);
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
        	nrk_led_clr(RED_LED);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>

        	uint8_t *buf = (peer_data.receive_buf);
     d22:	e0 91 86 07 	lds	r30, 0x0786
     d26:	f0 91 87 07 	lds	r31, 0x0787

        	if(receivedMessage == true)
     d2a:	80 91 6c 07 	lds	r24, 0x076C
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <peer_setCurrentState+0x1d6>
     d32:	20 c1       	rjmp	.+576    	; 0xf74 <peer_setCurrentState+0x416>
        	{
        		// check to see if received message is a TEST message
        		if(peer_data.len > 5 && buf[0] == 'T' && buf[1] == 'E' && buf[2] == 'S' && buf[3] == 'T' && buf[4] == ':' )
     d34:	80 91 fc 07 	lds	r24, 0x07FC
     d38:	86 30       	cpi	r24, 0x06	; 6
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <peer_setCurrentState+0x1e0>
     d3c:	1b c1       	rjmp	.+566    	; 0xf74 <peer_setCurrentState+0x416>
     d3e:	80 81       	ld	r24, Z
     d40:	84 35       	cpi	r24, 0x54	; 84
     d42:	09 f0       	breq	.+2      	; 0xd46 <peer_setCurrentState+0x1e8>
     d44:	17 c1       	rjmp	.+558    	; 0xf74 <peer_setCurrentState+0x416>
     d46:	81 81       	ldd	r24, Z+1	; 0x01
     d48:	85 34       	cpi	r24, 0x45	; 69
     d4a:	09 f0       	breq	.+2      	; 0xd4e <peer_setCurrentState+0x1f0>
     d4c:	13 c1       	rjmp	.+550    	; 0xf74 <peer_setCurrentState+0x416>
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	83 35       	cpi	r24, 0x53	; 83
     d52:	09 f0       	breq	.+2      	; 0xd56 <peer_setCurrentState+0x1f8>
     d54:	0f c1       	rjmp	.+542    	; 0xf74 <peer_setCurrentState+0x416>
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	84 35       	cpi	r24, 0x54	; 84
     d5a:	09 f0       	breq	.+2      	; 0xd5e <peer_setCurrentState+0x200>
     d5c:	0b c1       	rjmp	.+534    	; 0xf74 <peer_setCurrentState+0x416>
     d5e:	84 81       	ldd	r24, Z+4	; 0x04
     d60:	8a 33       	cpi	r24, 0x3A	; 58
     d62:	09 f0       	breq	.+2      	; 0xd66 <peer_setCurrentState+0x208>
     d64:	07 c1       	rjmp	.+526    	; 0xf74 <peer_setCurrentState+0x416>
        		{
        			peer_data.receivedTestMessage = true;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	80 93 16 08 	sts	0x0816, r24
     d6c:	03 c1       	rjmp	.+518    	; 0xf74 <peer_setCurrentState+0x416>
        	}

	    	break;

	    case STATE_SENDING_ACKS:
        	if(peer_data.stateTransition == true)
     d6e:	88 23       	and	r24, r24
     d70:	41 f0       	breq	.+16     	; 0xd82 <peer_setCurrentState+0x224>
        	{
        	   nrk_kprintf (PSTR ("--> Saw a test command, attempting to send acknoledgement\r\n"));
     d72:	8e eb       	ldi	r24, 0xBE	; 190
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        	   nrk_time_get(&(peer_data.transitionTime));
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	98 e0       	ldi	r25, 0x08	; 8
     d7e:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>
        	}

		nrk_led_set(BLUE_LED);
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
		nrk_led_set(GREEN_LED);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
		nrk_led_clr(ORANGE_LED);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
        	nrk_led_clr(RED_LED);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
        	// Let the peer sending test messages know that I am there by sending ACK messages with my mac address
        	sprintf(peer_data.tx_buf, "ACK:%d", MAC_ADDR);
     da2:	1f 92       	push	r1
     da4:	1f 92       	push	r1
     da6:	8c e7       	ldi	r24, 0x7C	; 124
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	9f 93       	push	r25
     dac:	8f 93       	push	r24
     dae:	88 e8       	ldi	r24, 0x88	; 136
     db0:	97 e0       	ldi	r25, 0x07	; 7
     db2:	9f 93       	push	r25
     db4:	8f 93       	push	r24
     db6:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
        	peer_sendMessage();
     dba:	0e 94 60 04 	call	0x8c0	; 0x8c0 <peer_sendMessage>

        	if(receivedMessage == true)
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	80 91 6c 07 	lds	r24, 0x076C
     dce:	88 23       	and	r24, r24
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <peer_setCurrentState+0x276>
     dd2:	d0 c0       	rjmp	.+416    	; 0xf74 <peer_setCurrentState+0x416>
        	{
        		// check to see if received message is a TEST message
        		if(peer_data.len > 5 && buf[0] == 'S' && buf[1] == 'E' && buf[2] == 'E' && buf[3] == 'N' && buf[4] == ':' )
     dd4:	80 91 fc 07 	lds	r24, 0x07FC
     dd8:	86 30       	cpi	r24, 0x06	; 6
     dda:	08 f4       	brcc	.+2      	; 0xdde <peer_setCurrentState+0x280>
     ddc:	cb c0       	rjmp	.+406    	; 0xf74 <peer_setCurrentState+0x416>
     dde:	80 91 00 00 	lds	r24, 0x0000
     de2:	83 35       	cpi	r24, 0x53	; 83
     de4:	09 f0       	breq	.+2      	; 0xde8 <peer_setCurrentState+0x28a>
     de6:	c6 c0       	rjmp	.+396    	; 0xf74 <peer_setCurrentState+0x416>
     de8:	80 91 01 00 	lds	r24, 0x0001
     dec:	85 34       	cpi	r24, 0x45	; 69
     dee:	09 f0       	breq	.+2      	; 0xdf2 <peer_setCurrentState+0x294>
     df0:	c1 c0       	rjmp	.+386    	; 0xf74 <peer_setCurrentState+0x416>
     df2:	80 91 02 00 	lds	r24, 0x0002
     df6:	85 34       	cpi	r24, 0x45	; 69
     df8:	09 f0       	breq	.+2      	; 0xdfc <peer_setCurrentState+0x29e>
     dfa:	bc c0       	rjmp	.+376    	; 0xf74 <peer_setCurrentState+0x416>
     dfc:	80 91 03 00 	lds	r24, 0x0003
     e00:	8e 34       	cpi	r24, 0x4E	; 78
     e02:	09 f0       	breq	.+2      	; 0xe06 <peer_setCurrentState+0x2a8>
     e04:	b7 c0       	rjmp	.+366    	; 0xf74 <peer_setCurrentState+0x416>
     e06:	80 91 04 00 	lds	r24, 0x0004
     e0a:	8a 33       	cpi	r24, 0x3A	; 58
     e0c:	09 f0       	breq	.+2      	; 0xe10 <peer_setCurrentState+0x2b2>
     e0e:	b2 c0       	rjmp	.+356    	; 0xf74 <peer_setCurrentState+0x416>
        		{
        			buf = buf + 5;
        			peerId = atoi(buf);
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <atoi>

        			if(peerId == MAC_ADDR)
     e18:	89 2b       	or	r24, r25
     e1a:	09 f0       	breq	.+2      	; 0xe1e <peer_setCurrentState+0x2c0>
     e1c:	ab c0       	rjmp	.+342    	; 0xf74 <peer_setCurrentState+0x416>
        			{
        				peer_data.receivedSeenMessage = true;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 17 08 	sts	0x0817, r24
     e24:	a7 c0       	rjmp	.+334    	; 0xf74 <peer_setCurrentState+0x416>
        	}

	    	break;

	    case STATE_GOT_ACK:
	    	if(peer_data.stateTransition == true)
     e26:	88 23       	and	r24, r24
     e28:	21 f0       	breq	.+8      	; 0xe32 <peer_setCurrentState+0x2d4>
        	{
        		nrk_kprintf (PSTR ("--> Received a SEEN command from nearby peer, waiting for CTS from GTW\r\n"));
     e2a:	85 e7       	ldi	r24, 0x75	; 117
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        	}

		nrk_led_set(BLUE_LED);
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
		nrk_led_clr(GREEN_LED);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
		nrk_led_clr(ORANGE_LED);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
        	nrk_led_set(RED_LED);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
        	// at this point, this node will be called by the gateway as CTS in the near future, so 
        	// we wait for a CTS:<my MAC> from the gateway before transitioning to the test state, looking
        	// for neighbor nodes
        	if(receivedMessage == true)
     e52:	80 91 6c 07 	lds	r24, 0x076C
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <peer_setCurrentState+0x2fe>
     e5a:	8c c0       	rjmp	.+280    	; 0xf74 <peer_setCurrentState+0x416>
        	{
        		// check to see if received message is a TEST message
        		if(peer_data.len > 4 && buf[0] == 'C' && buf[1] == 'T' && buf[2] == 'S' && buf[3] == ':')
     e5c:	80 91 fc 07 	lds	r24, 0x07FC
     e60:	85 30       	cpi	r24, 0x05	; 5
     e62:	08 f4       	brcc	.+2      	; 0xe66 <peer_setCurrentState+0x308>
     e64:	87 c0       	rjmp	.+270    	; 0xf74 <peer_setCurrentState+0x416>
     e66:	80 91 00 00 	lds	r24, 0x0000
     e6a:	83 34       	cpi	r24, 0x43	; 67
     e6c:	09 f0       	breq	.+2      	; 0xe70 <peer_setCurrentState+0x312>
     e6e:	82 c0       	rjmp	.+260    	; 0xf74 <peer_setCurrentState+0x416>
     e70:	80 91 01 00 	lds	r24, 0x0001
     e74:	84 35       	cpi	r24, 0x54	; 84
     e76:	09 f0       	breq	.+2      	; 0xe7a <peer_setCurrentState+0x31c>
     e78:	7d c0       	rjmp	.+250    	; 0xf74 <peer_setCurrentState+0x416>
     e7a:	80 91 02 00 	lds	r24, 0x0002
     e7e:	83 35       	cpi	r24, 0x53	; 83
     e80:	09 f0       	breq	.+2      	; 0xe84 <peer_setCurrentState+0x326>
     e82:	78 c0       	rjmp	.+240    	; 0xf74 <peer_setCurrentState+0x416>
     e84:	80 91 03 00 	lds	r24, 0x0003
     e88:	8a 33       	cpi	r24, 0x3A	; 58
     e8a:	09 f0       	breq	.+2      	; 0xe8e <peer_setCurrentState+0x330>
     e8c:	73 c0       	rjmp	.+230    	; 0xf74 <peer_setCurrentState+0x416>
        		{
        			buf = buf + 4;
        			peerId = atoi(buf);
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <atoi>

        			if(peerId == MAC_ADDR)
     e96:	89 2b       	or	r24, r25
     e98:	09 f0       	breq	.+2      	; 0xe9c <peer_setCurrentState+0x33e>
     e9a:	6c c0       	rjmp	.+216    	; 0xf74 <peer_setCurrentState+0x416>
        			{
        				peer_data.receivedCtsFromGateway = true;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 18 08 	sts	0x0818, r24
     ea2:	68 c0       	rjmp	.+208    	; 0xf74 <peer_setCurrentState+0x416>
        	}

	    	break;

	    case STATE_DONE:
        	if(peer_data.stateTransition == true)
     ea4:	88 23       	and	r24, r24
     ea6:	a1 f0       	breq	.+40     	; 0xed0 <peer_setCurrentState+0x372>
        	{
        		nrk_kprintf (PSTR ("--> Done receiving ACK messages from nearby peers, sending results to GTW\r\n"));
     ea8:	89 e2       	ldi	r24, 0x29	; 41
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
		    	nrk_led_clr(RED_LED);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
		    	nrk_led_clr(BLUE_LED);
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
		    	nrk_led_set(GREEN_LED);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
			nrk_led_set(ORANGE_LED);
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
        	}

        	// Done getting neighbors list, build information from nodes and send to gateway
        	sprintf(peer_data.tx_buf, "DONE\nFROM:%d\nTO:GTW\nSEEN\n", MAC_ADDR);      	
     ed0:	1f 92       	push	r1
     ed2:	1f 92       	push	r1
     ed4:	83 e8       	ldi	r24, 0x83	; 131
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	88 e8       	ldi	r24, 0x88	; 136
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>
		strcat(peer_data.tx_buf, peer_data.done_message);
     ee8:	6c e1       	ldi	r22, 0x1C	; 28
     eea:	78 e0       	ldi	r23, 0x08	; 8
     eec:	88 e8       	ldi	r24, 0x88	; 136
     eee:	97 e0       	ldi	r25, 0x07	; 7
     ef0:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <strcat>

        	peer_sendMessage();
     ef4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <peer_sendMessage>

        	if(receivedMessage == true)
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	80 91 6c 07 	lds	r24, 0x076C
     f08:	88 23       	and	r24, r24
     f0a:	a1 f1       	breq	.+104    	; 0xf74 <peer_setCurrentState+0x416>
        	{
        		char* buf = peer_data.receive_buf;
     f0c:	e0 91 86 07 	lds	r30, 0x0786
     f10:	f0 91 87 07 	lds	r31, 0x0787

        		if(peer_data.len > 4 && buf[0] == 'A' && buf[1] == 'C' && buf[2] == 'K' && buf[3] == ':')
     f14:	80 91 fc 07 	lds	r24, 0x07FC
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	60 f1       	brcs	.+88     	; 0xf74 <peer_setCurrentState+0x416>
     f1c:	80 81       	ld	r24, Z
     f1e:	81 34       	cpi	r24, 0x41	; 65
     f20:	49 f5       	brne	.+82     	; 0xf74 <peer_setCurrentState+0x416>
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	83 34       	cpi	r24, 0x43	; 67
     f26:	31 f5       	brne	.+76     	; 0xf74 <peer_setCurrentState+0x416>
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	8b 34       	cpi	r24, 0x4B	; 75
     f2c:	19 f5       	brne	.+70     	; 0xf74 <peer_setCurrentState+0x416>
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	8a 33       	cpi	r24, 0x3A	; 58
     f32:	01 f5       	brne	.+64     	; 0xf74 <peer_setCurrentState+0x416>
        		{
        			buf = buf + 4;

        			if(atoi(buf) == MAC_ADDR)
     f34:	cf 01       	movw	r24, r30
     f36:	04 96       	adiw	r24, 0x04	; 4
     f38:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <atoi>
     f3c:	89 2b       	or	r24, r25
     f3e:	d1 f4       	brne	.+52     	; 0xf74 <peer_setCurrentState+0x416>
        			{
        				peer_data.receivedAckFromGateway = true;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 19 08 	sts	0x0819, r24
     f46:	16 c0       	rjmp	.+44     	; 0xf74 <peer_setCurrentState+0x416>
        	}

	    	break;

	    case STATE_FORWARDING:
        	if(peer_data.stateTransition == true)
     f48:	88 23       	and	r24, r24
     f4a:	a1 f0       	breq	.+40     	; 0xf74 <peer_setCurrentState+0x416>
        	{
        		nrk_kprintf (PSTR ("--> Waiting to forward any neighbor information from other nodes\r\n"));
     f4c:	86 ee       	ldi	r24, 0xE6	; 230
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        		nrk_led_set(BLUE_LED);
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
        		nrk_led_set(RED_LED);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
        		nrk_led_set(GREEN_LED);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
			nrk_led_set(ORANGE_LED);
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
        default:
            // should never reach here, error
             break;
    }

    peer_data.presentState = state;
     f74:	f0 92 80 07 	sts	0x0780, r15
}
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	08 95       	ret

00000f8a <peer_init>:
/**
  * Initialize the peer data struct and other variables
  */
void peer_init(void)
{
  peer_data.desiredState = STATE_WAIT;
     f8a:	ef e7       	ldi	r30, 0x7F	; 127
     f8c:	f7 e0       	ldi	r31, 0x07	; 7
     f8e:	10 82       	st	Z, r1
  peer_data.presentState = STATE_WAIT;
     f90:	11 82       	std	Z+1, r1	; 0x01
  peer_data.stateTransition = false;
     f92:	12 82       	std	Z+2, r1	; 0x02
     f94:	08 95       	ret

00000f96 <peer_task>:
}

void peer_task(void)
{
    nrk_kprintf (PSTR ("Peer Task started\r\n"));
     f96:	82 ed       	ldi	r24, 0xD2	; 210
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>

    peer_init(); // Initialize gateway variables
     f9e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <peer_init>

    // Get the signal for UART RX
    uart_rx_signal = nrk_uart_rx_signal_get();
     fa2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <nrk_uart_rx_signal_get>
     fa6:	80 93 6f 07 	sts	0x076F, r24

    // Register task to wait on signal
    nrk_signal_register(uart_rx_signal);
     faa:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>

    // init bmac on channel 12 and least power to assist multihop
    bmac_init (CHANNEL);
     fae:	8c e0       	ldi	r24, 0x0C	; 12
     fb0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <bmac_init>
    bmac_set_rf_power(5);
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <bmac_set_rf_power>

    // This can be called at anytime before releasing the packet
    // if you wish to do a zero-copy buffer switch
    bmac_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
     fba:	64 e7       	ldi	r22, 0x74	; 116
     fbc:	88 ef       	ldi	r24, 0xF8	; 248
     fbe:	96 e0       	ldi	r25, 0x06	; 6
     fc0:	0e 94 c2 08 	call	0x1184	; 0x1184 <bmac_rx_pkt_set_buffer>
        /*
         * Below is the main state machine loop
         */

        // Grab inputs and do some processing
        peer_processData();
     fc4:	0e 94 62 05 	call	0xac4	; 0xac4 <peer_processData>

        // See if state transition is necessary
        peer_getDesiredState();
     fc8:	0e 94 67 05 	call	0xace	; 0xace <peer_getDesiredState>

        // Set variable indicating state transition happened
        peer_data.stateTransition = (peer_data.presentState != peer_data.desiredState);
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	20 91 80 07 	lds	r18, 0x0780
     fd2:	90 91 7f 07 	lds	r25, 0x077F
     fd6:	29 13       	cpse	r18, r25
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <peer_task+0x46>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	80 93 81 07 	sts	0x0781, r24

        // Perform transition and state related outputs
        peer_setCurrentState();
     fe0:	0e 94 af 05 	call	0xb5e	; 0xb5e <peer_setCurrentState>

        nrk_wait_until_next_period();
     fe4:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_wait_until_next_period>
    }
     fe8:	ed cf       	rjmp	.-38     	; 0xfc4 <peer_task+0x2e>

00000fea <nrk_create_taskset>:

/**
  * Creates a nrk gateway task
  */
void nrk_create_taskset ()
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
    PEER_TASK.task = peer_task;
     fee:	c4 e5       	ldi	r28, 0x54	; 84
     ff0:	d6 e0       	ldi	r29, 0x06	; 6
     ff2:	8b ec       	ldi	r24, 0xCB	; 203
     ff4:	97 e0       	ldi	r25, 0x07	; 7
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
    nrk_task_set_stk( &PEER_TASK, peer_task_stack, NRK_APP_STACKSIZE);
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	52 e0       	ldi	r21, 0x02	; 2
     ffe:	6a e4       	ldi	r22, 0x4A	; 74
    1000:	74 e0       	ldi	r23, 0x04	; 4
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <nrk_task_set_stk>
    PEER_TASK.prio = 2;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	88 87       	std	Y+8, r24	; 0x08
    PEER_TASK.FirstActivation = TRUE;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8f 83       	std	Y+7, r24	; 0x07
    PEER_TASK.Type = BASIC_TASK;
    1010:	89 87       	std	Y+9, r24	; 0x09
    PEER_TASK.SchType = PREEMPTIVE;
    1012:	8a 87       	std	Y+10, r24	; 0x0a
    PEER_TASK.period.secs = 0;
    1014:	1b 86       	std	Y+11, r1	; 0x0b
    1016:	1c 86       	std	Y+12, r1	; 0x0c
    1018:	1d 86       	std	Y+13, r1	; 0x0d
    101a:	1e 86       	std	Y+14, r1	; 0x0e
    PEER_TASK.period.nano_secs = 500000000;
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	95 e6       	ldi	r25, 0x65	; 101
    1020:	ad ec       	ldi	r26, 0xCD	; 205
    1022:	bd e1       	ldi	r27, 0x1D	; 29
    1024:	8f 87       	std	Y+15, r24	; 0x0f
    1026:	98 8b       	std	Y+16, r25	; 0x10
    1028:	a9 8b       	std	Y+17, r26	; 0x11
    102a:	ba 8b       	std	Y+18, r27	; 0x12
    PEER_TASK.cpu_reserve.secs = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	8b 8b       	std	Y+19, r24	; 0x13
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	ad 8b       	std	Y+21, r26	; 0x15
    103a:	be 8b       	std	Y+22, r27	; 0x16
    PEER_TASK.cpu_reserve.nano_secs = 0;
    103c:	1f 8a       	std	Y+23, r1	; 0x17
    103e:	18 8e       	std	Y+24, r1	; 0x18
    1040:	19 8e       	std	Y+25, r1	; 0x19
    1042:	1a 8e       	std	Y+26, r1	; 0x1a
    PEER_TASK.offset.secs = 0;
    1044:	1b 8e       	std	Y+27, r1	; 0x1b
    1046:	1c 8e       	std	Y+28, r1	; 0x1c
    1048:	1d 8e       	std	Y+29, r1	; 0x1d
    104a:	1e 8e       	std	Y+30, r1	; 0x1e
    PEER_TASK.offset.nano_secs = 0;
    104c:	1f 8e       	std	Y+31, r1	; 0x1f
    104e:	18 a2       	std	Y+32, r1	; 0x20
    1050:	19 a2       	std	Y+33, r1	; 0x21
    1052:	1a a2       	std	Y+34, r1	; 0x22
    nrk_activate_task (&PEER_TASK);
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <nrk_activate_task>
    
    nrk_kprintf ("Create done\r\n");
    105a:	8d e9       	ldi	r24, 0x9D	; 157
    105c:	92 e0       	ldi	r25, 0x02	; 2
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    PEER_TASK.cpu_reserve.nano_secs = 0;
    PEER_TASK.offset.secs = 0;
    PEER_TASK.offset.nano_secs = 0;
    nrk_activate_task (&PEER_TASK);
    
    nrk_kprintf ("Create done\r\n");
    1062:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <nrk_kprintf>

00001066 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
    1066:	08 95       	ret

00001068 <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    1068:	64 30       	cpi	r22, 0x04	; 4
    106a:	21 f4       	brne	.+8      	; 0x1074 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
    106c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <rf_security_set_ctr_counter>
  return NRK_OK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
    1074:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
    1076:	08 95       	ret

00001078 <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	08 95       	ret

0000107c <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	08 95       	ret

00001082 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
    1082:	0e 94 2c 0c 	call	0x1858	; 0x1858 <rf_auto_ack_disable>
  return NRK_OK;
}
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	08 95       	ret

0000108a <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
    108a:	0e 94 26 0c 	call	0x184c	; 0x184c <rf_auto_ack_enable>
  return NRK_OK;
}
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
    1092:	0e 94 20 0c 	call	0x1840	; 0x1840 <rf_addr_decode_disable>
  return NRK_OK;
}
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	08 95       	ret

0000109a <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
    109a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <rf_addr_decode_enable>
  return NRK_OK;
}
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	08 95       	ret

000010a2 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
    10a2:	0e 94 32 0c 	call	0x1864	; 0x1864 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	08 95       	ret

000010aa <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
    10aa:	90 93 79 06 	sts	0x0679, r25
    10ae:	80 93 78 06 	sts	0x0678, r24
  return NRK_OK;
}
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	08 95       	ret

000010b6 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
    10b6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <rf_security_last_pkt_status>
}
    10ba:	08 95       	ret

000010bc <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    10bc:	60 31       	cpi	r22, 0x10	; 16
    10be:	21 f4       	brne	.+8      	; 0x10c8 <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
    10c0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <rf_security_set_key>
  return NRK_OK;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
    10ca:	08 95       	ret

000010cc <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	08 95       	ret

000010d0 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	08 95       	ret

000010d4 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    10d4:	80 32       	cpi	r24, 0x20	; 32
    10d6:	20 f4       	brcc	.+8      	; 0x10e0 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
    10d8:	0e 94 10 0c 	call	0x1820	; 0x1820 <rf_tx_power>
  return NRK_OK;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
    10e2:	08 95       	ret

000010e4 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
    10e4:	80 93 79 03 	sts	0x0379, r24
    10e8:	08 95       	ret

000010ea <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
    10ea:	99 27       	eor	r25, r25
    10ec:	87 fd       	sbrc	r24, 7
    10ee:	90 95       	com	r25
    10f0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <rf_set_cca_thresh>
  return NRK_OK;
}
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	08 95       	ret

000010f8 <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	1f 92       	push	r1
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
    1102:	8b 31       	cpi	r24, 0x1B	; 27
    1104:	80 f4       	brcc	.+32     	; 0x1126 <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
    1106:	80 93 83 03 	sts	0x0383, r24
  rf_power_up ();
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4f ef       	ldi	r20, 0xFF	; 255
    1116:	5f ef       	ldi	r21, 0xFF	; 255
    1118:	69 81       	ldd	r22, Y+1	; 0x01
    111a:	82 e7       	ldi	r24, 0x72	; 114
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <rf_init>
  return NRK_OK;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
    1126:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
    1128:	0f 90       	pop	r0
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    1130:	80 91 86 03 	lds	r24, 0x0386
    1134:	88 23       	and	r24, r24
    1136:	11 f1       	breq	.+68     	; 0x117c <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
    1138:	80 91 f7 06 	lds	r24, 0x06F7
    113c:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	00 90 f7 06 	lds	r0, 0x06F7
    1150:	04 c0       	rjmp	.+8      	; 0x115a <bmac_wait_until_rx_pkt+0x2a>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	d2 f7       	brpl	.-12     	; 0x1152 <bmac_wait_until_rx_pkt+0x22>
    115e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	00 90 f7 06 	lds	r0, 0x06F7
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <bmac_wait_until_rx_pkt+0x44>
    116c:	b6 95       	lsr	r27
    116e:	a7 95       	ror	r26
    1170:	97 95       	ror	r25
    1172:	87 95       	ror	r24
    1174:	0a 94       	dec	r0
    1176:	d2 f7       	brpl	.-12     	; 0x116c <bmac_wait_until_rx_pkt+0x3c>
    1178:	80 ff       	sbrs	r24, 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
    1180:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
    1182:	08 95       	ret

00001184 <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	51 f0       	breq	.+20     	; 0x119c <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
    1188:	90 93 78 07 	sts	0x0778, r25
    118c:	80 93 77 07 	sts	0x0777, r24
  bmac_rfRxInfo.max_length = size;
    1190:	60 93 76 07 	sts	0x0776, r22
  rx_buf_empty = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 86 03 	sts	0x0386, r24
  return NRK_OK;
    119a:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
    119e:	08 95       	ret

000011a0 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	18 2f       	mov	r17, r24
  bmac_running = 0;
    11a8:	10 92 85 03 	sts	0x0385, r1
  tx_reserve = -1;
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	80 93 78 03 	sts	0x0378, r24
  cca_active = true;
    11b2:	d1 e0       	ldi	r29, 0x01	; 1
    11b4:	d0 93 79 03 	sts	0x0379, r29
  rx_failure_cnt = 0;
    11b8:	10 92 88 03 	sts	0x0388, r1
    11bc:	10 92 89 03 	sts	0x0389, r1
    11c0:	10 92 8a 03 	sts	0x038A, r1
    11c4:	10 92 8b 03 	sts	0x038B, r1
#endif
#endif



  _bmac_check_period.secs = 0;
    11c8:	10 92 7a 03 	sts	0x037A, r1
    11cc:	10 92 7b 03 	sts	0x037B, r1
    11d0:	10 92 7c 03 	sts	0x037C, r1
    11d4:	10 92 7d 03 	sts	0x037D, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	91 ee       	ldi	r25, 0xE1	; 225
    11dc:	a5 ef       	ldi	r26, 0xF5	; 245
    11de:	b5 e0       	ldi	r27, 0x05	; 5
    11e0:	80 93 7e 03 	sts	0x037E, r24
    11e4:	90 93 7f 03 	sts	0x037F, r25
    11e8:	a0 93 80 03 	sts	0x0380, r26
    11ec:	b0 93 81 03 	sts	0x0381, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
    11f0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <nrk_signal_create>
    11f4:	c8 2f       	mov	r28, r24
    11f6:	80 93 f7 06 	sts	0x06F7, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
    11fa:	8f 3f       	cpi	r24, 0xFF	; 255
    11fc:	19 f4       	brne	.+6      	; 0x1204 <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
    11fe:	8e eb       	ldi	r24, 0xBE	; 190
    1200:	94 e0       	ldi	r25, 0x04	; 4
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
    1204:	0e 94 b2 1a 	call	0x3564	; 0x3564 <nrk_signal_create>
    1208:	c8 2f       	mov	r28, r24
    120a:	80 93 9c 09 	sts	0x099C, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
    120e:	8f 3f       	cpi	r24, 0xFF	; 255
    1210:	69 f4       	brne	.+26     	; 0x122c <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
    1212:	86 e9       	ldi	r24, 0x96	; 150
    1214:	94 e0       	ldi	r25, 0x04	; 4
    1216:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    121a:	e0 91 b4 0a 	lds	r30, 0x0AB4
    121e:	f0 91 b5 0a 	lds	r31, 0x0AB5
    1222:	60 85       	ldd	r22, Z+8	; 0x08
    1224:	8e e0       	ldi	r24, 0x0E	; 14
    1226:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
    return NRK_ERROR;
    122a:	2a c0       	rjmp	.+84     	; 0x1280 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
    122c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <nrk_signal_create>
    1230:	c8 2f       	mov	r28, r24
    1232:	80 93 77 06 	sts	0x0677, r24
  if (bmac_enable_signal == NRK_ERROR) {
    1236:	8f 3f       	cpi	r24, 0xFF	; 255
    1238:	19 f4       	brne	.+6      	; 0x1240 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
    123a:	8a e6       	ldi	r24, 0x6A	; 106
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	eb cf       	rjmp	.-42     	; 0x1216 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
    1240:	10 92 87 03 	sts	0x0387, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
    1244:	10 92 86 03 	sts	0x0386, r1
  bmac_rfRxInfo.pPayload = NULL;
    1248:	10 92 78 07 	sts	0x0778, r1
    124c:	10 92 77 07 	sts	0x0777, r1
  bmac_rfRxInfo.max_length = 0;
    1250:	10 92 76 07 	sts	0x0776, r1

  // Setup the cc2420 chip
  rf_power_up ();
    1254:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	4f ef       	ldi	r20, 0xFF	; 255
    125e:	5f ef       	ldi	r21, 0xFF	; 255
    1260:	61 2f       	mov	r22, r17
    1262:	82 e7       	ldi	r24, 0x72	; 114
    1264:	97 e0       	ldi	r25, 0x07	; 7
    1266:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <rf_init>
  g_chan = chan;
    126a:	10 93 83 03 	sts	0x0383, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <rf_set_cca_thresh>
  bmac_running = 1;
    1276:	d0 93 85 03 	sts	0x0385, r29
  is_enabled = 1;
    127a:	d0 93 82 03 	sts	0x0382, r29
  return NRK_OK;
    127e:	c1 e0       	ldi	r28, 0x01	; 1
}
    1280:	8c 2f       	mov	r24, r28
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	08 95       	ret

0000128a <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    128a:	20 91 87 03 	lds	r18, 0x0387
    128e:	21 30       	cpi	r18, 0x01	; 1
    1290:	59 f0       	breq	.+22     	; 0x12a8 <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	20 93 87 03 	sts	0x0387, r18
  bmac_rfTxInfo.pPayload = buf;
    1298:	90 93 7c 06 	sts	0x067C, r25
    129c:	80 93 7b 06 	sts	0x067B, r24
  bmac_rfTxInfo.length = len;
    12a0:	60 93 7a 06 	sts	0x067A, r22
  return NRK_OK;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
    12aa:	08 95       	ret

000012ac <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
    12ac:	80 91 f7 06 	lds	r24, 0x06F7
    12b0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
    12b4:	80 91 f7 06 	lds	r24, 0x06F7
    12b8:	08 95       	ret

000012ba <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
    12ba:	80 91 9c 09 	lds	r24, 0x099C
    12be:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
    12c2:	80 91 9c 09 	lds	r24, 0x099C
    12c6:	08 95       	ret

000012c8 <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
    12d0:	20 91 87 03 	lds	r18, 0x0387
    12d4:	21 30       	cpi	r18, 0x01	; 1
    12d6:	f1 f1       	breq	.+124    	; 0x1354 <bmac_tx_pkt+0x8c>
    12d8:	f6 2e       	mov	r15, r22
    12da:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
    12dc:	80 91 9c 09 	lds	r24, 0x099C
    12e0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
  tx_data_ready = 1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 87 03 	sts	0x0387, r24
  bmac_rfTxInfo.pPayload = buf;
    12ea:	d0 92 7c 06 	sts	0x067C, r13
    12ee:	c0 92 7b 06 	sts	0x067B, r12
  bmac_rfTxInfo.length = len;
    12f2:	f0 92 7a 06 	sts	0x067A, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 e0       	ldi	r26, 0x00	; 0
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	00 90 9c 09 	lds	r0, 0x099C
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <bmac_tx_pkt+0x48>
    1308:	66 0f       	add	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	d2 f7       	brpl	.-12     	; 0x1308 <bmac_tx_pkt+0x40>
    1314:	0e 94 65 1c 	call	0x38ca	; 0x38ca <nrk_event_wait>
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
  if (mask == 0)
    131c:	61 15       	cp	r22, r1
    131e:	71 05       	cpc	r23, r1
    1320:	81 05       	cpc	r24, r1
    1322:	91 05       	cpc	r25, r1
    1324:	21 f4       	brne	.+8      	; 0x132e <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
    1326:	86 e4       	ldi	r24, 0x46	; 70
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    132e:	00 90 9c 09 	lds	r0, 0x099C
    1332:	04 c0       	rjmp	.+8      	; 0x133c <bmac_tx_pkt+0x74>
    1334:	f6 94       	lsr	r15
    1336:	e7 94       	ror	r14
    1338:	d7 94       	ror	r13
    133a:	c7 94       	ror	r12
    133c:	0a 94       	dec	r0
    133e:	d2 f7       	brpl	.-12     	; 0x1334 <bmac_tx_pkt+0x6c>
    1340:	c0 fc       	sbrc	r12, 0
    1342:	04 c0       	rjmp	.+8      	; 0x134c <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
    1344:	83 e2       	ldi	r24, 0x23	; 35
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
  if (pkt_got_ack)
    134c:	80 91 84 03 	lds	r24, 0x0384
    1350:	81 11       	cpse	r24, r1
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	01 c0       	rjmp	.+2      	; 0x135a <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	df 90       	pop	r13
    1360:	cf 90       	pop	r12
    1362:	08 95       	ret

00001364 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
    1364:	20 91 86 03 	lds	r18, 0x0386
    1368:	22 23       	and	r18, r18
    136a:	39 f0       	breq	.+14     	; 0x137a <bmac_rx_pkt_get+0x16>
    *len = 0;
    136c:	fc 01       	movw	r30, r24
    136e:	10 82       	st	Z, r1
    *rssi = 0;
    1370:	fb 01       	movw	r30, r22
    1372:	10 82       	st	Z, r1
    return NULL;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
    137a:	20 91 75 07 	lds	r18, 0x0775
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
    1382:	80 91 7a 07 	lds	r24, 0x077A
    1386:	fb 01       	movw	r30, r22
    1388:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
    138a:	80 91 77 07 	lds	r24, 0x0777
    138e:	90 91 78 07 	lds	r25, 0x0778
}
    1392:	08 95       	ret

00001394 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 91 86 03 	lds	r25, 0x0386
    139a:	91 11       	cpse	r25, r1
    139c:	80 e0       	ldi	r24, 0x00	; 0
}
    139e:	08 95       	ret

000013a0 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 86 03 	sts	0x0386, r24
  return NRK_OK;
}
    13a6:	08 95       	ret

000013a8 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
    13a8:	10 92 82 03 	sts	0x0382, r1
  rf_power_down ();
    13ac:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <rf_power_down>

000013b0 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 82 03 	sts	0x0382, r24
  rf_power_up ();
    13b6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
    13ba:	80 91 77 06 	lds	r24, 0x0677
    13be:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <nrk_event_signal>

000013c2 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	28 97       	sbiw	r28, 0x08	; 8
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	29 83       	std	Y+1, r18	; 0x01
    13d8:	3a 83       	std	Y+2, r19	; 0x02
    13da:	4b 83       	std	Y+3, r20	; 0x03
    13dc:	5c 83       	std	Y+4, r21	; 0x04
    13de:	6d 83       	std	Y+5, r22	; 0x05
    13e0:	7e 83       	std	Y+6, r23	; 0x06
    13e2:	8f 83       	std	Y+7, r24	; 0x07
    13e4:	98 87       	std	Y+8, r25	; 0x08
    13e6:	49 81       	ldd	r20, Y+1	; 0x01
    13e8:	5a 81       	ldd	r21, Y+2	; 0x02
    13ea:	6b 81       	ldd	r22, Y+3	; 0x03
    13ec:	7c 81       	ldd	r23, Y+4	; 0x04
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	af 81       	ldd	r26, Y+7	; 0x07
    13f4:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
    13f6:	41 15       	cp	r20, r1
    13f8:	51 05       	cpc	r21, r1
    13fa:	61 05       	cpc	r22, r1
    13fc:	71 05       	cpc	r23, r1
    13fe:	41 f4       	brne	.+16     	; 0x1410 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    1400:	81 15       	cp	r24, r1
    1402:	2d e2       	ldi	r18, 0x2D	; 45
    1404:	92 07       	cpc	r25, r18
    1406:	21 e3       	ldi	r18, 0x31	; 49
    1408:	a2 07       	cpc	r26, r18
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	b2 07       	cpc	r27, r18
    140e:	90 f0       	brcs	.+36     	; 0x1434 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
    1410:	40 93 7a 03 	sts	0x037A, r20
    1414:	50 93 7b 03 	sts	0x037B, r21
    1418:	60 93 7c 03 	sts	0x037C, r22
    141c:	70 93 7d 03 	sts	0x037D, r23
  _bmac_check_period.nano_secs = period.nano_secs;
    1420:	80 93 7e 03 	sts	0x037E, r24
    1424:	90 93 7f 03 	sts	0x037F, r25
    1428:	a0 93 80 03 	sts	0x0380, r26
    142c:	b0 93 81 03 	sts	0x0381, r27
  return NRK_OK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
    1434:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
    1436:	28 96       	adiw	r28, 0x08	; 8
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
    1448:	80 91 85 03 	lds	r24, 0x0385
    144c:	08 95       	ret

0000144e <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
    144e:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
    1450:	0e 94 c2 0c 	call	0x1984	; 0x1984 <rf_rx_on>
  val += rf_cca_check ();
    1454:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <rf_cca_check>
    1458:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
    145a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <rf_cca_check>
    145e:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
    1460:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <rf_cca_check>
    1464:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
    1466:	0e 94 c8 0c 	call	0x1990	; 0x1990 <rf_rx_off>
    146a:	8c 2f       	mov	r24, r28
    146c:	1c 16       	cp	r1, r28
    146e:	0c f4       	brge	.+2      	; 0x1472 <_bmac_channel_check+0x24>
    1470:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
    1476:	0e 94 c2 0c 	call	0x1984	; 0x1984 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
    147a:	10 92 70 03 	sts	0x0370, r1
    147e:	10 92 71 03 	sts	0x0371, r1
    1482:	10 92 72 03 	sts	0x0372, r1
    1486:	10 92 73 03 	sts	0x0373, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
    148a:	80 e4       	ldi	r24, 0x40	; 64
    148c:	68 2f       	mov	r22, r24
    148e:	80 93 74 03 	sts	0x0374, r24
    1492:	8b e4       	ldi	r24, 0x4B	; 75
    1494:	80 93 75 03 	sts	0x0375, r24
    1498:	8c e4       	ldi	r24, 0x4C	; 76
    149a:	80 93 76 03 	sts	0x0376, r24
    149e:	10 92 77 03 	sts	0x0377, r1
  nrk_wait (dummy_t);
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 91 71 03 	lds	r19, 0x0371
    14a8:	40 91 72 03 	lds	r20, 0x0372
    14ac:	50 91 73 03 	lds	r21, 0x0373
    14b0:	7b e4       	ldi	r23, 0x4B	; 75
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 43 20 	call	0x4086	; 0x4086 <nrk_wait>

  n = rf_rx_packet_nonblock ();
    14b8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	e9 f0       	breq	.+58     	; 0x14fa <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
    14c0:	80 91 88 03 	lds	r24, 0x0388
    14c4:	90 91 89 03 	lds	r25, 0x0389
    14c8:	a0 91 8a 03 	lds	r26, 0x038A
    14cc:	b0 91 8b 03 	lds	r27, 0x038B
    14d0:	8f 3f       	cpi	r24, 0xFF	; 255
    14d2:	2f ef       	ldi	r18, 0xFF	; 255
    14d4:	92 07       	cpc	r25, r18
    14d6:	a1 05       	cpc	r26, r1
    14d8:	b1 05       	cpc	r27, r1
    14da:	58 f4       	brcc	.+22     	; 0x14f2 <_bmac_rx+0x7c>
      rx_failure_cnt++;
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	a1 1d       	adc	r26, r1
    14e0:	b1 1d       	adc	r27, r1
    14e2:	80 93 88 03 	sts	0x0388, r24
    14e6:	90 93 89 03 	sts	0x0389, r25
    14ea:	a0 93 8a 03 	sts	0x038A, r26
    14ee:	b0 93 8b 03 	sts	0x038B, r27
    rf_rx_off ();
    14f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <rf_rx_off>
    return 0;
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
    14fa:	10 92 86 03 	sts	0x0386, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
    14fe:	0e 94 c8 0c 	call	0x1990	; 0x1990 <rf_rx_off>
  return 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
}
    1504:	08 95       	ret

00001506 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
    1506:	80 91 88 03 	lds	r24, 0x0388
    150a:	90 91 89 03 	lds	r25, 0x0389
    150e:	08 95       	ret

00001510 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
    1510:	10 92 88 03 	sts	0x0388, r1
    1514:	10 92 89 03 	sts	0x0389, r1
    1518:	10 92 8a 03 	sts	0x038A, r1
    151c:	10 92 8b 03 	sts	0x038B, r1
  return NRK_OK;
}
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	08 95       	ret

00001524 <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	58 f0       	brcs	.+22     	; 0x153e <_b_pow+0x1a>
    return 1;
  if (in > 7)
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	08 f0       	brcs	.+2      	; 0x152e <_b_pow+0xa>
    in = 6;                     // cap it at 128 
    152c:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
    152e:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
    1530:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
    1532:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	28 13       	cpse	r18, r24
    1538:	fc cf       	rjmp	.-8      	; 0x1532 <_b_pow+0xe>
    result = result * 2;
  return result;
    153a:	89 2f       	mov	r24, r25
    153c:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
    1540:	08 95       	ret

00001542 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
    154e:	80 91 79 03 	lds	r24, 0x0379
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <_bmac_tx+0x16>
    1556:	43 c0       	rjmp	.+134    	; 0x15de <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
    1558:	8a e7       	ldi	r24, 0x7A	; 122
    155a:	93 e0       	ldi	r25, 0x03	; 3
    155c:	0e 94 66 22 	call	0x44cc	; 0x44cc <_nrk_time_to_ticks>
    1560:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
    1562:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <rand>
    1566:	6a e0       	ldi	r22, 0x0A	; 10
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__divmodhi4>
    156e:	bc 01       	movw	r22, r24
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	ce 01       	movw	r24, r28
    1576:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__udivmodhi4>
    157a:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
    157c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
    1580:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
    1582:	0a e0       	ldi	r16, 0x0A	; 10
    1584:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
    1586:	0e 94 27 0a 	call	0x144e	; 0x144e <_bmac_channel_check>
    158a:	d8 2f       	mov	r29, r24
      if (v == 1)
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	39 f1       	breq	.+78     	; 0x15de <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
    1590:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <rand>
    1594:	7c 01       	movw	r14, r24
    1596:	8c 2f       	mov	r24, r28
    1598:	0e 94 92 0a 	call	0x1524	; 0x1524 <_b_pow>
    159c:	68 2f       	mov	r22, r24
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	c7 01       	movw	r24, r14
    15a2:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
    15a6:	99 27       	eor	r25, r25
    15a8:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <nrk_wait_until_next_n_periods>
      backoff_count++;
    15ac:	cf 5f       	subi	r28, 0xFF	; 255
    15ae:	c7 30       	cpi	r28, 0x07	; 7
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <_bmac_tx+0x72>
    15b2:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
    15b4:	8a e7       	ldi	r24, 0x7A	; 122
    15b6:	93 e0       	ldi	r25, 0x03	; 3
    15b8:	0e 94 66 22 	call	0x44cc	; 0x44cc <_nrk_time_to_ticks>
    15bc:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
    15be:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <rand>
    15c2:	b8 01       	movw	r22, r16
    15c4:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__divmodhi4>
    15c8:	bc 01       	movw	r22, r24
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	c7 01       	movw	r24, r14
    15d0:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__udivmodhi4>
    15d4:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
    15d6:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    15da:	dd 23       	and	r29, r29
    15dc:	a1 f2       	breq	.-88     	; 0x1586 <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    15de:	10 92 7d 06 	sts	0x067D, r1
  bmac_rfTxInfo.ackRequest = 0;
    15e2:	10 92 7e 06 	sts	0x067E, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    15e6:	20 91 7a 03 	lds	r18, 0x037A
    15ea:	30 91 7b 03 	lds	r19, 0x037B
    15ee:	88 ee       	ldi	r24, 0xE8	; 232
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	28 9f       	mul	r18, r24
    15f4:	e0 01       	movw	r28, r0
    15f6:	29 9f       	mul	r18, r25
    15f8:	d0 0d       	add	r29, r0
    15fa:	38 9f       	mul	r19, r24
    15fc:	d0 0d       	add	r29, r0
    15fe:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    1600:	60 91 7e 03 	lds	r22, 0x037E
    1604:	70 91 7f 03 	lds	r23, 0x037F
    1608:	80 91 80 03 	lds	r24, 0x0380
    160c:	90 91 81 03 	lds	r25, 0x0381
    1610:	20 e4       	ldi	r18, 0x40	; 64
    1612:	32 e4       	ldi	r19, 0x42	; 66
    1614:	4f e0       	ldi	r20, 0x0F	; 15
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    161c:	c2 0f       	add	r28, r18
    161e:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    1620:	0e 94 c2 0c 	call	0x1984	; 0x1984 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    1624:	be 01       	movw	r22, r28
    1626:	88 e7       	ldi	r24, 0x78	; 120
    1628:	96 e0       	ldi	r25, 0x06	; 6
    162a:	0e 94 ce 0c 	call	0x199c	; 0x199c <rf_tx_packet_repeat>
    162e:	80 93 84 03 	sts	0x0384, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    1632:	0e 94 c8 0c 	call	0x1990	; 0x1990 <rf_rx_off>
  tx_data_ready = 0;
    1636:	10 92 87 03 	sts	0x0387, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    163a:	80 91 9c 09 	lds	r24, 0x099C
    163e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <nrk_event_signal>
  return NRK_OK;
}
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	08 95       	ret

00001652 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    1652:	80 91 85 03 	lds	r24, 0x0385
    1656:	81 11       	cpse	r24, r1
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    165a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_wait_until_next_period>
    165e:	f9 cf       	rjmp	.-14     	; 0x1652 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    1660:	80 91 77 06 	lds	r24, 0x0677
    1664:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
  if (v == NRK_ERROR)
    1668:	8f 3f       	cpi	r24, 0xFF	; 255
    166a:	21 f4       	brne	.+8      	; 0x1674 <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    166c:	87 e0       	ldi	r24, 0x07	; 7
    166e:	94 e0       	ldi	r25, 0x04	; 4
    1670:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    1674:	c1 2c       	mov	r12, r1
    1676:	d1 2c       	mov	r13, r1
    1678:	76 01       	movw	r14, r12
    167a:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    167c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <rf_power_up>
    if (is_enabled) {
    1680:	80 91 82 03 	lds	r24, 0x0382
    1684:	88 23       	and	r24, r24
    1686:	69 f1       	breq	.+90     	; 0x16e2 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    1688:	80 91 86 03 	lds	r24, 0x0386
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	41 f4       	brne	.+16     	; 0x16a0 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    1690:	0e 94 27 0a 	call	0x144e	; 0x144e <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    1694:	81 11       	cpse	r24, r1
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    1698:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_bmac_rx>
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	21 f4       	brne	.+8      	; 0x16a8 <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    16a0:	80 91 f7 06 	lds	r24, 0x06F7
    16a4:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    16a8:	80 91 87 03 	lds	r24, 0x0387
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <bmac_nw_task+0x62>
        _bmac_tx ();
    16b0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_bmac_tx>
      }
      rf_rx_off ();
    16b4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <rf_rx_off>
      rf_power_down ();
    16b8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    16bc:	20 91 7a 03 	lds	r18, 0x037A
    16c0:	30 91 7b 03 	lds	r19, 0x037B
    16c4:	40 91 7c 03 	lds	r20, 0x037C
    16c8:	50 91 7d 03 	lds	r21, 0x037D
    16cc:	60 91 7e 03 	lds	r22, 0x037E
    16d0:	70 91 7f 03 	lds	r23, 0x037F
    16d4:	80 91 80 03 	lds	r24, 0x0380
    16d8:	90 91 81 03 	lds	r25, 0x0381
    16dc:	0e 94 43 20 	call	0x4086	; 0x4086 <nrk_wait>
    16e0:	cd cf       	rjmp	.-102    	; 0x167c <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    16e2:	80 91 77 06 	lds	r24, 0x0677
    16e6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    16ea:	c7 01       	movw	r24, r14
    16ec:	b6 01       	movw	r22, r12
    16ee:	00 90 77 06 	lds	r0, 0x0677
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <bmac_nw_task+0xaa>
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	d2 f7       	brpl	.-12     	; 0x16f4 <bmac_nw_task+0xa2>
    1700:	0e 94 65 1c 	call	0x38ca	; 0x38ca <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	00 90 77 06 	lds	r0, 0x0677
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <bmac_nw_task+0xc4>
    170e:	b6 95       	lsr	r27
    1710:	a7 95       	ror	r26
    1712:	97 95       	ror	r25
    1714:	87 95       	ror	r24
    1716:	0a 94       	dec	r0
    1718:	d2 f7       	brpl	.-12     	; 0x170e <bmac_nw_task+0xbc>
    171a:	80 ff       	sbrs	r24, 0
    171c:	e2 cf       	rjmp	.-60     	; 0x16e2 <bmac_nw_task+0x90>
    171e:	ae cf       	rjmp	.-164    	; 0x167c <bmac_nw_task+0x2a>

00001720 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1720:	69 e2       	ldi	r22, 0x29	; 41
    1722:	7b e0       	ldi	r23, 0x0B	; 11
    1724:	8c e0       	ldi	r24, 0x0C	; 12
    1726:	94 e0       	ldi	r25, 0x04	; 4
    1728:	0e 94 4f 2b 	call	0x569e	; 0x569e <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	6c e8       	ldi	r22, 0x8C	; 140
    1732:	73 e0       	ldi	r23, 0x03	; 3
    1734:	8c e0       	ldi	r24, 0x0C	; 12
    1736:	94 e0       	ldi	r25, 0x04	; 4
    1738:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    173c:	ec e0       	ldi	r30, 0x0C	; 12
    173e:	f4 e0       	ldi	r31, 0x04	; 4
    1740:	84 e1       	ldi	r24, 0x14	; 20
    1742:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    1748:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    174a:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    174c:	13 86       	std	Z+11, r1	; 0x0b
    174e:	14 86       	std	Z+12, r1	; 0x0c
    1750:	15 86       	std	Z+13, r1	; 0x0d
    1752:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	9d e2       	ldi	r25, 0x2D	; 45
    1758:	a1 e3       	ldi	r26, 0x31	; 49
    175a:	b1 e0       	ldi	r27, 0x01	; 1
    175c:	87 87       	std	Z+15, r24	; 0x0f
    175e:	90 8b       	std	Z+16, r25	; 0x10
    1760:	a1 8b       	std	Z+17, r26	; 0x11
    1762:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    1764:	13 8a       	std	Z+19, r1	; 0x13
    1766:	14 8a       	std	Z+20, r1	; 0x14
    1768:	15 8a       	std	Z+21, r1	; 0x15
    176a:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    176c:	17 8a       	std	Z+23, r1	; 0x17
    176e:	10 8e       	std	Z+24, r1	; 0x18
    1770:	11 8e       	std	Z+25, r1	; 0x19
    1772:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    1774:	13 8e       	std	Z+27, r1	; 0x1b
    1776:	14 8e       	std	Z+28, r1	; 0x1c
    1778:	15 8e       	std	Z+29, r1	; 0x1d
    177a:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    177c:	17 8e       	std	Z+31, r1	; 0x1f
    177e:	10 a2       	std	Z+32, r1	; 0x20
    1780:	11 a2       	std	Z+33, r1	; 0x21
    1782:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    1784:	cf 01       	movw	r24, r30
    1786:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <nrk_activate_task>

0000178a <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    178a:	90 91 41 01 	lds	r25, 0x0141
    178e:	9f 71       	andi	r25, 0x1F	; 31
    1790:	9f 31       	cpi	r25, 0x1F	; 31
    1792:	d9 f3       	breq	.-10     	; 0x178a <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1794:	80 93 42 01 	sts	0x0142, r24
    1798:	08 95       	ret

0000179a <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 a3 09 	sts	0x09A3, r24
    17a0:	08 95       	ret

000017a2 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    17a2:	10 92 a3 09 	sts	0x09A3, r1
    17a6:	08 95       	ret

000017a8 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    17a8:	80 91 41 01 	lds	r24, 0x0141
    17ac:	8f 71       	andi	r24, 0x1F	; 31
    17ae:	8f 31       	cpi	r24, 0x1F	; 31
    17b0:	d9 f3       	breq	.-10     	; 0x17a8 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    17b2:	80 91 41 01 	lds	r24, 0x0141
    17b6:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    17b8:	e1 f0       	breq	.+56     	; 0x17f2 <rf_power_down+0x4a>
    17ba:	8f 30       	cpi	r24, 0x0F	; 15
    17bc:	d1 f0       	breq	.+52     	; 0x17f2 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    17be:	80 91 41 01 	lds	r24, 0x0141
    17c2:	8f 71       	andi	r24, 0x1F	; 31
    17c4:	88 30       	cpi	r24, 0x08	; 8
    17c6:	31 f4       	brne	.+12     	; 0x17d4 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    17c8:	80 91 39 01 	lds	r24, 0x0139
    17cc:	82 60       	ori	r24, 0x02	; 2
    17ce:	80 93 39 01 	sts	0x0139, r24
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    17d4:	88 e0       	ldi	r24, 0x08	; 8
    17d6:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    17da:	80 91 41 01 	lds	r24, 0x0141
    17de:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	d9 f7       	brne	.-10     	; 0x17da <rf_power_down+0x32>
    17e4:	f1 cf       	rjmp	.-30     	; 0x17c8 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    17e6:	8f 30       	cpi	r24, 0x0F	; 15
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    17ea:	80 91 41 01 	lds	r24, 0x0141
    17ee:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    17f0:	d1 f7       	brne	.-12     	; 0x17e6 <rf_power_down+0x3e>
    17f2:	08 95       	ret

000017f4 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    17f4:	80 91 41 01 	lds	r24, 0x0141
    17f8:	8f 71       	andi	r24, 0x1F	; 31
    17fa:	8f 31       	cpi	r24, 0x1F	; 31
    17fc:	d9 f3       	breq	.-10     	; 0x17f4 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    17fe:	80 91 41 01 	lds	r24, 0x0141
    1802:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1804:	11 f0       	breq	.+4      	; 0x180a <rf_power_up+0x16>
    1806:	8f 30       	cpi	r24, 0x0F	; 15
    1808:	51 f4       	brne	.+20     	; 0x181e <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    180a:	80 91 39 01 	lds	r24, 0x0139
    180e:	8d 7f       	andi	r24, 0xFD	; 253
    1810:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1814:	80 91 41 01 	lds	r24, 0x0141
    1818:	8f 71       	andi	r24, 0x1F	; 31
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	d9 f7       	brne	.-10     	; 0x1814 <rf_power_up+0x20>
    181e:	08 95       	ret

00001820 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1820:	e5 e4       	ldi	r30, 0x45	; 69
    1822:	f1 e0       	ldi	r31, 0x01	; 1
    1824:	90 81       	ld	r25, Z
    1826:	90 7f       	andi	r25, 0xF0	; 240
    1828:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    182a:	90 81       	ld	r25, Z
    182c:	8f 70       	andi	r24, 0x0F	; 15
    182e:	98 2b       	or	r25, r24
    1830:	90 83       	st	Z, r25
    1832:	08 95       	ret

00001834 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1834:	e7 e5       	ldi	r30, 0x57	; 87
    1836:	f1 e0       	ldi	r31, 0x01	; 1
    1838:	80 81       	ld	r24, Z
    183a:	8d 7f       	andi	r24, 0xFD	; 253
    183c:	80 83       	st	Z, r24
    183e:	08 95       	ret

00001840 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    1840:	e7 e5       	ldi	r30, 0x57	; 87
    1842:	f1 e0       	ldi	r31, 0x01	; 1
    1844:	80 81       	ld	r24, Z
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	80 83       	st	Z, r24
    184a:	08 95       	ret

0000184c <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    184c:	ee e6       	ldi	r30, 0x6E	; 110
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	80 81       	ld	r24, Z
    1852:	8f 7e       	andi	r24, 0xEF	; 239
    1854:	80 83       	st	Z, r24
    1856:	08 95       	ret

00001858 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1858:	ee e6       	ldi	r30, 0x6E	; 110
    185a:	f1 e0       	ldi	r31, 0x01	; 1
    185c:	80 81       	ld	r24, Z
    185e:	80 61       	ori	r24, 0x10	; 16
    1860:	80 83       	st	Z, r24
    1862:	08 95       	ret

00001864 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1864:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1868:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    186c:	90 93 ad 09 	sts	0x09AD, r25
    1870:	80 93 ac 09 	sts	0x09AC, r24
    1874:	08 95       	ret

00001876 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1876:	90 93 a7 09 	sts	0x09A7, r25
    187a:	80 93 a6 09 	sts	0x09A6, r24
	PHY_CC_CCA &= ~(0x1F);
    187e:	e8 e4       	ldi	r30, 0x48	; 72
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	80 81       	ld	r24, Z
    1884:	80 7e       	andi	r24, 0xE0	; 224
    1886:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1888:	80 81       	ld	r24, Z
    188a:	68 2b       	or	r22, r24
    188c:	60 83       	st	Z, r22
    188e:	08 95       	ret

00001890 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1890:	90 93 32 04 	sts	0x0432, r25
    1894:	80 93 31 04 	sts	0x0431, r24
    1898:	08 95       	ret

0000189a <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    189a:	90 93 30 04 	sts	0x0430, r25
    189e:	80 93 2f 04 	sts	0x042F, r24
    18a2:	08 95       	ret

000018a4 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	fc 01       	movw	r30, r24
    18ae:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    18b6:	80 ec       	ldi	r24, 0xC0	; 192
    18b8:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    18bc:	60 62       	ori	r22, 0x20	; 32
    18be:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    18c2:	85 ec       	ldi	r24, 0xC5	; 197
    18c4:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    18c8:	87 ea       	ldi	r24, 0xA7	; 167
    18ca:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    18ce:	80 e8       	ldi	r24, 0x80	; 128
    18d0:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    18d4:	20 93 60 01 	sts	0x0160, r18
    18d8:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    18dc:	40 93 62 01 	sts	0x0162, r20
    18e0:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    18e4:	c6 e4       	ldi	r28, 0x46	; 70
    18e6:	d1 e0       	ldi	r29, 0x01	; 1
    18e8:	08 81       	ld	r16, Y
    18ea:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    18ec:	98 81       	ld	r25, Y
    18ee:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    18f0:	30 2f       	mov	r19, r16
    18f2:	32 95       	swap	r19
    18f4:	36 95       	lsr	r19
    18f6:	37 70       	andi	r19, 0x07	; 7
    18f8:	60 e4       	ldi	r22, 0x40	; 64
    18fa:	36 9f       	mul	r19, r22
    18fc:	80 01       	movw	r16, r0
    18fe:	11 24       	eor	r1, r1
    1900:	22 95       	swap	r18
    1902:	26 95       	lsr	r18
    1904:	23 70       	andi	r18, 0x03	; 3
    1906:	62 2f       	mov	r22, r18
    1908:	60 2b       	or	r22, r16
    190a:	82 95       	swap	r24
    190c:	86 95       	lsr	r24
    190e:	83 70       	andi	r24, 0x03	; 3
    1910:	70 e1       	ldi	r23, 0x10	; 16
    1912:	87 9f       	mul	r24, r23
    1914:	90 01       	movw	r18, r0
    1916:	11 24       	eor	r1, r1
    1918:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    191a:	92 95       	swap	r25
    191c:	96 95       	lsr	r25
    191e:	93 70       	andi	r25, 0x03	; 3
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	98 9f       	mul	r25, r24
    1924:	b0 01       	movw	r22, r0
    1926:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1928:	62 2b       	or	r22, r18
    192a:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    192e:	88 81       	ld	r24, Y
    1930:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1932:	92 95       	swap	r25
    1934:	96 95       	lsr	r25
    1936:	93 70       	andi	r25, 0x03	; 3
    1938:	39 2f       	mov	r19, r25
    193a:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    193c:	98 2f       	mov	r25, r24
    193e:	92 95       	swap	r25
    1940:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1942:	93 2b       	or	r25, r19
    1944:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1948:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1952:	c6 ea       	ldi	r28, 0xA6	; 166
    1954:	d9 e0       	ldi	r29, 0x09	; 9
    1956:	f9 83       	std	Y+1, r31	; 0x01
    1958:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    195a:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    195c:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    195e:	5d 83       	std	Y+5, r21	; 0x05
    1960:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    1962:	bf 83       	std	Y+7, r27	; 0x07
    1964:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1966:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 93 c8 09 	sts	0x09C8, r24
	rx_ready = 0;
    196e:	10 92 e7 09 	sts	0x09E7, r1
	tx_done = 0;
    1972:	10 92 b7 09 	sts	0x09B7, r1

	use_glossy = 0;
    1976:	10 92 a3 09 	sts	0x09A3, r1

} // rf_init() 
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1984:	86 e1       	ldi	r24, 0x16	; 22
    1986:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <rf_cmd>

0000198a <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    198a:	86 e1       	ldi	r24, 0x16	; 22
    198c:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <rf_cmd>

00001990 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1990:	88 e0       	ldi	r24, 0x08	; 8
    1992:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>
	rx_ready = 0;
    1996:	10 92 e7 09 	sts	0x09E7, r1
    199a:	08 95       	ret

0000199c <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    199c:	3f 92       	push	r3
    199e:	4f 92       	push	r4
    19a0:	5f 92       	push	r5
    19a2:	6f 92       	push	r6
    19a4:	7f 92       	push	r7
    19a6:	8f 92       	push	r8
    19a8:	9f 92       	push	r9
    19aa:	af 92       	push	r10
    19ac:	bf 92       	push	r11
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    19c0:	80 91 c8 09 	lds	r24, 0x09C8
    19c4:	81 11       	cpse	r24, r1
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	26 c1       	rjmp	.+588    	; 0x1c18 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    19cc:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    19ce:	80 91 a8 09 	lds	r24, 0x09A8
    19d2:	8f 5f       	subi	r24, 0xFF	; 255
    19d4:	80 93 a8 09 	sts	0x09A8, r24
	machead->fcf = fcf;
    19d8:	90 91 81 01 	lds	r25, 0x0181
    19dc:	90 7e       	andi	r25, 0xE0	; 224
    19de:	91 60       	ori	r25, 0x01	; 1
    19e0:	20 fb       	bst	r18, 0
    19e2:	95 f9       	bld	r25, 5
    19e4:	9f 73       	andi	r25, 0x3F	; 63
    19e6:	90 64       	ori	r25, 0x40	; 64
    19e8:	90 93 81 01 	sts	0x0181, r25
    19ec:	88 e8       	ldi	r24, 0x88	; 136
    19ee:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    19f2:	80 91 a3 09 	lds	r24, 0x09A3
    19f6:	88 23       	and	r24, r24
    19f8:	d1 f0       	breq	.+52     	; 0x1a2e <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    1a00:	8a ea       	ldi	r24, 0xAA	; 170
    1a02:	9a ea       	ldi	r25, 0xAA	; 170
    1a04:	90 93 89 01 	sts	0x0189, r25
    1a08:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f ef       	ldi	r25, 0xFF	; 255
    1a10:	90 93 87 01 	sts	0x0187, r25
    1a14:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1a18:	20 91 63 01 	lds	r18, 0x0163
    1a1c:	80 91 62 01 	lds	r24, 0x0162
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	92 2b       	or	r25, r18
    1a24:	90 93 85 01 	sts	0x0185, r25
    1a28:	80 93 84 01 	sts	0x0184, r24
    1a2c:	1e c0       	rjmp	.+60     	; 0x1a6a <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    1a2e:	80 91 a8 09 	lds	r24, 0x09A8
    1a32:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1a36:	80 91 61 01 	lds	r24, 0x0161
    1a3a:	20 91 60 01 	lds	r18, 0x0160
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	38 2b       	or	r19, r24
    1a42:	30 93 89 01 	sts	0x0189, r19
    1a46:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    1a4a:	88 81       	ld	r24, Y
    1a4c:	99 81       	ldd	r25, Y+1	; 0x01
    1a4e:	90 93 87 01 	sts	0x0187, r25
    1a52:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1a56:	80 91 63 01 	lds	r24, 0x0163
    1a5a:	20 91 62 01 	lds	r18, 0x0162
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	38 2b       	or	r19, r24
    1a62:	30 93 85 01 	sts	0x0185, r19
    1a66:	20 93 84 01 	sts	0x0184, r18
    1a6a:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1a6c:	4a 81       	ldd	r20, Y+2	; 0x02
    1a6e:	55 27       	eor	r21, r21
    1a70:	47 fd       	sbrc	r20, 7
    1a72:	50 95       	com	r21
    1a74:	6b 81       	ldd	r22, Y+3	; 0x03
    1a76:	7c 81       	ldd	r23, Y+4	; 0x04
    1a78:	8a e8       	ldi	r24, 0x8A	; 138
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	85 5f       	subi	r24, 0xF5	; 245
    1a84:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1a88:	80 91 41 01 	lds	r24, 0x0141
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	9f 71       	andi	r25, 0x1F	; 31
    1a90:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1a96:	92 30       	cpi	r25, 0x02	; 2
    1a98:	b8 f3       	brcs	.-18     	; 0x1a88 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1a9a:	91 e1       	ldi	r25, 0x11	; 17
    1a9c:	39 16       	cp	r3, r25
    1a9e:	a1 f3       	breq	.-24     	; 0x1a88 <rf_tx_packet_repeat+0xec>
    1aa0:	92 e1       	ldi	r25, 0x12	; 18
    1aa2:	39 16       	cp	r3, r25
    1aa4:	89 f3       	breq	.-30     	; 0x1a88 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1aa6:	9f e1       	ldi	r25, 0x1F	; 31
    1aa8:	39 16       	cp	r3, r25
    1aaa:	71 f3       	breq	.-36     	; 0x1a88 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1aac:	98 ef       	ldi	r25, 0xF8	; 248
    1aae:	93 0d       	add	r25, r3
    1ab0:	92 30       	cpi	r25, 0x02	; 2
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <rf_tx_packet_repeat+0x120>
    1ab4:	8f 70       	andi	r24, 0x0F	; 15
    1ab6:	86 30       	cpi	r24, 0x06	; 6
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <rf_tx_packet_repeat+0x120>
    1aba:	86 cf       	rjmp	.-244    	; 0x19c8 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    1abc:	86 e1       	ldi	r24, 0x16	; 22
    1abe:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	0a c0       	rjmp	.+20     	; 0x1adc <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1ac8:	89 e0       	ldi	r24, 0x09	; 9
    1aca:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>
	if(pRTI->ackRequest)
    1ace:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad0:	88 23       	and	r24, r24
    1ad2:	91 f0       	breq	.+36     	; 0x1af8 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    1ad4:	89 e1       	ldi	r24, 0x19	; 25
    1ad6:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>
    1ada:	0e c0       	rjmp	.+28     	; 0x1af8 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1adc:	80 91 48 01 	lds	r24, 0x0148
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1ae6:	80 91 41 01 	lds	r24, 0x0141
    1aea:	87 ff       	sbrs	r24, 7
    1aec:	fc cf       	rjmp	.-8      	; 0x1ae6 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1aee:	80 91 41 01 	lds	r24, 0x0141
    1af2:	86 ff       	sbrs	r24, 6
    1af4:	69 cf       	rjmp	.-302    	; 0x19c8 <rf_tx_packet_repeat+0x2c>
    1af6:	e8 cf       	rjmp	.-48     	; 0x1ac8 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    1af8:	61 14       	cp	r6, r1
    1afa:	71 04       	cpc	r7, r1
    1afc:	a9 f1       	breq	.+106    	; 0x1b68 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    1afe:	8f ea       	ldi	r24, 0xAF	; 175
    1b00:	99 e0       	ldi	r25, 0x09	; 9
    1b02:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>
		target_t.secs = curr_t.secs;
    1b06:	80 91 af 09 	lds	r24, 0x09AF
    1b0a:	90 91 b0 09 	lds	r25, 0x09B0
    1b0e:	a0 91 b1 09 	lds	r26, 0x09B1
    1b12:	b0 91 b2 09 	lds	r27, 0x09B2
    1b16:	80 93 c9 09 	sts	0x09C9, r24
    1b1a:	90 93 ca 09 	sts	0x09CA, r25
    1b1e:	a0 93 cb 09 	sts	0x09CB, r26
    1b22:	b0 93 cc 09 	sts	0x09CC, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    1b26:	d3 01       	movw	r26, r6
    1b28:	20 e4       	ldi	r18, 0x40	; 64
    1b2a:	32 e4       	ldi	r19, 0x42	; 66
    1b2c:	4f e0       	ldi	r20, 0x0F	; 15
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    1b34:	00 91 b3 09 	lds	r16, 0x09B3
    1b38:	10 91 b4 09 	lds	r17, 0x09B4
    1b3c:	20 91 b5 09 	lds	r18, 0x09B5
    1b40:	30 91 b6 09 	lds	r19, 0x09B6
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	80 0f       	add	r24, r16
    1b4a:	91 1f       	adc	r25, r17
    1b4c:	a2 1f       	adc	r26, r18
    1b4e:	b3 1f       	adc	r27, r19
    1b50:	80 93 cd 09 	sts	0x09CD, r24
    1b54:	90 93 ce 09 	sts	0x09CE, r25
    1b58:	a0 93 cf 09 	sts	0x09CF, r26
    1b5c:	b0 93 d0 09 	sts	0x09D0, r27
		nrk_time_compact_nanos(&target_t);
    1b60:	89 ec       	ldi	r24, 0xC9	; 201
    1b62:	99 e0       	ldi	r25, 0x09	; 9
    1b64:	0e 94 df 21 	call	0x43be	; 0x43be <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    1b68:	10 92 b7 09 	sts	0x09B7, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    1b72:	41 2c       	mov	r4, r1
    1b74:	51 2c       	mov	r5, r1
    1b76:	80 91 b7 09 	lds	r24, 0x09B7
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <rf_tx_packet_repeat+0x1f2>
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	48 1a       	sub	r4, r24
    1b82:	58 0a       	sbc	r5, r24
    1b84:	98 ee       	ldi	r25, 0xE8	; 232
    1b86:	49 16       	cp	r4, r25
    1b88:	9d ef       	ldi	r25, 0xFD	; 253
    1b8a:	59 06       	cpc	r5, r25
    1b8c:	a1 f7       	brne	.-24     	; 0x1b76 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    1b8e:	61 14       	cp	r6, r1
    1b90:	71 04       	cpc	r7, r1
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1b94:	8e 81       	ldd	r24, Y+6	; 0x06
    1b96:	81 11       	cpse	r24, r1
    1b98:	2d c0       	rjmp	.+90     	; 0x1bf4 <rf_tx_packet_repeat+0x258>
    1b9a:	32 c0       	rjmp	.+100    	; 0x1c00 <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    1b9c:	8f ea       	ldi	r24, 0xAF	; 175
    1b9e:	99 e0       	ldi	r25, 0x09	; 9
    1ba0:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    1ba4:	80 90 af 09 	lds	r8, 0x09AF
    1ba8:	90 90 b0 09 	lds	r9, 0x09B0
    1bac:	a0 90 b1 09 	lds	r10, 0x09B1
    1bb0:	b0 90 b2 09 	lds	r11, 0x09B2
    1bb4:	c0 90 b3 09 	lds	r12, 0x09B3
    1bb8:	d0 90 b4 09 	lds	r13, 0x09B4
    1bbc:	e0 90 b5 09 	lds	r14, 0x09B5
    1bc0:	f0 90 b6 09 	lds	r15, 0x09B6
    1bc4:	00 91 c9 09 	lds	r16, 0x09C9
    1bc8:	10 91 ca 09 	lds	r17, 0x09CA
    1bcc:	20 91 cb 09 	lds	r18, 0x09CB
    1bd0:	30 91 cc 09 	lds	r19, 0x09CC
    1bd4:	40 91 cd 09 	lds	r20, 0x09CD
    1bd8:	50 91 ce 09 	lds	r21, 0x09CE
    1bdc:	60 91 cf 09 	lds	r22, 0x09CF
    1be0:	70 91 d0 09 	lds	r23, 0x09D0
    1be4:	88 ee       	ldi	r24, 0xE8	; 232
    1be6:	99 e0       	ldi	r25, 0x09	; 9
    1be8:	0e 94 53 21 	call	0x42a6	; 0x42a6 <nrk_time_sub>
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <rf_tx_packet_repeat+0x256>
    1bf0:	bb cf       	rjmp	.-138    	; 0x1b68 <rf_tx_packet_repeat+0x1cc>
    1bf2:	d0 cf       	rjmp	.-96     	; 0x1b94 <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1bf4:	80 91 42 01 	lds	r24, 0x0142
    1bf8:	82 95       	swap	r24
    1bfa:	86 95       	lsr	r24
    1bfc:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1bfe:	39 f4       	brne	.+14     	; 0x1c0e <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1c00:	88 ee       	ldi	r24, 0xE8	; 232
    1c02:	48 16       	cp	r4, r24
    1c04:	8d ef       	ldi	r24, 0xFD	; 253
    1c06:	58 06       	cpc	r5, r24
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1c0a:	c1 e0       	ldi	r28, 0x01	; 1
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <rf_tx_packet_repeat+0x274>
    1c0e:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    1c10:	83 2d       	mov	r24, r3
    1c12:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1c16:	8c 2f       	mov	r24, r28
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	bf 90       	pop	r11
    1c2a:	af 90       	pop	r10
    1c2c:	9f 90       	pop	r9
    1c2e:	8f 90       	pop	r8
    1c30:	7f 90       	pop	r7
    1c32:	6f 90       	pop	r6
    1c34:	5f 90       	pop	r5
    1c36:	4f 90       	pop	r4
    1c38:	3f 90       	pop	r3
    1c3a:	08 95       	ret

00001c3c <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <rf_tx_packet_repeat>

00001c44 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    1c48:	80 91 c8 09 	lds	r24, 0x09C8
    1c4c:	88 23       	and	r24, r24
    1c4e:	41 f1       	breq	.+80     	; 0x1ca0 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1c50:	80 91 41 01 	lds	r24, 0x0141
    1c54:	c8 2f       	mov	r28, r24
    1c56:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1c5c:	92 30       	cpi	r25, 0x02	; 2
    1c5e:	c0 f3       	brcs	.-16     	; 0x1c50 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1c60:	c1 31       	cpi	r28, 0x11	; 17
    1c62:	b1 f3       	breq	.-20     	; 0x1c50 <rf_cca_check+0xc>
    1c64:	c2 31       	cpi	r28, 0x12	; 18
    1c66:	a1 f3       	breq	.-24     	; 0x1c50 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1c68:	cf 31       	cpi	r28, 0x1F	; 31
    1c6a:	91 f3       	breq	.-28     	; 0x1c50 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1c6c:	c8 30       	cpi	r28, 0x08	; 8
    1c6e:	19 f0       	breq	.+6      	; 0x1c76 <rf_cca_check+0x32>
    1c70:	8f 70       	andi	r24, 0x0F	; 15
    1c72:	86 30       	cpi	r24, 0x06	; 6
    1c74:	a9 f4       	brne	.+42     	; 0x1ca0 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1c76:	86 e1       	ldi	r24, 0x16	; 22
    1c78:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1c7c:	80 91 48 01 	lds	r24, 0x0148
    1c80:	80 68       	ori	r24, 0x80	; 128
    1c82:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1c86:	80 91 41 01 	lds	r24, 0x0141
    1c8a:	87 ff       	sbrs	r24, 7
    1c8c:	fc cf       	rjmp	.-8      	; 0x1c86 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1c8e:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1c92:	8c 2f       	mov	r24, r28
    1c94:	0e 94 c5 0b 	call	0x178a	; 0x178a <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1c98:	d6 fb       	bst	r29, 6
    1c9a:	88 27       	eor	r24, r24
    1c9c:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    1ca8:	80 91 c8 09 	lds	r24, 0x09C8
    1cac:	88 23       	and	r24, r24
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <rf_rx_packet_nonblock+0xa>
    1cb0:	a0 c0       	rjmp	.+320    	; 0x1df2 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    1cb2:	80 91 e7 09 	lds	r24, 0x09E7
    1cb6:	88 23       	and	r24, r24
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <rf_rx_packet_nonblock+0x14>
    1cba:	99 c0       	rjmp	.+306    	; 0x1dee <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1cbc:	80 91 7b 01 	lds	r24, 0x017B
    1cc0:	e0 91 a6 09 	lds	r30, 0x09A6
    1cc4:	f0 91 a7 09 	lds	r31, 0x09A7
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 97       	sbiw	r24, 0x02	; 2
    1ccc:	24 81       	ldd	r18, Z+4	; 0x04
    1cce:	33 27       	eor	r19, r19
    1cd0:	27 fd       	sbrc	r18, 7
    1cd2:	30 95       	com	r19
    1cd4:	28 17       	cp	r18, r24
    1cd6:	39 07       	cpc	r19, r25
    1cd8:	0c f4       	brge	.+2      	; 0x1cdc <rf_rx_packet_nonblock+0x34>
    1cda:	8b c0       	rjmp	.+278    	; 0x1df2 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1cdc:	e0 91 a6 09 	lds	r30, 0x09A6
    1ce0:	f0 91 a7 09 	lds	r31, 0x09A7
    1ce4:	80 91 82 01 	lds	r24, 0x0182
    1ce8:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1cea:	e0 91 a6 09 	lds	r30, 0x09A6
    1cee:	f0 91 a7 09 	lds	r31, 0x09A7
    1cf2:	80 91 87 01 	lds	r24, 0x0187
    1cf6:	90 91 88 01 	lds	r25, 0x0188
    1cfa:	92 83       	std	Z+2, r25	; 0x02
    1cfc:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1cfe:	e0 91 a6 09 	lds	r30, 0x09A6
    1d02:	f0 91 a7 09 	lds	r31, 0x09A7
    1d06:	80 91 7b 01 	lds	r24, 0x017B
    1d0a:	8b 50       	subi	r24, 0x0B	; 11
    1d0c:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1d0e:	a0 91 a6 09 	lds	r26, 0x09A6
    1d12:	b0 91 a7 09 	lds	r27, 0x09A7
    1d16:	e0 91 a6 09 	lds	r30, 0x09A6
    1d1a:	f0 91 a7 09 	lds	r31, 0x09A7
    1d1e:	13 96       	adiw	r26, 0x03	; 3
    1d20:	9c 91       	ld	r25, X
    1d22:	84 81       	ldd	r24, Z+4	; 0x04
    1d24:	89 17       	cp	r24, r25
    1d26:	3c f0       	brlt	.+14     	; 0x1d36 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    1d28:	e0 91 a6 09 	lds	r30, 0x09A6
    1d2c:	f0 91 a7 09 	lds	r31, 0x09A7
    1d30:	83 81       	ldd	r24, Z+3	; 0x03
    1d32:	87 ff       	sbrs	r24, 7
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    1d36:	10 92 e7 09 	sts	0x09E7, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1d3a:	80 91 4c 01 	lds	r24, 0x014C
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1d44:	80 91 4c 01 	lds	r24, 0x014C
    1d48:	80 68       	ori	r24, 0x80	; 128
    1d4a:	80 93 4c 01 	sts	0x014C, r24
    1d4e:	51 c0       	rjmp	.+162    	; 0x1df2 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    1d50:	a0 91 a6 09 	lds	r26, 0x09A6
    1d54:	b0 91 a7 09 	lds	r27, 0x09A7
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1d58:	e0 91 a6 09 	lds	r30, 0x09A6
    1d5c:	f0 91 a7 09 	lds	r31, 0x09A7
    1d60:	13 96       	adiw	r26, 0x03	; 3
    1d62:	4c 91       	ld	r20, X
    1d64:	55 27       	eor	r21, r21
    1d66:	47 fd       	sbrc	r20, 7
    1d68:	50 95       	com	r21
    1d6a:	69 e8       	ldi	r22, 0x89	; 137
    1d6c:	71 e0       	ldi	r23, 0x01	; 1
    1d6e:	85 81       	ldd	r24, Z+5	; 0x05
    1d70:	96 81       	ldd	r25, Z+6	; 0x06
    1d72:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1d76:	e0 91 a6 09 	lds	r30, 0x09A6
    1d7a:	f0 91 a7 09 	lds	r31, 0x09A7
    1d7e:	80 91 80 01 	lds	r24, 0x0180
    1d82:	85 fb       	bst	r24, 5
    1d84:	88 27       	eor	r24, r24
    1d86:	80 f9       	bld	r24, 0
    1d88:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1d8a:	e0 91 a6 09 	lds	r30, 0x09A6
    1d8e:	f0 91 a7 09 	lds	r31, 0x09A7
    1d92:	80 91 47 01 	lds	r24, 0x0147
    1d96:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1d98:	e0 91 a6 09 	lds	r30, 0x09A6
    1d9c:	f0 91 a7 09 	lds	r31, 0x09A7
    1da0:	80 91 46 01 	lds	r24, 0x0146
    1da4:	86 95       	lsr	r24
    1da6:	86 95       	lsr	r24
    1da8:	86 95       	lsr	r24
    1daa:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1dac:	e0 91 a6 09 	lds	r30, 0x09A6
    1db0:	f0 91 a7 09 	lds	r31, 0x09A7
    1db4:	80 91 47 01 	lds	r24, 0x0147
    1db8:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1dba:	a0 91 a6 09 	lds	r26, 0x09A6
    1dbe:	b0 91 a7 09 	lds	r27, 0x09A7
    1dc2:	e0 91 7b 01 	lds	r30, 0x017B
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	e0 58       	subi	r30, 0x80	; 128
    1dca:	fe 4f       	sbci	r31, 0xFE	; 254
    1dcc:	80 81       	ld	r24, Z
    1dce:	1b 96       	adiw	r26, 0x0b	; 11
    1dd0:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    1dd2:	10 92 e7 09 	sts	0x09E7, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1dd6:	80 91 4c 01 	lds	r24, 0x014C
    1dda:	8f 77       	andi	r24, 0x7F	; 127
    1ddc:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1de0:	80 91 4c 01 	lds	r24, 0x014C
    1de4:	80 68       	ori	r24, 0x80	; 128
    1de6:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1df4:	08 95       	ret

00001df6 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1e02:	80 e8       	ldi	r24, 0x80	; 128
    1e04:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1e08:	8f 91       	pop	r24
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1e14:	1f 92       	push	r1
    1e16:	0f 92       	push	r0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	0f 92       	push	r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 b7 09 	sts	0x09B7, r24
	IRQ_STATUS = (1 << TX_END);
    1e26:	80 e4       	ldi	r24, 0x40	; 64
    1e28:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1e2c:	8f 91       	pop	r24
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1e4a:	8f 91       	pop	r24
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f 90       	pop	r0
    1e52:	1f 90       	pop	r1
    1e54:	18 95       	reti

00001e56 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1e56:	1f 92       	push	r1
    1e58:	0f 92       	push	r0
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	0f 92       	push	r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1e62:	80 e1       	ldi	r24, 0x10	; 16
    1e64:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1e68:	8f 91       	pop	r24
    1e6a:	0f 90       	pop	r0
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	0f 90       	pop	r0
    1e70:	1f 90       	pop	r1
    1e72:	18 95       	reti

00001e74 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1e74:	1f 92       	push	r1
    1e76:	0f 92       	push	r0
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	0f 92       	push	r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	0b b6       	in	r0, 0x3b	; 59
    1e80:	0f 92       	push	r0
    1e82:	2f 93       	push	r18
    1e84:	3f 93       	push	r19
    1e86:	4f 93       	push	r20
    1e88:	5f 93       	push	r21
    1e8a:	6f 93       	push	r22
    1e8c:	7f 93       	push	r23
    1e8e:	8f 93       	push	r24
    1e90:	9f 93       	push	r25
    1e92:	af 93       	push	r26
    1e94:	bf 93       	push	r27
    1e96:	ef 93       	push	r30
    1e98:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1e9a:	84 e0       	ldi	r24, 0x04	; 4
    1e9c:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1ea0:	e0 91 31 04 	lds	r30, 0x0431
    1ea4:	f0 91 32 04 	lds	r31, 0x0432
    1ea8:	30 97       	sbiw	r30, 0x00	; 0
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <__vector_59+0x3a>
		rx_start_func();
    1eac:	09 95       	icall

	return;
}
    1eae:	ff 91       	pop	r31
    1eb0:	ef 91       	pop	r30
    1eb2:	bf 91       	pop	r27
    1eb4:	af 91       	pop	r26
    1eb6:	9f 91       	pop	r25
    1eb8:	8f 91       	pop	r24
    1eba:	7f 91       	pop	r23
    1ebc:	6f 91       	pop	r22
    1ebe:	5f 91       	pop	r21
    1ec0:	4f 91       	pop	r20
    1ec2:	3f 91       	pop	r19
    1ec4:	2f 91       	pop	r18
    1ec6:	0f 90       	pop	r0
    1ec8:	0b be       	out	0x3b, r0	; 59
    1eca:	0f 90       	pop	r0
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	0f 90       	pop	r0
    1ed0:	1f 90       	pop	r1
    1ed2:	18 95       	reti

00001ed4 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1ed4:	1f 92       	push	r1
    1ed6:	0f 92       	push	r0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	0f 92       	push	r0
    1edc:	11 24       	eor	r1, r1
    1ede:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1ee6:	8f 91       	pop	r24
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1ef2:	1f 92       	push	r1
    1ef4:	0f 92       	push	r0
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	0f 92       	push	r0
    1efa:	11 24       	eor	r1, r1
    1efc:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1f04:	8f 91       	pop	r24
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1f10:	e9 e4       	ldi	r30, 0x49	; 73
    1f12:	f1 e0       	ldi	r31, 0x01	; 1
    1f14:	90 81       	ld	r25, Z
    1f16:	90 7f       	andi	r25, 0xF0	; 240
    1f18:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1f1a:	90 81       	ld	r25, Z
    1f1c:	8f 70       	andi	r24, 0x0F	; 15
    1f1e:	98 2b       	or	r25, r24
    1f20:	90 83       	st	Z, r25
    1f22:	08 95       	ret

00001f24 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	08 95       	ret

00001f28 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1f28:	08 95       	ret

00001f2a <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1f2a:	08 95       	ret

00001f2c <rf_security_disable>:
}



void rf_security_disable()
{
    1f2c:	08 95       	ret

00001f2e <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	08 95       	ret

00001f32 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1f32:	80 91 a1 09 	lds	r24, 0x09A1
    1f36:	90 91 a2 09 	lds	r25, 0x09A2
    1f3a:	08 95       	ret

00001f3c <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	08 95       	ret

00001f40 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    1f40:	08 95       	ret

00001f42 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	08 95       	ret

00001f46 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	08 95       	ret

00001f4a <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	08 95       	ret

00001f4e <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    1f4e:	08 95       	ret

00001f50 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    1f50:	08 95       	ret

00001f52 <rf_test_mode>:
}



void rf_test_mode()
{
    1f52:	08 95       	ret

00001f54 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    1f54:	08 95       	ret

00001f56 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    1f56:	08 95       	ret

00001f58 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1f58:	08 95       	ret

00001f5a <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1f5a:	08 95       	ret

00001f5c <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1f5c:	08 95       	ret

00001f5e <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    1f5e:	e7 e3       	ldi	r30, 0x37	; 55
    1f60:	f1 e0       	ldi	r31, 0x01	; 1
    1f62:	80 81       	ld	r24, Z
    1f64:	83 60       	ori	r24, 0x03	; 3
    1f66:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1f68:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    1f6a:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1f6c:	8d b1       	in	r24, 0x0d	; 13
    1f6e:	80 6e       	ori	r24, 0xE0	; 224
    1f70:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1f72:	8e b1       	in	r24, 0x0e	; 14
    1f74:	80 6e       	ori	r24, 0xE0	; 224
    1f76:	8e b9       	out	0x0e, r24	; 14
    1f78:	08 95       	ret

00001f7a <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    1f7a:	e7 e3       	ldi	r30, 0x37	; 55
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	80 81       	ld	r24, Z
    1f80:	83 60       	ori	r24, 0x03	; 3
    1f82:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1f84:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    1f86:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1f88:	8d b1       	in	r24, 0x0d	; 13
    1f8a:	80 6e       	ori	r24, 0xE0	; 224
    1f8c:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1f8e:	8e b1       	in	r24, 0x0e	; 14
    1f90:	80 6e       	ori	r24, 0xE0	; 224
    1f92:	8e b9       	out	0x0e, r24	; 14
    1f94:	08 95       	ret

00001f96 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	27 97       	sbiw	r28, 0x07	; 7
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1fb6:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1fba:	e0 91 a6 09 	lds	r30, 0x09A6
    1fbe:	f0 91 a7 09 	lds	r31, 0x09A7
    1fc2:	c0 80       	ld	r12, Z
    1fc4:	d3 80       	ldd	r13, Z+3	; 0x03
    1fc6:	e5 80       	ldd	r14, Z+5	; 0x05
    1fc8:	f6 80       	ldd	r15, Z+6	; 0x06
    1fca:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1fcc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <rf_rx_packet_nonblock>
	if (err < 1) {
    1fd0:	18 16       	cp	r1, r24
    1fd2:	1c f0       	brlt	.+6      	; 0x1fda <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1fd4:	8b ea       	ldi	r24, 0xAB	; 171
    1fd6:	92 e0       	ldi	r25, 0x02	; 2
    1fd8:	06 c0       	rjmp	.+12     	; 0x1fe6 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1fda:	f7 01       	movw	r30, r14
    1fdc:	10 81       	ld	r17, Z
	if (ttl == 0) {
    1fde:	11 11       	cpse	r17, r1
    1fe0:	07 c0       	rjmp	.+14     	; 0x1ff0 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1fe2:	8a ec       	ldi	r24, 0xCA	; 202
    1fe4:	92 e0       	ldi	r25, 0x02	; 2
    1fe6:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <puts>
#endif
		nrk_int_enable();
    1fea:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
		return;
    1fee:	31 c0       	rjmp	.+98     	; 0x2052 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    1ff0:	15 30       	cpi	r17, 0x05	; 5
    1ff2:	21 f4       	brne	.+8      	; 0x1ffc <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    1ff4:	8a e0       	ldi	r24, 0x0A	; 10
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	9f 93       	push	r25
    2002:	8f 93       	push	r24
    2004:	80 2f       	mov	r24, r16
    2006:	99 27       	eor	r25, r25
    2008:	87 fd       	sbrc	r24, 7
    200a:	90 95       	com	r25
    200c:	9f 93       	push	r25
    200e:	0f 93       	push	r16
    2010:	1f 92       	push	r1
    2012:	1f 93       	push	r17
    2014:	1f 92       	push	r1
    2016:	cf 92       	push	r12
    2018:	8c ee       	ldi	r24, 0xEC	; 236
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	9f 93       	push	r25
    201e:	8f 93       	push	r24
    2020:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    2024:	fd 82       	std	Y+5, r15	; 0x05
    2026:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    2028:	11 50       	subi	r17, 0x01	; 1
    202a:	f7 01       	movw	r30, r14
    202c:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    202e:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    2030:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    2032:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    2034:	8f ef       	ldi	r24, 0xFF	; 255
    2036:	9f ef       	ldi	r25, 0xFF	; 255
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    203c:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    2040:	ce 01       	movw	r24, r28
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <rf_tx_packet>
#endif
	return;
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
}
    2052:	27 96       	adiw	r28, 0x07	; 7
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    2070:	1f 92       	push	r1
    2072:	0f 92       	push	r0
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	0f 92       	push	r0
    2078:	11 24       	eor	r1, r1
    207a:	0b b6       	in	r0, 0x3b	; 59
    207c:	0f 92       	push	r0
    207e:	2f 93       	push	r18
    2080:	3f 93       	push	r19
    2082:	4f 93       	push	r20
    2084:	5f 93       	push	r21
    2086:	6f 93       	push	r22
    2088:	7f 93       	push	r23
    208a:	8f 93       	push	r24
    208c:	9f 93       	push	r25
    208e:	af 93       	push	r26
    2090:	bf 93       	push	r27
    2092:	ef 93       	push	r30
    2094:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 91 7b 01 	lds	r25, 0x017B
    209c:	89 17       	cp	r24, r25
    209e:	10 f4       	brcc	.+4      	; 0x20a4 <__vector_60+0x34>
    20a0:	8f 5f       	subi	r24, 0xFF	; 255
    20a2:	fa cf       	rjmp	.-12     	; 0x2098 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    20a4:	80 91 46 01 	lds	r24, 0x0146
    20a8:	87 ff       	sbrs	r24, 7
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <__vector_60+0x44>
		rx_ready = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	80 93 e7 09 	sts	0x09E7, r24
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    20b4:	85 e1       	ldi	r24, 0x15	; 21
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    20bc:	88 e0       	ldi	r24, 0x08	; 8
    20be:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    20c2:	80 91 46 01 	lds	r24, 0x0146
    20c6:	87 ff       	sbrs	r24, 7
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    20ca:	80 91 a3 09 	lds	r24, 0x09A3
    20ce:	81 11       	cpse	r24, r1
    20d0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    20d4:	e0 91 2f 04 	lds	r30, 0x042F
    20d8:	f0 91 30 04 	lds	r31, 0x0430
    20dc:	30 97       	sbiw	r30, 0x00	; 0
    20de:	09 f0       	breq	.+2      	; 0x20e2 <__vector_60+0x72>
		rx_end_func();
    20e0:	09 95       	icall

	return;
}
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0b be       	out	0x3b, r0	; 59
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    2108:	a8 eb       	ldi	r26, 0xB8	; 184
    210a:	b9 e0       	ldi	r27, 0x09	; 9
    210c:	fc 01       	movw	r30, r24
    210e:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    2110:	20 81       	ld	r18, Z
    2112:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    2114:	21 91       	ld	r18, Z+
    2116:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    211a:	e8 17       	cp	r30, r24
    211c:	f9 07       	cpc	r31, r25
    211e:	c1 f7       	brne	.-16     	; 0x2110 <aes_setkey+0x8>
    2120:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    2122:	10 92 3e 01 	sts	0x013E, r1
    2126:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    2128:	e1 f7       	brne	.-8      	; 0x2122 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    212a:	80 e8       	ldi	r24, 0x80	; 128
    212c:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    2130:	80 91 3d 01 	lds	r24, 0x013D
    2134:	80 ff       	sbrs	r24, 0
    2136:	fc cf       	rjmp	.-8      	; 0x2130 <aes_setkey+0x28>
    2138:	e1 ed       	ldi	r30, 0xD1	; 209
    213a:	f9 e0       	ldi	r31, 0x09	; 9
    213c:	80 e1       	ldi	r24, 0x10	; 16
    213e:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    2140:	90 91 3f 01 	lds	r25, 0x013F
    2144:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    2146:	8e 13       	cpse	r24, r30
    2148:	fb cf       	rjmp	.-10     	; 0x2140 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    214a:	08 95       	ret

0000214c <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2152:	66 23       	and	r22, r22
    2154:	09 f4       	brne	.+2      	; 0x2158 <aes_encrypt+0xc>
    2156:	45 c0       	rjmp	.+138    	; 0x21e2 <aes_encrypt+0x96>
    2158:	86 2f       	mov	r24, r22
    215a:	8f 70       	andi	r24, 0x0F	; 15
    215c:	09 f0       	breq	.+2      	; 0x2160 <aes_encrypt+0x14>
    215e:	41 c0       	rjmp	.+130    	; 0x21e2 <aes_encrypt+0x96>
    2160:	e8 eb       	ldi	r30, 0xB8	; 184
    2162:	f9 e0       	ldi	r31, 0x09	; 9
    2164:	90 e1       	ldi	r25, 0x10	; 16
    2166:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    2168:	21 91       	ld	r18, Z+
    216a:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    216e:	9e 13       	cpse	r25, r30
    2170:	fb cf       	rjmp	.-10     	; 0x2168 <aes_encrypt+0x1c>
    2172:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2174:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    2176:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2178:	40 e1       	ldi	r20, 0x10	; 16
    217a:	94 9f       	mul	r25, r20
    217c:	90 01       	movw	r18, r0
    217e:	11 24       	eor	r1, r1
    2180:	26 17       	cp	r18, r22
    2182:	37 07       	cpc	r19, r23
    2184:	7c f5       	brge	.+94     	; 0x21e4 <aes_encrypt+0x98>
      if(i==0)
    2186:	91 11       	cpse	r25, r1
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    218a:	10 92 3c 01 	sts	0x013C, r1
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    2190:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	2a 0f       	add	r18, r26
    219a:	3b 1f       	adc	r19, r27
    219c:	e9 01       	movw	r28, r18
    219e:	c4 0f       	add	r28, r20
    21a0:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    21a2:	f8 81       	ld	r31, Y
    21a4:	f0 93 3e 01 	sts	0x013E, r31
    21a8:	4f 5f       	subi	r20, 0xFF	; 255
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    21ac:	40 31       	cpi	r20, 0x10	; 16
    21ae:	51 05       	cpc	r21, r1
    21b0:	a9 f7       	brne	.-22     	; 0x219c <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    21b2:	40 91 3c 01 	lds	r20, 0x013C
    21b6:	40 68       	ori	r20, 0x80	; 128
    21b8:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    21bc:	40 91 3d 01 	lds	r20, 0x013D
    21c0:	40 ff       	sbrs	r20, 0
    21c2:	fc cf       	rjmp	.-8      	; 0x21bc <aes_encrypt+0x70>
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    21c8:	f0 91 3e 01 	lds	r31, 0x013E
    21cc:	e9 01       	movw	r28, r18
    21ce:	c4 0f       	add	r28, r20
    21d0:	d5 1f       	adc	r29, r21
    21d2:	f8 83       	st	Y, r31
    21d4:	4f 5f       	subi	r20, 0xFF	; 255
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    21d8:	40 31       	cpi	r20, 0x10	; 16
    21da:	51 05       	cpc	r21, r1
    21dc:	a9 f7       	brne	.-22     	; 0x21c8 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    21de:	9f 5f       	subi	r25, 0xFF	; 255
    21e0:	cb cf       	rjmp	.-106    	; 0x2178 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    21f4:	61 30       	cpi	r22, 0x01	; 1
    21f6:	09 f4       	brne	.+2      	; 0x21fa <aes_decrypt+0x10>
    21f8:	58 c0       	rjmp	.+176    	; 0x22aa <aes_decrypt+0xc0>
    21fa:	86 2f       	mov	r24, r22
    21fc:	8f 70       	andi	r24, 0x0F	; 15
    21fe:	09 f0       	breq	.+2      	; 0x2202 <aes_decrypt+0x18>
    2200:	54 c0       	rjmp	.+168    	; 0x22aa <aes_decrypt+0xc0>
    2202:	e1 ed       	ldi	r30, 0xD1	; 209
    2204:	f9 e0       	ldi	r31, 0x09	; 9
    2206:	90 e1       	ldi	r25, 0x10	; 16
    2208:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    220a:	21 91       	ld	r18, Z+
    220c:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2210:	9e 13       	cpse	r25, r30
    2212:	fb cf       	rjmp	.-10     	; 0x220a <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2214:	62 95       	swap	r22
    2216:	6f 70       	andi	r22, 0x0F	; 15
    2218:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    221a:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    221c:	6f 3f       	cpi	r22, 0xFF	; 255
    221e:	09 f4       	brne	.+2      	; 0x2222 <aes_decrypt+0x38>
    2220:	45 c0       	rjmp	.+138    	; 0x22ac <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2222:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2226:	46 2f       	mov	r20, r22
    2228:	55 27       	eor	r21, r21
    222a:	47 fd       	sbrc	r20, 7
    222c:	50 95       	com	r21
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	ed 01       	movw	r28, r26
    2234:	90 e1       	ldi	r25, 0x10	; 16
    2236:	69 02       	muls	r22, r25
    2238:	c0 0d       	add	r28, r0
    223a:	d1 1d       	adc	r29, r1
    223c:	11 24       	eor	r1, r1
    223e:	fe 01       	movw	r30, r28
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	90 81       	ld	r25, Z
    2246:	90 93 3e 01 	sts	0x013E, r25
    224a:	2f 5f       	subi	r18, 0xFF	; 255
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    224e:	20 31       	cpi	r18, 0x10	; 16
    2250:	31 05       	cpc	r19, r1
    2252:	a9 f7       	brne	.-22     	; 0x223e <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2254:	90 91 3c 01 	lds	r25, 0x013C
    2258:	90 68       	ori	r25, 0x80	; 128
    225a:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    225e:	90 91 3d 01 	lds	r25, 0x013D
    2262:	90 ff       	sbrs	r25, 0
    2264:	fc cf       	rjmp	.-8      	; 0x225e <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    2266:	41 50       	subi	r20, 0x01	; 1
    2268:	51 09       	sbc	r21, r1
    226a:	94 e0       	ldi	r25, 0x04	; 4
    226c:	44 0f       	add	r20, r20
    226e:	55 1f       	adc	r21, r21
    2270:	9a 95       	dec	r25
    2272:	e1 f7       	brne	.-8      	; 0x226c <aes_decrypt+0x82>
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    2278:	90 91 3e 01 	lds	r25, 0x013E
    227c:	8e 01       	movw	r16, r28
    227e:	02 0f       	add	r16, r18
    2280:	13 1f       	adc	r17, r19
    2282:	f8 01       	movw	r30, r16
    2284:	90 83       	st	Z, r25
         if(i!=0)
    2286:	66 23       	and	r22, r22
    2288:	49 f0       	breq	.+18     	; 0x229c <aes_decrypt+0xb2>
    228a:	f9 01       	movw	r30, r18
    228c:	e4 0f       	add	r30, r20
    228e:	f5 1f       	adc	r31, r21
    2290:	ea 0f       	add	r30, r26
    2292:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    2294:	e0 81       	ld	r30, Z
    2296:	9e 27       	eor	r25, r30
    2298:	f8 01       	movw	r30, r16
    229a:	90 83       	st	Z, r25
    229c:	2f 5f       	subi	r18, 0xFF	; 255
    229e:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    22a0:	20 31       	cpi	r18, 0x10	; 16
    22a2:	31 05       	cpc	r19, r1
    22a4:	49 f7       	brne	.-46     	; 0x2278 <aes_decrypt+0x8e>
    22a6:	61 50       	subi	r22, 0x01	; 1
    22a8:	b9 cf       	rjmp	.-142    	; 0x221c <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	08 95       	ret

000022b6 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    22b6:	90 91 c0 00 	lds	r25, 0x00C0
    22ba:	95 ff       	sbrs	r25, 5
    22bc:	fc cf       	rjmp	.-8      	; 0x22b6 <putc0>
    22be:	90 91 c0 00 	lds	r25, 0x00C0
    22c2:	9f 7d       	andi	r25, 0xDF	; 223
    22c4:	90 93 c0 00 	sts	0x00C0, r25
    22c8:	80 93 c6 00 	sts	0x00C6, r24
    22cc:	08 95       	ret

000022ce <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	0b b6       	in	r0, 0x3b	; 59
    22da:	0f 92       	push	r0
    22dc:	2f 93       	push	r18
    22de:	3f 93       	push	r19
    22e0:	4f 93       	push	r20
    22e2:	5f 93       	push	r21
    22e4:	6f 93       	push	r22
    22e6:	7f 93       	push	r23
    22e8:	8f 93       	push	r24
    22ea:	9f 93       	push	r25
    22ec:	af 93       	push	r26
    22ee:	bf 93       	push	r27
    22f0:	ef 93       	push	r30
    22f2:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    22f4:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    22f8:	80 91 c0 00 	lds	r24, 0x00C0
    22fc:	87 ff       	sbrs	r24, 7
    22fe:	fc cf       	rjmp	.-8      	; 0x22f8 <__vector_25+0x2a>
    2300:	80 91 c0 00 	lds	r24, 0x00C0
    2304:	8f 77       	andi	r24, 0x7F	; 127
    2306:	80 93 c0 00 	sts	0x00C0, r24
    230a:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    230e:	80 91 44 04 	lds	r24, 0x0444
    2312:	90 91 45 04 	lds	r25, 0x0445
    2316:	fc 01       	movw	r30, r24
    2318:	ec 5c       	subi	r30, 0xCC	; 204
    231a:	fb 4f       	sbci	r31, 0xFB	; 251
    231c:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    231e:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    2320:	80 31       	cpi	r24, 0x10	; 16
    2322:	91 05       	cpc	r25, r1
    2324:	29 f0       	breq	.+10     	; 0x2330 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2326:	90 93 45 04 	sts	0x0445, r25
    232a:	80 93 44 04 	sts	0x0444, r24
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    2330:	10 92 45 04 	sts	0x0445, r1
    2334:	10 92 44 04 	sts	0x0444, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    2338:	80 91 33 04 	lds	r24, 0x0433
    233c:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    2340:	80 91 c0 00 	lds	r24, 0x00C0
    2344:	8f 77       	andi	r24, 0x7F	; 127
    2346:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    234a:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
}
    234e:	ff 91       	pop	r31
    2350:	ef 91       	pop	r30
    2352:	bf 91       	pop	r27
    2354:	af 91       	pop	r26
    2356:	9f 91       	pop	r25
    2358:	8f 91       	pop	r24
    235a:	7f 91       	pop	r23
    235c:	6f 91       	pop	r22
    235e:	5f 91       	pop	r21
    2360:	4f 91       	pop	r20
    2362:	3f 91       	pop	r19
    2364:	2f 91       	pop	r18
    2366:	0f 90       	pop	r0
    2368:	0b be       	out	0x3b, r0	; 59
    236a:	0f 90       	pop	r0
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	0f 90       	pop	r0
    2370:	1f 90       	pop	r1
    2372:	18 95       	reti

00002374 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    2374:	81 11       	cpse	r24, r1
    2376:	0d c0       	rjmp	.+26     	; 0x2392 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	40 91 46 04 	lds	r20, 0x0446
    237e:	50 91 47 04 	lds	r21, 0x0447
    2382:	20 91 44 04 	lds	r18, 0x0444
    2386:	30 91 45 04 	lds	r19, 0x0445
    238a:	42 17       	cp	r20, r18
    238c:	53 07       	cpc	r21, r19
    238e:	51 f4       	brne	.+20     	; 0x23a4 <nrk_uart_data_ready+0x30>
    2390:	08 c0       	rjmp	.+16     	; 0x23a2 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	31 f4       	brne	.+12     	; 0x23a2 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    2396:	80 91 c8 00 	lds	r24, 0x00C8
    239a:	88 1f       	adc	r24, r24
    239c:	88 27       	eor	r24, r24
    239e:	88 1f       	adc	r24, r24
    23a0:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    23a2:	80 e0       	ldi	r24, 0x00	; 0
}
    23a4:	08 95       	ret

000023a6 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    23a6:	80 91 33 04 	lds	r24, 0x0433
    23aa:	8f 3f       	cpi	r24, 0xFF	; 255
    23ac:	19 f4       	brne	.+6      	; 0x23b4 <nrk_uart_rx_signal_get+0xe>
    23ae:	8e e0       	ldi	r24, 0x0E	; 14
    23b0:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
   return uart_rx_signal;
}
    23b4:	80 91 33 04 	lds	r24, 0x0433
    23b8:	08 95       	ret

000023ba <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    23be:	fc 01       	movw	r30, r24
    23c0:	24 91       	lpm	r18, Z
    23c2:	ec 01       	movw	r28, r24
    23c4:	21 96       	adiw	r28, 0x01	; 1
    23c6:	22 23       	and	r18, r18
    23c8:	51 f0       	breq	.+20     	; 0x23de <nrk_kprintf+0x24>
        putchar(c);
    23ca:	60 91 e1 0a 	lds	r22, 0x0AE1
    23ce:	70 91 e2 0a 	lds	r23, 0x0AE2
    23d2:	82 2f       	mov	r24, r18
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    23da:	ce 01       	movw	r24, r28
    23dc:	f0 cf       	rjmp	.-32     	; 0x23be <nrk_kprintf+0x4>
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    23e4:	20 91 46 04 	lds	r18, 0x0446
    23e8:	30 91 47 04 	lds	r19, 0x0447
    23ec:	80 91 44 04 	lds	r24, 0x0444
    23f0:	90 91 45 04 	lds	r25, 0x0445
    23f4:	28 17       	cp	r18, r24
    23f6:	39 07       	cpc	r19, r25
    23f8:	69 f4       	brne	.+26     	; 0x2414 <getc0+0x30>
    23fa:	80 91 33 04 	lds	r24, 0x0433
    23fe:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_signal_register>
    2402:	60 91 33 04 	lds	r22, 0x0433
    2406:	77 27       	eor	r23, r23
    2408:	67 fd       	sbrc	r22, 7
    240a:	70 95       	com	r23
    240c:	87 2f       	mov	r24, r23
    240e:	97 2f       	mov	r25, r23
    2410:	0e 94 65 1c 	call	0x38ca	; 0x38ca <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    2414:	6f 3f       	cpi	r22, 0xFF	; 255
    2416:	21 f4       	brne	.+8      	; 0x2420 <getc0+0x3c>
    2418:	86 ee       	ldi	r24, 0xE6	; 230
    241a:	94 e0       	ldi	r25, 0x04	; 4
    241c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    2420:	20 91 46 04 	lds	r18, 0x0446
    2424:	30 91 47 04 	lds	r19, 0x0447
    2428:	f9 01       	movw	r30, r18
    242a:	ec 5c       	subi	r30, 0xCC	; 204
    242c:	fb 4f       	sbci	r31, 0xFB	; 251
    242e:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    2430:	2f 5f       	subi	r18, 0xFF	; 255
    2432:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2434:	20 31       	cpi	r18, 0x10	; 16
    2436:	31 05       	cpc	r19, r1
    2438:	28 f4       	brcc	.+10     	; 0x2444 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    243a:	30 93 47 04 	sts	0x0447, r19
    243e:	20 93 46 04 	sts	0x0446, r18
    2442:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2444:	10 92 47 04 	sts	0x0447, r1
    2448:	10 92 46 04 	sts	0x0446, r1

   return tmp;
}
    244c:	08 95       	ret

0000244e <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    244e:	86 e0       	ldi	r24, 0x06	; 6
    2450:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    2452:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2454:	88 ef       	ldi	r24, 0xF8	; 248
    2456:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2458:	80 ef       	ldi	r24, 0xF0	; 240
    245a:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    245c:	82 e0       	ldi	r24, 0x02	; 2
    245e:	8d b9       	out	0x0d, r24	; 13
    2460:	08 95       	ret

00002462 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2462:	0c 94 27 12 	jmp	0x244e	; 0x244e <PORT_INIT>

00002466 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2466:	8f 3f       	cpi	r24, 0xFF	; 255
    2468:	09 f4       	brne	.+2      	; 0x246c <nrk_gpio_set+0x6>
    246a:	6c c0       	rjmp	.+216    	; 0x2544 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    246c:	e8 2f       	mov	r30, r24
    246e:	e7 70       	andi	r30, 0x07	; 7
    2470:	4e 2f       	mov	r20, r30
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	47 30       	cpi	r20, 0x07	; 7
    2476:	51 05       	cpc	r21, r1
    2478:	08 f0       	brcs	.+2      	; 0x247c <nrk_gpio_set+0x16>
    247a:	64 c0       	rjmp	.+200    	; 0x2544 <nrk_gpio_set+0xde>
    247c:	fa 01       	movw	r30, r20
    247e:	e1 56       	subi	r30, 0x61	; 97
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	86 95       	lsr	r24
    2484:	86 95       	lsr	r24
    2486:	86 95       	lsr	r24
    2488:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    248c:	42 b1       	in	r20, 0x02	; 2
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	b9 01       	movw	r22, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <nrk_gpio_set+0x34>
    2496:	66 0f       	add	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	8a 95       	dec	r24
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <nrk_gpio_set+0x30>
    249e:	cb 01       	movw	r24, r22
    24a0:	84 2b       	or	r24, r20
    24a2:	82 b9       	out	0x02, r24	; 2
    24a4:	4d c0       	rjmp	.+154    	; 0x2540 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24a6:	45 b1       	in	r20, 0x05	; 5
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	b9 01       	movw	r22, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <nrk_gpio_set+0x4e>
    24b0:	66 0f       	add	r22, r22
    24b2:	77 1f       	adc	r23, r23
    24b4:	8a 95       	dec	r24
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <nrk_gpio_set+0x4a>
    24b8:	cb 01       	movw	r24, r22
    24ba:	84 2b       	or	r24, r20
    24bc:	85 b9       	out	0x05, r24	; 5
    24be:	40 c0       	rjmp	.+128    	; 0x2540 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24c0:	48 b1       	in	r20, 0x08	; 8
    24c2:	21 e0       	ldi	r18, 0x01	; 1
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	b9 01       	movw	r22, r18
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <nrk_gpio_set+0x68>
    24ca:	66 0f       	add	r22, r22
    24cc:	77 1f       	adc	r23, r23
    24ce:	8a 95       	dec	r24
    24d0:	e2 f7       	brpl	.-8      	; 0x24ca <nrk_gpio_set+0x64>
    24d2:	cb 01       	movw	r24, r22
    24d4:	84 2b       	or	r24, r20
    24d6:	88 b9       	out	0x08, r24	; 8
    24d8:	33 c0       	rjmp	.+102    	; 0x2540 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24da:	4b b1       	in	r20, 0x0b	; 11
    24dc:	21 e0       	ldi	r18, 0x01	; 1
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	b9 01       	movw	r22, r18
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <nrk_gpio_set+0x82>
    24e4:	66 0f       	add	r22, r22
    24e6:	77 1f       	adc	r23, r23
    24e8:	8a 95       	dec	r24
    24ea:	e2 f7       	brpl	.-8      	; 0x24e4 <nrk_gpio_set+0x7e>
    24ec:	cb 01       	movw	r24, r22
    24ee:	84 2b       	or	r24, r20
    24f0:	8b b9       	out	0x0b, r24	; 11
    24f2:	26 c0       	rjmp	.+76     	; 0x2540 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24f4:	4e b1       	in	r20, 0x0e	; 14
    24f6:	21 e0       	ldi	r18, 0x01	; 1
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	b9 01       	movw	r22, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <nrk_gpio_set+0x9c>
    24fe:	66 0f       	add	r22, r22
    2500:	77 1f       	adc	r23, r23
    2502:	8a 95       	dec	r24
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <nrk_gpio_set+0x98>
    2506:	cb 01       	movw	r24, r22
    2508:	84 2b       	or	r24, r20
    250a:	8e b9       	out	0x0e, r24	; 14
    250c:	19 c0       	rjmp	.+50     	; 0x2540 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    250e:	41 b3       	in	r20, 0x11	; 17
    2510:	21 e0       	ldi	r18, 0x01	; 1
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	b9 01       	movw	r22, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <nrk_gpio_set+0xb6>
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	8a 95       	dec	r24
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <nrk_gpio_set+0xb2>
    2520:	cb 01       	movw	r24, r22
    2522:	84 2b       	or	r24, r20
    2524:	81 bb       	out	0x11, r24	; 17
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2528:	44 b3       	in	r20, 0x14	; 20
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	b9 01       	movw	r22, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <nrk_gpio_set+0xd0>
    2532:	66 0f       	add	r22, r22
    2534:	77 1f       	adc	r23, r23
    2536:	8a 95       	dec	r24
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <nrk_gpio_set+0xcc>
    253a:	cb 01       	movw	r24, r22
    253c:	84 2b       	or	r24, r20
    253e:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2542:	08 95       	ret
                default: return -1;
    2544:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2546:	08 95       	ret

00002548 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2548:	8f 3f       	cpi	r24, 0xFF	; 255
    254a:	09 f4       	brne	.+2      	; 0x254e <nrk_gpio_clr+0x6>
    254c:	65 c0       	rjmp	.+202    	; 0x2618 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    254e:	e8 2f       	mov	r30, r24
    2550:	e7 70       	andi	r30, 0x07	; 7
    2552:	4e 2f       	mov	r20, r30
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	47 30       	cpi	r20, 0x07	; 7
    2558:	51 05       	cpc	r21, r1
    255a:	08 f0       	brcs	.+2      	; 0x255e <nrk_gpio_clr+0x16>
    255c:	5d c0       	rjmp	.+186    	; 0x2618 <nrk_gpio_clr+0xd0>
    255e:	fa 01       	movw	r30, r20
    2560:	ea 55       	subi	r30, 0x5A	; 90
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	86 95       	lsr	r24
    2566:	86 95       	lsr	r24
    2568:	86 95       	lsr	r24
    256a:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    256e:	42 b1       	in	r20, 0x02	; 2
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	b9 01       	movw	r22, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <nrk_gpio_clr+0x34>
    2578:	66 0f       	add	r22, r22
    257a:	77 1f       	adc	r23, r23
    257c:	8a 95       	dec	r24
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <nrk_gpio_clr+0x30>
    2580:	cb 01       	movw	r24, r22
    2582:	80 95       	com	r24
    2584:	84 23       	and	r24, r20
    2586:	82 b9       	out	0x02, r24	; 2
    2588:	45 c0       	rjmp	.+138    	; 0x2614 <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    258a:	45 b1       	in	r20, 0x05	; 5
    258c:	21 e0       	ldi	r18, 0x01	; 1
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	b9 01       	movw	r22, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <nrk_gpio_clr+0x50>
    2594:	66 0f       	add	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	8a 95       	dec	r24
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <nrk_gpio_clr+0x4c>
    259c:	cb 01       	movw	r24, r22
    259e:	80 95       	com	r24
    25a0:	84 23       	and	r24, r20
    25a2:	85 b9       	out	0x05, r24	; 5
    25a4:	37 c0       	rjmp	.+110    	; 0x2614 <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25a6:	48 b1       	in	r20, 0x08	; 8
    25a8:	21 e0       	ldi	r18, 0x01	; 1
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	b9 01       	movw	r22, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <nrk_gpio_clr+0x6c>
    25b0:	66 0f       	add	r22, r22
    25b2:	77 1f       	adc	r23, r23
    25b4:	8a 95       	dec	r24
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <nrk_gpio_clr+0x68>
    25b8:	cb 01       	movw	r24, r22
    25ba:	80 95       	com	r24
    25bc:	84 23       	and	r24, r20
    25be:	88 b9       	out	0x08, r24	; 8
    25c0:	29 c0       	rjmp	.+82     	; 0x2614 <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25c2:	4b b1       	in	r20, 0x0b	; 11
    25c4:	21 e0       	ldi	r18, 0x01	; 1
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	b9 01       	movw	r22, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <nrk_gpio_clr+0x88>
    25cc:	66 0f       	add	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	8a 95       	dec	r24
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <nrk_gpio_clr+0x84>
    25d4:	cb 01       	movw	r24, r22
    25d6:	80 95       	com	r24
    25d8:	84 23       	and	r24, r20
    25da:	8b b9       	out	0x0b, r24	; 11
    25dc:	1b c0       	rjmp	.+54     	; 0x2614 <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25de:	4e b1       	in	r20, 0x0e	; 14
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	b9 01       	movw	r22, r18
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <nrk_gpio_clr+0xa4>
    25e8:	66 0f       	add	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	8a 95       	dec	r24
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <nrk_gpio_clr+0xa0>
    25f0:	cb 01       	movw	r24, r22
    25f2:	80 95       	com	r24
    25f4:	84 23       	and	r24, r20
    25f6:	8e b9       	out	0x0e, r24	; 14
    25f8:	0d c0       	rjmp	.+26     	; 0x2614 <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25fa:	41 b3       	in	r20, 0x11	; 17
    25fc:	21 e0       	ldi	r18, 0x01	; 1
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	b9 01       	movw	r22, r18
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <nrk_gpio_clr+0xc0>
    2604:	66 0f       	add	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	8a 95       	dec	r24
    260a:	e2 f7       	brpl	.-8      	; 0x2604 <nrk_gpio_clr+0xbc>
    260c:	cb 01       	movw	r24, r22
    260e:	80 95       	com	r24
    2610:	84 23       	and	r24, r20
    2612:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2616:	08 95       	ret
                default: return -1;
    2618:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    261a:	08 95       	ret

0000261c <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    261c:	8f 3f       	cpi	r24, 0xFF	; 255
    261e:	31 f1       	breq	.+76     	; 0x266c <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    2620:	e8 2f       	mov	r30, r24
    2622:	e7 70       	andi	r30, 0x07	; 7
    2624:	4e 2f       	mov	r20, r30
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	47 30       	cpi	r20, 0x07	; 7
    262a:	51 05       	cpc	r21, r1
    262c:	f8 f4       	brcc	.+62     	; 0x266c <nrk_gpio_get+0x50>
    262e:	fa 01       	movw	r30, r20
    2630:	e3 55       	subi	r30, 0x53	; 83
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	28 2f       	mov	r18, r24
    2636:	26 95       	lsr	r18
    2638:	26 95       	lsr	r18
    263a:	26 95       	lsr	r18
    263c:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2640:	90 b1       	in	r25, 0x00	; 0
    2642:	0b c0       	rjmp	.+22     	; 0x265a <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2644:	93 b1       	in	r25, 0x03	; 3
    2646:	09 c0       	rjmp	.+18     	; 0x265a <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2648:	96 b1       	in	r25, 0x06	; 6
    264a:	07 c0       	rjmp	.+14     	; 0x265a <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    264c:	99 b1       	in	r25, 0x09	; 9
    264e:	05 c0       	rjmp	.+10     	; 0x265a <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2650:	9c b1       	in	r25, 0x0c	; 12
    2652:	03 c0       	rjmp	.+6      	; 0x265a <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2654:	9f b1       	in	r25, 0x0f	; 15
    2656:	01 c0       	rjmp	.+2      	; 0x265a <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2658:	92 b3       	in	r25, 0x12	; 18
    265a:	89 2f       	mov	r24, r25
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <nrk_gpio_get+0x48>
    2660:	95 95       	asr	r25
    2662:	87 95       	ror	r24
    2664:	2a 95       	dec	r18
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <nrk_gpio_get+0x44>
    2668:	81 70       	andi	r24, 0x01	; 1
    266a:	08 95       	ret
                default: return -1;
    266c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    266e:	08 95       	ret

00002670 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2670:	8f 3f       	cpi	r24, 0xFF	; 255
    2672:	09 f4       	brne	.+2      	; 0x2676 <nrk_gpio_toggle+0x6>
    2674:	06 c1       	rjmp	.+524    	; 0x2882 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2676:	e8 2f       	mov	r30, r24
    2678:	e7 70       	andi	r30, 0x07	; 7
    267a:	4e 2f       	mov	r20, r30
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	47 30       	cpi	r20, 0x07	; 7
    2680:	51 05       	cpc	r21, r1
    2682:	08 f0       	brcs	.+2      	; 0x2686 <nrk_gpio_toggle+0x16>
    2684:	fe c0       	rjmp	.+508    	; 0x2882 <nrk_gpio_toggle+0x212>
    2686:	fa 01       	movw	r30, r20
    2688:	ec 54       	subi	r30, 0x4C	; 76
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	86 95       	lsr	r24
    268e:	86 95       	lsr	r24
    2690:	86 95       	lsr	r24
    2692:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2696:	20 b1       	in	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	08 2e       	mov	r0, r24
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <nrk_gpio_toggle+0x32>
    269e:	35 95       	asr	r19
    26a0:	27 95       	ror	r18
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    26a6:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    26a8:	20 fd       	sbrc	r18, 0
    26aa:	0b c0       	rjmp	.+22     	; 0x26c2 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    26ac:	21 e0       	ldi	r18, 0x01	; 1
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	b9 01       	movw	r22, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <nrk_gpio_toggle+0x48>
    26b4:	66 0f       	add	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	8a 95       	dec	r24
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <nrk_gpio_toggle+0x44>
    26bc:	cb 01       	movw	r24, r22
    26be:	84 2b       	or	r24, r20
    26c0:	0b c0       	rjmp	.+22     	; 0x26d8 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	b9 01       	movw	r22, r18
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <nrk_gpio_toggle+0x5e>
    26ca:	66 0f       	add	r22, r22
    26cc:	77 1f       	adc	r23, r23
    26ce:	8a 95       	dec	r24
    26d0:	e2 f7       	brpl	.-8      	; 0x26ca <nrk_gpio_toggle+0x5a>
    26d2:	cb 01       	movw	r24, r22
    26d4:	80 95       	com	r24
    26d6:	84 23       	and	r24, r20
    26d8:	82 b9       	out	0x02, r24	; 2
    26da:	16 c0       	rjmp	.+44     	; 0x2708 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    26dc:	23 b1       	in	r18, 0x03	; 3
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	08 2e       	mov	r0, r24
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <nrk_gpio_toggle+0x78>
    26e4:	35 95       	asr	r19
    26e6:	27 95       	ror	r18
    26e8:	0a 94       	dec	r0
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    26ec:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    26ee:	20 fd       	sbrc	r18, 0
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    26f2:	21 e0       	ldi	r18, 0x01	; 1
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	b9 01       	movw	r22, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <nrk_gpio_toggle+0x8e>
    26fa:	66 0f       	add	r22, r22
    26fc:	77 1f       	adc	r23, r23
    26fe:	8a 95       	dec	r24
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <nrk_gpio_toggle+0x8a>
    2702:	cb 01       	movw	r24, r22
    2704:	84 2b       	or	r24, r20
    2706:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    270c:	21 e0       	ldi	r18, 0x01	; 1
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	b9 01       	movw	r22, r18
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <nrk_gpio_toggle+0xa8>
    2714:	66 0f       	add	r22, r22
    2716:	77 1f       	adc	r23, r23
    2718:	8a 95       	dec	r24
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <nrk_gpio_toggle+0xa4>
    271c:	cb 01       	movw	r24, r22
    271e:	80 95       	com	r24
    2720:	84 23       	and	r24, r20
    2722:	f1 cf       	rjmp	.-30     	; 0x2706 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2724:	26 b1       	in	r18, 0x06	; 6
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	08 2e       	mov	r0, r24
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <nrk_gpio_toggle+0xc0>
    272c:	35 95       	asr	r19
    272e:	27 95       	ror	r18
    2730:	0a 94       	dec	r0
    2732:	e2 f7       	brpl	.-8      	; 0x272c <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2734:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2736:	20 fd       	sbrc	r18, 0
    2738:	0b c0       	rjmp	.+22     	; 0x2750 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    273a:	21 e0       	ldi	r18, 0x01	; 1
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	b9 01       	movw	r22, r18
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <nrk_gpio_toggle+0xd6>
    2742:	66 0f       	add	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	8a 95       	dec	r24
    2748:	e2 f7       	brpl	.-8      	; 0x2742 <nrk_gpio_toggle+0xd2>
    274a:	cb 01       	movw	r24, r22
    274c:	84 2b       	or	r24, r20
    274e:	0b c0       	rjmp	.+22     	; 0x2766 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2750:	21 e0       	ldi	r18, 0x01	; 1
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	b9 01       	movw	r22, r18
    2756:	02 c0       	rjmp	.+4      	; 0x275c <nrk_gpio_toggle+0xec>
    2758:	66 0f       	add	r22, r22
    275a:	77 1f       	adc	r23, r23
    275c:	8a 95       	dec	r24
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <nrk_gpio_toggle+0xe8>
    2760:	cb 01       	movw	r24, r22
    2762:	80 95       	com	r24
    2764:	84 23       	and	r24, r20
    2766:	88 b9       	out	0x08, r24	; 8
    2768:	cf cf       	rjmp	.-98     	; 0x2708 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    276a:	29 b1       	in	r18, 0x09	; 9
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	08 2e       	mov	r0, r24
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <nrk_gpio_toggle+0x106>
    2772:	35 95       	asr	r19
    2774:	27 95       	ror	r18
    2776:	0a 94       	dec	r0
    2778:	e2 f7       	brpl	.-8      	; 0x2772 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    277a:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    277c:	20 fd       	sbrc	r18, 0
    277e:	0b c0       	rjmp	.+22     	; 0x2796 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2780:	21 e0       	ldi	r18, 0x01	; 1
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	b9 01       	movw	r22, r18
    2786:	02 c0       	rjmp	.+4      	; 0x278c <nrk_gpio_toggle+0x11c>
    2788:	66 0f       	add	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	8a 95       	dec	r24
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <nrk_gpio_toggle+0x118>
    2790:	cb 01       	movw	r24, r22
    2792:	84 2b       	or	r24, r20
    2794:	0b c0       	rjmp	.+22     	; 0x27ac <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2796:	21 e0       	ldi	r18, 0x01	; 1
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	b9 01       	movw	r22, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <nrk_gpio_toggle+0x132>
    279e:	66 0f       	add	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	8a 95       	dec	r24
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <nrk_gpio_toggle+0x12e>
    27a6:	cb 01       	movw	r24, r22
    27a8:	80 95       	com	r24
    27aa:	84 23       	and	r24, r20
    27ac:	8b b9       	out	0x0b, r24	; 11
    27ae:	ac cf       	rjmp	.-168    	; 0x2708 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    27b0:	2c b1       	in	r18, 0x0c	; 12
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	08 2e       	mov	r0, r24
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <nrk_gpio_toggle+0x14c>
    27b8:	35 95       	asr	r19
    27ba:	27 95       	ror	r18
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    27c0:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    27c2:	20 fd       	sbrc	r18, 0
    27c4:	0b c0       	rjmp	.+22     	; 0x27dc <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    27c6:	21 e0       	ldi	r18, 0x01	; 1
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	b9 01       	movw	r22, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <nrk_gpio_toggle+0x162>
    27ce:	66 0f       	add	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	8a 95       	dec	r24
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <nrk_gpio_toggle+0x15e>
    27d6:	cb 01       	movw	r24, r22
    27d8:	84 2b       	or	r24, r20
    27da:	0b c0       	rjmp	.+22     	; 0x27f2 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	b9 01       	movw	r22, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <nrk_gpio_toggle+0x178>
    27e4:	66 0f       	add	r22, r22
    27e6:	77 1f       	adc	r23, r23
    27e8:	8a 95       	dec	r24
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <nrk_gpio_toggle+0x174>
    27ec:	cb 01       	movw	r24, r22
    27ee:	80 95       	com	r24
    27f0:	84 23       	and	r24, r20
    27f2:	8e b9       	out	0x0e, r24	; 14
    27f4:	89 cf       	rjmp	.-238    	; 0x2708 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    27f6:	2f b1       	in	r18, 0x0f	; 15
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	08 2e       	mov	r0, r24
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <nrk_gpio_toggle+0x192>
    27fe:	35 95       	asr	r19
    2800:	27 95       	ror	r18
    2802:	0a 94       	dec	r0
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2806:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2808:	20 fd       	sbrc	r18, 0
    280a:	0b c0       	rjmp	.+22     	; 0x2822 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    280c:	21 e0       	ldi	r18, 0x01	; 1
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	b9 01       	movw	r22, r18
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <nrk_gpio_toggle+0x1a8>
    2814:	66 0f       	add	r22, r22
    2816:	77 1f       	adc	r23, r23
    2818:	8a 95       	dec	r24
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <nrk_gpio_toggle+0x1a4>
    281c:	cb 01       	movw	r24, r22
    281e:	84 2b       	or	r24, r20
    2820:	0b c0       	rjmp	.+22     	; 0x2838 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2822:	21 e0       	ldi	r18, 0x01	; 1
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	b9 01       	movw	r22, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <nrk_gpio_toggle+0x1be>
    282a:	66 0f       	add	r22, r22
    282c:	77 1f       	adc	r23, r23
    282e:	8a 95       	dec	r24
    2830:	e2 f7       	brpl	.-8      	; 0x282a <nrk_gpio_toggle+0x1ba>
    2832:	cb 01       	movw	r24, r22
    2834:	80 95       	com	r24
    2836:	84 23       	and	r24, r20
    2838:	81 bb       	out	0x11, r24	; 17
    283a:	66 cf       	rjmp	.-308    	; 0x2708 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    283c:	22 b3       	in	r18, 0x12	; 18
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	08 2e       	mov	r0, r24
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <nrk_gpio_toggle+0x1d8>
    2844:	35 95       	asr	r19
    2846:	27 95       	ror	r18
    2848:	0a 94       	dec	r0
    284a:	e2 f7       	brpl	.-8      	; 0x2844 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    284c:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    284e:	20 fd       	sbrc	r18, 0
    2850:	0b c0       	rjmp	.+22     	; 0x2868 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2852:	21 e0       	ldi	r18, 0x01	; 1
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	b9 01       	movw	r22, r18
    2858:	02 c0       	rjmp	.+4      	; 0x285e <nrk_gpio_toggle+0x1ee>
    285a:	66 0f       	add	r22, r22
    285c:	77 1f       	adc	r23, r23
    285e:	8a 95       	dec	r24
    2860:	e2 f7       	brpl	.-8      	; 0x285a <nrk_gpio_toggle+0x1ea>
    2862:	cb 01       	movw	r24, r22
    2864:	84 2b       	or	r24, r20
    2866:	0b c0       	rjmp	.+22     	; 0x287e <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2868:	21 e0       	ldi	r18, 0x01	; 1
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	b9 01       	movw	r22, r18
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <nrk_gpio_toggle+0x204>
    2870:	66 0f       	add	r22, r22
    2872:	77 1f       	adc	r23, r23
    2874:	8a 95       	dec	r24
    2876:	e2 f7       	brpl	.-8      	; 0x2870 <nrk_gpio_toggle+0x200>
    2878:	cb 01       	movw	r24, r22
    287a:	80 95       	com	r24
    287c:	84 23       	and	r24, r20
    287e:	84 bb       	out	0x14, r24	; 20
    2880:	43 cf       	rjmp	.-378    	; 0x2708 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    2882:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2884:	08 95       	ret

00002886 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2886:	8f 3f       	cpi	r24, 0xFF	; 255
    2888:	09 f4       	brne	.+2      	; 0x288c <nrk_gpio_direction+0x6>
    288a:	d5 c0       	rjmp	.+426    	; 0x2a36 <nrk_gpio_direction+0x1b0>
    288c:	e8 2f       	mov	r30, r24
    288e:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2890:	4e 2f       	mov	r20, r30
    2892:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2894:	61 11       	cpse	r22, r1
    2896:	67 c0       	rjmp	.+206    	; 0x2966 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    2898:	47 30       	cpi	r20, 0x07	; 7
    289a:	51 05       	cpc	r21, r1
    289c:	08 f0       	brcs	.+2      	; 0x28a0 <nrk_gpio_direction+0x1a>
    289e:	cb c0       	rjmp	.+406    	; 0x2a36 <nrk_gpio_direction+0x1b0>
    28a0:	fa 01       	movw	r30, r20
    28a2:	e5 54       	subi	r30, 0x45	; 69
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	86 95       	lsr	r24
    28a8:	86 95       	lsr	r24
    28aa:	86 95       	lsr	r24
    28ac:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    28b0:	41 b1       	in	r20, 0x01	; 1
    28b2:	21 e0       	ldi	r18, 0x01	; 1
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	b9 01       	movw	r22, r18
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <nrk_gpio_direction+0x38>
    28ba:	66 0f       	add	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	8a 95       	dec	r24
    28c0:	e2 f7       	brpl	.-8      	; 0x28ba <nrk_gpio_direction+0x34>
    28c2:	cb 01       	movw	r24, r22
    28c4:	80 95       	com	r24
    28c6:	84 23       	and	r24, r20
    28c8:	65 c0       	rjmp	.+202    	; 0x2994 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    28ca:	44 b1       	in	r20, 0x04	; 4
    28cc:	21 e0       	ldi	r18, 0x01	; 1
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	b9 01       	movw	r22, r18
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <nrk_gpio_direction+0x52>
    28d4:	66 0f       	add	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	8a 95       	dec	r24
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <nrk_gpio_direction+0x4e>
    28dc:	cb 01       	movw	r24, r22
    28de:	80 95       	com	r24
    28e0:	84 23       	and	r24, r20
    28e2:	65 c0       	rjmp	.+202    	; 0x29ae <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    28e4:	47 b1       	in	r20, 0x07	; 7
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	b9 01       	movw	r22, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <nrk_gpio_direction+0x6c>
    28ee:	66 0f       	add	r22, r22
    28f0:	77 1f       	adc	r23, r23
    28f2:	8a 95       	dec	r24
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <nrk_gpio_direction+0x68>
    28f6:	cb 01       	movw	r24, r22
    28f8:	80 95       	com	r24
    28fa:	84 23       	and	r24, r20
    28fc:	65 c0       	rjmp	.+202    	; 0x29c8 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    28fe:	4a b1       	in	r20, 0x0a	; 10
    2900:	21 e0       	ldi	r18, 0x01	; 1
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	b9 01       	movw	r22, r18
    2906:	02 c0       	rjmp	.+4      	; 0x290c <nrk_gpio_direction+0x86>
    2908:	66 0f       	add	r22, r22
    290a:	77 1f       	adc	r23, r23
    290c:	8a 95       	dec	r24
    290e:	e2 f7       	brpl	.-8      	; 0x2908 <nrk_gpio_direction+0x82>
    2910:	cb 01       	movw	r24, r22
    2912:	80 95       	com	r24
    2914:	84 23       	and	r24, r20
    2916:	65 c0       	rjmp	.+202    	; 0x29e2 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2918:	4d b1       	in	r20, 0x0d	; 13
    291a:	21 e0       	ldi	r18, 0x01	; 1
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	b9 01       	movw	r22, r18
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <nrk_gpio_direction+0xa0>
    2922:	66 0f       	add	r22, r22
    2924:	77 1f       	adc	r23, r23
    2926:	8a 95       	dec	r24
    2928:	e2 f7       	brpl	.-8      	; 0x2922 <nrk_gpio_direction+0x9c>
    292a:	cb 01       	movw	r24, r22
    292c:	80 95       	com	r24
    292e:	84 23       	and	r24, r20
    2930:	65 c0       	rjmp	.+202    	; 0x29fc <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2932:	40 b3       	in	r20, 0x10	; 16
    2934:	21 e0       	ldi	r18, 0x01	; 1
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	b9 01       	movw	r22, r18
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <nrk_gpio_direction+0xba>
    293c:	66 0f       	add	r22, r22
    293e:	77 1f       	adc	r23, r23
    2940:	8a 95       	dec	r24
    2942:	e2 f7       	brpl	.-8      	; 0x293c <nrk_gpio_direction+0xb6>
    2944:	cb 01       	movw	r24, r22
    2946:	80 95       	com	r24
    2948:	84 23       	and	r24, r20
    294a:	65 c0       	rjmp	.+202    	; 0x2a16 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    294c:	43 b3       	in	r20, 0x13	; 19
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	b9 01       	movw	r22, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <nrk_gpio_direction+0xd4>
    2956:	66 0f       	add	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	8a 95       	dec	r24
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <nrk_gpio_direction+0xd0>
    295e:	cb 01       	movw	r24, r22
    2960:	80 95       	com	r24
    2962:	84 23       	and	r24, r20
    2964:	65 c0       	rjmp	.+202    	; 0x2a30 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2966:	47 30       	cpi	r20, 0x07	; 7
    2968:	51 05       	cpc	r21, r1
    296a:	08 f0       	brcs	.+2      	; 0x296e <nrk_gpio_direction+0xe8>
    296c:	64 c0       	rjmp	.+200    	; 0x2a36 <nrk_gpio_direction+0x1b0>
    296e:	fa 01       	movw	r30, r20
    2970:	ee 53       	subi	r30, 0x3E	; 62
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	86 95       	lsr	r24
    2976:	86 95       	lsr	r24
    2978:	86 95       	lsr	r24
    297a:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    297e:	41 b1       	in	r20, 0x01	; 1
    2980:	21 e0       	ldi	r18, 0x01	; 1
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	b9 01       	movw	r22, r18
    2986:	02 c0       	rjmp	.+4      	; 0x298c <nrk_gpio_direction+0x106>
    2988:	66 0f       	add	r22, r22
    298a:	77 1f       	adc	r23, r23
    298c:	8a 95       	dec	r24
    298e:	e2 f7       	brpl	.-8      	; 0x2988 <nrk_gpio_direction+0x102>
    2990:	cb 01       	movw	r24, r22
    2992:	84 2b       	or	r24, r20
    2994:	81 b9       	out	0x01, r24	; 1
    2996:	4d c0       	rjmp	.+154    	; 0x2a32 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2998:	44 b1       	in	r20, 0x04	; 4
    299a:	21 e0       	ldi	r18, 0x01	; 1
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	b9 01       	movw	r22, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <nrk_gpio_direction+0x120>
    29a2:	66 0f       	add	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	8a 95       	dec	r24
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <nrk_gpio_direction+0x11c>
    29aa:	cb 01       	movw	r24, r22
    29ac:	84 2b       	or	r24, r20
    29ae:	84 b9       	out	0x04, r24	; 4
    29b0:	40 c0       	rjmp	.+128    	; 0x2a32 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    29b2:	47 b1       	in	r20, 0x07	; 7
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	b9 01       	movw	r22, r18
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <nrk_gpio_direction+0x13a>
    29bc:	66 0f       	add	r22, r22
    29be:	77 1f       	adc	r23, r23
    29c0:	8a 95       	dec	r24
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <nrk_gpio_direction+0x136>
    29c4:	cb 01       	movw	r24, r22
    29c6:	84 2b       	or	r24, r20
    29c8:	87 b9       	out	0x07, r24	; 7
    29ca:	33 c0       	rjmp	.+102    	; 0x2a32 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    29cc:	4a b1       	in	r20, 0x0a	; 10
    29ce:	21 e0       	ldi	r18, 0x01	; 1
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	b9 01       	movw	r22, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <nrk_gpio_direction+0x154>
    29d6:	66 0f       	add	r22, r22
    29d8:	77 1f       	adc	r23, r23
    29da:	8a 95       	dec	r24
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <nrk_gpio_direction+0x150>
    29de:	cb 01       	movw	r24, r22
    29e0:	84 2b       	or	r24, r20
    29e2:	8a b9       	out	0x0a, r24	; 10
    29e4:	26 c0       	rjmp	.+76     	; 0x2a32 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    29e6:	4d b1       	in	r20, 0x0d	; 13
    29e8:	21 e0       	ldi	r18, 0x01	; 1
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	b9 01       	movw	r22, r18
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <nrk_gpio_direction+0x16e>
    29f0:	66 0f       	add	r22, r22
    29f2:	77 1f       	adc	r23, r23
    29f4:	8a 95       	dec	r24
    29f6:	e2 f7       	brpl	.-8      	; 0x29f0 <nrk_gpio_direction+0x16a>
    29f8:	cb 01       	movw	r24, r22
    29fa:	84 2b       	or	r24, r20
    29fc:	8d b9       	out	0x0d, r24	; 13
    29fe:	19 c0       	rjmp	.+50     	; 0x2a32 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2a00:	40 b3       	in	r20, 0x10	; 16
    2a02:	21 e0       	ldi	r18, 0x01	; 1
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	b9 01       	movw	r22, r18
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <nrk_gpio_direction+0x188>
    2a0a:	66 0f       	add	r22, r22
    2a0c:	77 1f       	adc	r23, r23
    2a0e:	8a 95       	dec	r24
    2a10:	e2 f7       	brpl	.-8      	; 0x2a0a <nrk_gpio_direction+0x184>
    2a12:	cb 01       	movw	r24, r22
    2a14:	84 2b       	or	r24, r20
    2a16:	80 bb       	out	0x10, r24	; 16
    2a18:	0c c0       	rjmp	.+24     	; 0x2a32 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2a1a:	43 b3       	in	r20, 0x13	; 19
    2a1c:	21 e0       	ldi	r18, 0x01	; 1
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	b9 01       	movw	r22, r18
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <nrk_gpio_direction+0x1a2>
    2a24:	66 0f       	add	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	8a 95       	dec	r24
    2a2a:	e2 f7       	brpl	.-8      	; 0x2a24 <nrk_gpio_direction+0x19e>
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	84 2b       	or	r24, r20
    2a30:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2a34:	08 95       	ret
                        default: return -1;
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2a38:	08 95       	ret

00002a3a <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2a3a:	81 11       	cpse	r24, r1
    2a3c:	06 c0       	rjmp	.+12     	; 0x2a4a <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    2a3e:	80 b1       	in	r24, 0x00	; 0
    2a40:	86 95       	lsr	r24
    2a42:	81 70       	andi	r24, 0x01	; 1
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	89 27       	eor	r24, r25
    2a48:	08 95       	ret
	} 
return -1;
    2a4a:	8f ef       	ldi	r24, 0xFF	; 255
}
    2a4c:	08 95       	ret

00002a4e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	11 f4       	brne	.+4      	; 0x2a56 <nrk_led_toggle+0x8>
    2a52:	83 e2       	ldi	r24, 0x23	; 35
    2a54:	0d c0       	rjmp	.+26     	; 0x2a70 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	91 05       	cpc	r25, r1
    2a5a:	11 f4       	brne	.+4      	; 0x2a60 <nrk_led_toggle+0x12>
    2a5c:	8b e2       	ldi	r24, 0x2B	; 43
    2a5e:	08 c0       	rjmp	.+16     	; 0x2a70 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	91 05       	cpc	r25, r1
    2a64:	11 f4       	brne	.+4      	; 0x2a6a <nrk_led_toggle+0x1c>
    2a66:	83 e3       	ldi	r24, 0x33	; 51
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2a6a:	03 97       	sbiw	r24, 0x03	; 3
    2a6c:	29 f4       	brne	.+10     	; 0x2a78 <nrk_led_toggle+0x2a>
    2a6e:	8b e3       	ldi	r24, 0x3B	; 59
    2a70:	0e 94 38 13 	call	0x2670	; 0x2670 <nrk_gpio_toggle>
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	08 95       	ret
return -1;
    2a78:	8f ef       	ldi	r24, 0xFF	; 255
}
    2a7a:	08 95       	ret

00002a7c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	11 f4       	brne	.+4      	; 0x2a84 <nrk_led_clr+0x8>
    2a80:	83 e2       	ldi	r24, 0x23	; 35
    2a82:	0d c0       	rjmp	.+26     	; 0x2a9e <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2a84:	81 30       	cpi	r24, 0x01	; 1
    2a86:	91 05       	cpc	r25, r1
    2a88:	11 f4       	brne	.+4      	; 0x2a8e <nrk_led_clr+0x12>
    2a8a:	8b e2       	ldi	r24, 0x2B	; 43
    2a8c:	08 c0       	rjmp	.+16     	; 0x2a9e <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	91 05       	cpc	r25, r1
    2a92:	11 f4       	brne	.+4      	; 0x2a98 <nrk_led_clr+0x1c>
    2a94:	83 e3       	ldi	r24, 0x33	; 51
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2a98:	03 97       	sbiw	r24, 0x03	; 3
    2a9a:	29 f4       	brne	.+10     	; 0x2aa6 <nrk_led_clr+0x2a>
    2a9c:	8b e3       	ldi	r24, 0x3B	; 59
    2a9e:	0e 94 33 12 	call	0x2466	; 0x2466 <nrk_gpio_set>
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	08 95       	ret
return -1;
    2aa6:	8f ef       	ldi	r24, 0xFF	; 255
}
    2aa8:	08 95       	ret

00002aaa <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	11 f4       	brne	.+4      	; 0x2ab2 <nrk_led_set+0x8>
    2aae:	83 e2       	ldi	r24, 0x23	; 35
    2ab0:	0d c0       	rjmp	.+26     	; 0x2acc <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	11 f4       	brne	.+4      	; 0x2abc <nrk_led_set+0x12>
    2ab8:	8b e2       	ldi	r24, 0x2B	; 43
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    2abc:	82 30       	cpi	r24, 0x02	; 2
    2abe:	91 05       	cpc	r25, r1
    2ac0:	11 f4       	brne	.+4      	; 0x2ac6 <nrk_led_set+0x1c>
    2ac2:	83 e3       	ldi	r24, 0x33	; 51
    2ac4:	03 c0       	rjmp	.+6      	; 0x2acc <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2ac6:	03 97       	sbiw	r24, 0x03	; 3
    2ac8:	29 f4       	brne	.+10     	; 0x2ad4 <nrk_led_set+0x2a>
    2aca:	8b e3       	ldi	r24, 0x3B	; 59
    2acc:	0e 94 a4 12 	call	0x2548	; 0x2548 <nrk_gpio_clr>
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	08 95       	ret
return -1;
    2ad4:	8f ef       	ldi	r24, 0xFF	; 255
}
    2ad6:	08 95       	ret

00002ad8 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2ad8:	88 23       	and	r24, r24
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <nrk_gpio_pullups+0xa>
    2adc:	85 b7       	in	r24, 0x35	; 53
    2ade:	8f 7e       	andi	r24, 0xEF	; 239
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2ae2:	85 b7       	in	r24, 0x35	; 53
    2ae4:	80 61       	ori	r24, 0x10	; 16
    2ae6:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	08 95       	ret

00002aec <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2aec:	90 91 c8 00 	lds	r25, 0x00C8
    2af0:	95 ff       	sbrs	r25, 5
    2af2:	fc cf       	rjmp	.-8      	; 0x2aec <putc1>
    2af4:	80 93 ce 00 	sts	0x00CE, r24
    2af8:	08 95       	ret

00002afa <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2afa:	90 93 c5 00 	sts	0x00C5, r25
    2afe:	80 93 c4 00 	sts	0x00C4, r24
    2b02:	86 e0       	ldi	r24, 0x06	; 6
    2b04:	80 93 c2 00 	sts	0x00C2, r24
    2b08:	e1 ec       	ldi	r30, 0xC1	; 193
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8b 7f       	andi	r24, 0xFB	; 251
    2b10:	80 83       	st	Z, r24
    2b12:	a0 ec       	ldi	r26, 0xC0	; 192
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	8c 91       	ld	r24, X
    2b18:	82 60       	ori	r24, 0x02	; 2
    2b1a:	8c 93       	st	X, r24
ENABLE_UART0();
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 61       	ori	r24, 0x18	; 24
    2b20:	80 83       	st	Z, r24
    2b22:	08 95       	ret

00002b24 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2b24:	90 93 cd 00 	sts	0x00CD, r25
    2b28:	80 93 cc 00 	sts	0x00CC, r24
    2b2c:	86 e0       	ldi	r24, 0x06	; 6
    2b2e:	80 93 ca 00 	sts	0x00CA, r24
    2b32:	e9 ec       	ldi	r30, 0xC9	; 201
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	8b 7f       	andi	r24, 0xFB	; 251
    2b3a:	80 83       	st	Z, r24
    2b3c:	a8 ec       	ldi	r26, 0xC8	; 200
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	8c 91       	ld	r24, X
    2b42:	82 60       	ori	r24, 0x02	; 2
    2b44:	8c 93       	st	X, r24
ENABLE_UART1();
    2b46:	80 81       	ld	r24, Z
    2b48:	88 61       	ori	r24, 0x18	; 24
    2b4a:	80 83       	st	Z, r24
    2b4c:	08 95       	ret

00002b4e <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2b4e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2b52:	62 ef       	ldi	r22, 0xF2	; 242
    2b54:	71 e1       	ldi	r23, 0x11	; 17
    2b56:	8b e5       	ldi	r24, 0x5B	; 91
    2b58:	91 e1       	ldi	r25, 0x11	; 17
    2b5a:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <fdevopen>
    2b5e:	90 93 e2 0a 	sts	0x0AE2, r25
    2b62:	80 93 e1 0a 	sts	0x0AE1, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2b66:	62 ef       	ldi	r22, 0xF2	; 242
    2b68:	71 e1       	ldi	r23, 0x11	; 17
    2b6a:	8b e5       	ldi	r24, 0x5B	; 91
    2b6c:	91 e1       	ldi	r25, 0x11	; 17
    2b6e:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <fdevopen>
    2b72:	90 93 e0 0a 	sts	0x0AE0, r25
    2b76:	80 93 df 0a 	sts	0x0ADF, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    2b7a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <nrk_signal_create>
    2b7e:	80 93 33 04 	sts	0x0433, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2b82:	8f 3f       	cpi	r24, 0xFF	; 255
    2b84:	19 f4       	brne	.+6      	; 0x2b8c <nrk_setup_uart+0x3e>
    2b86:	8e e0       	ldi	r24, 0x0E	; 14
    2b88:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
   uart_rx_buf_start=0;
    2b8c:	10 92 47 04 	sts	0x0447, r1
    2b90:	10 92 46 04 	sts	0x0446, r1
   uart_rx_buf_end=0;
    2b94:	10 92 45 04 	sts	0x0445, r1
    2b98:	10 92 44 04 	sts	0x0444, r1
   ENABLE_UART0_RX_INT();
    2b9c:	80 91 c1 00 	lds	r24, 0x00C1
    2ba0:	80 68       	ori	r24, 0x80	; 128
    2ba2:	80 93 c1 00 	sts	0x00C1, r24
    2ba6:	08 95       	ret

00002ba8 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2ba8:	80 91 c8 00 	lds	r24, 0x00C8
    2bac:	87 ff       	sbrs	r24, 7
    2bae:	fc cf       	rjmp	.-8      	; 0x2ba8 <getc1>
    2bb0:	80 91 c8 00 	lds	r24, 0x00C8
    2bb4:	8f 77       	andi	r24, 0x7F	; 127
    2bb6:	80 93 c8 00 	sts	0x00C8, r24
    2bba:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2bbe:	08 95       	ret

00002bc0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	d1 f7       	brne	.-12     	; 0x2bc0 <halWait>

} // halWait
    2bcc:	08 95       	ret

00002bce <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2bce:	0c 94 40 30 	jmp	0x6080	; 0x6080 <__eerd_byte_m128rfa1>

00002bd2 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2bd2:	0e 94 48 30 	call	0x6090	; 0x6090 <__eewr_byte_m128rfa1>
}
    2bd6:	08 95       	ret

00002bd8 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2bee:	18 2f       	mov	r17, r24
    2bf0:	f7 01       	movw	r30, r14
    2bf2:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2bfc:	08 2f       	mov	r16, r24
    2bfe:	f7 01       	movw	r30, r14
    2c00:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2c0a:	d8 2f       	mov	r29, r24
    2c0c:	f7 01       	movw	r30, r14
    2c0e:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    2c10:	83 e0       	ldi	r24, 0x03	; 3
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2c18:	c8 2f       	mov	r28, r24
    2c1a:	f7 01       	movw	r30, r14
    2c1c:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2c1e:	84 e0       	ldi	r24, 0x04	; 4
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2c26:	10 0f       	add	r17, r16
    2c28:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2c2a:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    2c2c:	8c 17       	cp	r24, r28
    2c2e:	11 f0       	breq	.+4      	; 0x2c34 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2c34:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	08 95       	ret

00002c44 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2c4a:	85 e0       	ldi	r24, 0x05	; 5
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2c52:	88 83       	st	Y, r24
return NRK_OK;
}
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	60 81       	ld	r22, Z
    2c60:	86 e0       	ldi	r24, 0x06	; 6
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 48 30 	call	0x6090	; 0x6090 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	08 95       	ret

00002c6c <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2c72:	86 e0       	ldi	r24, 0x06	; 6
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2c7a:	88 83       	st	Y, r24
  return NRK_OK;
}
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	8c 01       	movw	r16, r24
    2c8e:	c0 e0       	ldi	r28, 0x00	; 0
    2c90:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2c92:	ce 01       	movw	r24, r28
    2c94:	08 96       	adiw	r24, 0x08	; 8
    2c96:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	81 93       	st	Z+, r24
    2c9e:	8f 01       	movw	r16, r30
    2ca0:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2ca2:	c0 31       	cpi	r28, 0x10	; 16
    2ca4:	d1 05       	cpc	r29, r1
    2ca6:	a9 f7       	brne	.-22     	; 0x2c92 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	08 95       	ret

00002cb4 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	8c 01       	movw	r16, r24
    2cbe:	c0 e0       	ldi	r28, 0x00	; 0
    2cc0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	61 91       	ld	r22, Z+
    2cc6:	8f 01       	movw	r16, r30
    2cc8:	ce 01       	movw	r24, r28
    2cca:	08 96       	adiw	r24, 0x08	; 8
    2ccc:	0e 94 48 30 	call	0x6090	; 0x6090 <__eewr_byte_m128rfa1>
    2cd0:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2cd2:	c0 31       	cpi	r28, 0x10	; 16
    2cd4:	d1 05       	cpc	r29, r1
    2cd6:	a9 f7       	brne	.-22     	; 0x2cc2 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	08 95       	ret

00002ce4 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2cea:	87 e0       	ldi	r24, 0x07	; 7
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 40 30 	call	0x6080	; 0x6080 <__eerd_byte_m128rfa1>
    2cf2:	88 83       	st	Y, r24
  return NRK_OK;
}
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	08 95       	ret

00002cfc <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	60 81       	ld	r22, Z
    2d00:	87 e0       	ldi	r24, 0x07	; 7
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 48 30 	call	0x6090	; 0x6090 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	08 95       	ret

00002d0c <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2d0c:	f8 94       	cli
    2d0e:	08 95       	ret

00002d10 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2d10:	78 94       	sei
    2d12:	08 95       	ret

00002d14 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2d14:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
while(1);
    2d18:	ff cf       	rjmp	.-2      	; 0x2d18 <nrk_halt+0x4>

00002d1a <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	a3 97       	sbiw	r28, 0x23	; 35
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2d30:	0e 94 b2 1a 	call	0x3564	; 0x3564 <nrk_signal_create>
    2d34:	80 93 a4 0a 	sts	0x0AA4, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2d38:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3a:	21 f4       	brne	.+8      	; 0x2d44 <nrk_init+0x2a>
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	8e e0       	ldi	r24, 0x0E	; 14
    2d40:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2d44:	0e 94 17 29 	call	0x522e	; 0x522e <_nrk_startup_error>
    2d48:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2d4a:	80 ff       	sbrs	r24, 0
    2d4c:	04 c0       	rjmp	.+8      	; 0x2d56 <nrk_init+0x3c>
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	86 e0       	ldi	r24, 0x06	; 6
    2d52:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    2d56:	11 ff       	sbrs	r17, 1
    2d58:	04 c0       	rjmp	.+8      	; 0x2d62 <nrk_init+0x48>
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	84 e1       	ldi	r24, 0x14	; 20
    2d5e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    2d62:	12 ff       	sbrs	r17, 2
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <nrk_init+0x54>
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	83 e1       	ldi	r24, 0x13	; 19
    2d6a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2d6e:	10 92 a7 0a 	sts	0x0AA7, r1
    nrk_cur_task_TCB = NULL;
    2d72:	10 92 b5 0a 	sts	0x0AB5, r1
    2d76:	10 92 b4 0a 	sts	0x0AB4, r1
    
    nrk_high_ready_TCB = NULL;
    2d7a:	10 92 a6 0a 	sts	0x0AA6, r1
    2d7e:	10 92 a5 0a 	sts	0x0AA5, r1
    nrk_high_ready_prio = 0; 
    2d82:	10 92 b6 0a 	sts	0x0AB6, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2d86:	10 92 b3 0a 	sts	0x0AB3, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	80 93 a0 0a 	sts	0x0AA0, r24
    nrk_sem_list[i].value=-1;
    2d90:	80 93 a2 0a 	sts	0x0AA2, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2d94:	80 93 a1 0a 	sts	0x0AA1, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2d98:	93 e6       	ldi	r25, 0x63	; 99
    2d9a:	90 93 fc 09 	sts	0x09FC, r25
        nrk_task_TCB[i].task_ID = -1; 
    2d9e:	80 93 fa 09 	sts	0x09FA, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2da2:	90 93 27 0a 	sts	0x0A27, r25
        nrk_task_TCB[i].task_ID = -1; 
    2da6:	80 93 25 0a 	sts	0x0A25, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2daa:	90 93 52 0a 	sts	0x0A52, r25
        nrk_task_TCB[i].task_ID = -1; 
    2dae:	80 93 50 0a 	sts	0x0A50, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2db2:	90 93 7d 0a 	sts	0x0A7D, r25
        nrk_task_TCB[i].task_ID = -1; 
    2db6:	80 93 7b 0a 	sts	0x0A7B, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2dba:	87 eb       	ldi	r24, 0xB7	; 183
    2dbc:	9a e0       	ldi	r25, 0x0A	; 10
    2dbe:	2c eb       	ldi	r18, 0xBC	; 188
    2dc0:	3a e0       	ldi	r19, 0x0A	; 10
    2dc2:	30 93 bb 0a 	sts	0x0ABB, r19
    2dc6:	20 93 ba 0a 	sts	0x0ABA, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2dca:	90 93 be 0a 	sts	0x0ABE, r25
    2dce:	80 93 bd 0a 	sts	0x0ABD, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2dd2:	41 ec       	ldi	r20, 0xC1	; 193
    2dd4:	5a e0       	ldi	r21, 0x0A	; 10
    2dd6:	50 93 c0 0a 	sts	0x0AC0, r21
    2dda:	40 93 bf 0a 	sts	0x0ABF, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2dde:	30 93 c3 0a 	sts	0x0AC3, r19
    2de2:	20 93 c2 0a 	sts	0x0AC2, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2de6:	26 ec       	ldi	r18, 0xC6	; 198
    2de8:	3a e0       	ldi	r19, 0x0A	; 10
    2dea:	30 93 c5 0a 	sts	0x0AC5, r19
    2dee:	20 93 c4 0a 	sts	0x0AC4, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2df2:	50 93 c8 0a 	sts	0x0AC8, r21
    2df6:	40 93 c7 0a 	sts	0x0AC7, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2dfa:	4b ec       	ldi	r20, 0xCB	; 203
    2dfc:	5a e0       	ldi	r21, 0x0A	; 10
    2dfe:	50 93 ca 0a 	sts	0x0ACA, r21
    2e02:	40 93 c9 0a 	sts	0x0AC9, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2e06:	30 93 cd 0a 	sts	0x0ACD, r19
    2e0a:	20 93 cc 0a 	sts	0x0ACC, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2e0e:	10 92 b9 0a 	sts	0x0AB9, r1
    2e12:	10 92 b8 0a 	sts	0x0AB8, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2e16:	10 92 cf 0a 	sts	0x0ACF, r1
    2e1a:	10 92 ce 0a 	sts	0x0ACE, r1
	_head_node = NULL;
    2e1e:	10 92 aa 0a 	sts	0x0AAA, r1
    2e22:	10 92 a9 0a 	sts	0x0AA9, r1
	_free_node = &_nrk_readyQ[0];
    2e26:	90 93 f1 09 	sts	0x09F1, r25
    2e2a:	80 93 f0 09 	sts	0x09F0, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2e2e:	60 e8       	ldi	r22, 0x80	; 128
    2e30:	73 e2       	ldi	r23, 0x23	; 35
    2e32:	ce 01       	movw	r24, r28
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	0e 94 4f 2b 	call	0x569e	; 0x569e <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	51 e0       	ldi	r21, 0x01	; 1
    2e3e:	6c e9       	ldi	r22, 0x9C	; 156
    2e40:	78 e0       	ldi	r23, 0x08	; 8
    2e42:	ce 01       	movw	r24, r28
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2e4a:	85 e5       	ldi	r24, 0x55	; 85
    2e4c:	80 93 9c 08 	sts	0x089C, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2e50:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2e52:	1c 86       	std	Y+12, r1	; 0x0c
    2e54:	1d 86       	std	Y+13, r1	; 0x0d
    2e56:	1e 86       	std	Y+14, r1	; 0x0e
    2e58:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2e5a:	18 8a       	std	Y+16, r1	; 0x10
    2e5c:	19 8a       	std	Y+17, r1	; 0x11
    2e5e:	1a 8a       	std	Y+18, r1	; 0x12
    2e60:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2e62:	1c 8a       	std	Y+20, r1	; 0x14
    2e64:	1d 8a       	std	Y+21, r1	; 0x15
    2e66:	1e 8a       	std	Y+22, r1	; 0x16
    2e68:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2e6a:	18 8e       	std	Y+24, r1	; 0x18
    2e6c:	19 8e       	std	Y+25, r1	; 0x19
    2e6e:	1a 8e       	std	Y+26, r1	; 0x1a
    2e70:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2e72:	1c 8e       	std	Y+28, r1	; 0x1c
    2e74:	1d 8e       	std	Y+29, r1	; 0x1d
    2e76:	1e 8e       	std	Y+30, r1	; 0x1e
    2e78:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2e7a:	18 a2       	std	Y+32, r1	; 0x20
    2e7c:	19 a2       	std	Y+33, r1	; 0x21
    2e7e:	1a a2       	std	Y+34, r1	; 0x22
    2e80:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2e86:	92 e0       	ldi	r25, 0x02	; 2
    2e88:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2e8a:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <nrk_activate_task>
	
}
    2e94:	a3 96       	adiw	r28, 0x23	; 35
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	1f 91       	pop	r17
    2ea6:	08 95       	ret

00002ea8 <nrk_start>:




void nrk_start (void)
{
    2ea8:	0a ef       	ldi	r16, 0xFA	; 250
    2eaa:	19 e0       	ldi	r17, 0x09	; 9
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2eac:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2eae:	f8 01       	movw	r30, r16
    2eb0:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    2eb2:	ff ef       	ldi	r31, 0xFF	; 255
    2eb4:	df 12       	cpse	r13, r31
    2eb6:	22 c0       	rjmp	.+68     	; 0x2efc <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2eb8:	cf 5f       	subi	r28, 0xFF	; 255
    2eba:	05 5d       	subi	r16, 0xD5	; 213
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	c4 30       	cpi	r28, 0x04	; 4
    2ec0:	b1 f7       	brne	.-20     	; 0x2eae <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2ec2:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2ec6:	2b e2       	ldi	r18, 0x2B	; 43
    2ec8:	82 02       	muls	r24, r18
    2eca:	c0 01       	movw	r24, r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	fc 01       	movw	r30, r24
    2ed0:	ee 50       	subi	r30, 0x0E	; 14
    2ed2:	f6 4f       	sbci	r31, 0xF6	; 246
    2ed4:	82 85       	ldd	r24, Z+10	; 0x0a
    2ed6:	80 93 b6 0a 	sts	0x0AB6, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2eda:	f0 93 b5 0a 	sts	0x0AB5, r31
    2ede:	e0 93 b4 0a 	sts	0x0AB4, r30
    2ee2:	f0 93 a6 0a 	sts	0x0AA6, r31
    2ee6:	e0 93 a5 0a 	sts	0x0AA5, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2eea:	80 93 a7 0a 	sts	0x0AA7, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2eee:	0e 94 c5 2b 	call	0x578a	; 0x578a <nrk_target_start>
    nrk_stack_pointer_init(); 
    2ef2:	0e 94 af 2b 	call	0x575e	; 0x575e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2ef6:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_start_high_ready_task>
    2efa:	16 c0       	rjmp	.+44     	; 0x2f28 <nrk_start+0x80>
    2efc:	8a ef       	ldi	r24, 0xFA	; 250
    2efe:	e8 2e       	mov	r14, r24
    2f00:	89 e0       	ldi	r24, 0x09	; 9
    2f02:	f8 2e       	mov	r15, r24
    2f04:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2f06:	cd 17       	cp	r28, r29
    2f08:	41 f0       	breq	.+16     	; 0x2f1a <nrk_start+0x72>
    2f0a:	f7 01       	movw	r30, r14
    2f0c:	80 81       	ld	r24, Z
    2f0e:	d8 12       	cpse	r13, r24
    2f10:	04 c0       	rjmp	.+8      	; 0x2f1a <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2f12:	6d 2d       	mov	r22, r13
    2f14:	85 e0       	ldi	r24, 0x05	; 5
    2f16:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2f1a:	df 5f       	subi	r29, 0xFF	; 255
    2f1c:	fb e2       	ldi	r31, 0x2B	; 43
    2f1e:	ef 0e       	add	r14, r31
    2f20:	f1 1c       	adc	r15, r1
    2f22:	d4 30       	cpi	r29, 0x04	; 4
    2f24:	81 f7       	brne	.-32     	; 0x2f06 <nrk_start+0x5e>
    2f26:	c8 cf       	rjmp	.-112    	; 0x2eb8 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2f28:	ff cf       	rjmp	.-2      	; 0x2f28 <nrk_start+0x80>

00002f2a <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	ec 01       	movw	r28, r24
    2f3c:	8b 01       	movw	r16, r22
    2f3e:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2f40:	89 85       	ldd	r24, Y+9	; 0x09
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	21 f0       	breq	.+8      	; 0x2f4e <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2f46:	80 91 a3 0a 	lds	r24, 0x0AA3
    2f4a:	88 83       	st	Y, r24
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2f4e:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2f50:	80 91 a3 0a 	lds	r24, 0x0AA3
    2f54:	84 30       	cpi	r24, 0x04	; 4
    2f56:	20 f0       	brcs	.+8      	; 0x2f60 <nrk_TCB_init+0x36>
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	87 e0       	ldi	r24, 0x07	; 7
    2f5c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	82 30       	cpi	r24, 0x02	; 2
    2f64:	29 f0       	breq	.+10     	; 0x2f70 <nrk_TCB_init+0x46>
    2f66:	80 91 a3 0a 	lds	r24, 0x0AA3
    2f6a:	8f 5f       	subi	r24, 0xFF	; 255
    2f6c:	80 93 a3 0a 	sts	0x0AA3, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2f70:	80 91 a3 0a 	lds	r24, 0x0AA3
    2f74:	81 11       	cpse	r24, r1
    2f76:	03 c0       	rjmp	.+6      	; 0x2f7e <nrk_TCB_init+0x54>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	80 93 a3 0a 	sts	0x0AA3, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2f7e:	38 81       	ld	r19, Y
    2f80:	2b e2       	ldi	r18, 0x2B	; 43
    2f82:	32 03       	mulsu	r19, r18
    2f84:	f0 01       	movw	r30, r0
    2f86:	11 24       	eor	r1, r1
    2f88:	ee 50       	subi	r30, 0x0E	; 14
    2f8a:	f6 4f       	sbci	r31, 0xF6	; 246
    2f8c:	11 83       	std	Z+1, r17	; 0x01
    2f8e:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2f90:	88 85       	ldd	r24, Y+8	; 0x08
    2f92:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2f94:	38 81       	ld	r19, Y
    2f96:	32 03       	mulsu	r19, r18
    2f98:	f0 01       	movw	r30, r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	ee 50       	subi	r30, 0x0E	; 14
    2f9e:	f6 4f       	sbci	r31, 0xF6	; 246
    2fa0:	83 e0       	ldi	r24, 0x03	; 3
    2fa2:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2fa4:	38 81       	ld	r19, Y
    2fa6:	32 03       	mulsu	r19, r18
    2fa8:	f0 01       	movw	r30, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	ee 50       	subi	r30, 0x0E	; 14
    2fae:	f6 4f       	sbci	r31, 0xF6	; 246
    2fb0:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2fb2:	08 81       	ld	r16, Y
    2fb4:	02 03       	mulsu	r16, r18
    2fb6:	80 01       	movw	r16, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	0e 50       	subi	r16, 0x0E	; 14
    2fbc:	16 4f       	sbci	r17, 0xF6	; 246
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	0b 96       	adiw	r24, 0x0b	; 11
    2fc6:	0e 94 12 23 	call	0x4624	; 0x4624 <_nrk_time_to_ticks_long>
    2fca:	f8 01       	movw	r30, r16
    2fcc:	61 a3       	std	Z+33, r22	; 0x21
    2fce:	72 a3       	std	Z+34, r23	; 0x22
    2fd0:	83 a3       	std	Z+35, r24	; 0x23
    2fd2:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2fd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fd8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2fda:	be 85       	ldd	r27, Y+14	; 0x0e
    2fdc:	88 33       	cpi	r24, 0x38	; 56
    2fde:	99 48       	sbci	r25, 0x89	; 137
    2fe0:	a1 44       	sbci	r26, 0x41	; 65
    2fe2:	b1 05       	cpc	r27, r1
    2fe4:	20 f0       	brcs	.+8      	; 0x2fee <nrk_TCB_init+0xc4>
    2fe6:	68 81       	ld	r22, Y
    2fe8:	86 e1       	ldi	r24, 0x16	; 22
    2fea:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2fee:	c8 80       	ld	r12, Y
    2ff0:	dd 24       	eor	r13, r13
    2ff2:	c7 fc       	sbrc	r12, 7
    2ff4:	d0 94       	com	r13
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	4b 96       	adiw	r24, 0x1b	; 27
    2ffa:	0e 94 12 23 	call	0x4624	; 0x4624 <_nrk_time_to_ticks_long>
    2ffe:	1b e2       	ldi	r17, 0x2B	; 43
    3000:	1c 9d       	mul	r17, r12
    3002:	f0 01       	movw	r30, r0
    3004:	1d 9d       	mul	r17, r13
    3006:	f0 0d       	add	r31, r0
    3008:	11 24       	eor	r1, r1
    300a:	ee 50       	subi	r30, 0x0E	; 14
    300c:	f6 4f       	sbci	r31, 0xF6	; 246
    300e:	65 8b       	std	Z+21, r22	; 0x15
    3010:	76 8b       	std	Z+22, r23	; 0x16
    3012:	87 8b       	std	Z+23, r24	; 0x17
    3014:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    3016:	28 81       	ld	r18, Y
    3018:	21 03       	mulsu	r18, r17
    301a:	c0 01       	movw	r24, r0
    301c:	11 24       	eor	r1, r1
    301e:	9c 01       	movw	r18, r24
    3020:	2e 50       	subi	r18, 0x0E	; 14
    3022:	36 4f       	sbci	r19, 0xF6	; 246
    3024:	69 01       	movw	r12, r18
    3026:	f9 01       	movw	r30, r18
    3028:	45 89       	ldd	r20, Z+21	; 0x15
    302a:	56 89       	ldd	r21, Z+22	; 0x16
    302c:	67 89       	ldd	r22, Z+23	; 0x17
    302e:	70 8d       	ldd	r23, Z+24	; 0x18
    3030:	81 a1       	ldd	r24, Z+33	; 0x21
    3032:	92 a1       	ldd	r25, Z+34	; 0x22
    3034:	a3 a1       	ldd	r26, Z+35	; 0x23
    3036:	b4 a1       	ldd	r27, Z+36	; 0x24
    3038:	84 0f       	add	r24, r20
    303a:	95 1f       	adc	r25, r21
    303c:	a6 1f       	adc	r26, r22
    303e:	b7 1f       	adc	r27, r23
    3040:	81 8f       	std	Z+25, r24	; 0x19
    3042:	92 8f       	std	Z+26, r25	; 0x1a
    3044:	a3 8f       	std	Z+27, r26	; 0x1b
    3046:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    3048:	ce 01       	movw	r24, r28
    304a:	43 96       	adiw	r24, 0x13	; 19
    304c:	0e 94 12 23 	call	0x4624	; 0x4624 <_nrk_time_to_ticks_long>
    3050:	f6 01       	movw	r30, r12
    3052:	65 a3       	std	Z+37, r22	; 0x25
    3054:	76 a3       	std	Z+38, r23	; 0x26
    3056:	87 a3       	std	Z+39, r24	; 0x27
    3058:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    305a:	28 81       	ld	r18, Y
    305c:	21 03       	mulsu	r18, r17
    305e:	f0 01       	movw	r30, r0
    3060:	11 24       	eor	r1, r1
    3062:	ee 50       	subi	r30, 0x0E	; 14
    3064:	f6 4f       	sbci	r31, 0xF6	; 246
    3066:	85 a1       	ldd	r24, Z+37	; 0x25
    3068:	96 a1       	ldd	r25, Z+38	; 0x26
    306a:	a7 a1       	ldd	r26, Z+39	; 0x27
    306c:	b0 a5       	ldd	r27, Z+40	; 0x28
    306e:	85 8f       	std	Z+29, r24	; 0x1d
    3070:	96 8f       	std	Z+30, r25	; 0x1e
    3072:	a7 8f       	std	Z+31, r26	; 0x1f
    3074:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	92 a7       	std	Z+42, r25	; 0x2a
    307c:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    307e:	f3 82       	std	Z+3, r15	; 0x03
    3080:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3082:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	df 90       	pop	r13
    3092:	cf 90       	pop	r12
    3094:	08 95       	ret

00003096 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    3096:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <_nrk_scheduler>

0000309a <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    309a:	85 e6       	ldi	r24, 0x65	; 101
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	08 95       	ret

000030a0 <_nrk_errno_set>:
    30a0:	e0 91 b4 0a 	lds	r30, 0x0AB4
    30a4:	f0 91 b5 0a 	lds	r31, 0x0AB5
    30a8:	84 87       	std	Z+12, r24	; 0x0c
    30aa:	08 95       	ret

000030ac <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    30ac:	e0 91 b4 0a 	lds	r30, 0x0AB4
    30b0:	f0 91 b5 0a 	lds	r31, 0x0AB5
}
    30b4:	84 85       	ldd	r24, Z+12	; 0x0c
    30b6:	08 95       	ret

000030b8 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    30b8:	fc 01       	movw	r30, r24
    if (error_num == 0)
    30ba:	80 91 7e 07 	lds	r24, 0x077E
    30be:	88 23       	and	r24, r24
    30c0:	31 f0       	breq	.+12     	; 0x30ce <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    30c2:	db 01       	movw	r26, r22
    30c4:	8c 93       	st	X, r24
    *task_id = error_task;
    30c6:	80 91 4a 06 	lds	r24, 0x064A
    30ca:	80 83       	st	Z, r24
    return 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
}
    30ce:	08 95       	ret

000030d0 <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    30d0:	80 91 7e 07 	lds	r24, 0x077E
    30d4:	88 23       	and	r24, r24
    30d6:	09 f4       	brne	.+2      	; 0x30da <nrk_error_print+0xa>
    30d8:	84 c0       	rjmp	.+264    	; 0x31e2 <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    30da:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    30de:	87 e2       	ldi	r24, 0x27	; 39
    30e0:	97 e0       	ldi	r25, 0x07	; 7
    30e2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        printf ("%d", error_task);
    30e6:	80 91 4a 06 	lds	r24, 0x064A
    30ea:	1f 92       	push	r1
    30ec:	8f 93       	push	r24
    30ee:	80 e8       	ldi	r24, 0x80	; 128
    30f0:	92 e0       	ldi	r25, 0x02	; 2
    30f2:	9f 93       	push	r25
    30f4:	8f 93       	push	r24
    30f6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
        nrk_kprintf (PSTR ("): "));
    30fa:	83 e2       	ldi	r24, 0x23	; 35
    30fc:	97 e0       	ldi	r25, 0x07	; 7
    30fe:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	80 91 7e 07 	lds	r24, 0x077E
    310e:	88 31       	cpi	r24, 0x18	; 24
    3110:	10 f0       	brcs	.+4      	; 0x3116 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    3112:	10 92 7e 07 	sts	0x077E, r1
        switch (error_num)
    3116:	e0 91 7e 07 	lds	r30, 0x077E
    311a:	8e 2f       	mov	r24, r30
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	fc 01       	movw	r30, r24
    3120:	31 97       	sbiw	r30, 0x01	; 1
    3122:	e6 31       	cpi	r30, 0x16	; 22
    3124:	f1 05       	cpc	r31, r1
    3126:	08 f0       	brcs	.+2      	; 0x312a <nrk_error_print+0x5a>
    3128:	46 c0       	rjmp	.+140    	; 0x31b6 <nrk_error_print+0xe6>
    312a:	e7 53       	subi	r30, 0x37	; 55
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    3132:	87 ee       	ldi	r24, 0xE7	; 231
    3134:	96 e0       	ldi	r25, 0x06	; 6
    3136:	41 c0       	rjmp	.+130    	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    3138:	80 ec       	ldi	r24, 0xC0	; 192
    313a:	96 e0       	ldi	r25, 0x06	; 6
    313c:	3e c0       	rjmp	.+124    	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    313e:	8c ea       	ldi	r24, 0xAC	; 172
    3140:	96 e0       	ldi	r25, 0x06	; 6
    3142:	3b c0       	rjmp	.+118    	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    3144:	86 e9       	ldi	r24, 0x96	; 150
    3146:	96 e0       	ldi	r25, 0x06	; 6
    3148:	38 c0       	rjmp	.+112    	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    314a:	8b e7       	ldi	r24, 0x7B	; 123
    314c:	96 e0       	ldi	r25, 0x06	; 6
    314e:	35 c0       	rjmp	.+106    	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    3150:	85 e6       	ldi	r24, 0x65	; 101
    3152:	96 e0       	ldi	r25, 0x06	; 6
    3154:	32 c0       	rjmp	.+100    	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    3156:	8d e4       	ldi	r24, 0x4D	; 77
    3158:	96 e0       	ldi	r25, 0x06	; 6
    315a:	2f c0       	rjmp	.+94     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    315c:	8a e3       	ldi	r24, 0x3A	; 58
    315e:	96 e0       	ldi	r25, 0x06	; 6
    3160:	2c c0       	rjmp	.+88     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    3162:	87 e2       	ldi	r24, 0x27	; 39
    3164:	96 e0       	ldi	r25, 0x06	; 6
    3166:	29 c0       	rjmp	.+82     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    3168:	89 e0       	ldi	r24, 0x09	; 9
    316a:	96 e0       	ldi	r25, 0x06	; 6
    316c:	26 c0       	rjmp	.+76     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    316e:	84 ee       	ldi	r24, 0xE4	; 228
    3170:	95 e0       	ldi	r25, 0x05	; 5
    3172:	23 c0       	rjmp	.+70     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    3174:	88 ed       	ldi	r24, 0xD8	; 216
    3176:	95 e0       	ldi	r25, 0x05	; 5
    3178:	20 c0       	rjmp	.+64     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    317a:	8d eb       	ldi	r24, 0xBD	; 189
    317c:	95 e0       	ldi	r25, 0x05	; 5
    317e:	1d c0       	rjmp	.+58     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    3180:	8e ea       	ldi	r24, 0xAE	; 174
    3182:	95 e0       	ldi	r25, 0x05	; 5
    3184:	1a c0       	rjmp	.+52     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    3186:	8a e9       	ldi	r24, 0x9A	; 154
    3188:	95 e0       	ldi	r25, 0x05	; 5
    318a:	17 c0       	rjmp	.+46     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    318c:	89 e8       	ldi	r24, 0x89	; 137
    318e:	95 e0       	ldi	r25, 0x05	; 5
    3190:	14 c0       	rjmp	.+40     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    3192:	85 e7       	ldi	r24, 0x75	; 117
    3194:	95 e0       	ldi	r25, 0x05	; 5
    3196:	11 c0       	rjmp	.+34     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    3198:	85 e5       	ldi	r24, 0x55	; 85
    319a:	95 e0       	ldi	r25, 0x05	; 5
    319c:	0e c0       	rjmp	.+28     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    319e:	8d e3       	ldi	r24, 0x3D	; 61
    31a0:	95 e0       	ldi	r25, 0x05	; 5
    31a2:	0b c0       	rjmp	.+22     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    31a4:	82 e2       	ldi	r24, 0x22	; 34
    31a6:	95 e0       	ldi	r25, 0x05	; 5
    31a8:	08 c0       	rjmp	.+16     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    31aa:	81 e1       	ldi	r24, 0x11	; 17
    31ac:	95 e0       	ldi	r25, 0x05	; 5
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	95 e0       	ldi	r25, 0x05	; 5
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    31b6:	8b ef       	ldi	r24, 0xFB	; 251
    31b8:	94 e0       	ldi	r25, 0x04	; 4
    31ba:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>
        }
        putchar ('\r');
    31be:	60 91 e1 0a 	lds	r22, 0x0AE1
    31c2:	70 91 e2 0a 	lds	r23, 0x0AE2
    31c6:	8d e0       	ldi	r24, 0x0D	; 13
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
        putchar ('\n');
    31ce:	60 91 e1 0a 	lds	r22, 0x0AE1
    31d2:	70 91 e2 0a 	lds	r23, 0x0AE2
    31d6:	8a e0       	ldi	r24, 0x0A	; 10
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    31de:	10 92 7e 07 	sts	0x077E, r1
    return t;
}
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	08 95       	ret

000031e6 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    31e6:	80 93 7e 07 	sts	0x077E, r24
    error_task = nrk_cur_task_TCB->task_ID;
    31ea:	e0 91 b4 0a 	lds	r30, 0x0AB4
    31ee:	f0 91 b5 0a 	lds	r31, 0x0AB5
    31f2:	80 85       	ldd	r24, Z+8	; 0x08
    31f4:	80 93 4a 06 	sts	0x064A, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    31f8:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <nrk_error_print>

000031fc <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    31fc:	80 93 7e 07 	sts	0x077E, r24
    error_task = task;
    3200:	60 93 4a 06 	sts	0x064A, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3204:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <nrk_error_print>

00003208 <pause>:
    }

}

void pause()
{
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	1f 92       	push	r1
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3212:	19 82       	std	Y+1, r1	; 0x01
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	84 36       	cpi	r24, 0x64	; 100
    3218:	40 f4       	brcc	.+16     	; 0x322a <pause+0x22>
        nrk_spin_wait_us (2000);
    321a:	80 ed       	ldi	r24, 0xD0	; 208
    321c:	97 e0       	ldi	r25, 0x07	; 7
    321e:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	8f 5f       	subi	r24, 0xFF	; 255
    3226:	89 83       	std	Y+1, r24	; 0x01
    3228:	f5 cf       	rjmp	.-22     	; 0x3214 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    322a:	0f 90       	pop	r0
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
    pause();
    323a:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
    pause();
    323e:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
    pause();
    3242:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
    nrk_led_clr(GREEN_LED);
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
    pause();
    324e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <pause>

00003252 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_led_set>
    pause();
    325a:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
    nrk_led_clr(GREEN_LED);
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
    pause();
    3266:	0c 94 04 19 	jmp	0x3208	; 0x3208 <pause>

0000326a <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	00 d0       	rcall	.+0      	; 0x3276 <blink_morse_code_error+0xc>
    3276:	1f 92       	push	r1
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    327c:	1f 92       	push	r1
    327e:	8f 93       	push	r24
    3280:	80 e8       	ldi	r24, 0x80	; 128
    3282:	92 e0       	ldi	r25, 0x02	; 2
    3284:	9f 93       	push	r25
    3286:	8f 93       	push	r24
    3288:	8e 01       	movw	r16, r28
    328a:	0f 5f       	subi	r16, 0xFF	; 255
    328c:	1f 4f       	sbci	r17, 0xFF	; 255
    328e:	1f 93       	push	r17
    3290:	0f 93       	push	r16
    3292:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sprintf>

    for(i=0; i<strlen(str); i++ )
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	f1 2c       	mov	r15, r1
    32a4:	f8 01       	movw	r30, r16
    32a6:	01 90       	ld	r0, Z+
    32a8:	00 20       	and	r0, r0
    32aa:	e9 f7       	brne	.-6      	; 0x32a6 <blink_morse_code_error+0x3c>
    32ac:	31 97       	sbiw	r30, 0x01	; 1
    32ae:	e0 1b       	sub	r30, r16
    32b0:	f1 0b       	sbc	r31, r17
    32b2:	8f 2d       	mov	r24, r15
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	8e 17       	cp	r24, r30
    32b8:	9f 07       	cpc	r25, r31
    32ba:	08 f0       	brcs	.+2      	; 0x32be <blink_morse_code_error+0x54>
    32bc:	5d c0       	rjmp	.+186    	; 0x3378 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    32be:	f8 01       	movw	r30, r16
    32c0:	e8 0f       	add	r30, r24
    32c2:	f9 1f       	adc	r31, r25
    32c4:	e0 81       	ld	r30, Z
    32c6:	8e 2f       	mov	r24, r30
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	fc 01       	movw	r30, r24
    32cc:	f0 97       	sbiw	r30, 0x30	; 48
    32ce:	ea 30       	cpi	r30, 0x0A	; 10
    32d0:	f1 05       	cpc	r31, r1
    32d2:	08 f0       	brcs	.+2      	; 0x32d6 <blink_morse_code_error+0x6c>
    32d4:	49 c0       	rjmp	.+146    	; 0x3368 <blink_morse_code_error+0xfe>
    32d6:	e1 52       	subi	r30, 0x21	; 33
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	0c 94 28 2e 	jmp	0x5c50	; 0x5c50 <__tablejump2__>
        {
        case '0':
            blink_dash();
    32de:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    32e4:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dash();
    32e8:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    32ec:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    32f0:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    32f4:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            break;
    32f8:	37 c0       	rjmp	.+110    	; 0x3368 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    32fa:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dot();
    32fe:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3302:	f4 cf       	rjmp	.-24     	; 0x32ec <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    3304:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dot();
    3308:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dot();
    330c:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3310:	ef cf       	rjmp	.-34     	; 0x32f0 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    3312:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dot();
    3316:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dot();
    331a:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            blink_dot();
    331e:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3322:	e8 cf       	rjmp	.-48     	; 0x32f4 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    3324:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3328:	02 c0       	rjmp	.+4      	; 0x332e <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    332a:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dot();
    332e:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3332:	04 c0       	rjmp	.+8      	; 0x333c <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    3334:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    3338:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dot();
    333c:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3340:	06 c0       	rjmp	.+12     	; 0x334e <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3342:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    3346:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    334a:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dot();
    334e:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
    3352:	08 c0       	rjmp	.+16     	; 0x3364 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3354:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    3358:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    335c:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dash();
    3360:	0e 94 19 19 	call	0x3232	; 0x3232 <blink_dash>
            blink_dot();
    3364:	0e 94 29 19 	call	0x3252	; 0x3252 <blink_dot>
            break;
        }
        pause();
    3368:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
        pause();
    336c:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
        pause();
    3370:	0e 94 04 19 	call	0x3208	; 0x3208 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3374:	f3 94       	inc	r15
    3376:	96 cf       	rjmp	.-212    	; 0x32a4 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	ff 90       	pop	r15
    3388:	08 95       	ret

0000338a <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    338a:	6f 92       	push	r6
    338c:	7f 92       	push	r7
    338e:	8f 92       	push	r8
    3390:	9f 92       	push	r9
    3392:	af 92       	push	r10
    3394:	bf 92       	push	r11
    3396:	cf 92       	push	r12
    3398:	df 92       	push	r13
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    33a6:	83 e3       	ldi	r24, 0x33	; 51
    33a8:	97 e0       	ldi	r25, 0x07	; 7
    33aa:	0e 94 dd 11 	call	0x23ba	; 0x23ba <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    33ae:	e0 91 b4 0a 	lds	r30, 0x0AB4
    33b2:	f0 91 b5 0a 	lds	r31, 0x0AB5
    33b6:	80 85       	ldd	r24, Z+8	; 0x08
    33b8:	28 2f       	mov	r18, r24
    33ba:	33 27       	eor	r19, r19
    33bc:	27 fd       	sbrc	r18, 7
    33be:	30 95       	com	r19
    33c0:	3f 93       	push	r19
    33c2:	8f 93       	push	r24
    33c4:	8e e2       	ldi	r24, 0x2E	; 46
    33c6:	93 e0       	ldi	r25, 0x03	; 3
    33c8:	9f 93       	push	r25
    33ca:	8f 93       	push	r24
    33cc:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    33d0:	e0 91 b4 0a 	lds	r30, 0x0AB4
    33d4:	f0 91 b5 0a 	lds	r31, 0x0AB5
    33d8:	c2 81       	ldd	r28, Z+2	; 0x02
    33da:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	82 e6       	ldi	r24, 0x62	; 98
    33e2:	93 e0       	ldi	r25, 0x03	; 3
    33e4:	9f 93       	push	r25
    33e6:	8f 93       	push	r24
    33e8:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
    printf( "canary = %x ",*stkc );
    33ec:	88 81       	ld	r24, Y
    33ee:	1f 92       	push	r1
    33f0:	8f 93       	push	r24
    33f2:	87 e3       	ldi	r24, 0x37	; 55
    33f4:	93 e0       	ldi	r25, 0x03	; 3
    33f6:	9f 93       	push	r25
    33f8:	8f 93       	push	r24
    33fa:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    33fe:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3402:	f0 91 b5 0a 	lds	r31, 0x0AB5
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3406:	81 81       	ldd	r24, Z+1	; 0x01
    3408:	8f 93       	push	r24
    340a:	80 81       	ld	r24, Z
    340c:	8f 93       	push	r24
    340e:	84 e4       	ldi	r24, 0x44	; 68
    3410:	93 e0       	ldi	r25, 0x03	; 3
    3412:	9f 93       	push	r25
    3414:	8f 93       	push	r24
    3416:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    341a:	80 91 b5 0a 	lds	r24, 0x0AB5
    341e:	8f 93       	push	r24
    3420:	80 91 b4 0a 	lds	r24, 0x0AB4
    3424:	8f 93       	push	r24
    3426:	8e e4       	ldi	r24, 0x4E	; 78
    3428:	93 e0       	ldi	r25, 0x03	; 3
    342a:	9f 93       	push	r25
    342c:	8f 93       	push	r24
    342e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
    3432:	c2 ef       	ldi	r28, 0xF2	; 242
    3434:	d9 e0       	ldi	r29, 0x09	; 9
    3436:	ed b7       	in	r30, 0x3d	; 61
    3438:	fe b7       	in	r31, 0x3e	; 62
    343a:	74 96       	adiw	r30, 0x14	; 20
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	fe bf       	out	0x3e, r31	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	ed bf       	out	0x3d, r30	; 61
    3446:	00 e0       	ldi	r16, 0x00	; 0
    3448:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    344a:	8e e5       	ldi	r24, 0x5E	; 94
    344c:	68 2e       	mov	r6, r24
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3452:	97 e3       	ldi	r25, 0x37	; 55
    3454:	89 2e       	mov	r8, r25
    3456:	93 e0       	ldi	r25, 0x03	; 3
    3458:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    345a:	24 e4       	ldi	r18, 0x44	; 68
    345c:	a2 2e       	mov	r10, r18
    345e:	23 e0       	ldi	r18, 0x03	; 3
    3460:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3462:	3e e4       	ldi	r19, 0x4E	; 78
    3464:	c3 2e       	mov	r12, r19
    3466:	33 e0       	ldi	r19, 0x03	; 3
    3468:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    346a:	ea 80       	ldd	r14, Y+2	; 0x02
    346c:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    346e:	ff 92       	push	r15
    3470:	ef 92       	push	r14
    3472:	1f 93       	push	r17
    3474:	0f 93       	push	r16
    3476:	7f 92       	push	r7
    3478:	6f 92       	push	r6
    347a:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
        printf( "canary = %x ",*stkc );
    347e:	f7 01       	movw	r30, r14
    3480:	80 81       	ld	r24, Z
    3482:	1f 92       	push	r1
    3484:	8f 93       	push	r24
    3486:	9f 92       	push	r9
    3488:	8f 92       	push	r8
    348a:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	8f 93       	push	r24
    3492:	88 81       	ld	r24, Y
    3494:	8f 93       	push	r24
    3496:	bf 92       	push	r11
    3498:	af 92       	push	r10
    349a:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	df 92       	push	r13
    34a4:	cf 92       	push	r12
    34a6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <printf>
    34aa:	0f 5f       	subi	r16, 0xFF	; 255
    34ac:	1f 4f       	sbci	r17, 0xFF	; 255
    34ae:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    34b0:	ed b7       	in	r30, 0x3d	; 61
    34b2:	fe b7       	in	r31, 0x3e	; 62
    34b4:	72 96       	adiw	r30, 0x12	; 18
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	fe bf       	out	0x3e, r31	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	ed bf       	out	0x3d, r30	; 61
    34c0:	04 30       	cpi	r16, 0x04	; 4
    34c2:	11 05       	cpc	r17, r1
    34c4:	91 f6       	brne	.-92     	; 0x346a <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	1f 91       	pop	r17
    34cc:	0f 91       	pop	r16
    34ce:	ff 90       	pop	r15
    34d0:	ef 90       	pop	r14
    34d2:	df 90       	pop	r13
    34d4:	cf 90       	pop	r12
    34d6:	bf 90       	pop	r11
    34d8:	af 90       	pop	r10
    34da:	9f 90       	pop	r9
    34dc:	8f 90       	pop	r8
    34de:	7f 90       	pop	r7
    34e0:	6f 90       	pop	r6
    34e2:	08 95       	ret

000034e4 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    34e8:	e0 91 b4 0a 	lds	r30, 0x0AB4
    34ec:	f0 91 b5 0a 	lds	r31, 0x0AB5
    34f0:	c2 81       	ldd	r28, Z+2	; 0x02
    34f2:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    34f4:	88 81       	ld	r24, Y
    34f6:	85 35       	cpi	r24, 0x55	; 85
    34f8:	39 f0       	breq	.+14     	; 0x3508 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    34fa:	0e 94 c5 19 	call	0x338a	; 0x338a <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3504:	85 e5       	ldi	r24, 0x55	; 85
    3506:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3508:	e0 91 b4 0a 	lds	r30, 0x0AB4
    350c:	f0 91 b5 0a 	lds	r31, 0x0AB5
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	81 15       	cp	r24, r1
    3516:	92 44       	sbci	r25, 0x42	; 66
    3518:	38 f0       	brcs	.+14     	; 0x3528 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    351a:	0e 94 c5 19 	call	0x338a	; 0x338a <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    351e:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3524:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <nrk_error_add>




#endif
}
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	08 95       	ret

0000352e <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    352e:	2b e2       	ldi	r18, 0x2B	; 43
    3530:	82 02       	muls	r24, r18
    3532:	c0 01       	movw	r24, r0
    3534:	11 24       	eor	r1, r1
    3536:	fc 01       	movw	r30, r24
    3538:	ee 50       	subi	r30, 0x0E	; 14
    353a:	f6 4f       	sbci	r31, 0xF6	; 246
    353c:	a2 81       	ldd	r26, Z+2	; 0x02
    353e:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3540:	8c 91       	ld	r24, X
    3542:	85 35       	cpi	r24, 0x55	; 85
    3544:	19 f0       	breq	.+6      	; 0x354c <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3546:	85 e5       	ldi	r24, 0x55	; 85
    3548:	8c 93       	st	X, r24
    354a:	08 c0       	rjmp	.+16     	; 0x355c <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	81 15       	cp	r24, r1
    3552:	92 44       	sbci	r25, 0x42	; 66
    3554:	28 f0       	brcs	.+10     	; 0x3560 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3556:	82 e1       	ldi	r24, 0x12	; 18
    3558:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
        return NRK_ERROR;
    355c:	8f ef       	ldi	r24, 0xFF	; 255
    355e:	08 95       	ret
    }
#endif
    return NRK_OK;
    3560:	81 e0       	ldi	r24, 0x01	; 1
}
    3562:	08 95       	ret

00003564 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3568:	40 91 7f 06 	lds	r20, 0x067F
    356c:	50 91 80 06 	lds	r21, 0x0680
    3570:	60 91 81 06 	lds	r22, 0x0681
    3574:	70 91 82 06 	lds	r23, 0x0682
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	8a 01       	movw	r16, r20
    357e:	9b 01       	movw	r18, r22
    3580:	08 2e       	mov	r0, r24
    3582:	04 c0       	rjmp	.+8      	; 0x358c <nrk_signal_create+0x28>
    3584:	36 95       	lsr	r19
    3586:	27 95       	ror	r18
    3588:	17 95       	ror	r17
    358a:	07 95       	ror	r16
    358c:	0a 94       	dec	r0
    358e:	d2 f7       	brpl	.-12     	; 0x3584 <nrk_signal_create+0x20>
    3590:	00 fd       	sbrc	r16, 0
    3592:	19 c0       	rjmp	.+50     	; 0x35c6 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3594:	01 e0       	ldi	r16, 0x01	; 1
    3596:	10 e0       	ldi	r17, 0x00	; 0
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	08 2e       	mov	r0, r24
    359e:	04 c0       	rjmp	.+8      	; 0x35a8 <nrk_signal_create+0x44>
    35a0:	00 0f       	add	r16, r16
    35a2:	11 1f       	adc	r17, r17
    35a4:	22 1f       	adc	r18, r18
    35a6:	33 1f       	adc	r19, r19
    35a8:	0a 94       	dec	r0
    35aa:	d2 f7       	brpl	.-12     	; 0x35a0 <nrk_signal_create+0x3c>
    35ac:	40 2b       	or	r20, r16
    35ae:	51 2b       	or	r21, r17
    35b0:	62 2b       	or	r22, r18
    35b2:	73 2b       	or	r23, r19
    35b4:	40 93 7f 06 	sts	0x067F, r20
    35b8:	50 93 80 06 	sts	0x0680, r21
    35bc:	60 93 81 06 	sts	0x0681, r22
    35c0:	70 93 82 06 	sts	0x0682, r23
			return i;
    35c4:	05 c0       	rjmp	.+10     	; 0x35d0 <nrk_signal_create+0x6c>
    35c6:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    35c8:	80 32       	cpi	r24, 0x20	; 32
    35ca:	91 05       	cpc	r25, r1
    35cc:	b9 f6       	brne	.-82     	; 0x357c <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    35ce:	8f ef       	ldi	r24, 0xFF	; 255


}
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	08 95       	ret

000035d6 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    35d6:	e0 91 b4 0a 	lds	r30, 0x0AB4
    35da:	f0 91 b5 0a 	lds	r31, 0x0AB5
    35de:	65 85       	ldd	r22, Z+13	; 0x0d
    35e0:	76 85       	ldd	r23, Z+14	; 0x0e
    35e2:	87 85       	ldd	r24, Z+15	; 0x0f
    35e4:	90 89       	ldd	r25, Z+16	; 0x10
}
    35e6:	08 95       	ret

000035e8 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    35e8:	cf 92       	push	r12
    35ea:	df 92       	push	r13
    35ec:	ef 92       	push	r14
    35ee:	ff 92       	push	r15
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    35f8:	c1 2c       	mov	r12, r1
    35fa:	d1 2c       	mov	r13, r1
    35fc:	76 01       	movw	r14, r12
    35fe:	c3 94       	inc	r12
    3600:	08 2e       	mov	r0, r24
    3602:	04 c0       	rjmp	.+8      	; 0x360c <nrk_signal_delete+0x24>
    3604:	cc 0c       	add	r12, r12
    3606:	dd 1c       	adc	r13, r13
    3608:	ee 1c       	adc	r14, r14
    360a:	ff 1c       	adc	r15, r15
    360c:	0a 94       	dec	r0
    360e:	d2 f7       	brpl	.-12     	; 0x3604 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3610:	40 91 7f 06 	lds	r20, 0x067F
    3614:	50 91 80 06 	lds	r21, 0x0680
    3618:	60 91 81 06 	lds	r22, 0x0681
    361c:	70 91 82 06 	lds	r23, 0x0682
    3620:	4c 21       	and	r20, r12
    3622:	5d 21       	and	r21, r13
    3624:	6e 21       	and	r22, r14
    3626:	7f 21       	and	r23, r15
    3628:	45 2b       	or	r20, r21
    362a:	46 2b       	or	r20, r22
    362c:	47 2b       	or	r20, r23
    362e:	09 f4       	brne	.+2      	; 0x3632 <nrk_signal_delete+0x4a>
    3630:	60 c0       	rjmp	.+192    	; 0x36f2 <nrk_signal_delete+0x10a>
    3632:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3634:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    3638:	eb ef       	ldi	r30, 0xFB	; 251
    363a:	f9 e0       	ldi	r31, 0x09	; 9
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    363c:	b7 01       	movw	r22, r14
    363e:	a6 01       	movw	r20, r12
    3640:	40 95       	com	r20
    3642:	50 95       	com	r21
    3644:	60 95       	com	r22
    3646:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3648:	13 e0       	ldi	r17, 0x03	; 3
    364a:	df 01       	movw	r26, r30
    364c:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    364e:	8c 91       	ld	r24, X
    3650:	8f 3f       	cpi	r24, 0xFF	; 255
    3652:	39 f1       	breq	.+78     	; 0x36a2 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3654:	84 81       	ldd	r24, Z+4	; 0x04
    3656:	95 81       	ldd	r25, Z+5	; 0x05
    3658:	a6 81       	ldd	r26, Z+6	; 0x06
    365a:	b7 81       	ldd	r27, Z+7	; 0x07
    365c:	8c 15       	cp	r24, r12
    365e:	9d 05       	cpc	r25, r13
    3660:	ae 05       	cpc	r26, r14
    3662:	bf 05       	cpc	r27, r15
    3664:	51 f4       	brne	.+20     	; 0x367a <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3666:	10 86       	std	Z+8, r1	; 0x08
    3668:	11 86       	std	Z+9, r1	; 0x09
    366a:	12 86       	std	Z+10, r1	; 0x0a
    366c:	13 86       	std	Z+11, r1	; 0x0b
    366e:	9f 01       	movw	r18, r30
    3670:	22 50       	subi	r18, 0x02	; 2
    3672:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3674:	e9 01       	movw	r28, r18
    3676:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3678:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    367a:	84 23       	and	r24, r20
    367c:	95 23       	and	r25, r21
    367e:	a6 23       	and	r26, r22
    3680:	b7 23       	and	r27, r23
    3682:	84 83       	std	Z+4, r24	; 0x04
    3684:	95 83       	std	Z+5, r25	; 0x05
    3686:	a6 83       	std	Z+6, r26	; 0x06
    3688:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    368a:	80 85       	ldd	r24, Z+8	; 0x08
    368c:	91 85       	ldd	r25, Z+9	; 0x09
    368e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3690:	b3 85       	ldd	r27, Z+11	; 0x0b
    3692:	84 23       	and	r24, r20
    3694:	95 23       	and	r25, r21
    3696:	a6 23       	and	r26, r22
    3698:	b7 23       	and	r27, r23
    369a:	80 87       	std	Z+8, r24	; 0x08
    369c:	91 87       	std	Z+9, r25	; 0x09
    369e:	a2 87       	std	Z+10, r26	; 0x0a
    36a0:	b3 87       	std	Z+11, r27	; 0x0b
    36a2:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    36a4:	da e0       	ldi	r29, 0x0A	; 10
    36a6:	e7 3a       	cpi	r30, 0xA7	; 167
    36a8:	fd 07       	cpc	r31, r29
    36aa:	79 f6       	brne	.-98     	; 0x364a <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    36ac:	8e ef       	ldi	r24, 0xFE	; 254
    36ae:	9f ef       	ldi	r25, 0xFF	; 255
    36b0:	af ef       	ldi	r26, 0xFF	; 255
    36b2:	bf ef       	ldi	r27, 0xFF	; 255
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <nrk_signal_delete+0xd6>
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	aa 1f       	adc	r26, r26
    36bc:	bb 1f       	adc	r27, r27
    36be:	0a 95       	dec	r16
    36c0:	d2 f7       	brpl	.-12     	; 0x36b6 <nrk_signal_delete+0xce>
    36c2:	40 91 7f 06 	lds	r20, 0x067F
    36c6:	50 91 80 06 	lds	r21, 0x0680
    36ca:	60 91 81 06 	lds	r22, 0x0681
    36ce:	70 91 82 06 	lds	r23, 0x0682
    36d2:	84 23       	and	r24, r20
    36d4:	95 23       	and	r25, r21
    36d6:	a6 23       	and	r26, r22
    36d8:	b7 23       	and	r27, r23
    36da:	80 93 7f 06 	sts	0x067F, r24
    36de:	90 93 80 06 	sts	0x0680, r25
    36e2:	a0 93 81 06 	sts	0x0681, r26
    36e6:	b0 93 82 06 	sts	0x0682, r27
	nrk_int_enable();
    36ea:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>

	return NRK_OK;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    36f2:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    36f8:	1f 91       	pop	r17
    36fa:	0f 91       	pop	r16
    36fc:	ff 90       	pop	r15
    36fe:	ef 90       	pop	r14
    3700:	df 90       	pop	r13
    3702:	cf 90       	pop	r12
    3704:	08 95       	ret

00003706 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    370a:	41 e0       	ldi	r20, 0x01	; 1
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	8a 01       	movw	r16, r20
    3714:	9b 01       	movw	r18, r22
    3716:	04 c0       	rjmp	.+8      	; 0x3720 <nrk_signal_unregister+0x1a>
    3718:	00 0f       	add	r16, r16
    371a:	11 1f       	adc	r17, r17
    371c:	22 1f       	adc	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	8a 95       	dec	r24
    3722:	d2 f7       	brpl	.-12     	; 0x3718 <nrk_signal_unregister+0x12>
    3724:	d9 01       	movw	r26, r18
    3726:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3728:	e0 91 b4 0a 	lds	r30, 0x0AB4
    372c:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3730:	45 85       	ldd	r20, Z+13	; 0x0d
    3732:	56 85       	ldd	r21, Z+14	; 0x0e
    3734:	67 85       	ldd	r22, Z+15	; 0x0f
    3736:	70 89       	ldd	r23, Z+16	; 0x10
    3738:	04 23       	and	r16, r20
    373a:	15 23       	and	r17, r21
    373c:	26 23       	and	r18, r22
    373e:	37 23       	and	r19, r23
    3740:	01 2b       	or	r16, r17
    3742:	02 2b       	or	r16, r18
    3744:	03 2b       	or	r16, r19
    3746:	d1 f0       	breq	.+52     	; 0x377c <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3748:	80 95       	com	r24
    374a:	90 95       	com	r25
    374c:	a0 95       	com	r26
    374e:	b0 95       	com	r27
    3750:	48 23       	and	r20, r24
    3752:	59 23       	and	r21, r25
    3754:	6a 23       	and	r22, r26
    3756:	7b 23       	and	r23, r27
    3758:	45 87       	std	Z+13, r20	; 0x0d
    375a:	56 87       	std	Z+14, r21	; 0x0e
    375c:	67 87       	std	Z+15, r22	; 0x0f
    375e:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3760:	41 89       	ldd	r20, Z+17	; 0x11
    3762:	52 89       	ldd	r21, Z+18	; 0x12
    3764:	63 89       	ldd	r22, Z+19	; 0x13
    3766:	74 89       	ldd	r23, Z+20	; 0x14
    3768:	84 23       	and	r24, r20
    376a:	95 23       	and	r25, r21
    376c:	a6 23       	and	r26, r22
    376e:	b7 23       	and	r27, r23
    3770:	81 8b       	std	Z+17, r24	; 0x11
    3772:	92 8b       	std	Z+18, r25	; 0x12
    3774:	a3 8b       	std	Z+19, r26	; 0x13
    3776:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	01 c0       	rjmp	.+2      	; 0x377e <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    377c:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	08 95       	ret

00003784 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3784:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3786:	40 91 7f 06 	lds	r20, 0x067F
    378a:	50 91 80 06 	lds	r21, 0x0680
    378e:	60 91 81 06 	lds	r22, 0x0681
    3792:	70 91 82 06 	lds	r23, 0x0682
    3796:	08 2e       	mov	r0, r24
    3798:	04 c0       	rjmp	.+8      	; 0x37a2 <nrk_signal_register+0x1e>
    379a:	76 95       	lsr	r23
    379c:	67 95       	ror	r22
    379e:	57 95       	ror	r21
    37a0:	47 95       	ror	r20
    37a2:	0a 94       	dec	r0
    37a4:	d2 f7       	brpl	.-12     	; 0x379a <nrk_signal_register+0x16>
    37a6:	40 ff       	sbrs	r20, 0
    37a8:	1d c0       	rjmp	.+58     	; 0x37e4 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    37aa:	e0 91 b4 0a 	lds	r30, 0x0AB4
    37ae:	f0 91 b5 0a 	lds	r31, 0x0AB5
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 e0       	ldi	r26, 0x00	; 0
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	04 c0       	rjmp	.+8      	; 0x37c4 <nrk_signal_register+0x40>
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	aa 1f       	adc	r26, r26
    37c2:	bb 1f       	adc	r27, r27
    37c4:	2a 95       	dec	r18
    37c6:	d2 f7       	brpl	.-12     	; 0x37bc <nrk_signal_register+0x38>
    37c8:	45 85       	ldd	r20, Z+13	; 0x0d
    37ca:	56 85       	ldd	r21, Z+14	; 0x0e
    37cc:	67 85       	ldd	r22, Z+15	; 0x0f
    37ce:	70 89       	ldd	r23, Z+16	; 0x10
    37d0:	84 2b       	or	r24, r20
    37d2:	95 2b       	or	r25, r21
    37d4:	a6 2b       	or	r26, r22
    37d6:	b7 2b       	or	r27, r23
    37d8:	85 87       	std	Z+13, r24	; 0x0d
    37da:	96 87       	std	Z+14, r25	; 0x0e
    37dc:	a7 87       	std	Z+15, r26	; 0x0f
    37de:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	08 95       	ret
	}
            
	return NRK_ERROR;
    37e4:	8f ef       	ldi	r24, 0xFF	; 255
}
    37e6:	08 95       	ret

000037e8 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    37e8:	cf 92       	push	r12
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    37f2:	c1 2c       	mov	r12, r1
    37f4:	d1 2c       	mov	r13, r1
    37f6:	76 01       	movw	r14, r12
    37f8:	c3 94       	inc	r12
    37fa:	04 c0       	rjmp	.+8      	; 0x3804 <nrk_event_signal+0x1c>
    37fc:	cc 0c       	add	r12, r12
    37fe:	dd 1c       	adc	r13, r13
    3800:	ee 1c       	adc	r14, r14
    3802:	ff 1c       	adc	r15, r15
    3804:	8a 95       	dec	r24
    3806:	d2 f7       	brpl	.-12     	; 0x37fc <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3808:	80 91 7f 06 	lds	r24, 0x067F
    380c:	90 91 80 06 	lds	r25, 0x0680
    3810:	a0 91 81 06 	lds	r26, 0x0681
    3814:	b0 91 82 06 	lds	r27, 0x0682
    3818:	8c 21       	and	r24, r12
    381a:	9d 21       	and	r25, r13
    381c:	ae 21       	and	r26, r14
    381e:	bf 21       	and	r27, r15
    3820:	89 2b       	or	r24, r25
    3822:	8a 2b       	or	r24, r26
    3824:	8b 2b       	or	r24, r27
    3826:	11 f4       	brne	.+4      	; 0x382c <nrk_event_signal+0x44>
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	44 c0       	rjmp	.+136    	; 0x38b4 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    382c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    3830:	e9 ef       	ldi	r30, 0xF9	; 249
    3832:	f9 e0       	ldi	r31, 0x09	; 9
    3834:	ab ef       	ldi	r26, 0xFB	; 251
    3836:	b9 e0       	ldi	r27, 0x09	; 9

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3838:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    383a:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    383c:	90 81       	ld	r25, Z
    383e:	91 30       	cpi	r25, 0x01	; 1
    3840:	b9 f4       	brne	.+46     	; 0x3870 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3842:	42 85       	ldd	r20, Z+10	; 0x0a
    3844:	53 85       	ldd	r21, Z+11	; 0x0b
    3846:	64 85       	ldd	r22, Z+12	; 0x0c
    3848:	75 85       	ldd	r23, Z+13	; 0x0d
    384a:	4c 21       	and	r20, r12
    384c:	5d 21       	and	r21, r13
    384e:	6e 21       	and	r22, r14
    3850:	7f 21       	and	r23, r15
    3852:	45 2b       	or	r20, r21
    3854:	46 2b       	or	r20, r22
    3856:	47 2b       	or	r20, r23
    3858:	59 f0       	breq	.+22     	; 0x3870 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    385a:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    385c:	16 86       	std	Z+14, r1	; 0x0e
    385e:	17 86       	std	Z+15, r1	; 0x0f
    3860:	10 8a       	std	Z+16, r1	; 0x10
    3862:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3864:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3866:	c2 86       	std	Z+10, r12	; 0x0a
    3868:	d3 86       	std	Z+11, r13	; 0x0b
    386a:	e4 86       	std	Z+12, r14	; 0x0c
    386c:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    386e:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3870:	90 81       	ld	r25, Z
    3872:	92 30       	cpi	r25, 0x02	; 2
    3874:	a1 f4       	brne	.+40     	; 0x389e <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3876:	42 85       	ldd	r20, Z+10	; 0x0a
    3878:	53 85       	ldd	r21, Z+11	; 0x0b
    387a:	64 85       	ldd	r22, Z+12	; 0x0c
    387c:	75 85       	ldd	r23, Z+13	; 0x0d
    387e:	4c 15       	cp	r20, r12
    3880:	5d 05       	cpc	r21, r13
    3882:	6e 05       	cpc	r22, r14
    3884:	7f 05       	cpc	r23, r15
    3886:	59 f4       	brne	.+22     	; 0x389e <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3888:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    388a:	16 86       	std	Z+14, r1	; 0x0e
    388c:	17 86       	std	Z+15, r1	; 0x0f
    388e:	10 8a       	std	Z+16, r1	; 0x10
    3890:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3892:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3894:	12 86       	std	Z+10, r1	; 0x0a
    3896:	13 86       	std	Z+11, r1	; 0x0b
    3898:	14 86       	std	Z+12, r1	; 0x0c
    389a:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    389c:	c1 e0       	ldi	r28, 0x01	; 1
    389e:	bb 96       	adiw	r30, 0x2b	; 43
    38a0:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    38a2:	9a e0       	ldi	r25, 0x0A	; 10
    38a4:	e5 3a       	cpi	r30, 0xA5	; 165
    38a6:	f9 07       	cpc	r31, r25
    38a8:	49 f6       	brne	.-110    	; 0x383c <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    38aa:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
	if(event_occured)
    38ae:	c1 11       	cpse	r28, r1
    38b0:	05 c0       	rjmp	.+10     	; 0x38bc <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    38b2:	82 e0       	ldi	r24, 0x02	; 2
    38b4:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
	return NRK_ERROR;
    38b8:	8f ef       	ldi	r24, 0xFF	; 255
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    38be:	cf 91       	pop	r28
    38c0:	ff 90       	pop	r15
    38c2:	ef 90       	pop	r14
    38c4:	df 90       	pop	r13
    38c6:	cf 90       	pop	r12
    38c8:	08 95       	ret

000038ca <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    38ce:	e0 91 b4 0a 	lds	r30, 0x0AB4
    38d2:	f0 91 b5 0a 	lds	r31, 0x0AB5
    38d6:	05 85       	ldd	r16, Z+13	; 0x0d
    38d8:	16 85       	ldd	r17, Z+14	; 0x0e
    38da:	27 85       	ldd	r18, Z+15	; 0x0f
    38dc:	30 89       	ldd	r19, Z+16	; 0x10
    38de:	06 23       	and	r16, r22
    38e0:	17 23       	and	r17, r23
    38e2:	28 23       	and	r18, r24
    38e4:	39 23       	and	r19, r25
    38e6:	01 15       	cp	r16, r1
    38e8:	11 05       	cpc	r17, r1
    38ea:	21 05       	cpc	r18, r1
    38ec:	31 05       	cpc	r19, r1
    38ee:	11 f1       	breq	.+68     	; 0x3934 <nrk_event_wait+0x6a>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    38f4:	81 8b       	std	Z+17, r24	; 0x11
    38f6:	92 8b       	std	Z+18, r25	; 0x12
    38f8:	a3 8b       	std	Z+19, r26	; 0x13
    38fa:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    38fc:	21 e0       	ldi	r18, 0x01	; 1
    38fe:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3900:	00 90 a4 0a 	lds	r0, 0x0AA4
    3904:	04 c0       	rjmp	.+8      	; 0x390e <nrk_event_wait+0x44>
    3906:	b6 95       	lsr	r27
    3908:	a7 95       	ror	r26
    390a:	97 95       	ror	r25
    390c:	87 95       	ror	r24
    390e:	0a 94       	dec	r0
    3910:	d2 f7       	brpl	.-12     	; 0x3906 <nrk_event_wait+0x3c>
    3912:	80 ff       	sbrs	r24, 0
    3914:	03 c0       	rjmp	.+6      	; 0x391c <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3916:	0e 94 1d 20 	call	0x403a	; 0x403a <nrk_wait_until_nw>
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3924:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3928:	f0 91 b5 0a 	lds	r31, 0x0AB5
    392c:	01 89       	ldd	r16, Z+17	; 0x11
    392e:	12 89       	ldd	r17, Z+18	; 0x12
    3930:	23 89       	ldd	r18, Z+19	; 0x13
    3932:	34 89       	ldd	r19, Z+20	; 0x14
}
    3934:	c9 01       	movw	r24, r18
    3936:	b8 01       	movw	r22, r16
    3938:	1f 91       	pop	r17
    393a:	0f 91       	pop	r16
    393c:	08 95       	ret

0000393e <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	08 95       	ret

00003944 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3944:	21 e0       	ldi	r18, 0x01	; 1
    3946:	80 5a       	subi	r24, 0xA0	; 160
    3948:	9a 40       	sbci	r25, 0x0A	; 10
    394a:	09 f4       	brne	.+2      	; 0x394e <nrk_get_resource_index+0xa>
    394c:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    394e:	82 2f       	mov	r24, r18
    3950:	81 95       	neg	r24
    3952:	08 95       	ret

00003954 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3954:	0e 94 a2 1c 	call	0x3944	; 0x3944 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3958:	8f 3f       	cpi	r24, 0xFF	; 255
    395a:	11 f4       	brne	.+4      	; 0x3960 <nrk_sem_query+0xc>
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	03 c0       	rjmp	.+6      	; 0x3966 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3960:	81 30       	cpi	r24, 0x01	; 1
    3962:	29 f4       	brne	.+10     	; 0x396e <nrk_sem_query+0x1a>
    3964:	82 e0       	ldi	r24, 0x02	; 2
    3966:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
    396a:	8f ef       	ldi	r24, 0xFF	; 255
    396c:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    396e:	99 27       	eor	r25, r25
    3970:	87 fd       	sbrc	r24, 7
    3972:	90 95       	com	r25
    3974:	fc 01       	movw	r30, r24
    3976:	ee 0f       	add	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	8e 0f       	add	r24, r30
    397c:	9f 1f       	adc	r25, r31
    397e:	fc 01       	movw	r30, r24
    3980:	e0 56       	subi	r30, 0x60	; 96
    3982:	f5 4f       	sbci	r31, 0xF5	; 245
    3984:	82 81       	ldd	r24, Z+2	; 0x02
}
    3986:	08 95       	ret

00003988 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3988:	ef 92       	push	r14
    398a:	ff 92       	push	r15
    398c:	0f 93       	push	r16
    398e:	1f 93       	push	r17
    3990:	cf 93       	push	r28
    3992:	df 93       	push	r29
    3994:	1f 92       	push	r1
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    399a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    399e:	8f 3f       	cpi	r24, 0xFF	; 255
    39a0:	11 f4       	brne	.+4      	; 0x39a6 <nrk_sem_pend+0x1e>
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	03 c0       	rjmp	.+6      	; 0x39ac <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    39a6:	81 30       	cpi	r24, 0x01	; 1
    39a8:	29 f4       	brne	.+10     	; 0x39b4 <nrk_sem_pend+0x2c>
    39aa:	82 e0       	ldi	r24, 0x02	; 2
    39ac:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	41 c0       	rjmp	.+130    	; 0x3a36 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    39b4:	89 83       	std	Y+1, r24	; 0x01
    39b6:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	e8 2e       	mov	r14, r24
    39be:	ff 24       	eor	r15, r15
    39c0:	e7 fc       	sbrc	r14, 7
    39c2:	f0 94       	com	r15
    39c4:	87 01       	movw	r16, r14
    39c6:	00 0f       	add	r16, r16
    39c8:	11 1f       	adc	r17, r17
    39ca:	f8 01       	movw	r30, r16
    39cc:	ee 0d       	add	r30, r14
    39ce:	ff 1d       	adc	r31, r15
    39d0:	e0 56       	subi	r30, 0x60	; 96
    39d2:	f5 4f       	sbci	r31, 0xF5	; 245
    39d4:	92 81       	ldd	r25, Z+2	; 0x02
    39d6:	91 11       	cpse	r25, r1
    39d8:	16 c0       	rjmp	.+44     	; 0x3a06 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    39da:	e0 91 b4 0a 	lds	r30, 0x0AB4
    39de:	f0 91 b5 0a 	lds	r31, 0x0AB5
    39e2:	97 81       	ldd	r25, Z+7	; 0x07
    39e4:	92 60       	ori	r25, 0x02	; 2
    39e6:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    39e8:	99 27       	eor	r25, r25
    39ea:	87 fd       	sbrc	r24, 7
    39ec:	90 95       	com	r25
    39ee:	a9 2f       	mov	r26, r25
    39f0:	b9 2f       	mov	r27, r25
    39f2:	81 8b       	std	Z+17, r24	; 0x11
    39f4:	92 8b       	std	Z+18, r25	; 0x12
    39f6:	a3 8b       	std	Z+19, r26	; 0x13
    39f8:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    39fa:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3a06:	0e 0d       	add	r16, r14
    3a08:	1f 1d       	adc	r17, r15
    3a0a:	d8 01       	movw	r26, r16
    3a0c:	a0 56       	subi	r26, 0x60	; 96
    3a0e:	b5 4f       	sbci	r27, 0xF5	; 245
    3a10:	12 96       	adiw	r26, 0x02	; 2
    3a12:	8c 91       	ld	r24, X
    3a14:	12 97       	sbiw	r26, 0x02	; 2
    3a16:	81 50       	subi	r24, 0x01	; 1
    3a18:	12 96       	adiw	r26, 0x02	; 2
    3a1a:	8c 93       	st	X, r24
    3a1c:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3a1e:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3a22:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3a26:	11 96       	adiw	r26, 0x01	; 1
    3a28:	8c 91       	ld	r24, X
    3a2a:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    3a30:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>

	return NRK_OK;
    3a34:	81 e0       	ldi	r24, 0x01	; 1
}
    3a36:	0f 90       	pop	r0
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	ff 90       	pop	r15
    3a42:	ef 90       	pop	r14
    3a44:	08 95       	ret

00003a46 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	1f 92       	push	r1
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3a54:	0e 94 a2 1c 	call	0x3944	; 0x3944 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3a58:	8f 3f       	cpi	r24, 0xFF	; 255
    3a5a:	11 f4       	brne	.+4      	; 0x3a60 <nrk_sem_post+0x1a>
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	03 c0       	rjmp	.+6      	; 0x3a66 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3a60:	81 30       	cpi	r24, 0x01	; 1
    3a62:	29 f4       	brne	.+10     	; 0x3a6e <nrk_sem_post+0x28>
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
    3a6a:	8f ef       	ldi	r24, 0xFF	; 255
    3a6c:	44 c0       	rjmp	.+136    	; 0x3af6 <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3a6e:	48 2f       	mov	r20, r24
    3a70:	55 27       	eor	r21, r21
    3a72:	47 fd       	sbrc	r20, 7
    3a74:	50 95       	com	r21
    3a76:	9a 01       	movw	r18, r20
    3a78:	22 0f       	add	r18, r18
    3a7a:	33 1f       	adc	r19, r19
    3a7c:	24 0f       	add	r18, r20
    3a7e:	35 1f       	adc	r19, r21
    3a80:	89 01       	movw	r16, r18
    3a82:	00 56       	subi	r16, 0x60	; 96
    3a84:	15 4f       	sbci	r17, 0xF5	; 245
    3a86:	f8 01       	movw	r30, r16
    3a88:	22 81       	ldd	r18, Z+2	; 0x02
    3a8a:	90 81       	ld	r25, Z
    3a8c:	29 17       	cp	r18, r25
    3a8e:	94 f5       	brge	.+100    	; 0x3af4 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3a90:	89 83       	std	Y+1, r24	; 0x01
    3a92:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>

		nrk_sem_list[id].value++;
    3a96:	f8 01       	movw	r30, r16
    3a98:	92 81       	ldd	r25, Z+2	; 0x02
    3a9a:	9f 5f       	subi	r25, 0xFF	; 255
    3a9c:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3a9e:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3aa2:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3aa6:	14 82       	std	Z+4, r1	; 0x04
    3aa8:	e9 ef       	ldi	r30, 0xF9	; 249
    3aaa:	f9 e0       	ldi	r31, 0x09	; 9

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	99 27       	eor	r25, r25
    3ab0:	87 fd       	sbrc	r24, 7
    3ab2:	90 95       	com	r25
    3ab4:	a9 2f       	mov	r26, r25
    3ab6:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3ab8:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3aba:	30 81       	ld	r19, Z
    3abc:	32 30       	cpi	r19, 0x02	; 2
    3abe:	99 f4       	brne	.+38     	; 0x3ae6 <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3ac0:	42 85       	ldd	r20, Z+10	; 0x0a
    3ac2:	53 85       	ldd	r21, Z+11	; 0x0b
    3ac4:	64 85       	ldd	r22, Z+12	; 0x0c
    3ac6:	75 85       	ldd	r23, Z+13	; 0x0d
    3ac8:	48 17       	cp	r20, r24
    3aca:	59 07       	cpc	r21, r25
    3acc:	6a 07       	cpc	r22, r26
    3ace:	7b 07       	cpc	r23, r27
    3ad0:	51 f4       	brne	.+20     	; 0x3ae6 <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3ad2:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3ad4:	16 86       	std	Z+14, r1	; 0x0e
    3ad6:	17 86       	std	Z+15, r1	; 0x0f
    3ad8:	10 8a       	std	Z+16, r1	; 0x10
    3ada:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3adc:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3ade:	12 86       	std	Z+10, r1	; 0x0a
    3ae0:	13 86       	std	Z+11, r1	; 0x0b
    3ae2:	14 86       	std	Z+12, r1	; 0x0c
    3ae4:	15 86       	std	Z+13, r1	; 0x0d
    3ae6:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3ae8:	3a e0       	ldi	r19, 0x0A	; 10
    3aea:	e5 3a       	cpi	r30, 0xA5	; 165
    3aec:	f3 07       	cpc	r31, r19
    3aee:	29 f7       	brne	.-54     	; 0x3aba <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    3af0:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
	}
		
return NRK_OK;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
}
    3af6:	0f 90       	pop	r0
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	08 95       	ret

00003b02 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3b02:	0e 94 a2 1c 	call	0x3944	; 0x3944 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3b06:	8f 3f       	cpi	r24, 0xFF	; 255
    3b08:	11 f4       	brne	.+4      	; 0x3b0e <nrk_sem_delete+0xc>
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	03 c0       	rjmp	.+6      	; 0x3b14 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3b0e:	81 30       	cpi	r24, 0x01	; 1
    3b10:	29 f4       	brne	.+10     	; 0x3b1c <nrk_sem_delete+0x1a>
    3b12:	82 e0       	ldi	r24, 0x02	; 2
    3b14:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
    3b18:	8f ef       	ldi	r24, 0xFF	; 255
    3b1a:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3b1c:	99 27       	eor	r25, r25
    3b1e:	87 fd       	sbrc	r24, 7
    3b20:	90 95       	com	r25
    3b22:	fc 01       	movw	r30, r24
    3b24:	ee 0f       	add	r30, r30
    3b26:	ff 1f       	adc	r31, r31
    3b28:	8e 0f       	add	r24, r30
    3b2a:	9f 1f       	adc	r25, r31
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	e0 56       	subi	r30, 0x60	; 96
    3b30:	f5 4f       	sbci	r31, 0xF5	; 245
    3b32:	8f ef       	ldi	r24, 0xFF	; 255
    3b34:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3b36:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3b38:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3b3a:	80 91 b3 0a 	lds	r24, 0x0AB3
    3b3e:	81 50       	subi	r24, 0x01	; 1
    3b40:	80 93 b3 0a 	sts	0x0AB3, r24
return NRK_OK;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
}
    3b46:	08 95       	ret

00003b48 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3b48:	e0 91 a9 0a 	lds	r30, 0x0AA9
    3b4c:	f0 91 aa 0a 	lds	r31, 0x0AAA
}
    3b50:	80 81       	ld	r24, Z
    3b52:	08 95       	ret

00003b54 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3b54:	e0 91 a9 0a 	lds	r30, 0x0AA9
    3b58:	f0 91 aa 0a 	lds	r31, 0x0AAA
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3b5c:	30 97       	sbiw	r30, 0x00	; 0
    3b5e:	21 f0       	breq	.+8      	; 0x3b68 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3b60:	03 80       	ldd	r0, Z+3	; 0x03
    3b62:	f4 81       	ldd	r31, Z+4	; 0x04
    3b64:	e0 2d       	mov	r30, r0
    3b66:	fa cf       	rjmp	.-12     	; 0x3b5c <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3b68:	08 95       	ret

00003b6a <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3b7e:	e0 91 f0 09 	lds	r30, 0x09F0
    3b82:	f0 91 f1 09 	lds	r31, 0x09F1
    3b86:	30 97       	sbiw	r30, 0x00	; 0
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <nrk_add_to_readyQ+0x22>
    3b8a:	94 c0       	rjmp	.+296    	; 0x3cb4 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    3b8c:	00 91 a9 0a 	lds	r16, 0x0AA9
    3b90:	10 91 aa 0a 	lds	r17, 0x0AAA
    CurNode = _free_node;

    if (_head_node != NULL)
    3b94:	01 15       	cp	r16, r1
    3b96:	11 05       	cpc	r17, r1
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <nrk_add_to_readyQ+0x32>
    3b9a:	4c c0       	rjmp	.+152    	; 0x3c34 <nrk_add_to_readyQ+0xca>
    3b9c:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3b9e:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3ba0:	58 2f       	mov	r21, r24
    3ba2:	54 03       	mulsu	r21, r20
    3ba4:	90 01       	movw	r18, r0
    3ba6:	11 24       	eor	r1, r1
    3ba8:	2e 50       	subi	r18, 0x0E	; 14
    3baa:	36 4f       	sbci	r19, 0xF6	; 246
    3bac:	79 01       	movw	r14, r18
    3bae:	9a e0       	ldi	r25, 0x0A	; 10
    3bb0:	e9 0e       	add	r14, r25
    3bb2:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3bb4:	69 01       	movw	r12, r18
    3bb6:	c4 e0       	ldi	r28, 0x04	; 4
    3bb8:	cc 0e       	add	r12, r28
    3bba:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3bbc:	59 01       	movw	r10, r18
    3bbe:	db e0       	ldi	r29, 0x0B	; 11
    3bc0:	ad 0e       	add	r10, r29
    3bc2:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3bc4:	2c 91       	ld	r18, X
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	42 9f       	mul	r20, r18
    3bca:	b0 01       	movw	r22, r0
    3bcc:	43 9f       	mul	r20, r19
    3bce:	70 0d       	add	r23, r0
    3bd0:	11 24       	eor	r1, r1
    3bd2:	6e 50       	subi	r22, 0x0E	; 14
    3bd4:	76 4f       	sbci	r23, 0xF6	; 246
    3bd6:	eb 01       	movw	r28, r22
    3bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bda:	99 23       	and	r25, r25
    3bdc:	29 f0       	breq	.+10     	; 0x3be8 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3bde:	5b 85       	ldd	r21, Y+11	; 0x0b
    3be0:	e7 01       	movw	r28, r14
    3be2:	98 81       	ld	r25, Y
    3be4:	59 17       	cp	r21, r25
    3be6:	40 f1       	brcs	.+80     	; 0x3c38 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3be8:	e6 01       	movw	r28, r12
    3bea:	98 81       	ld	r25, Y
    3bec:	99 23       	and	r25, r25
    3bee:	69 f0       	breq	.+26     	; 0x3c0a <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3bf0:	42 9f       	mul	r20, r18
    3bf2:	b0 01       	movw	r22, r0
    3bf4:	43 9f       	mul	r20, r19
    3bf6:	70 0d       	add	r23, r0
    3bf8:	11 24       	eor	r1, r1
    3bfa:	6e 50       	subi	r22, 0x0E	; 14
    3bfc:	76 4f       	sbci	r23, 0xF6	; 246
    3bfe:	eb 01       	movw	r28, r22
    3c00:	5a 85       	ldd	r21, Y+10	; 0x0a
    3c02:	e5 01       	movw	r28, r10
    3c04:	98 81       	ld	r25, Y
    3c06:	59 17       	cp	r21, r25
    3c08:	b8 f0       	brcs	.+46     	; 0x3c38 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3c0a:	42 9f       	mul	r20, r18
    3c0c:	b0 01       	movw	r22, r0
    3c0e:	43 9f       	mul	r20, r19
    3c10:	70 0d       	add	r23, r0
    3c12:	11 24       	eor	r1, r1
    3c14:	9b 01       	movw	r18, r22
    3c16:	2e 50       	subi	r18, 0x0E	; 14
    3c18:	36 4f       	sbci	r19, 0xF6	; 246
    3c1a:	e9 01       	movw	r28, r18
    3c1c:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c1e:	e7 01       	movw	r28, r14
    3c20:	98 81       	ld	r25, Y
    3c22:	29 17       	cp	r18, r25
    3c24:	48 f0       	brcs	.+18     	; 0x3c38 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3c26:	13 96       	adiw	r26, 0x03	; 3
    3c28:	0d 90       	ld	r0, X+
    3c2a:	bc 91       	ld	r27, X
    3c2c:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3c2e:	10 97       	sbiw	r26, 0x00	; 0
    3c30:	49 f6       	brne	.-110    	; 0x3bc4 <nrk_add_to_readyQ+0x5a>
    3c32:	02 c0       	rjmp	.+4      	; 0x3c38 <nrk_add_to_readyQ+0xce>
    3c34:	a0 e0       	ldi	r26, 0x00	; 0
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3c38:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3c3a:	c3 81       	ldd	r28, Z+3	; 0x03
    3c3c:	d4 81       	ldd	r29, Z+4	; 0x04
    3c3e:	d0 93 f1 09 	sts	0x09F1, r29
    3c42:	c0 93 f0 09 	sts	0x09F0, r28

    if (NextNode == _head_node)
    3c46:	a0 17       	cp	r26, r16
    3c48:	b1 07       	cpc	r27, r17
    3c4a:	b1 f4       	brne	.+44     	; 0x3c78 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    3c4c:	10 97       	sbiw	r26, 0x00	; 0
    3c4e:	49 f0       	breq	.+18     	; 0x3c62 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    3c50:	b4 83       	std	Z+4, r27	; 0x04
    3c52:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    3c54:	12 82       	std	Z+2, r1	; 0x02
    3c56:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3c58:	12 96       	adiw	r26, 0x02	; 2
    3c5a:	fc 93       	st	X, r31
    3c5c:	ee 93       	st	-X, r30
    3c5e:	11 97       	sbiw	r26, 0x01	; 1
    3c60:	06 c0       	rjmp	.+12     	; 0x3c6e <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    3c62:	14 82       	std	Z+4, r1	; 0x04
    3c64:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3c66:	12 82       	std	Z+2, r1	; 0x02
    3c68:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3c6a:	fa 83       	std	Y+2, r31	; 0x02
    3c6c:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3c6e:	f0 93 aa 0a 	sts	0x0AAA, r31
    3c72:	e0 93 a9 0a 	sts	0x0AA9, r30
    3c76:	1e c0       	rjmp	.+60     	; 0x3cb4 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    3c78:	ac 17       	cp	r26, r28
    3c7a:	bd 07       	cpc	r27, r29
    3c7c:	79 f0       	breq	.+30     	; 0x3c9c <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3c7e:	11 96       	adiw	r26, 0x01	; 1
    3c80:	8d 91       	ld	r24, X+
    3c82:	9c 91       	ld	r25, X
    3c84:	12 97       	sbiw	r26, 0x02	; 2
    3c86:	92 83       	std	Z+2, r25	; 0x02
    3c88:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3c8a:	b4 83       	std	Z+4, r27	; 0x04
    3c8c:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3c8e:	11 96       	adiw	r26, 0x01	; 1
    3c90:	cd 91       	ld	r28, X+
    3c92:	dc 91       	ld	r29, X
    3c94:	12 97       	sbiw	r26, 0x02	; 2
    3c96:	fc 83       	std	Y+4, r31	; 0x04
    3c98:	eb 83       	std	Y+3, r30	; 0x03
    3c9a:	08 c0       	rjmp	.+16     	; 0x3cac <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3c9c:	14 82       	std	Z+4, r1	; 0x04
    3c9e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3ca0:	11 96       	adiw	r26, 0x01	; 1
    3ca2:	8d 91       	ld	r24, X+
    3ca4:	9c 91       	ld	r25, X
    3ca6:	12 97       	sbiw	r26, 0x02	; 2
    3ca8:	92 83       	std	Z+2, r25	; 0x02
    3caa:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    3cac:	12 96       	adiw	r26, 0x02	; 2
    3cae:	fc 93       	st	X, r31
    3cb0:	ee 93       	st	-X, r30
    3cb2:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	ff 90       	pop	r15
    3cbe:	ef 90       	pop	r14
    3cc0:	df 90       	pop	r13
    3cc2:	cf 90       	pop	r12
    3cc4:	bf 90       	pop	r11
    3cc6:	af 90       	pop	r10
    3cc8:	08 95       	ret

00003cca <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3cce:	e0 91 a9 0a 	lds	r30, 0x0AA9
    3cd2:	f0 91 aa 0a 	lds	r31, 0x0AAA
    3cd6:	30 97       	sbiw	r30, 0x00	; 0
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <nrk_rem_from_readyQ+0x12>
    3cda:	44 c0       	rjmp	.+136    	; 0x3d64 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3cdc:	99 27       	eor	r25, r25
    3cde:	87 fd       	sbrc	r24, 7
    3ce0:	90 95       	com	r25
    3ce2:	20 81       	ld	r18, Z
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	28 17       	cp	r18, r24
    3ce8:	39 07       	cpc	r19, r25
    3cea:	81 f4       	brne	.+32     	; 0x3d0c <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3cec:	a3 81       	ldd	r26, Z+3	; 0x03
    3cee:	b4 81       	ldd	r27, Z+4	; 0x04
    3cf0:	b0 93 aa 0a 	sts	0x0AAA, r27
    3cf4:	a0 93 a9 0a 	sts	0x0AA9, r26
        _head_node->Prev = NULL;
    3cf8:	12 96       	adiw	r26, 0x02	; 2
    3cfa:	1c 92       	st	X, r1
    3cfc:	1e 92       	st	-X, r1
    3cfe:	11 97       	sbiw	r26, 0x01	; 1
    3d00:	18 c0       	rjmp	.+48     	; 0x3d32 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    3d02:	03 80       	ldd	r0, Z+3	; 0x03
    3d04:	f4 81       	ldd	r31, Z+4	; 0x04
    3d06:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3d08:	30 97       	sbiw	r30, 0x00	; 0
    3d0a:	61 f1       	breq	.+88     	; 0x3d64 <nrk_rem_from_readyQ+0x9a>
    3d0c:	20 81       	ld	r18, Z
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	28 17       	cp	r18, r24
    3d12:	39 07       	cpc	r19, r25
    3d14:	b1 f7       	brne	.-20     	; 0x3d02 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3d16:	c1 81       	ldd	r28, Z+1	; 0x01
    3d18:	d2 81       	ldd	r29, Z+2	; 0x02
    3d1a:	83 81       	ldd	r24, Z+3	; 0x03
    3d1c:	94 81       	ldd	r25, Z+4	; 0x04
    3d1e:	9c 83       	std	Y+4, r25	; 0x04
    3d20:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    3d22:	a3 81       	ldd	r26, Z+3	; 0x03
    3d24:	b4 81       	ldd	r27, Z+4	; 0x04
    3d26:	10 97       	sbiw	r26, 0x00	; 0
    3d28:	21 f0       	breq	.+8      	; 0x3d32 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3d2a:	12 96       	adiw	r26, 0x02	; 2
    3d2c:	dc 93       	st	X, r29
    3d2e:	ce 93       	st	-X, r28
    3d30:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    3d32:	a0 91 f0 09 	lds	r26, 0x09F0
    3d36:	b0 91 f1 09 	lds	r27, 0x09F1
    3d3a:	10 97       	sbiw	r26, 0x00	; 0
    3d3c:	39 f4       	brne	.+14     	; 0x3d4c <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    3d3e:	f0 93 f1 09 	sts	0x09F1, r31
    3d42:	e0 93 f0 09 	sts	0x09F0, r30
        _free_node->Next = NULL;
    3d46:	14 82       	std	Z+4, r1	; 0x04
    3d48:	13 82       	std	Z+3, r1	; 0x03
    3d4a:	0a c0       	rjmp	.+20     	; 0x3d60 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3d4c:	b4 83       	std	Z+4, r27	; 0x04
    3d4e:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    3d50:	12 96       	adiw	r26, 0x02	; 2
    3d52:	fc 93       	st	X, r31
    3d54:	ee 93       	st	-X, r30
    3d56:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3d58:	f0 93 f1 09 	sts	0x09F1, r31
    3d5c:	e0 93 f0 09 	sts	0x09F0, r30
    }
    _free_node->Prev = NULL;
    3d60:	12 82       	std	Z+2, r1	; 0x02
    3d62:	11 82       	std	Z+1, r1	; 0x01
}
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	08 95       	ret

00003d6a <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3d6a:	ef 92       	push	r14
    3d6c:	ff 92       	push	r15
    3d6e:	0f 93       	push	r16
    3d70:	1f 93       	push	r17
    3d72:	cf 93       	push	r28
    3d74:	df 93       	push	r29
    3d76:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3d78:	4b 81       	ldd	r20, Y+3	; 0x03
    3d7a:	5c 81       	ldd	r21, Y+4	; 0x04
    3d7c:	69 81       	ldd	r22, Y+1	; 0x01
    3d7e:	7a 81       	ldd	r23, Y+2	; 0x02
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3d88:	2f 81       	ldd	r18, Y+7	; 0x07
    3d8a:	22 23       	and	r18, r18
    3d8c:	71 f0       	breq	.+28     	; 0x3daa <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3d8e:	4b 81       	ldd	r20, Y+3	; 0x03
    3d90:	5c 81       	ldd	r21, Y+4	; 0x04
    3d92:	e1 2c       	mov	r14, r1
    3d94:	f1 2c       	mov	r15, r1
    3d96:	00 e0       	ldi	r16, 0x00	; 0
    3d98:	10 e0       	ldi	r17, 0x00	; 0
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	bc 01       	movw	r22, r24
    3da0:	ce 01       	movw	r24, r28
    3da2:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3da6:	1f 82       	std	Y+7, r1	; 0x07
    3da8:	0c c0       	rjmp	.+24     	; 0x3dc2 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3daa:	e8 81       	ld	r30, Y
    3dac:	2b e2       	ldi	r18, 0x2B	; 43
    3dae:	e2 02       	muls	r30, r18
    3db0:	f0 01       	movw	r30, r0
    3db2:	11 24       	eor	r1, r1
    3db4:	ee 50       	subi	r30, 0x0E	; 14
    3db6:	f6 4f       	sbci	r31, 0xF6	; 246
    3db8:	21 85       	ldd	r18, Z+9	; 0x09
    3dba:	23 30       	cpi	r18, 0x03	; 3
    3dbc:	b9 f4       	brne	.+46     	; 0x3dec <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3dc2:	e8 81       	ld	r30, Y
    3dc4:	8b e2       	ldi	r24, 0x2B	; 43
    3dc6:	e8 02       	muls	r30, r24
    3dc8:	f0 01       	movw	r30, r0
    3dca:	11 24       	eor	r1, r1
    3dcc:	ee 50       	subi	r30, 0x0E	; 14
    3dce:	f6 4f       	sbci	r31, 0xF6	; 246
    3dd0:	85 89       	ldd	r24, Z+21	; 0x15
    3dd2:	96 89       	ldd	r25, Z+22	; 0x16
    3dd4:	a7 89       	ldd	r26, Z+23	; 0x17
    3dd6:	b0 8d       	ldd	r27, Z+24	; 0x18
    3dd8:	89 2b       	or	r24, r25
    3dda:	8a 2b       	or	r24, r26
    3ddc:	8b 2b       	or	r24, r27
    3dde:	41 f4       	brne	.+16     	; 0x3df0 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3de0:	82 e0       	ldi	r24, 0x02	; 2
    3de2:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3de4:	88 81       	ld	r24, Y
    3de6:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <nrk_add_to_readyQ>
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    3dec:	8f ef       	ldi	r24, 0xFF	; 255
    3dee:	01 c0       	rjmp	.+2      	; 0x3df2 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3df0:	81 e0       	ldi	r24, 0x01	; 1
}
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	1f 91       	pop	r17
    3df8:	0f 91       	pop	r16
    3dfa:	ff 90       	pop	r15
    3dfc:	ef 90       	pop	r14
    3dfe:	08 95       	ret

00003e00 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	28 97       	sbiw	r28, 0x08	; 8
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	29 83       	std	Y+1, r18	; 0x01
    3e18:	3a 83       	std	Y+2, r19	; 0x02
    3e1a:	4b 83       	std	Y+3, r20	; 0x03
    3e1c:	5c 83       	std	Y+4, r21	; 0x04
    3e1e:	6d 83       	std	Y+5, r22	; 0x05
    3e20:	7e 83       	std	Y+6, r23	; 0x06
    3e22:	8f 83       	std	Y+7, r24	; 0x07
    3e24:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3e26:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3e2a:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    3e2e:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    3e30:	ce 01       	movw	r24, r28
    3e32:	01 96       	adiw	r24, 0x01	; 1
    3e34:	0e 94 12 23 	call	0x4624	; 0x4624 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    3e38:	63 30       	cpi	r22, 0x03	; 3
    3e3a:	71 05       	cpc	r23, r1
    3e3c:	98 f0       	brcs	.+38     	; 0x3e64 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3e3e:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3e42:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3e46:	21 2f       	mov	r18, r17
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	62 0f       	add	r22, r18
    3e4c:	73 1f       	adc	r23, r19
    3e4e:	cb 01       	movw	r24, r22
    3e50:	a0 e0       	ldi	r26, 0x00	; 0
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	85 8b       	std	Z+21, r24	; 0x15
    3e56:	96 8b       	std	Z+22, r25	; 0x16
    3e58:	a7 8b       	std	Z+23, r26	; 0x17
    3e5a:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3e5c:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>

    return NRK_OK;
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	01 c0       	rjmp	.+2      	; 0x3e66 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3e64:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3e66:	28 96       	adiw	r28, 0x08	; 8
    3e68:	0f b6       	in	r0, 0x3f	; 63
    3e6a:	f8 94       	cli
    3e6c:	de bf       	out	0x3e, r29	; 62
    3e6e:	0f be       	out	0x3f, r0	; 63
    3e70:	cd bf       	out	0x3d, r28	; 61
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	1f 91       	pop	r17
    3e78:	08 95       	ret

00003e7a <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3e7a:	0e 94 44 2b 	call	0x5688	; 0x5688 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3e7e:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3e82:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3e86:	85 81       	ldd	r24, Z+5	; 0x05
    3e88:	81 11       	cpse	r24, r1
    3e8a:	f7 cf       	rjmp	.-18     	; 0x3e7a <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3e8c:	08 95       	ret

00003e8e <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3e8e:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    3e90:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3e94:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3e98:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3e9c:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	92 a7       	std	Z+42, r25	; 0x2a
    3ea6:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3ea8:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3eaa:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    3eae:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3eb0:	88 3f       	cpi	r24, 0xF8	; 248
    3eb2:	80 f4       	brcc	.+32     	; 0x3ed4 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3eb4:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    3eb8:	2c 2f       	mov	r18, r28
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	2f 5f       	subi	r18, 0xFF	; 255
    3ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	28 17       	cp	r18, r24
    3ec4:	39 07       	cpc	r19, r25
    3ec6:	34 f4       	brge	.+12     	; 0x3ed4 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    3ec8:	82 e0       	ldi	r24, 0x02	; 2
    3eca:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3ecc:	80 93 71 07 	sts	0x0771, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3ed0:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3ed4:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3ed8:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	cf 91       	pop	r28
    3ee0:	08 95       	ret

00003ee2 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3ee2:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3ee6:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3eea:	80 85       	ldd	r24, Z+8	; 0x08
    3eec:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3ef0:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3ef4:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3ef8:	84 e0       	ldi	r24, 0x04	; 4
    3efa:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3efc:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <nrk_wait_until_next_period>
    return NRK_OK;
}
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	08 95       	ret

00003f04 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3f04:	cf 93       	push	r28
    3f06:	df 93       	push	r29
    3f08:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3f0a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>

    if (p == 0)
    3f0e:	20 97       	sbiw	r28, 0x00	; 0
    3f10:	11 f4       	brne	.+4      	; 0x3f16 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    3f12:	c1 e0       	ldi	r28, 0x01	; 1
    3f14:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3f16:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3f1a:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3f1e:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3f26:	d2 a7       	std	Z+42, r29	; 0x2a
    3f28:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    3f2a:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    3f2e:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3f30:	88 3f       	cpi	r24, 0xF8	; 248
    3f32:	80 f4       	brcc	.+32     	; 0x3f54 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3f34:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    3f38:	2c 2f       	mov	r18, r28
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	28 17       	cp	r18, r24
    3f44:	39 07       	cpc	r19, r25
    3f46:	34 f4       	brge	.+12     	; 0x3f54 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3f4c:	80 93 71 07 	sts	0x0771, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3f50:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3f54:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3f58:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	08 95       	ret

00003f64 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3f64:	ef 92       	push	r14
    3f66:	ff 92       	push	r15
    3f68:	0f 93       	push	r16
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3f70:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3f74:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3f78:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3f80:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    3f84:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3f86:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3f8a:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3f8e:	e8 2e       	mov	r14, r24
    3f90:	f1 2c       	mov	r15, r1
    3f92:	c7 01       	movw	r24, r14
    3f94:	80 0f       	add	r24, r16
    3f96:	91 1f       	adc	r25, r17
    3f98:	a0 e0       	ldi	r26, 0x00	; 0
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	85 8b       	std	Z+21, r24	; 0x15
    3f9e:	96 8b       	std	Z+22, r25	; 0x16
    3fa0:	a7 8b       	std	Z+23, r26	; 0x17
    3fa2:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3fa4:	c8 3f       	cpi	r28, 0xF8	; 248
    3fa6:	78 f4       	brcc	.+30     	; 0x3fc6 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3fa8:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    3fac:	9f ef       	ldi	r25, 0xFF	; 255
    3fae:	e9 1a       	sub	r14, r25
    3fb0:	f9 0a       	sbc	r15, r25
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	e8 16       	cp	r14, r24
    3fb6:	f9 06       	cpc	r15, r25
    3fb8:	34 f4       	brge	.+12     	; 0x3fc6 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    3fba:	82 e0       	ldi	r24, 0x02	; 2
    3fbc:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3fbe:	80 93 71 07 	sts	0x0771, r24
            _nrk_set_next_wakeup (timer);
    3fc2:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3fc6:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3fca:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	cf 91       	pop	r28
    3fd2:	1f 91       	pop	r17
    3fd4:	0f 91       	pop	r16
    3fd6:	ff 90       	pop	r15
    3fd8:	ef 90       	pop	r14
    3fda:	08 95       	ret

00003fdc <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3fdc:	cf 93       	push	r28
    3fde:	df 93       	push	r29
    3fe0:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3fe2:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3fe6:	e0 91 b4 0a 	lds	r30, 0x0AB4
    3fea:	f0 91 b5 0a 	lds	r31, 0x0AB5
    3fee:	21 e0       	ldi	r18, 0x01	; 1
    3ff0:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	a0 e0       	ldi	r26, 0x00	; 0
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	85 8b       	std	Z+21, r24	; 0x15
    3ffa:	96 8b       	std	Z+22, r25	; 0x16
    3ffc:	a7 8b       	std	Z+23, r26	; 0x17
    3ffe:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    4000:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    4004:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4006:	88 3f       	cpi	r24, 0xF8	; 248
    4008:	80 f4       	brcc	.+32     	; 0x402a <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    400a:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    400e:	2c 2f       	mov	r18, r28
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	2f 5f       	subi	r18, 0xFF	; 255
    4014:	3f 4f       	sbci	r19, 0xFF	; 255
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	28 17       	cp	r18, r24
    401a:	39 07       	cpc	r19, r25
    401c:	34 f4       	brge	.+12     	; 0x402a <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    401e:	82 e0       	ldi	r24, 0x02	; 2
    4020:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4022:	80 93 71 07 	sts	0x0771, r24
            _nrk_set_next_wakeup (timer);
    4026:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    402a:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    402e:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	08 95       	ret

0000403a <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    403a:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    403c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4040:	e0 91 b4 0a 	lds	r30, 0x0AB4
    4044:	f0 91 b5 0a 	lds	r31, 0x0AB5
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    404c:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    404e:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    4052:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4054:	88 3f       	cpi	r24, 0xF8	; 248
    4056:	80 f4       	brcc	.+32     	; 0x4078 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4058:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    405c:	2c 2f       	mov	r18, r28
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	2f 5f       	subi	r18, 0xFF	; 255
    4062:	3f 4f       	sbci	r19, 0xFF	; 255
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	28 17       	cp	r18, r24
    4068:	39 07       	cpc	r19, r25
    406a:	34 f4       	brge	.+12     	; 0x4078 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    406c:	82 e0       	ldi	r24, 0x02	; 2
    406e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4070:	80 93 71 07 	sts	0x0771, r24
            _nrk_set_next_wakeup (timer);
    4074:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4078:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    407c:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	cf 91       	pop	r28
    4084:	08 95       	ret

00004086 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	28 97       	sbiw	r28, 0x08	; 8
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	29 83       	std	Y+1, r18	; 0x01
    409e:	3a 83       	std	Y+2, r19	; 0x02
    40a0:	4b 83       	std	Y+3, r20	; 0x03
    40a2:	5c 83       	std	Y+4, r21	; 0x04
    40a4:	6d 83       	std	Y+5, r22	; 0x05
    40a6:	7e 83       	std	Y+6, r23	; 0x06
    40a8:	8f 83       	std	Y+7, r24	; 0x07
    40aa:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    40ac:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>

    nrk_int_disable ();
    40b0:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    40b4:	e0 91 b4 0a 	lds	r30, 0x0AB4
    40b8:	f0 91 b5 0a 	lds	r31, 0x0AB5
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	92 a7       	std	Z+42, r25	; 0x2a
    40c6:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    40c8:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    40cc:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    40ce:	ce 01       	movw	r24, r28
    40d0:	01 96       	adiw	r24, 0x01	; 1
    40d2:	0e 94 12 23 	call	0x4624	; 0x4624 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    40d6:	e0 91 b4 0a 	lds	r30, 0x0AB4
    40da:	f0 91 b5 0a 	lds	r31, 0x0AB5
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	81 0f       	add	r24, r17
    40e4:	91 1d       	adc	r25, r1
    40e6:	a1 1d       	adc	r26, r1
    40e8:	b1 1d       	adc	r27, r1
    40ea:	85 8b       	std	Z+21, r24	; 0x15
    40ec:	96 8b       	std	Z+22, r25	; 0x16
    40ee:	a7 8b       	std	Z+23, r26	; 0x17
    40f0:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    40f2:	18 3f       	cpi	r17, 0xF8	; 248
    40f4:	80 f4       	brcc	.+32     	; 0x4116 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    40f6:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    40fa:	21 2f       	mov	r18, r17
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	2f 5f       	subi	r18, 0xFF	; 255
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	28 17       	cp	r18, r24
    4106:	39 07       	cpc	r19, r25
    4108:	34 f4       	brge	.+12     	; 0x4116 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    410a:	82 e0       	ldi	r24, 0x02	; 2
    410c:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    410e:	80 93 71 07 	sts	0x0771, r24
            _nrk_set_next_wakeup (timer);
    4112:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    4116:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    411a:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	28 96       	adiw	r28, 0x08	; 8
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	08 95       	ret

00004134 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    4134:	8f 92       	push	r8
    4136:	9f 92       	push	r9
    4138:	af 92       	push	r10
    413a:	bf 92       	push	r11
    413c:	cf 92       	push	r12
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	60 97       	sbiw	r28, 0x10	; 16
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	f8 94       	cli
    4156:	de bf       	out	0x3e, r29	; 62
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	cd bf       	out	0x3d, r28	; 61
    415c:	29 87       	std	Y+9, r18	; 0x09
    415e:	3a 87       	std	Y+10, r19	; 0x0a
    4160:	4b 87       	std	Y+11, r20	; 0x0b
    4162:	5c 87       	std	Y+12, r21	; 0x0c
    4164:	6d 87       	std	Y+13, r22	; 0x0d
    4166:	7e 87       	std	Y+14, r23	; 0x0e
    4168:	8f 87       	std	Y+15, r24	; 0x0f
    416a:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    416c:	ce 01       	movw	r24, r28
    416e:	01 96       	adiw	r24, 0x01	; 1
    4170:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    4174:	89 80       	ldd	r8, Y+1	; 0x01
    4176:	9a 80       	ldd	r9, Y+2	; 0x02
    4178:	ab 80       	ldd	r10, Y+3	; 0x03
    417a:	bc 80       	ldd	r11, Y+4	; 0x04
    417c:	cd 80       	ldd	r12, Y+5	; 0x05
    417e:	de 80       	ldd	r13, Y+6	; 0x06
    4180:	ef 80       	ldd	r14, Y+7	; 0x07
    4182:	f8 84       	ldd	r15, Y+8	; 0x08
    4184:	09 85       	ldd	r16, Y+9	; 0x09
    4186:	1a 85       	ldd	r17, Y+10	; 0x0a
    4188:	2b 85       	ldd	r18, Y+11	; 0x0b
    418a:	3c 85       	ldd	r19, Y+12	; 0x0c
    418c:	4d 85       	ldd	r20, Y+13	; 0x0d
    418e:	5e 85       	ldd	r21, Y+14	; 0x0e
    4190:	6f 85       	ldd	r22, Y+15	; 0x0f
    4192:	78 89       	ldd	r23, Y+16	; 0x10
    4194:	ce 01       	movw	r24, r28
    4196:	09 96       	adiw	r24, 0x09	; 9
    4198:	0e 94 53 21 	call	0x42a6	; 0x42a6 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    419c:	8f 3f       	cpi	r24, 0xFF	; 255
    419e:	61 f0       	breq	.+24     	; 0x41b8 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    41a0:	29 85       	ldd	r18, Y+9	; 0x09
    41a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    41a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    41a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    41a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    41aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    41ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ae:	98 89       	ldd	r25, Y+16	; 0x10
    41b0:	0e 94 43 20 	call	0x4086	; 0x4086 <nrk_wait>

    return NRK_OK;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	01 c0       	rjmp	.+2      	; 0x41ba <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    41b8:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    41ba:	60 96       	adiw	r28, 0x10	; 16
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	f8 94       	cli
    41c0:	de bf       	out	0x3e, r29	; 62
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	df 91       	pop	r29
    41c8:	cf 91       	pop	r28
    41ca:	1f 91       	pop	r17
    41cc:	0f 91       	pop	r16
    41ce:	ff 90       	pop	r15
    41d0:	ef 90       	pop	r14
    41d2:	df 90       	pop	r13
    41d4:	cf 90       	pop	r12
    41d6:	bf 90       	pop	r11
    41d8:	af 90       	pop	r10
    41da:	9f 90       	pop	r9
    41dc:	8f 90       	pop	r8
    41de:	08 95       	ret

000041e0 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    41e0:	e0 91 b4 0a 	lds	r30, 0x0AB4
    41e4:	f0 91 b5 0a 	lds	r31, 0x0AB5
}
    41e8:	80 85       	ldd	r24, Z+8	; 0x08
    41ea:	08 95       	ret

000041ec <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    41ec:	0f 93       	push	r16
    41ee:	1f 93       	push	r17
    41f0:	cf 93       	push	r28
    41f2:	df 93       	push	r29
    41f4:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    41f6:	1c 82       	std	Y+4, r1	; 0x04
    41f8:	1d 82       	std	Y+5, r1	; 0x05
    41fa:	1e 82       	std	Y+6, r1	; 0x06
    41fc:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    41fe:	80 91 ab 0a 	lds	r24, 0x0AAB
    4202:	90 91 ac 0a 	lds	r25, 0x0AAC
    4206:	a0 91 ad 0a 	lds	r26, 0x0AAD
    420a:	b0 91 ae 0a 	lds	r27, 0x0AAE
    420e:	88 83       	st	Y, r24
    4210:	99 83       	std	Y+1, r25	; 0x01
    4212:	aa 83       	std	Y+2, r26	; 0x02
    4214:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    4216:	80 91 af 0a 	lds	r24, 0x0AAF
    421a:	90 91 b0 0a 	lds	r25, 0x0AB0
    421e:	a0 91 b1 0a 	lds	r26, 0x0AB1
    4222:	b0 91 b2 0a 	lds	r27, 0x0AB2
    4226:	8c 83       	std	Y+4, r24	; 0x04
    4228:	9d 83       	std	Y+5, r25	; 0x05
    422a:	ae 83       	std	Y+6, r26	; 0x06
    422c:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    422e:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    4232:	a8 2f       	mov	r26, r24
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	23 eb       	ldi	r18, 0xB3	; 179
    4238:	36 ee       	ldi	r19, 0xE6	; 230
    423a:	4e e0       	ldi	r20, 0x0E	; 14
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    4242:	0c 81       	ldd	r16, Y+4	; 0x04
    4244:	1d 81       	ldd	r17, Y+5	; 0x05
    4246:	2e 81       	ldd	r18, Y+6	; 0x06
    4248:	3f 81       	ldd	r19, Y+7	; 0x07
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	80 0f       	add	r24, r16
    4250:	91 1f       	adc	r25, r17
    4252:	a2 1f       	adc	r26, r18
    4254:	b3 1f       	adc	r27, r19
    4256:	8c 83       	std	Y+4, r24	; 0x04
    4258:	9d 83       	std	Y+5, r25	; 0x05
    425a:	ae 83       	std	Y+6, r26	; 0x06
    425c:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    425e:	8c 81       	ldd	r24, Y+4	; 0x04
    4260:	9d 81       	ldd	r25, Y+5	; 0x05
    4262:	ae 81       	ldd	r26, Y+6	; 0x06
    4264:	bf 81       	ldd	r27, Y+7	; 0x07
    4266:	81 15       	cp	r24, r1
    4268:	2a ec       	ldi	r18, 0xCA	; 202
    426a:	92 07       	cpc	r25, r18
    426c:	2a e9       	ldi	r18, 0x9A	; 154
    426e:	a2 07       	cpc	r26, r18
    4270:	2b e3       	ldi	r18, 0x3B	; 59
    4272:	b2 07       	cpc	r27, r18
    4274:	98 f0       	brcs	.+38     	; 0x429c <__stack+0x9d>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    4276:	9a 5c       	subi	r25, 0xCA	; 202
    4278:	aa 49       	sbci	r26, 0x9A	; 154
    427a:	bb 43       	sbci	r27, 0x3B	; 59
    427c:	8c 83       	std	Y+4, r24	; 0x04
    427e:	9d 83       	std	Y+5, r25	; 0x05
    4280:	ae 83       	std	Y+6, r26	; 0x06
    4282:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4284:	88 81       	ld	r24, Y
    4286:	99 81       	ldd	r25, Y+1	; 0x01
    4288:	aa 81       	ldd	r26, Y+2	; 0x02
    428a:	bb 81       	ldd	r27, Y+3	; 0x03
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	a1 1d       	adc	r26, r1
    4290:	b1 1d       	adc	r27, r1
    4292:	88 83       	st	Y, r24
    4294:	99 83       	std	Y+1, r25	; 0x01
    4296:	aa 83       	std	Y+2, r26	; 0x02
    4298:	bb 83       	std	Y+3, r27	; 0x03
    429a:	e1 cf       	rjmp	.-62     	; 0x425e <__stack+0x5f>
    }

}
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	08 95       	ret

000042a6 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    42a6:	8f 92       	push	r8
    42a8:	9f 92       	push	r9
    42aa:	af 92       	push	r10
    42ac:	bf 92       	push	r11
    42ae:	cf 92       	push	r12
    42b0:	df 92       	push	r13
    42b2:	ef 92       	push	r14
    42b4:	ff 92       	push	r15
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	60 97       	sbiw	r28, 0x10	; 16
    42c4:	0f b6       	in	r0, 0x3f	; 63
    42c6:	f8 94       	cli
    42c8:	de bf       	out	0x3e, r29	; 62
    42ca:	0f be       	out	0x3f, r0	; 63
    42cc:	cd bf       	out	0x3d, r28	; 61
    42ce:	fc 01       	movw	r30, r24
    42d0:	09 83       	std	Y+1, r16	; 0x01
    42d2:	1a 83       	std	Y+2, r17	; 0x02
    42d4:	2b 83       	std	Y+3, r18	; 0x03
    42d6:	3c 83       	std	Y+4, r19	; 0x04
    42d8:	4d 83       	std	Y+5, r20	; 0x05
    42da:	5e 83       	std	Y+6, r21	; 0x06
    42dc:	6f 83       	std	Y+7, r22	; 0x07
    42de:	78 87       	std	Y+8, r23	; 0x08
    42e0:	89 86       	std	Y+9, r8	; 0x09
    42e2:	9a 86       	std	Y+10, r9	; 0x0a
    42e4:	ab 86       	std	Y+11, r10	; 0x0b
    42e6:	bc 86       	std	Y+12, r11	; 0x0c
    42e8:	cd 86       	std	Y+13, r12	; 0x0d
    42ea:	de 86       	std	Y+14, r13	; 0x0e
    42ec:	ef 86       	std	Y+15, r14	; 0x0f
    42ee:	f8 8a       	std	Y+16, r15	; 0x10
    42f0:	09 81       	ldd	r16, Y+1	; 0x01
    42f2:	1a 81       	ldd	r17, Y+2	; 0x02
    42f4:	2b 81       	ldd	r18, Y+3	; 0x03
    42f6:	3c 81       	ldd	r19, Y+4	; 0x04
    42f8:	4d 81       	ldd	r20, Y+5	; 0x05
    42fa:	5e 81       	ldd	r21, Y+6	; 0x06
    42fc:	6f 81       	ldd	r22, Y+7	; 0x07
    42fe:	78 85       	ldd	r23, Y+8	; 0x08
    4300:	c9 84       	ldd	r12, Y+9	; 0x09
    4302:	da 84       	ldd	r13, Y+10	; 0x0a
    4304:	eb 84       	ldd	r14, Y+11	; 0x0b
    4306:	fc 84       	ldd	r15, Y+12	; 0x0c
    4308:	8d 85       	ldd	r24, Y+13	; 0x0d
    430a:	9e 85       	ldd	r25, Y+14	; 0x0e
    430c:	af 85       	ldd	r26, Y+15	; 0x0f
    430e:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    4310:	0c 15       	cp	r16, r12
    4312:	1d 05       	cpc	r17, r13
    4314:	2e 05       	cpc	r18, r14
    4316:	3f 05       	cpc	r19, r15
    4318:	f0 f1       	brcs	.+124    	; 0x4396 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    431a:	c0 16       	cp	r12, r16
    431c:	d1 06       	cpc	r13, r17
    431e:	e2 06       	cpc	r14, r18
    4320:	f3 06       	cpc	r15, r19
    4322:	91 f4       	brne	.+36     	; 0x4348 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    4324:	48 17       	cp	r20, r24
    4326:	59 07       	cpc	r21, r25
    4328:	6a 07       	cpc	r22, r26
    432a:	7b 07       	cpc	r23, r27
    432c:	a0 f1       	brcs	.+104    	; 0x4396 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    432e:	48 1b       	sub	r20, r24
    4330:	59 0b       	sbc	r21, r25
    4332:	6a 0b       	sbc	r22, r26
    4334:	7b 0b       	sbc	r23, r27
    4336:	44 83       	std	Z+4, r20	; 0x04
    4338:	55 83       	std	Z+5, r21	; 0x05
    433a:	66 83       	std	Z+6, r22	; 0x06
    433c:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    433e:	10 82       	st	Z, r1
    4340:	11 82       	std	Z+1, r1	; 0x01
    4342:	12 82       	std	Z+2, r1	; 0x02
    4344:	13 82       	std	Z+3, r1	; 0x03
    4346:	25 c0       	rjmp	.+74     	; 0x4392 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4348:	48 17       	cp	r20, r24
    434a:	59 07       	cpc	r21, r25
    434c:	6a 07       	cpc	r22, r26
    434e:	7b 07       	cpc	r23, r27
    4350:	80 f4       	brcc	.+32     	; 0x4372 <nrk_time_sub+0xcc>
{
	high.secs--;
    4352:	01 50       	subi	r16, 0x01	; 1
    4354:	11 09       	sbc	r17, r1
    4356:	21 09       	sbc	r18, r1
    4358:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    435a:	0c 19       	sub	r16, r12
    435c:	1d 09       	sbc	r17, r13
    435e:	2e 09       	sbc	r18, r14
    4360:	3f 09       	sbc	r19, r15
    4362:	00 83       	st	Z, r16
    4364:	11 83       	std	Z+1, r17	; 0x01
    4366:	22 83       	std	Z+2, r18	; 0x02
    4368:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    436a:	56 53       	subi	r21, 0x36	; 54
    436c:	65 46       	sbci	r22, 0x65	; 101
    436e:	74 4c       	sbci	r23, 0xC4	; 196
    4370:	08 c0       	rjmp	.+16     	; 0x4382 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4372:	0c 19       	sub	r16, r12
    4374:	1d 09       	sbc	r17, r13
    4376:	2e 09       	sbc	r18, r14
    4378:	3f 09       	sbc	r19, r15
    437a:	00 83       	st	Z, r16
    437c:	11 83       	std	Z+1, r17	; 0x01
    437e:	22 83       	std	Z+2, r18	; 0x02
    4380:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4382:	48 1b       	sub	r20, r24
    4384:	59 0b       	sbc	r21, r25
    4386:	6a 0b       	sbc	r22, r26
    4388:	7b 0b       	sbc	r23, r27
    438a:	44 83       	std	Z+4, r20	; 0x04
    438c:	55 83       	std	Z+5, r21	; 0x05
    438e:	66 83       	std	Z+6, r22	; 0x06
    4390:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	01 c0       	rjmp	.+2      	; 0x4398 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4396:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    4398:	60 96       	adiw	r28, 0x10	; 16
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	df 90       	pop	r13
    43b2:	cf 90       	pop	r12
    43b4:	bf 90       	pop	r11
    43b6:	af 90       	pop	r10
    43b8:	9f 90       	pop	r9
    43ba:	8f 90       	pop	r8
    43bc:	08 95       	ret

000043be <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    43be:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    43c0:	44 81       	ldd	r20, Z+4	; 0x04
    43c2:	55 81       	ldd	r21, Z+5	; 0x05
    43c4:	66 81       	ldd	r22, Z+6	; 0x06
    43c6:	77 81       	ldd	r23, Z+7	; 0x07
    43c8:	41 15       	cp	r20, r1
    43ca:	8a ec       	ldi	r24, 0xCA	; 202
    43cc:	58 07       	cpc	r21, r24
    43ce:	8a e9       	ldi	r24, 0x9A	; 154
    43d0:	68 07       	cpc	r22, r24
    43d2:	8b e3       	ldi	r24, 0x3B	; 59
    43d4:	78 07       	cpc	r23, r24
    43d6:	98 f0       	brcs	.+38     	; 0x43fe <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    43d8:	5a 5c       	subi	r21, 0xCA	; 202
    43da:	6a 49       	sbci	r22, 0x9A	; 154
    43dc:	7b 43       	sbci	r23, 0x3B	; 59
    43de:	44 83       	std	Z+4, r20	; 0x04
    43e0:	55 83       	std	Z+5, r21	; 0x05
    43e2:	66 83       	std	Z+6, r22	; 0x06
    43e4:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    43e6:	80 81       	ld	r24, Z
    43e8:	91 81       	ldd	r25, Z+1	; 0x01
    43ea:	a2 81       	ldd	r26, Z+2	; 0x02
    43ec:	b3 81       	ldd	r27, Z+3	; 0x03
    43ee:	01 96       	adiw	r24, 0x01	; 1
    43f0:	a1 1d       	adc	r26, r1
    43f2:	b1 1d       	adc	r27, r1
    43f4:	80 83       	st	Z, r24
    43f6:	91 83       	std	Z+1, r25	; 0x01
    43f8:	a2 83       	std	Z+2, r26	; 0x02
    43fa:	b3 83       	std	Z+3, r27	; 0x03
    43fc:	e1 cf       	rjmp	.-62     	; 0x43c0 <nrk_time_compact_nanos+0x2>
    }
}
    43fe:	08 95       	ret

00004400 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4400:	8f 92       	push	r8
    4402:	9f 92       	push	r9
    4404:	af 92       	push	r10
    4406:	bf 92       	push	r11
    4408:	cf 92       	push	r12
    440a:	df 92       	push	r13
    440c:	ef 92       	push	r14
    440e:	ff 92       	push	r15
    4410:	0f 93       	push	r16
    4412:	1f 93       	push	r17
    4414:	cf 93       	push	r28
    4416:	df 93       	push	r29
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	60 97       	sbiw	r28, 0x10	; 16
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	cd bf       	out	0x3d, r28	; 61
    4428:	09 83       	std	Y+1, r16	; 0x01
    442a:	1a 83       	std	Y+2, r17	; 0x02
    442c:	2b 83       	std	Y+3, r18	; 0x03
    442e:	3c 83       	std	Y+4, r19	; 0x04
    4430:	4d 83       	std	Y+5, r20	; 0x05
    4432:	5e 83       	std	Y+6, r21	; 0x06
    4434:	6f 83       	std	Y+7, r22	; 0x07
    4436:	78 87       	std	Y+8, r23	; 0x08
    4438:	89 86       	std	Y+9, r8	; 0x09
    443a:	9a 86       	std	Y+10, r9	; 0x0a
    443c:	ab 86       	std	Y+11, r10	; 0x0b
    443e:	bc 86       	std	Y+12, r11	; 0x0c
    4440:	cd 86       	std	Y+13, r12	; 0x0d
    4442:	de 86       	std	Y+14, r13	; 0x0e
    4444:	ef 86       	std	Y+15, r14	; 0x0f
    4446:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4448:	09 85       	ldd	r16, Y+9	; 0x09
    444a:	1a 85       	ldd	r17, Y+10	; 0x0a
    444c:	2b 85       	ldd	r18, Y+11	; 0x0b
    444e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4450:	49 81       	ldd	r20, Y+1	; 0x01
    4452:	5a 81       	ldd	r21, Y+2	; 0x02
    4454:	6b 81       	ldd	r22, Y+3	; 0x03
    4456:	7c 81       	ldd	r23, Y+4	; 0x04
    4458:	40 0f       	add	r20, r16
    445a:	51 1f       	adc	r21, r17
    445c:	62 1f       	adc	r22, r18
    445e:	73 1f       	adc	r23, r19
    4460:	fc 01       	movw	r30, r24
    4462:	40 83       	st	Z, r20
    4464:	51 83       	std	Z+1, r21	; 0x01
    4466:	62 83       	std	Z+2, r22	; 0x02
    4468:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    446a:	0d 85       	ldd	r16, Y+13	; 0x0d
    446c:	1e 85       	ldd	r17, Y+14	; 0x0e
    446e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4470:	38 89       	ldd	r19, Y+16	; 0x10
    4472:	4d 81       	ldd	r20, Y+5	; 0x05
    4474:	5e 81       	ldd	r21, Y+6	; 0x06
    4476:	6f 81       	ldd	r22, Y+7	; 0x07
    4478:	78 85       	ldd	r23, Y+8	; 0x08
    447a:	40 0f       	add	r20, r16
    447c:	51 1f       	adc	r21, r17
    447e:	62 1f       	adc	r22, r18
    4480:	73 1f       	adc	r23, r19
    4482:	44 83       	std	Z+4, r20	; 0x04
    4484:	55 83       	std	Z+5, r21	; 0x05
    4486:	66 83       	std	Z+6, r22	; 0x06
    4488:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    448a:	0e 94 df 21 	call	0x43be	; 0x43be <nrk_time_compact_nanos>
return NRK_OK;
}
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	60 96       	adiw	r28, 0x10	; 16
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	1f 91       	pop	r17
    44a2:	0f 91       	pop	r16
    44a4:	ff 90       	pop	r15
    44a6:	ef 90       	pop	r14
    44a8:	df 90       	pop	r13
    44aa:	cf 90       	pop	r12
    44ac:	bf 90       	pop	r11
    44ae:	af 90       	pop	r10
    44b0:	9f 90       	pop	r9
    44b2:	8f 90       	pop	r8
    44b4:	08 95       	ret

000044b6 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    44b6:	eb ea       	ldi	r30, 0xAB	; 171
    44b8:	fa e0       	ldi	r31, 0x0A	; 10
    44ba:	60 83       	st	Z, r22
    44bc:	71 83       	std	Z+1, r23	; 0x01
    44be:	82 83       	std	Z+2, r24	; 0x02
    44c0:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    44c2:	24 83       	std	Z+4, r18	; 0x04
    44c4:	35 83       	std	Z+5, r19	; 0x05
    44c6:	46 83       	std	Z+6, r20	; 0x06
    44c8:	57 83       	std	Z+7, r21	; 0x07
    44ca:	08 95       	ret

000044cc <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    44cc:	2f 92       	push	r2
    44ce:	3f 92       	push	r3
    44d0:	4f 92       	push	r4
    44d2:	5f 92       	push	r5
    44d4:	6f 92       	push	r6
    44d6:	7f 92       	push	r7
    44d8:	8f 92       	push	r8
    44da:	9f 92       	push	r9
    44dc:	af 92       	push	r10
    44de:	bf 92       	push	r11
    44e0:	cf 92       	push	r12
    44e2:	df 92       	push	r13
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    44ee:	c0 80       	ld	r12, Z
    44f0:	d1 80       	ldd	r13, Z+1	; 0x01
    44f2:	e2 80       	ldd	r14, Z+2	; 0x02
    44f4:	f3 80       	ldd	r15, Z+3	; 0x03
    44f6:	c1 14       	cp	r12, r1
    44f8:	d1 04       	cpc	r13, r1
    44fa:	e1 04       	cpc	r14, r1
    44fc:	f1 04       	cpc	r15, r1
    44fe:	e1 f1       	breq	.+120    	; 0x4578 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    4500:	84 81       	ldd	r24, Z+4	; 0x04
    4502:	95 81       	ldd	r25, Z+5	; 0x05
    4504:	a6 81       	ldd	r26, Z+6	; 0x06
    4506:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4508:	22 e4       	ldi	r18, 0x42	; 66
    450a:	c2 16       	cp	r12, r18
    450c:	d1 04       	cpc	r13, r1
    450e:	e1 04       	cpc	r14, r1
    4510:	f1 04       	cpc	r15, r1
    4512:	f0 f5       	brcc	.+124    	; 0x4590 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4514:	1c 01       	movw	r2, r24
    4516:	2d 01       	movw	r4, r26
    4518:	61 2c       	mov	r6, r1
    451a:	71 2c       	mov	r7, r1
    451c:	43 01       	movw	r8, r6
    451e:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4520:	8e 2f       	mov	r24, r30
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	a0 e0       	ldi	r26, 0x00	; 0
    4526:	b0 e0       	ldi	r27, 0x00	; 0
    4528:	8c 15       	cp	r24, r12
    452a:	9d 05       	cpc	r25, r13
    452c:	ae 05       	cpc	r26, r14
    452e:	bf 05       	cpc	r27, r15
    4530:	88 f4       	brcc	.+34     	; 0x4554 <_nrk_time_to_ticks+0x88>
    4532:	91 01       	movw	r18, r2
    4534:	a2 01       	movw	r20, r4
    4536:	b3 01       	movw	r22, r6
    4538:	c4 01       	movw	r24, r8
    453a:	36 53       	subi	r19, 0x36	; 54
    453c:	45 46       	sbci	r20, 0x65	; 101
    453e:	54 4c       	sbci	r21, 0xC4	; 196
    4540:	6f 4f       	sbci	r22, 0xFF	; 255
    4542:	7f 4f       	sbci	r23, 0xFF	; 255
    4544:	8f 4f       	sbci	r24, 0xFF	; 255
    4546:	9f 4f       	sbci	r25, 0xFF	; 255
    4548:	19 01       	movw	r2, r18
    454a:	2a 01       	movw	r4, r20
    454c:	3b 01       	movw	r6, r22
    454e:	4c 01       	movw	r8, r24
    4550:	ef 5f       	subi	r30, 0xFF	; 255
    4552:	e6 cf       	rjmp	.-52     	; 0x4520 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4554:	83 eb       	ldi	r24, 0xB3	; 179
    4556:	a8 2e       	mov	r10, r24
    4558:	96 ee       	ldi	r25, 0xE6	; 230
    455a:	b9 2e       	mov	r11, r25
    455c:	2e e0       	ldi	r18, 0x0E	; 14
    455e:	c2 2e       	mov	r12, r18
    4560:	d1 2c       	mov	r13, r1
    4562:	e1 2c       	mov	r14, r1
    4564:	f1 2c       	mov	r15, r1
    4566:	00 e0       	ldi	r16, 0x00	; 0
    4568:	10 e0       	ldi	r17, 0x00	; 0
    456a:	91 01       	movw	r18, r2
    456c:	a2 01       	movw	r20, r4
    456e:	b3 01       	movw	r22, r6
    4570:	c4 01       	movw	r24, r8
    4572:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__udivdi3>
    4576:	0a c0       	rjmp	.+20     	; 0x458c <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4578:	64 81       	ldd	r22, Z+4	; 0x04
    457a:	75 81       	ldd	r23, Z+5	; 0x05
    457c:	86 81       	ldd	r24, Z+6	; 0x06
    457e:	97 81       	ldd	r25, Z+7	; 0x07
    4580:	23 eb       	ldi	r18, 0xB3	; 179
    4582:	36 ee       	ldi	r19, 0xE6	; 230
    4584:	4e e0       	ldi	r20, 0x0E	; 14
    4586:	50 e0       	ldi	r21, 0x00	; 0
    4588:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    458c:	c9 01       	movw	r24, r18
    458e:	02 c0       	rjmp	.+4      	; 0x4594 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4594:	1f 91       	pop	r17
    4596:	0f 91       	pop	r16
    4598:	ff 90       	pop	r15
    459a:	ef 90       	pop	r14
    459c:	df 90       	pop	r13
    459e:	cf 90       	pop	r12
    45a0:	bf 90       	pop	r11
    45a2:	af 90       	pop	r10
    45a4:	9f 90       	pop	r9
    45a6:	8f 90       	pop	r8
    45a8:	7f 90       	pop	r7
    45aa:	6f 90       	pop	r6
    45ac:	5f 90       	pop	r5
    45ae:	4f 90       	pop	r4
    45b0:	3f 90       	pop	r3
    45b2:	2f 90       	pop	r2
    45b4:	08 95       	ret

000045b6 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    45b6:	cf 92       	push	r12
    45b8:	df 92       	push	r13
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	cf 93       	push	r28
    45c0:	df 93       	push	r29
    45c2:	cd b7       	in	r28, 0x3d	; 61
    45c4:	de b7       	in	r29, 0x3e	; 62
    45c6:	28 97       	sbiw	r28, 0x08	; 8
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    45d2:	6b 01       	movw	r12, r22
    45d4:	7c 01       	movw	r14, r24
    45d6:	2a e0       	ldi	r18, 0x0A	; 10
    45d8:	f6 94       	lsr	r15
    45da:	e7 94       	ror	r14
    45dc:	d7 94       	ror	r13
    45de:	c7 94       	ror	r12
    45e0:	2a 95       	dec	r18
    45e2:	d1 f7       	brne	.-12     	; 0x45d8 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    45e4:	c9 82       	std	Y+1, r12	; 0x01
    45e6:	da 82       	std	Y+2, r13	; 0x02
    45e8:	eb 82       	std	Y+3, r14	; 0x03
    45ea:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    45ec:	9b 01       	movw	r18, r22
    45ee:	ac 01       	movw	r20, r24
    45f0:	33 70       	andi	r19, 0x03	; 3
    45f2:	44 27       	eor	r20, r20
    45f4:	55 27       	eor	r21, r21
    45f6:	63 eb       	ldi	r22, 0xB3	; 179
    45f8:	76 ee       	ldi	r23, 0xE6	; 230
    45fa:	8e e0       	ldi	r24, 0x0E	; 14
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <__mulsi3>

return t;
    4602:	2c 2d       	mov	r18, r12
    4604:	3a 81       	ldd	r19, Y+2	; 0x02
    4606:	4b 81       	ldd	r20, Y+3	; 0x03
    4608:	5c 81       	ldd	r21, Y+4	; 0x04
}
    460a:	28 96       	adiw	r28, 0x08	; 8
    460c:	0f b6       	in	r0, 0x3f	; 63
    460e:	f8 94       	cli
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	cd bf       	out	0x3d, r28	; 61
    4616:	df 91       	pop	r29
    4618:	cf 91       	pop	r28
    461a:	ff 90       	pop	r15
    461c:	ef 90       	pop	r14
    461e:	df 90       	pop	r13
    4620:	cf 90       	pop	r12
    4622:	08 95       	ret

00004624 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4624:	2f 92       	push	r2
    4626:	3f 92       	push	r3
    4628:	4f 92       	push	r4
    462a:	5f 92       	push	r5
    462c:	6f 92       	push	r6
    462e:	7f 92       	push	r7
    4630:	8f 92       	push	r8
    4632:	9f 92       	push	r9
    4634:	af 92       	push	r10
    4636:	bf 92       	push	r11
    4638:	cf 92       	push	r12
    463a:	df 92       	push	r13
    463c:	ef 92       	push	r14
    463e:	ff 92       	push	r15
    4640:	0f 93       	push	r16
    4642:	1f 93       	push	r17
    4644:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4646:	c0 80       	ld	r12, Z
    4648:	d1 80       	ldd	r13, Z+1	; 0x01
    464a:	e2 80       	ldd	r14, Z+2	; 0x02
    464c:	f3 80       	ldd	r15, Z+3	; 0x03
    464e:	c1 14       	cp	r12, r1
    4650:	d1 04       	cpc	r13, r1
    4652:	e1 04       	cpc	r14, r1
    4654:	f1 04       	cpc	r15, r1
    4656:	b9 f1       	breq	.+110    	; 0x46c6 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4658:	84 81       	ldd	r24, Z+4	; 0x04
    465a:	95 81       	ldd	r25, Z+5	; 0x05
    465c:	a6 81       	ldd	r26, Z+6	; 0x06
    465e:	b7 81       	ldd	r27, Z+7	; 0x07
    4660:	1c 01       	movw	r2, r24
    4662:	2d 01       	movw	r4, r26
    4664:	61 2c       	mov	r6, r1
    4666:	71 2c       	mov	r7, r1
    4668:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    466a:	e0 e0       	ldi	r30, 0x00	; 0
    466c:	8e 2f       	mov	r24, r30
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	a0 e0       	ldi	r26, 0x00	; 0
    4672:	b0 e0       	ldi	r27, 0x00	; 0
    4674:	8c 15       	cp	r24, r12
    4676:	9d 05       	cpc	r25, r13
    4678:	ae 05       	cpc	r26, r14
    467a:	bf 05       	cpc	r27, r15
    467c:	88 f4       	brcc	.+34     	; 0x46a0 <_nrk_time_to_ticks_long+0x7c>
    467e:	91 01       	movw	r18, r2
    4680:	a2 01       	movw	r20, r4
    4682:	b3 01       	movw	r22, r6
    4684:	c4 01       	movw	r24, r8
    4686:	36 53       	subi	r19, 0x36	; 54
    4688:	45 46       	sbci	r20, 0x65	; 101
    468a:	54 4c       	sbci	r21, 0xC4	; 196
    468c:	6f 4f       	sbci	r22, 0xFF	; 255
    468e:	7f 4f       	sbci	r23, 0xFF	; 255
    4690:	8f 4f       	sbci	r24, 0xFF	; 255
    4692:	9f 4f       	sbci	r25, 0xFF	; 255
    4694:	19 01       	movw	r2, r18
    4696:	2a 01       	movw	r4, r20
    4698:	3b 01       	movw	r6, r22
    469a:	4c 01       	movw	r8, r24
    469c:	ef 5f       	subi	r30, 0xFF	; 255
    469e:	e6 cf       	rjmp	.-52     	; 0x466c <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    46a0:	83 eb       	ldi	r24, 0xB3	; 179
    46a2:	a8 2e       	mov	r10, r24
    46a4:	96 ee       	ldi	r25, 0xE6	; 230
    46a6:	b9 2e       	mov	r11, r25
    46a8:	2e e0       	ldi	r18, 0x0E	; 14
    46aa:	c2 2e       	mov	r12, r18
    46ac:	d1 2c       	mov	r13, r1
    46ae:	e1 2c       	mov	r14, r1
    46b0:	f1 2c       	mov	r15, r1
    46b2:	00 e0       	ldi	r16, 0x00	; 0
    46b4:	10 e0       	ldi	r17, 0x00	; 0
    46b6:	91 01       	movw	r18, r2
    46b8:	a2 01       	movw	r20, r4
    46ba:	b3 01       	movw	r22, r6
    46bc:	c4 01       	movw	r24, r8
    46be:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <__udivdi3>
    46c2:	ca 01       	movw	r24, r20
    46c4:	0b c0       	rjmp	.+22     	; 0x46dc <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    46c6:	64 81       	ldd	r22, Z+4	; 0x04
    46c8:	75 81       	ldd	r23, Z+5	; 0x05
    46ca:	86 81       	ldd	r24, Z+6	; 0x06
    46cc:	97 81       	ldd	r25, Z+7	; 0x07
    46ce:	23 eb       	ldi	r18, 0xB3	; 179
    46d0:	36 ee       	ldi	r19, 0xE6	; 230
    46d2:	4e e0       	ldi	r20, 0x0E	; 14
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    46da:	ca 01       	movw	r24, r20
}
return ticks;
}
    46dc:	b9 01       	movw	r22, r18
    46de:	1f 91       	pop	r17
    46e0:	0f 91       	pop	r16
    46e2:	ff 90       	pop	r15
    46e4:	ef 90       	pop	r14
    46e6:	df 90       	pop	r13
    46e8:	cf 90       	pop	r12
    46ea:	bf 90       	pop	r11
    46ec:	af 90       	pop	r10
    46ee:	9f 90       	pop	r9
    46f0:	8f 90       	pop	r8
    46f2:	7f 90       	pop	r7
    46f4:	6f 90       	pop	r6
    46f6:	5f 90       	pop	r5
    46f8:	4f 90       	pop	r4
    46fa:	3f 90       	pop	r3
    46fc:	2f 90       	pop	r2
    46fe:	08 95       	ret

00004700 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4700:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4702:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4704:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4708:	0e 94 35 28 	call	0x506a	; 0x506a <_nrk_get_next_wakeup>
    470c:	84 30       	cpi	r24, 0x04	; 4
    470e:	28 f4       	brcc	.+10     	; 0x471a <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4710:	d0 93 a8 0a 	sts	0x0AA8, r29
	    nrk_idle();
    4714:	0e 94 44 2b 	call	0x5688	; 0x5688 <nrk_idle>
    4718:	08 c0       	rjmp	.+16     	; 0x472a <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    471a:	8a e0       	ldi	r24, 0x0A	; 10
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4722:	c0 93 a8 0a 	sts	0x0AA8, r28
	    nrk_sleep();
    4726:	0e 94 38 2b 	call	0x5670	; 0x5670 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    472a:	80 91 9c 08 	lds	r24, 0x089C
    472e:	85 35       	cpi	r24, 0x55	; 85
    4730:	19 f0       	breq	.+6      	; 0x4738 <nrk_idle_task+0x38>
    4732:	88 e0       	ldi	r24, 0x08	; 8
    4734:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4738:	80 91 7e 41 	lds	r24, 0x417E
    473c:	85 35       	cpi	r24, 0x55	; 85
    473e:	11 f3       	breq	.-60     	; 0x4704 <nrk_idle_task+0x4>
    4740:	88 e0       	ldi	r24, 0x08	; 8
    4742:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
    4746:	de cf       	rjmp	.-68     	; 0x4704 <nrk_idle_task+0x4>

00004748 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4748:	2f 92       	push	r2
    474a:	3f 92       	push	r3
    474c:	4f 92       	push	r4
    474e:	5f 92       	push	r5
    4750:	6f 92       	push	r6
    4752:	7f 92       	push	r7
    4754:	8f 92       	push	r8
    4756:	9f 92       	push	r9
    4758:	af 92       	push	r10
    475a:	bf 92       	push	r11
    475c:	cf 92       	push	r12
    475e:	df 92       	push	r13
    4760:	ef 92       	push	r14
    4762:	ff 92       	push	r15
    4764:	0f 93       	push	r16
    4766:	1f 93       	push	r17
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	00 d0       	rcall	.+0      	; 0x476e <_nrk_scheduler+0x26>
    476e:	1f 92       	push	r1
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4774:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4778:	0e 94 88 16 	call	0x2d10	; 0x2d10 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    477c:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4780:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <_nrk_high_speed_timer_get>
    4784:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4786:	8a ef       	ldi	r24, 0xFA	; 250
    4788:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    478c:	a0 91 71 07 	lds	r26, 0x0771
    4790:	b0 e0       	ldi	r27, 0x00	; 0
    4792:	23 eb       	ldi	r18, 0xB3	; 179
    4794:	36 ee       	ldi	r19, 0xE6	; 230
    4796:	4e e0       	ldi	r20, 0x0E	; 14
    4798:	50 e0       	ldi	r21, 0x00	; 0
    479a:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    479e:	00 91 af 0a 	lds	r16, 0x0AAF
    47a2:	10 91 b0 0a 	lds	r17, 0x0AB0
    47a6:	20 91 b1 0a 	lds	r18, 0x0AB1
    47aa:	30 91 b2 0a 	lds	r19, 0x0AB2
    47ae:	6b 01       	movw	r12, r22
    47b0:	7c 01       	movw	r14, r24
    47b2:	c0 0e       	add	r12, r16
    47b4:	d1 1e       	adc	r13, r17
    47b6:	e2 1e       	adc	r14, r18
    47b8:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    47ba:	c7 01       	movw	r24, r14
    47bc:	b6 01       	movw	r22, r12
    47be:	23 eb       	ldi	r18, 0xB3	; 179
    47c0:	36 ee       	ldi	r19, 0xE6	; 230
    47c2:	4e e0       	ldi	r20, 0x0E	; 14
    47c4:	50 e0       	ldi	r21, 0x00	; 0
    47c6:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    47ca:	26 01       	movw	r4, r12
    47cc:	37 01       	movw	r6, r14
    47ce:	46 1a       	sub	r4, r22
    47d0:	57 0a       	sbc	r5, r23
    47d2:	68 0a       	sbc	r6, r24
    47d4:	79 0a       	sbc	r7, r25
    47d6:	d3 01       	movw	r26, r6
    47d8:	c2 01       	movw	r24, r4
    47da:	00 91 ab 0a 	lds	r16, 0x0AAB
    47de:	10 91 ac 0a 	lds	r17, 0x0AAC
    47e2:	20 91 ad 0a 	lds	r18, 0x0AAD
    47e6:	30 91 ae 0a 	lds	r19, 0x0AAE

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    47ea:	43 eb       	ldi	r20, 0xB3	; 179
    47ec:	84 2e       	mov	r8, r20
    47ee:	46 ee       	ldi	r20, 0xE6	; 230
    47f0:	94 2e       	mov	r9, r20
    47f2:	4e e0       	ldi	r20, 0x0E	; 14
    47f4:	a4 2e       	mov	r10, r20
    47f6:	b1 2c       	mov	r11, r1
    47f8:	68 01       	movw	r12, r16
    47fa:	79 01       	movw	r14, r18
    47fc:	4f ef       	ldi	r20, 0xFF	; 255
    47fe:	c4 1a       	sub	r12, r20
    4800:	d4 0a       	sbc	r13, r20
    4802:	e4 0a       	sbc	r14, r20
    4804:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4806:	81 15       	cp	r24, r1
    4808:	5a ec       	ldi	r21, 0xCA	; 202
    480a:	95 07       	cpc	r25, r21
    480c:	5a e9       	ldi	r21, 0x9A	; 154
    480e:	a5 07       	cpc	r26, r21
    4810:	5b e3       	ldi	r21, 0x3B	; 59
    4812:	b5 07       	cpc	r27, r21
    4814:	c8 f0       	brcs	.+50     	; 0x4848 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4816:	2c 01       	movw	r4, r24
    4818:	3d 01       	movw	r6, r26
    481a:	2a ec       	ldi	r18, 0xCA	; 202
    481c:	52 1a       	sub	r5, r18
    481e:	2a e9       	ldi	r18, 0x9A	; 154
    4820:	62 0a       	sbc	r6, r18
    4822:	2b e3       	ldi	r18, 0x3B	; 59
    4824:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4826:	c3 01       	movw	r24, r6
    4828:	b2 01       	movw	r22, r4
    482a:	a5 01       	movw	r20, r10
    482c:	94 01       	movw	r18, r8
    482e:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    4832:	a3 01       	movw	r20, r6
    4834:	92 01       	movw	r18, r4
    4836:	26 1b       	sub	r18, r22
    4838:	37 0b       	sbc	r19, r23
    483a:	48 0b       	sbc	r20, r24
    483c:	59 0b       	sbc	r21, r25
    483e:	da 01       	movw	r26, r20
    4840:	c9 01       	movw	r24, r18
    4842:	97 01       	movw	r18, r14
    4844:	86 01       	movw	r16, r12
    4846:	d8 cf       	rjmp	.-80     	; 0x47f8 <_nrk_scheduler+0xb0>
    4848:	80 93 af 0a 	sts	0x0AAF, r24
    484c:	90 93 b0 0a 	sts	0x0AB0, r25
    4850:	a0 93 b1 0a 	sts	0x0AB1, r26
    4854:	b0 93 b2 0a 	sts	0x0AB2, r27
    4858:	00 93 ab 0a 	sts	0x0AAB, r16
    485c:	10 93 ac 0a 	sts	0x0AAC, r17
    4860:	20 93 ad 0a 	sts	0x0AAD, r18
    4864:	30 93 ae 0a 	sts	0x0AAE, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4868:	e0 91 b4 0a 	lds	r30, 0x0AB4
    486c:	f0 91 b5 0a 	lds	r31, 0x0AB5
    4870:	85 81       	ldd	r24, Z+5	; 0x05
    4872:	88 23       	and	r24, r24
    4874:	39 f1       	breq	.+78     	; 0x48c4 <_nrk_scheduler+0x17c>
    4876:	81 85       	ldd	r24, Z+9	; 0x09
    4878:	84 30       	cpi	r24, 0x04	; 4
    487a:	21 f1       	breq	.+72     	; 0x48c4 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    487c:	87 81       	ldd	r24, Z+7	; 0x07
    487e:	82 30       	cpi	r24, 0x02	; 2
    4880:	29 f0       	breq	.+10     	; 0x488c <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4882:	88 23       	and	r24, r24
    4884:	41 f0       	breq	.+16     	; 0x4896 <_nrk_scheduler+0x14e>
    4886:	86 81       	ldd	r24, Z+6	; 0x06
    4888:	81 11       	cpse	r24, r1
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    488c:	85 e0       	ldi	r24, 0x05	; 5
    488e:	01 c0       	rjmp	.+2      	; 0x4892 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4890:	83 e0       	ldi	r24, 0x03	; 3
    4892:	81 87       	std	Z+9, r24	; 0x09
    4894:	14 c0       	rjmp	.+40     	; 0x48be <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4896:	83 e0       	ldi	r24, 0x03	; 3
    4898:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    489a:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    489c:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    489e:	85 89       	ldd	r24, Z+21	; 0x15
    48a0:	96 89       	ldd	r25, Z+22	; 0x16
    48a2:	a7 89       	ldd	r26, Z+23	; 0x17
    48a4:	b0 8d       	ldd	r27, Z+24	; 0x18
    48a6:	89 2b       	or	r24, r25
    48a8:	8a 2b       	or	r24, r26
    48aa:	8b 2b       	or	r24, r27
    48ac:	41 f4       	brne	.+16     	; 0x48be <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    48ae:	81 8d       	ldd	r24, Z+25	; 0x19
    48b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    48b2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    48b4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    48b6:	85 8b       	std	Z+21, r24	; 0x15
    48b8:	96 8b       	std	Z+22, r25	; 0x16
    48ba:	a7 8b       	std	Z+23, r26	; 0x17
    48bc:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    48be:	80 85       	ldd	r24, Z+8	; 0x08
    48c0:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    48c4:	e0 91 b4 0a 	lds	r30, 0x0AB4
    48c8:	f0 91 b5 0a 	lds	r31, 0x0AB5
    48cc:	85 a1       	ldd	r24, Z+37	; 0x25
    48ce:	96 a1       	ldd	r25, Z+38	; 0x26
    48d0:	a7 a1       	ldd	r26, Z+39	; 0x27
    48d2:	b0 a5       	ldd	r27, Z+40	; 0x28
    48d4:	89 2b       	or	r24, r25
    48d6:	8a 2b       	or	r24, r26
    48d8:	8b 2b       	or	r24, r27
    48da:	09 f4       	brne	.+2      	; 0x48de <_nrk_scheduler+0x196>
    48dc:	44 c0       	rjmp	.+136    	; 0x4966 <_nrk_scheduler+0x21e>
    48de:	20 85       	ldd	r18, Z+8	; 0x08
    48e0:	22 23       	and	r18, r18
    48e2:	09 f4       	brne	.+2      	; 0x48e6 <_nrk_scheduler+0x19e>
    48e4:	40 c0       	rjmp	.+128    	; 0x4966 <_nrk_scheduler+0x21e>
    48e6:	81 85       	ldd	r24, Z+9	; 0x09
    48e8:	84 30       	cpi	r24, 0x04	; 4
    48ea:	e9 f1       	breq	.+122    	; 0x4966 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    48ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    48ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    48f0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    48f2:	b0 a1       	ldd	r27, Z+32	; 0x20
    48f4:	40 91 71 07 	lds	r20, 0x0771
    48f8:	50 e0       	ldi	r21, 0x00	; 0
    48fa:	60 e0       	ldi	r22, 0x00	; 0
    48fc:	70 e0       	ldi	r23, 0x00	; 0
    48fe:	84 17       	cp	r24, r20
    4900:	95 07       	cpc	r25, r21
    4902:	a6 07       	cpc	r26, r22
    4904:	b7 07       	cpc	r27, r23
    4906:	68 f4       	brcc	.+26     	; 0x4922 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4908:	62 2f       	mov	r22, r18
    490a:	82 e0       	ldi	r24, 0x02	; 2
    490c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4910:	e0 91 b4 0a 	lds	r30, 0x0AB4
    4914:	f0 91 b5 0a 	lds	r31, 0x0AB5
    4918:	15 8e       	std	Z+29, r1	; 0x1d
    491a:	16 8e       	std	Z+30, r1	; 0x1e
    491c:	17 8e       	std	Z+31, r1	; 0x1f
    491e:	10 a2       	std	Z+32, r1	; 0x20
    4920:	08 c0       	rjmp	.+16     	; 0x4932 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4922:	84 1b       	sub	r24, r20
    4924:	95 0b       	sbc	r25, r21
    4926:	a6 0b       	sbc	r26, r22
    4928:	b7 0b       	sbc	r27, r23
    492a:	85 8f       	std	Z+29, r24	; 0x1d
    492c:	96 8f       	std	Z+30, r25	; 0x1e
    492e:	a7 8f       	std	Z+31, r26	; 0x1f
    4930:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4932:	e0 91 b4 0a 	lds	r30, 0x0AB4
    4936:	f0 91 b5 0a 	lds	r31, 0x0AB5
    493a:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    493c:	85 8d       	ldd	r24, Z+29	; 0x1d
    493e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4940:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4942:	b0 a1       	ldd	r27, Z+32	; 0x20
    4944:	89 2b       	or	r24, r25
    4946:	8a 2b       	or	r24, r26
    4948:	8b 2b       	or	r24, r27
    494a:	69 f4       	brne	.+26     	; 0x4966 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    494c:	61 2f       	mov	r22, r17
    494e:	83 e0       	ldi	r24, 0x03	; 3
    4950:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4954:	e0 91 b4 0a 	lds	r30, 0x0AB4
    4958:	f0 91 b5 0a 	lds	r31, 0x0AB5
    495c:	83 e0       	ldi	r24, 0x03	; 3
    495e:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4960:	81 2f       	mov	r24, r17
    4962:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_rem_from_readyQ>
    4966:	8b ef       	ldi	r24, 0xFB	; 251
    4968:	99 e0       	ldi	r25, 0x09	; 9
    496a:	9b 83       	std	Y+3, r25	; 0x03
    496c:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    496e:	00 e6       	ldi	r16, 0x60	; 96
    4970:	1a ee       	ldi	r17, 0xEA	; 234
    4972:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4974:	2a ef       	ldi	r18, 0xFA	; 250
    4976:	c2 2e       	mov	r12, r18
    4978:	d1 2c       	mov	r13, r1
    497a:	e1 2c       	mov	r14, r1
    497c:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    497e:	81 2c       	mov	r8, r1
    4980:	91 2c       	mov	r9, r1
    4982:	54 01       	movw	r10, r8
    4984:	83 94       	inc	r8
    4986:	ea 81       	ldd	r30, Y+2	; 0x02
    4988:	fb 81       	ldd	r31, Y+3	; 0x03
    498a:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    498c:	80 81       	ld	r24, Z
    498e:	8f 3f       	cpi	r24, 0xFF	; 255
    4990:	09 f4       	brne	.+2      	; 0x4994 <_nrk_scheduler+0x24c>
    4992:	04 c1       	rjmp	.+520    	; 0x4b9c <_nrk_scheduler+0x454>
    4994:	ea 81       	ldd	r30, Y+2	; 0x02
    4996:	fb 81       	ldd	r31, Y+3	; 0x03
    4998:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    499a:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    499c:	88 23       	and	r24, r24
    499e:	09 f4       	brne	.+2      	; 0x49a2 <_nrk_scheduler+0x25a>
    49a0:	67 c0       	rjmp	.+206    	; 0x4a70 <_nrk_scheduler+0x328>
    49a2:	ea 81       	ldd	r30, Y+2	; 0x02
    49a4:	fb 81       	ldd	r31, Y+3	; 0x03
    49a6:	80 81       	ld	r24, Z
    49a8:	84 30       	cpi	r24, 0x04	; 4
    49aa:	09 f4       	brne	.+2      	; 0x49ae <_nrk_scheduler+0x266>
    49ac:	61 c0       	rjmp	.+194    	; 0x4a70 <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    49ae:	44 84       	ldd	r4, Z+12	; 0x0c
    49b0:	55 84       	ldd	r5, Z+13	; 0x0d
    49b2:	66 84       	ldd	r6, Z+14	; 0x0e
    49b4:	77 84       	ldd	r7, Z+15	; 0x0f
    49b6:	60 91 71 07 	lds	r22, 0x0771
    49ba:	70 e0       	ldi	r23, 0x00	; 0
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	46 16       	cp	r4, r22
    49c2:	57 06       	cpc	r5, r23
    49c4:	68 06       	cpc	r6, r24
    49c6:	79 06       	cpc	r7, r25
    49c8:	48 f0       	brcs	.+18     	; 0x49dc <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    49ca:	46 1a       	sub	r4, r22
    49cc:	57 0a       	sbc	r5, r23
    49ce:	68 0a       	sbc	r6, r24
    49d0:	79 0a       	sbc	r7, r25
    49d2:	44 86       	std	Z+12, r4	; 0x0c
    49d4:	55 86       	std	Z+13, r5	; 0x0d
    49d6:	66 86       	std	Z+14, r6	; 0x0e
    49d8:	77 86       	std	Z+15, r7	; 0x0f
    49da:	06 c0       	rjmp	.+12     	; 0x49e8 <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    49dc:	ea 81       	ldd	r30, Y+2	; 0x02
    49de:	fb 81       	ldd	r31, Y+3	; 0x03
    49e0:	14 86       	std	Z+12, r1	; 0x0c
    49e2:	15 86       	std	Z+13, r1	; 0x0d
    49e4:	16 86       	std	Z+14, r1	; 0x0e
    49e6:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    49e8:	ea 81       	ldd	r30, Y+2	; 0x02
    49ea:	fb 81       	ldd	r31, Y+3	; 0x03
    49ec:	40 88       	ldd	r4, Z+16	; 0x10
    49ee:	51 88       	ldd	r5, Z+17	; 0x11
    49f0:	62 88       	ldd	r6, Z+18	; 0x12
    49f2:	73 88       	ldd	r7, Z+19	; 0x13
    49f4:	46 16       	cp	r4, r22
    49f6:	57 06       	cpc	r5, r23
    49f8:	68 06       	cpc	r6, r24
    49fa:	79 06       	cpc	r7, r25
    49fc:	48 f0       	brcs	.+18     	; 0x4a10 <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    49fe:	46 1a       	sub	r4, r22
    4a00:	57 0a       	sbc	r5, r23
    4a02:	68 0a       	sbc	r6, r24
    4a04:	79 0a       	sbc	r7, r25
    4a06:	40 8a       	std	Z+16, r4	; 0x10
    4a08:	51 8a       	std	Z+17, r5	; 0x11
    4a0a:	62 8a       	std	Z+18, r6	; 0x12
    4a0c:	73 8a       	std	Z+19, r7	; 0x13
    4a0e:	1e c0       	rjmp	.+60     	; 0x4a4c <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4a10:	ea 81       	ldd	r30, Y+2	; 0x02
    4a12:	fb 81       	ldd	r31, Y+3	; 0x03
    4a14:	20 8d       	ldd	r18, Z+24	; 0x18
    4a16:	31 8d       	ldd	r19, Z+25	; 0x19
    4a18:	42 8d       	ldd	r20, Z+26	; 0x1a
    4a1a:	53 8d       	ldd	r21, Z+27	; 0x1b
    4a1c:	62 17       	cp	r22, r18
    4a1e:	73 07       	cpc	r23, r19
    4a20:	84 07       	cpc	r24, r20
    4a22:	95 07       	cpc	r25, r21
    4a24:	58 f4       	brcc	.+22     	; 0x4a3c <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4a26:	29 01       	movw	r4, r18
    4a28:	3a 01       	movw	r6, r20
    4a2a:	46 1a       	sub	r4, r22
    4a2c:	57 0a       	sbc	r5, r23
    4a2e:	68 0a       	sbc	r6, r24
    4a30:	79 0a       	sbc	r7, r25
    4a32:	40 8a       	std	Z+16, r4	; 0x10
    4a34:	51 8a       	std	Z+17, r5	; 0x11
    4a36:	62 8a       	std	Z+18, r6	; 0x12
    4a38:	73 8a       	std	Z+19, r7	; 0x13
    4a3a:	08 c0       	rjmp	.+16     	; 0x4a4c <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4a3c:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    4a40:	ea 81       	ldd	r30, Y+2	; 0x02
    4a42:	fb 81       	ldd	r31, Y+3	; 0x03
    4a44:	60 8b       	std	Z+16, r22	; 0x10
    4a46:	71 8b       	std	Z+17, r23	; 0x11
    4a48:	82 8b       	std	Z+18, r24	; 0x12
    4a4a:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4a4c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a4e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a50:	80 89       	ldd	r24, Z+16	; 0x10
    4a52:	91 89       	ldd	r25, Z+17	; 0x11
    4a54:	a2 89       	ldd	r26, Z+18	; 0x12
    4a56:	b3 89       	ldd	r27, Z+19	; 0x13
    4a58:	89 2b       	or	r24, r25
    4a5a:	8a 2b       	or	r24, r26
    4a5c:	8b 2b       	or	r24, r27
    4a5e:	41 f4       	brne	.+16     	; 0x4a70 <_nrk_scheduler+0x328>
    4a60:	80 8d       	ldd	r24, Z+24	; 0x18
    4a62:	91 8d       	ldd	r25, Z+25	; 0x19
    4a64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4a66:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4a68:	80 8b       	std	Z+16, r24	; 0x10
    4a6a:	91 8b       	std	Z+17, r25	; 0x11
    4a6c:	a2 8b       	std	Z+18, r26	; 0x12
    4a6e:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4a70:	ea 81       	ldd	r30, Y+2	; 0x02
    4a72:	fb 81       	ldd	r31, Y+3	; 0x03
    4a74:	80 81       	ld	r24, Z
    4a76:	83 30       	cpi	r24, 0x03	; 3
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <_nrk_scheduler+0x334>
    4a7a:	90 c0       	rjmp	.+288    	; 0x4b9c <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4a7c:	84 85       	ldd	r24, Z+12	; 0x0c
    4a7e:	95 85       	ldd	r25, Z+13	; 0x0d
    4a80:	a6 85       	ldd	r26, Z+14	; 0x0e
    4a82:	b7 85       	ldd	r27, Z+15	; 0x0f
    4a84:	89 2b       	or	r24, r25
    4a86:	8a 2b       	or	r24, r26
    4a88:	8b 2b       	or	r24, r27
    4a8a:	09 f0       	breq	.+2      	; 0x4a8e <_nrk_scheduler+0x346>
    4a8c:	74 c0       	rjmp	.+232    	; 0x4b76 <_nrk_scheduler+0x42e>
    4a8e:	df 01       	movw	r26, r30
    4a90:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4a92:	8c 91       	ld	r24, X
    4a94:	9f 01       	movw	r18, r30
    4a96:	23 50       	subi	r18, 0x03	; 3
    4a98:	31 09       	sbc	r19, r1
    4a9a:	88 23       	and	r24, r24
    4a9c:	a9 f0       	breq	.+42     	; 0x4ac8 <_nrk_scheduler+0x380>
    4a9e:	f9 01       	movw	r30, r18
    4aa0:	80 81       	ld	r24, Z
    4aa2:	88 23       	and	r24, r24
    4aa4:	89 f0       	breq	.+34     	; 0x4ac8 <_nrk_scheduler+0x380>
    4aa6:	b5 01       	movw	r22, r10
    4aa8:	a4 01       	movw	r20, r8
    4aaa:	00 90 a4 0a 	lds	r0, 0x0AA4
    4aae:	04 c0       	rjmp	.+8      	; 0x4ab8 <_nrk_scheduler+0x370>
    4ab0:	44 0f       	add	r20, r20
    4ab2:	55 1f       	adc	r21, r21
    4ab4:	66 1f       	adc	r22, r22
    4ab6:	77 1f       	adc	r23, r23
    4ab8:	0a 94       	dec	r0
    4aba:	d2 f7       	brpl	.-12     	; 0x4ab0 <_nrk_scheduler+0x368>
    4abc:	ea 81       	ldd	r30, Y+2	; 0x02
    4abe:	fb 81       	ldd	r31, Y+3	; 0x03
    4ac0:	40 87       	std	Z+8, r20	; 0x08
    4ac2:	51 87       	std	Z+9, r21	; 0x09
    4ac4:	62 87       	std	Z+10, r22	; 0x0a
    4ac6:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4ac8:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4aca:	f9 01       	movw	r30, r18
    4acc:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    4ace:	ea 81       	ldd	r30, Y+2	; 0x02
    4ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ad2:	a0 a1       	ldd	r26, Z+32	; 0x20
    4ad4:	b1 a1       	ldd	r27, Z+33	; 0x21
    4ad6:	a1 30       	cpi	r26, 0x01	; 1
    4ad8:	b1 05       	cpc	r27, r1
    4ada:	19 f5       	brne	.+70     	; 0x4b22 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4adc:	84 8d       	ldd	r24, Z+28	; 0x1c
    4ade:	95 8d       	ldd	r25, Z+29	; 0x1d
    4ae0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4ae2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4ae4:	84 8b       	std	Z+20, r24	; 0x14
    4ae6:	95 8b       	std	Z+21, r25	; 0x15
    4ae8:	a6 8b       	std	Z+22, r26	; 0x16
    4aea:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    4aec:	92 e0       	ldi	r25, 0x02	; 2
    4aee:	49 2e       	mov	r4, r25
    4af0:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4af2:	80 89       	ldd	r24, Z+16	; 0x10
    4af4:	91 89       	ldd	r25, Z+17	; 0x11
    4af6:	a2 89       	ldd	r26, Z+18	; 0x12
    4af8:	b3 89       	ldd	r27, Z+19	; 0x13
    4afa:	84 87       	std	Z+12, r24	; 0x0c
    4afc:	95 87       	std	Z+13, r25	; 0x0d
    4afe:	a6 87       	std	Z+14, r26	; 0x0e
    4b00:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4b02:	80 8d       	ldd	r24, Z+24	; 0x18
    4b04:	91 8d       	ldd	r25, Z+25	; 0x19
    4b06:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4b08:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4b0a:	89 2b       	or	r24, r25
    4b0c:	8a 2b       	or	r24, r26
    4b0e:	8b 2b       	or	r24, r27
    4b10:	21 f4       	brne	.+8      	; 0x4b1a <_nrk_scheduler+0x3d2>
    4b12:	c4 86       	std	Z+12, r12	; 0x0c
    4b14:	d5 86       	std	Z+13, r13	; 0x0d
    4b16:	e6 86       	std	Z+14, r14	; 0x0e
    4b18:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <nrk_add_to_readyQ>
    4b20:	2a c0       	rjmp	.+84     	; 0x4b76 <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4b22:	ea 81       	ldd	r30, Y+2	; 0x02
    4b24:	fb 81       	ldd	r31, Y+3	; 0x03
    4b26:	44 8d       	ldd	r20, Z+28	; 0x1c
    4b28:	55 8d       	ldd	r21, Z+29	; 0x1d
    4b2a:	66 8d       	ldd	r22, Z+30	; 0x1e
    4b2c:	77 8d       	ldd	r23, Z+31	; 0x1f
    4b2e:	44 8b       	std	Z+20, r20	; 0x14
    4b30:	55 8b       	std	Z+21, r21	; 0x15
    4b32:	66 8b       	std	Z+22, r22	; 0x16
    4b34:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4b36:	40 8c       	ldd	r4, Z+24	; 0x18
    4b38:	51 8c       	ldd	r5, Z+25	; 0x19
    4b3a:	62 8c       	ldd	r6, Z+26	; 0x1a
    4b3c:	73 8c       	ldd	r7, Z+27	; 0x1b
    4b3e:	11 97       	sbiw	r26, 0x01	; 1
    4b40:	a3 01       	movw	r20, r6
    4b42:	92 01       	movw	r18, r4
    4b44:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    4b48:	64 87       	std	Z+12, r22	; 0x0c
    4b4a:	75 87       	std	Z+13, r23	; 0x0d
    4b4c:	86 87       	std	Z+14, r24	; 0x0e
    4b4e:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4b50:	60 8b       	std	Z+16, r22	; 0x10
    4b52:	71 8b       	std	Z+17, r23	; 0x11
    4b54:	82 8b       	std	Z+18, r24	; 0x12
    4b56:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4b58:	45 28       	or	r4, r5
    4b5a:	46 28       	or	r4, r6
    4b5c:	47 28       	or	r4, r7
    4b5e:	21 f4       	brne	.+8      	; 0x4b68 <_nrk_scheduler+0x420>
    4b60:	c4 86       	std	Z+12, r12	; 0x0c
    4b62:	d5 86       	std	Z+13, r13	; 0x0d
    4b64:	e6 86       	std	Z+14, r14	; 0x0e
    4b66:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    4b68:	44 24       	eor	r4, r4
    4b6a:	43 94       	inc	r4
    4b6c:	51 2c       	mov	r5, r1
    4b6e:	ea 81       	ldd	r30, Y+2	; 0x02
    4b70:	fb 81       	ldd	r31, Y+3	; 0x03
    4b72:	51 a2       	std	Z+33, r5	; 0x21
    4b74:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4b76:	ea 81       	ldd	r30, Y+2	; 0x02
    4b78:	fb 81       	ldd	r31, Y+3	; 0x03
    4b7a:	84 85       	ldd	r24, Z+12	; 0x0c
    4b7c:	95 85       	ldd	r25, Z+13	; 0x0d
    4b7e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4b80:	b7 85       	ldd	r27, Z+15	; 0x0f
    4b82:	00 97       	sbiw	r24, 0x00	; 0
    4b84:	a1 05       	cpc	r26, r1
    4b86:	b1 05       	cpc	r27, r1
    4b88:	49 f0       	breq	.+18     	; 0x4b9c <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4b8a:	a8 01       	movw	r20, r16
    4b8c:	60 e0       	ldi	r22, 0x00	; 0
    4b8e:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4b90:	84 17       	cp	r24, r20
    4b92:	95 07       	cpc	r25, r21
    4b94:	a6 07       	cpc	r26, r22
    4b96:	b7 07       	cpc	r27, r23
    4b98:	08 f4       	brcc	.+2      	; 0x4b9c <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4b9a:	8c 01       	movw	r16, r24
    4b9c:	f9 81       	ldd	r31, Y+1	; 0x01
    4b9e:	ff 5f       	subi	r31, 0xFF	; 255
    4ba0:	f9 83       	std	Y+1, r31	; 0x01
    4ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    4ba4:	3b 81       	ldd	r19, Y+3	; 0x03
    4ba6:	25 5d       	subi	r18, 0xD5	; 213
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	3b 83       	std	Y+3, r19	; 0x03
    4bac:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4bae:	f4 30       	cpi	r31, 0x04	; 4
    4bb0:	09 f0       	breq	.+2      	; 0x4bb4 <_nrk_scheduler+0x46c>
    4bb2:	e9 ce       	rjmp	.-558    	; 0x4986 <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4bb4:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <nrk_get_high_ready_task_ID>
    4bb8:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4bba:	3b e2       	ldi	r19, 0x2B	; 43
    4bbc:	83 02       	muls	r24, r19
    4bbe:	f0 01       	movw	r30, r0
    4bc0:	11 24       	eor	r1, r1
    4bc2:	ee 50       	subi	r30, 0x0E	; 14
    4bc4:	f6 4f       	sbci	r31, 0xF6	; 246
    4bc6:	22 85       	ldd	r18, Z+10	; 0x0a
    4bc8:	20 93 b6 0a 	sts	0x0AB6, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4bcc:	f0 93 a6 0a 	sts	0x0AA6, r31
    4bd0:	e0 93 a5 0a 	sts	0x0AA5, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4bd4:	88 23       	and	r24, r24
    4bd6:	f9 f0       	breq	.+62     	; 0x4c16 <_nrk_scheduler+0x4ce>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4bd8:	85 a1       	ldd	r24, Z+37	; 0x25
    4bda:	96 a1       	ldd	r25, Z+38	; 0x26
    4bdc:	a7 a1       	ldd	r26, Z+39	; 0x27
    4bde:	b0 a5       	ldd	r27, Z+40	; 0x28
    4be0:	89 2b       	or	r24, r25
    4be2:	8a 2b       	or	r24, r26
    4be4:	8b 2b       	or	r24, r27
    4be6:	99 f0       	breq	.+38     	; 0x4c0e <_nrk_scheduler+0x4c6>
    4be8:	85 8d       	ldd	r24, Z+29	; 0x1d
    4bea:	96 8d       	ldd	r25, Z+30	; 0x1e
    4bec:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4bee:	b0 a1       	ldd	r27, Z+32	; 0x20
    4bf0:	8a 3f       	cpi	r24, 0xFA	; 250
    4bf2:	91 05       	cpc	r25, r1
    4bf4:	a1 05       	cpc	r26, r1
    4bf6:	b1 05       	cpc	r27, r1
    4bf8:	50 f4       	brcc	.+20     	; 0x4c0e <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4bfa:	a8 01       	movw	r20, r16
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	84 17       	cp	r24, r20
    4c02:	95 07       	cpc	r25, r21
    4c04:	a6 07       	cpc	r26, r22
    4c06:	b7 07       	cpc	r27, r23
    4c08:	e8 f4       	brcc	.+58     	; 0x4c44 <_nrk_scheduler+0x4fc>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4c0a:	8c 01       	movw	r16, r24
    4c0c:	1b c0       	rjmp	.+54     	; 0x4c44 <_nrk_scheduler+0x4fc>
    4c0e:	0b 3f       	cpi	r16, 0xFB	; 251
    4c10:	11 05       	cpc	r17, r1
    4c12:	c0 f0       	brcs	.+48     	; 0x4c44 <_nrk_scheduler+0x4fc>
    4c14:	12 c0       	rjmp	.+36     	; 0x4c3a <_nrk_scheduler+0x4f2>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4c16:	04 30       	cpi	r16, 0x04	; 4
    4c18:	11 05       	cpc	r17, r1
    4c1a:	a0 f0       	brcs	.+40     	; 0x4c44 <_nrk_scheduler+0x4fc>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4c1c:	c8 01       	movw	r24, r16
    4c1e:	03 97       	sbiw	r24, 0x03	; 3
    4c20:	8a 3f       	cpi	r24, 0xFA	; 250
    4c22:	91 05       	cpc	r25, r1
    4c24:	38 f4       	brcc	.+14     	; 0x4c34 <_nrk_scheduler+0x4ec>
    4c26:	8c 01       	movw	r16, r24
    4c28:	82 30       	cpi	r24, 0x02	; 2
    4c2a:	91 05       	cpc	r25, r1
    4c2c:	58 f4       	brcc	.+22     	; 0x4c44 <_nrk_scheduler+0x4fc>
    4c2e:	02 e0       	ldi	r16, 0x02	; 2
    4c30:	10 e0       	ldi	r17, 0x00	; 0
    4c32:	08 c0       	rjmp	.+16     	; 0x4c44 <_nrk_scheduler+0x4fc>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    4c34:	0d 3f       	cpi	r16, 0xFD	; 253
    4c36:	11 05       	cpc	r17, r1
    4c38:	19 f0       	breq	.+6      	; 0x4c40 <_nrk_scheduler+0x4f8>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4c3a:	0a ef       	ldi	r16, 0xFA	; 250
    4c3c:	10 e0       	ldi	r17, 0x00	; 0
    4c3e:	02 c0       	rjmp	.+4      	; 0x4c44 <_nrk_scheduler+0x4fc>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    4c40:	07 ef       	ldi	r16, 0xF7	; 247
    4c42:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4c44:	20 93 a7 0a 	sts	0x0AA7, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4c48:	f0 93 b5 0a 	sts	0x0AB5, r31
    4c4c:	e0 93 b4 0a 	sts	0x0AB4, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    4c50:	00 93 71 07 	sts	0x0771, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4c54:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    4c58:	28 2f       	mov	r18, r24
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	2f 5f       	subi	r18, 0xFF	; 255
    4c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c60:	20 17       	cp	r18, r16
    4c62:	31 07       	cpc	r19, r17
    4c64:	40 f0       	brcs	.+16     	; 0x4c76 <_nrk_scheduler+0x52e>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4c66:	0e 94 9b 28 	call	0x5136	; 0x5136 <_nrk_os_timer_get>
    4c6a:	08 2f       	mov	r16, r24
    4c6c:	10 e0       	ldi	r17, 0x00	; 0
    4c6e:	0e 5f       	subi	r16, 0xFE	; 254
    4c70:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4c72:	00 93 71 07 	sts	0x0771, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4c76:	f1 10       	cpse	r15, r1
    4c78:	10 92 a8 0a 	sts	0x0AA8, r1

    _nrk_set_next_wakeup(next_wake);
    4c7c:	80 2f       	mov	r24, r16
    4c7e:	0e 94 39 28 	call	0x5072	; 0x5072 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4c82:	6c ed       	ldi	r22, 0xDC	; 220
    4c84:	75 e0       	ldi	r23, 0x05	; 5
    4c86:	c1 01       	movw	r24, r2
    4c88:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4c8c:	0e 94 be 2b 	call	0x577c	; 0x577c <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    4c90:	0f 90       	pop	r0
    4c92:	0f 90       	pop	r0
    4c94:	0f 90       	pop	r0
    4c96:	df 91       	pop	r29
    4c98:	cf 91       	pop	r28
    4c9a:	1f 91       	pop	r17
    4c9c:	0f 91       	pop	r16
    4c9e:	ff 90       	pop	r15
    4ca0:	ef 90       	pop	r14
    4ca2:	df 90       	pop	r13
    4ca4:	cf 90       	pop	r12
    4ca6:	bf 90       	pop	r11
    4ca8:	af 90       	pop	r10
    4caa:	9f 90       	pop	r9
    4cac:	8f 90       	pop	r8
    4cae:	7f 90       	pop	r7
    4cb0:	6f 90       	pop	r6
    4cb2:	5f 90       	pop	r5
    4cb4:	4f 90       	pop	r4
    4cb6:	3f 90       	pop	r3
    4cb8:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4cba:	0c 94 c9 2b 	jmp	0x5792	; 0x5792 <nrk_start_high_ready_task>

00004cbe <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    4cbe:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    4cc0:	90 91 d1 0a 	lds	r25, 0x0AD1
    4cc4:	19 16       	cp	r1, r25
    4cc6:	74 f0       	brlt	.+28     	; 0x4ce4 <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    4cc8:	84 e0       	ldi	r24, 0x04	; 4
    4cca:	98 02       	muls	r25, r24
    4ccc:	f0 01       	movw	r30, r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	ee 52       	subi	r30, 0x2E	; 46
    4cd2:	f5 4f       	sbci	r31, 0xF5	; 245
    4cd4:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    4cd6:	33 83       	std	Z+3, r19	; 0x03
    4cd8:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    4cda:	9f 5f       	subi	r25, 0xFF	; 255
    4cdc:	90 93 d1 0a 	sts	0x0AD1, r25
        return NRK_OK;
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
    4ce2:	08 95       	ret
    }
    else
        return NRK_ERROR;
    4ce4:	8f ef       	ldi	r24, 0xFF	; 255
}
    4ce6:	08 95       	ret

00004ce8 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4cf0:	40 91 d1 0a 	lds	r20, 0x0AD1
    4cf4:	55 27       	eor	r21, r21
    4cf6:	47 fd       	sbrc	r20, 7
    4cf8:	50 95       	com	r21
    4cfa:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4cfc:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4cfe:	2c 2f       	mov	r18, r28
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	24 17       	cp	r18, r20
    4d04:	35 07       	cpc	r19, r21
    4d06:	8c f5       	brge	.+98     	; 0x4d6a <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4d08:	89 01       	movw	r16, r18
    4d0a:	00 0f       	add	r16, r16
    4d0c:	11 1f       	adc	r17, r17
    4d0e:	00 0f       	add	r16, r16
    4d10:	11 1f       	adc	r17, r17
    4d12:	d8 01       	movw	r26, r16
    4d14:	ae 52       	subi	r26, 0x2E	; 46
    4d16:	b5 4f       	sbci	r27, 0xF5	; 245
    4d18:	ec 91       	ld	r30, X
    4d1a:	ff 27       	eor	r31, r31
    4d1c:	e7 fd       	sbrc	r30, 7
    4d1e:	f0 95       	com	r31
    4d20:	e8 17       	cp	r30, r24
    4d22:	f9 07       	cpc	r31, r25
    4d24:	01 f5       	brne	.+64     	; 0x4d66 <nrk_open+0x7e>
    4d26:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    4d28:	f9 01       	movw	r30, r18
    4d2a:	ea 52       	subi	r30, 0x2A	; 42
    4d2c:	f5 4f       	sbci	r31, 0xF5	; 245
    4d2e:	80 81       	ld	r24, Z
    4d30:	81 11       	cpse	r24, r1
    4d32:	0b c0       	rjmp	.+22     	; 0x4d4a <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    4d38:	12 96       	adiw	r26, 0x02	; 2
    4d3a:	ed 91       	ld	r30, X+
    4d3c:	fc 91       	ld	r31, X
    4d3e:	13 97       	sbiw	r26, 0x03	; 3
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	40 e0       	ldi	r20, 0x00	; 0
    4d44:	50 e0       	ldi	r21, 0x00	; 0
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    4d4a:	f8 01       	movw	r30, r16
    4d4c:	ee 52       	subi	r30, 0x2E	; 46
    4d4e:	f5 4f       	sbci	r31, 0xF5	; 245
    4d50:	02 80       	ldd	r0, Z+2	; 0x02
    4d52:	f3 81       	ldd	r31, Z+3	; 0x03
    4d54:	e0 2d       	mov	r30, r0
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	40 e0       	ldi	r20, 0x00	; 0
    4d5a:	50 e0       	ldi	r21, 0x00	; 0
    4d5c:	6d 2f       	mov	r22, r29
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	09 95       	icall
            return cnt;
    4d62:	8c 2f       	mov	r24, r28
    4d64:	03 c0       	rjmp	.+6      	; 0x4d6c <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4d66:	cf 5f       	subi	r28, 0xFF	; 255
    4d68:	ca cf       	rjmp	.-108    	; 0x4cfe <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    4d6a:	8f ef       	ldi	r24, 0xFF	; 255
}
    4d6c:	df 91       	pop	r29
    4d6e:	cf 91       	pop	r28
    4d70:	1f 91       	pop	r17
    4d72:	0f 91       	pop	r16
    4d74:	08 95       	ret

00004d76 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	20 91 d1 0a 	lds	r18, 0x0AD1
    4d7c:	33 27       	eor	r19, r19
    4d7e:	27 fd       	sbrc	r18, 7
    4d80:	30 95       	com	r19
    4d82:	28 17       	cp	r18, r24
    4d84:	39 07       	cpc	r19, r25
    4d86:	84 f0       	brlt	.+32     	; 0x4da8 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    4d88:	88 0f       	add	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	88 0f       	add	r24, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	fc 01       	movw	r30, r24
    4d92:	ee 52       	subi	r30, 0x2E	; 46
    4d94:	f5 4f       	sbci	r31, 0xF5	; 245
    4d96:	02 80       	ldd	r0, Z+2	; 0x02
    4d98:	f3 81       	ldd	r31, Z+3	; 0x03
    4d9a:	e0 2d       	mov	r30, r0
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	40 e0       	ldi	r20, 0x00	; 0
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	82 e0       	ldi	r24, 0x02	; 2
    4da6:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    4dae:	8f ef       	ldi	r24, 0xFF	; 255
    4db0:	08 95       	ret

00004db2 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    4db2:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	e0 91 d1 0a 	lds	r30, 0x0AD1
    4dba:	ff 27       	eor	r31, r31
    4dbc:	e7 fd       	sbrc	r30, 7
    4dbe:	f0 95       	com	r31
    4dc0:	e8 17       	cp	r30, r24
    4dc2:	f9 07       	cpc	r31, r25
    4dc4:	74 f0       	brlt	.+28     	; 0x4de2 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    4dc6:	88 0f       	add	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	88 0f       	add	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	fc 01       	movw	r30, r24
    4dd0:	ee 52       	subi	r30, 0x2E	; 46
    4dd2:	f5 4f       	sbci	r31, 0xF5	; 245
    4dd4:	02 80       	ldd	r0, Z+2	; 0x02
    4dd6:	f3 81       	ldd	r31, Z+3	; 0x03
    4dd8:	e0 2d       	mov	r30, r0
    4dda:	ab 01       	movw	r20, r22
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	86 e0       	ldi	r24, 0x06	; 6
    4de0:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    4de8:	8f ef       	ldi	r24, 0xFF	; 255
    4dea:	08 95       	ret

00004dec <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    4dec:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	e0 91 d1 0a 	lds	r30, 0x0AD1
    4df4:	ff 27       	eor	r31, r31
    4df6:	e7 fd       	sbrc	r30, 7
    4df8:	f0 95       	com	r31
    4dfa:	e8 17       	cp	r30, r24
    4dfc:	f9 07       	cpc	r31, r25
    4dfe:	74 f0       	brlt	.+28     	; 0x4e1c <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    4e00:	88 0f       	add	r24, r24
    4e02:	99 1f       	adc	r25, r25
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	fc 01       	movw	r30, r24
    4e0a:	ee 52       	subi	r30, 0x2E	; 46
    4e0c:	f5 4f       	sbci	r31, 0xF5	; 245
    4e0e:	02 80       	ldd	r0, Z+2	; 0x02
    4e10:	f3 81       	ldd	r31, Z+3	; 0x03
    4e12:	e0 2d       	mov	r30, r0
    4e14:	ab 01       	movw	r20, r22
    4e16:	60 e0       	ldi	r22, 0x00	; 0
    4e18:	85 e0       	ldi	r24, 0x05	; 5
    4e1a:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    4e22:	8f ef       	ldi	r24, 0xFF	; 255
    4e24:	08 95       	ret

00004e26 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    4e26:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	e0 91 d1 0a 	lds	r30, 0x0AD1
    4e2e:	ff 27       	eor	r31, r31
    4e30:	e7 fd       	sbrc	r30, 7
    4e32:	f0 95       	com	r31
    4e34:	e8 17       	cp	r30, r24
    4e36:	f9 07       	cpc	r31, r25
    4e38:	74 f0       	brlt	.+28     	; 0x4e56 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    4e3a:	88 0f       	add	r24, r24
    4e3c:	99 1f       	adc	r25, r25
    4e3e:	88 0f       	add	r24, r24
    4e40:	99 1f       	adc	r25, r25
    4e42:	fc 01       	movw	r30, r24
    4e44:	ee 52       	subi	r30, 0x2E	; 46
    4e46:	f5 4f       	sbci	r31, 0xF5	; 245
    4e48:	02 80       	ldd	r0, Z+2	; 0x02
    4e4a:	f3 81       	ldd	r31, Z+3	; 0x03
    4e4c:	e0 2d       	mov	r30, r0
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	50 e0       	ldi	r21, 0x00	; 0
    4e52:	84 e0       	ldi	r24, 0x04	; 4
    4e54:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    4e5c:	8f ef       	ldi	r24, 0xFF	; 255
    4e5e:	08 95       	ret

00004e60 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	20 91 d1 0a 	lds	r18, 0x0AD1
    4e66:	33 27       	eor	r19, r19
    4e68:	27 fd       	sbrc	r18, 7
    4e6a:	30 95       	com	r19
    4e6c:	28 17       	cp	r18, r24
    4e6e:	39 07       	cpc	r19, r25
    4e70:	7c f0       	brlt	.+30     	; 0x4e90 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    4e72:	88 0f       	add	r24, r24
    4e74:	99 1f       	adc	r25, r25
    4e76:	88 0f       	add	r24, r24
    4e78:	99 1f       	adc	r25, r25
    4e7a:	fc 01       	movw	r30, r24
    4e7c:	ee 52       	subi	r30, 0x2E	; 46
    4e7e:	f5 4f       	sbci	r31, 0xF5	; 245
    4e80:	02 80       	ldd	r0, Z+2	; 0x02
    4e82:	f3 81       	ldd	r31, Z+3	; 0x03
    4e84:	e0 2d       	mov	r30, r0
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	40 e0       	ldi	r20, 0x00	; 0
    4e8a:	50 e0       	ldi	r21, 0x00	; 0
    4e8c:	83 e0       	ldi	r24, 0x03	; 3
    4e8e:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    4e96:	8f ef       	ldi	r24, 0xFF	; 255
    4e98:	08 95       	ret

00004e9a <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4eb2:	01 97       	sbiw	r24, 0x01	; 1
    4eb4:	91 f7       	brne	.-28     	; 0x4e9a <nrk_spin_wait_us>

}
    4eb6:	08 95       	ret

00004eb8 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4eb8:	10 92 21 01 	sts	0x0121, r1
    4ebc:	08 95       	ret

00004ebe <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4ebe:	89 e0       	ldi	r24, 0x09	; 9
    4ec0:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4ec4:	8d e8       	ldi	r24, 0x8D	; 141
    4ec6:	9c e3       	ldi	r25, 0x3C	; 60
    4ec8:	90 93 29 01 	sts	0x0129, r25
    4ecc:	80 93 28 01 	sts	0x0128, r24
    4ed0:	08 95       	ret

00004ed2 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4ed2:	10 92 25 01 	sts	0x0125, r1
    4ed6:	10 92 24 01 	sts	0x0124, r1
    4eda:	08 95       	ret

00004edc <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	00 d0       	rcall	.+0      	; 0x4ee2 <_nrk_precision_os_timer_get+0x6>
    4ee2:	cd b7       	in	r28, 0x3d	; 61
    4ee4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4ee6:	80 91 24 01 	lds	r24, 0x0124
    4eea:	90 91 25 01 	lds	r25, 0x0125
    4eee:	9a 83       	std	Y+2, r25	; 0x02
    4ef0:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4ef2:	89 81       	ldd	r24, Y+1	; 0x01
    4ef4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	df 91       	pop	r29
    4efc:	cf 91       	pop	r28
    4efe:	08 95       	ret

00004f00 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4f00:	10 92 81 00 	sts	0x0081, r1
    4f04:	08 95       	ret

00004f06 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	80 93 81 00 	sts	0x0081, r24
    4f0c:	08 95       	ret

00004f0e <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4f0e:	83 b5       	in	r24, 0x23	; 35
    4f10:	81 60       	ori	r24, 0x01	; 1
    4f12:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4f14:	10 92 85 00 	sts	0x0085, r1
    4f18:	10 92 84 00 	sts	0x0084, r1
    4f1c:	08 95       	ret

00004f1e <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	00 d0       	rcall	.+0      	; 0x4f24 <_nrk_high_speed_timer_get+0x6>
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4f28:	80 91 84 00 	lds	r24, 0x0084
    4f2c:	90 91 85 00 	lds	r25, 0x0085
    4f30:	9a 83       	std	Y+2, r25	; 0x02
    4f32:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4f34:	89 81       	ldd	r24, Y+1	; 0x01
    4f36:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	df 91       	pop	r29
    4f3e:	cf 91       	pop	r28
    4f40:	08 95       	ret

00004f42 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4f42:	cf 92       	push	r12
    4f44:	df 92       	push	r13
    4f46:	ef 92       	push	r14
    4f48:	ff 92       	push	r15
    4f4a:	cf 93       	push	r28
    4f4c:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4f4e:	ec 01       	movw	r28, r24
    4f50:	cc 0f       	add	r28, r28
    4f52:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4f54:	c9 37       	cpi	r28, 0x79	; 121
    4f56:	8f ef       	ldi	r24, 0xFF	; 255
    4f58:	d8 07       	cpc	r29, r24
    4f5a:	10 f0       	brcs	.+4      	; 0x4f60 <nrk_high_speed_timer_wait+0x1e>
    4f5c:	c0 e0       	ldi	r28, 0x00	; 0
    4f5e:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4f60:	6b 01       	movw	r12, r22
    4f62:	e1 2c       	mov	r14, r1
    4f64:	f1 2c       	mov	r15, r1
    4f66:	cc 0e       	add	r12, r28
    4f68:	dd 1e       	adc	r13, r29
    4f6a:	e1 1c       	adc	r14, r1
    4f6c:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	c8 16       	cp	r12, r24
    4f72:	d1 04       	cpc	r13, r1
    4f74:	e8 06       	cpc	r14, r24
    4f76:	f1 04       	cpc	r15, r1
    4f78:	40 f0       	brcs	.+16     	; 0x4f8a <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	e8 1a       	sub	r14, r24
    4f7e:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    4f80:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <_nrk_high_speed_timer_get>
    4f84:	c8 17       	cp	r28, r24
    4f86:	d9 07       	cpc	r29, r25
    4f88:	d8 f3       	brcs	.-10     	; 0x4f80 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4f8a:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <_nrk_high_speed_timer_get>
    4f8e:	8c 15       	cp	r24, r12
    4f90:	9d 05       	cpc	r25, r13
    4f92:	d8 f3       	brcs	.-10     	; 0x4f8a <nrk_high_speed_timer_wait+0x48>
}
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	ff 90       	pop	r15
    4f9a:	ef 90       	pop	r14
    4f9c:	df 90       	pop	r13
    4f9e:	cf 90       	pop	r12
    4fa0:	08 95       	ret

00004fa2 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4fa2:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4fa6:	e0 e7       	ldi	r30, 0x70	; 112
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	80 81       	ld	r24, Z
    4fac:	8d 7f       	andi	r24, 0xFD	; 253
    4fae:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4fb0:	80 81       	ld	r24, Z
    4fb2:	8e 7f       	andi	r24, 0xFE	; 254
    4fb4:	80 83       	st	Z, r24
    4fb6:	08 95       	ret

00004fb8 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4fb8:	80 93 b2 00 	sts	0x00B2, r24
    4fbc:	08 95       	ret

00004fbe <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4fbe:	e0 e7       	ldi	r30, 0x70	; 112
    4fc0:	f0 e0       	ldi	r31, 0x00	; 0
    4fc2:	80 81       	ld	r24, Z
    4fc4:	83 60       	ori	r24, 0x03	; 3
    4fc6:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4fc8:	83 e0       	ldi	r24, 0x03	; 3
    4fca:	80 93 b1 00 	sts	0x00B1, r24
    4fce:	08 95       	ret

00004fd0 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4fd0:	83 b5       	in	r24, 0x23	; 35
    4fd2:	82 60       	ori	r24, 0x02	; 2
    4fd4:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4fd6:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4fda:	10 92 4b 06 	sts	0x064B, r1
    _nrk_prev_timer_val=0;
    4fde:	10 92 71 07 	sts	0x0771, r1
    4fe2:	08 95       	ret

00004fe4 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    4fe4:	cf 93       	push	r28
    4fe6:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    4fe8:	8e ef       	ldi	r24, 0xFE	; 254
    4fea:	80 93 71 07 	sts	0x0771, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4fee:	80 e2       	ldi	r24, 0x20	; 32
    4ff0:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4ff4:	80 91 71 07 	lds	r24, 0x0771
    4ff8:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4ffc:	83 e0       	ldi	r24, 0x03	; 3
    4ffe:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    5000:	92 e0       	ldi	r25, 0x02	; 2
    5002:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    5006:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    500a:	93 b5       	in	r25, 0x23	; 35
    500c:	92 60       	ori	r25, 0x02	; 2
    500e:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5010:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    5012:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    5014:	83 b5       	in	r24, 0x23	; 35
    5016:	82 60       	ori	r24, 0x02	; 2
    5018:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    501a:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    5024:	10 92 85 00 	sts	0x0085, r1
    5028:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    502c:	83 b5       	in	r24, 0x23	; 35
    502e:	82 60       	ori	r24, 0x02	; 2
    5030:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5032:	83 b5       	in	r24, 0x23	; 35
    5034:	81 60       	ori	r24, 0x01	; 1
    5036:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    5038:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    503c:	c4 e2       	ldi	r28, 0x24	; 36
    503e:	d1 e0       	ldi	r29, 0x01	; 1
    5040:	19 82       	std	Y+1, r1	; 0x01
    5042:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5044:	83 b5       	in	r24, 0x23	; 35
    5046:	82 60       	ori	r24, 0x02	; 2
    5048:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    504a:	83 b5       	in	r24, 0x23	; 35
    504c:	81 60       	ori	r24, 0x01	; 1
    504e:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    5050:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5054:	19 82       	std	Y+1, r1	; 0x01
    5056:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    5058:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    505c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    5060:	10 92 4b 06 	sts	0x064B, r1
}
    5064:	df 91       	pop	r29
    5066:	cf 91       	pop	r28
    5068:	08 95       	ret

0000506a <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    506a:	80 91 b3 00 	lds	r24, 0x00B3
}
    506e:	8f 5f       	subi	r24, 0xFF	; 255
    5070:	08 95       	ret

00005072 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    5072:	81 50       	subi	r24, 0x01	; 1
    5074:	80 93 b3 00 	sts	0x00B3, r24
    5078:	08 95       	ret

0000507a <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    507a:	81 11       	cpse	r24, r1
    507c:	02 c0       	rjmp	.+4      	; 0x5082 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    507e:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	08 95       	ret

00005086 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5086:	81 11       	cpse	r24, r1
    5088:	06 c0       	rjmp	.+12     	; 0x5096 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    508a:	10 92 95 00 	sts	0x0095, r1
    508e:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	08 95       	ret
	}
return NRK_ERROR;
    5096:	8f ef       	ldi	r24, 0xFF	; 255
}
    5098:	08 95       	ret

0000509a <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    509a:	81 11       	cpse	r24, r1
    509c:	05 c0       	rjmp	.+10     	; 0x50a8 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    509e:	80 91 94 00 	lds	r24, 0x0094
    50a2:	90 91 95 00 	lds	r25, 0x0095
    50a6:	08 95       	ret
	}
return 0;
    50a8:	80 e0       	ldi	r24, 0x00	; 0
    50aa:	90 e0       	ldi	r25, 0x00	; 0

}
    50ac:	08 95       	ret

000050ae <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    50ae:	81 11       	cpse	r24, r1
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    50b2:	82 e0       	ldi	r24, 0x02	; 2
    50b4:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    50b8:	81 e0       	ldi	r24, 0x01	; 1
    50ba:	08 95       	ret
	}
return NRK_ERROR;
    50bc:	8f ef       	ldi	r24, 0xFF	; 255
}
    50be:	08 95       	ret

000050c0 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    50c0:	81 11       	cpse	r24, r1
    50c2:	35 c0       	rjmp	.+106    	; 0x512e <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    50c4:	cb 01       	movw	r24, r22
    50c6:	01 97       	sbiw	r24, 0x01	; 1
    50c8:	05 97       	sbiw	r24, 0x05	; 5
    50ca:	10 f4       	brcc	.+4      	; 0x50d0 <nrk_timer_int_configure+0x10>
    50cc:	60 93 70 07 	sts	0x0770, r22
	TCCR3A = 0;  
    50d0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    50d4:	88 e0       	ldi	r24, 0x08	; 8
    50d6:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    50da:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    50de:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    50e2:	30 93 49 04 	sts	0x0449, r19
    50e6:	20 93 48 04 	sts	0x0448, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    50ea:	80 91 70 07 	lds	r24, 0x0770
    50ee:	81 30       	cpi	r24, 0x01	; 1
    50f0:	21 f4       	brne	.+8      	; 0x50fa <nrk_timer_int_configure+0x3a>
    50f2:	80 91 91 00 	lds	r24, 0x0091
    50f6:	81 60       	ori	r24, 0x01	; 1
    50f8:	11 c0       	rjmp	.+34     	; 0x511c <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    50fa:	82 30       	cpi	r24, 0x02	; 2
    50fc:	21 f4       	brne	.+8      	; 0x5106 <nrk_timer_int_configure+0x46>
    50fe:	80 91 91 00 	lds	r24, 0x0091
    5102:	82 60       	ori	r24, 0x02	; 2
    5104:	0b c0       	rjmp	.+22     	; 0x511c <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    5106:	83 30       	cpi	r24, 0x03	; 3
    5108:	21 f4       	brne	.+8      	; 0x5112 <nrk_timer_int_configure+0x52>
    510a:	80 91 91 00 	lds	r24, 0x0091
    510e:	83 60       	ori	r24, 0x03	; 3
    5110:	05 c0       	rjmp	.+10     	; 0x511c <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    5112:	84 30       	cpi	r24, 0x04	; 4
    5114:	31 f4       	brne	.+12     	; 0x5122 <nrk_timer_int_configure+0x62>
    5116:	80 91 91 00 	lds	r24, 0x0091
    511a:	84 60       	ori	r24, 0x04	; 4
    511c:	80 93 91 00 	sts	0x0091, r24
    5120:	08 c0       	rjmp	.+16     	; 0x5132 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    5122:	85 30       	cpi	r24, 0x05	; 5
    5124:	31 f4       	brne	.+12     	; 0x5132 <nrk_timer_int_configure+0x72>
    5126:	80 91 91 00 	lds	r24, 0x0091
    512a:	85 60       	ori	r24, 0x05	; 5
    512c:	f7 cf       	rjmp	.-18     	; 0x511c <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    512e:	8f ef       	ldi	r24, 0xFF	; 255
    5130:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    5132:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    5134:	08 95       	ret

00005136 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    5136:	80 91 b2 00 	lds	r24, 0x00B2
}
    513a:	08 95       	ret

0000513c <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    513c:	1f 92       	push	r1
    513e:	0f 92       	push	r0
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	0f 92       	push	r0
    5144:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5146:	60 e0       	ldi	r22, 0x00	; 0
    5148:	8a e0       	ldi	r24, 0x0A	; 10
    514a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
	while(1);
    514e:	ff cf       	rjmp	.-2      	; 0x514e <__vector_default+0x12>

00005150 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    5150:	0f 92       	push	r0
    5152:	0f b6       	in	r0, 0x3f	; 63
    5154:	0f 92       	push	r0
    5156:	1f 92       	push	r1
    5158:	2f 92       	push	r2
    515a:	3f 92       	push	r3
    515c:	4f 92       	push	r4
    515e:	5f 92       	push	r5
    5160:	6f 92       	push	r6
    5162:	7f 92       	push	r7
    5164:	8f 92       	push	r8
    5166:	9f 92       	push	r9
    5168:	af 92       	push	r10
    516a:	bf 92       	push	r11
    516c:	cf 92       	push	r12
    516e:	df 92       	push	r13
    5170:	ef 92       	push	r14
    5172:	ff 92       	push	r15
    5174:	0f 93       	push	r16
    5176:	1f 93       	push	r17
    5178:	2f 93       	push	r18
    517a:	3f 93       	push	r19
    517c:	4f 93       	push	r20
    517e:	5f 93       	push	r21
    5180:	6f 93       	push	r22
    5182:	7f 93       	push	r23
    5184:	8f 93       	push	r24
    5186:	9f 93       	push	r25
    5188:	af 93       	push	r26
    518a:	bf 93       	push	r27
    518c:	cf 93       	push	r28
    518e:	df 93       	push	r29
    5190:	ef 93       	push	r30
    5192:	ff 93       	push	r31
    5194:	a0 91 b4 0a 	lds	r26, 0x0AB4
    5198:	b0 91 b5 0a 	lds	r27, 0x0AB5
    519c:	0d b6       	in	r0, 0x3d	; 61
    519e:	0d 92       	st	X+, r0
    51a0:	0e b6       	in	r0, 0x3e	; 62
    51a2:	0d 92       	st	X+, r0
    51a4:	1f 92       	push	r1
    51a6:	a0 91 6d 07 	lds	r26, 0x076D
    51aa:	b0 91 6e 07 	lds	r27, 0x076E
    51ae:	1e 90       	ld	r1, -X
    51b0:	be bf       	out	0x3e, r27	; 62
    51b2:	ad bf       	out	0x3d, r26	; 61
    51b4:	08 95       	ret

000051b6 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    51b6:	1f 92       	push	r1
    51b8:	0f 92       	push	r0
    51ba:	0f b6       	in	r0, 0x3f	; 63
    51bc:	0f 92       	push	r0
    51be:	11 24       	eor	r1, r1
    51c0:	0b b6       	in	r0, 0x3b	; 59
    51c2:	0f 92       	push	r0
    51c4:	2f 93       	push	r18
    51c6:	3f 93       	push	r19
    51c8:	4f 93       	push	r20
    51ca:	5f 93       	push	r21
    51cc:	6f 93       	push	r22
    51ce:	7f 93       	push	r23
    51d0:	8f 93       	push	r24
    51d2:	9f 93       	push	r25
    51d4:	af 93       	push	r26
    51d6:	bf 93       	push	r27
    51d8:	ef 93       	push	r30
    51da:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    51dc:	e0 91 48 04 	lds	r30, 0x0448
    51e0:	f0 91 49 04 	lds	r31, 0x0449
    51e4:	30 97       	sbiw	r30, 0x00	; 0
    51e6:	11 f0       	breq	.+4      	; 0x51ec <__vector_32+0x36>
    51e8:	09 95       	icall
    51ea:	04 c0       	rjmp	.+8      	; 0x51f4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    51ec:	60 e0       	ldi	r22, 0x00	; 0
    51ee:	8a e0       	ldi	r24, 0x0A	; 10
    51f0:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
	return;  	
}
    51f4:	ff 91       	pop	r31
    51f6:	ef 91       	pop	r30
    51f8:	bf 91       	pop	r27
    51fa:	af 91       	pop	r26
    51fc:	9f 91       	pop	r25
    51fe:	8f 91       	pop	r24
    5200:	7f 91       	pop	r23
    5202:	6f 91       	pop	r22
    5204:	5f 91       	pop	r21
    5206:	4f 91       	pop	r20
    5208:	3f 91       	pop	r19
    520a:	2f 91       	pop	r18
    520c:	0f 90       	pop	r0
    520e:	0b be       	out	0x3b, r0	; 59
    5210:	0f 90       	pop	r0
    5212:	0f be       	out	0x3f, r0	; 63
    5214:	0f 90       	pop	r0
    5216:	1f 90       	pop	r1
    5218:	18 95       	reti

0000521a <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    521a:	1f 92       	push	r1
    521c:	0f 92       	push	r0
    521e:	0f b6       	in	r0, 0x3f	; 63
    5220:	0f 92       	push	r0
    5222:	11 24       	eor	r1, r1

	return;  	
} 
    5224:	0f 90       	pop	r0
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	0f 90       	pop	r0
    522a:	1f 90       	pop	r1
    522c:	18 95       	reti

0000522e <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    522e:	04 b6       	in	r0, 0x34	; 52
    5230:	03 fe       	sbrs	r0, 3
    5232:	02 c0       	rjmp	.+4      	; 0x5238 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    5234:	80 e1       	ldi	r24, 0x10	; 16
    5236:	01 c0       	rjmp	.+2      	; 0x523a <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    5238:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    523a:	04 b6       	in	r0, 0x34	; 52
    523c:	02 fe       	sbrs	r0, 2
    523e:	06 c0       	rjmp	.+12     	; 0x524c <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    5240:	94 b7       	in	r25, 0x34	; 52
    5242:	9b 7f       	andi	r25, 0xFB	; 251
    5244:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    5246:	04 b6       	in	r0, 0x34	; 52
    5248:	00 fe       	sbrs	r0, 0
		error|=0x04;
    524a:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    524c:	04 b6       	in	r0, 0x34	; 52
    524e:	01 fe       	sbrs	r0, 1
    5250:	05 c0       	rjmp	.+10     	; 0x525c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    5252:	94 b7       	in	r25, 0x34	; 52
    5254:	9d 7f       	andi	r25, 0xFD	; 253
    5256:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    5258:	82 60       	ori	r24, 0x02	; 2
    525a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    525c:	81 11       	cpse	r24, r1
    525e:	0c c0       	rjmp	.+24     	; 0x5278 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    5260:	04 b6       	in	r0, 0x34	; 52
    5262:	00 fe       	sbrs	r0, 0
    5264:	04 c0       	rjmp	.+8      	; 0x526e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    5266:	94 b7       	in	r25, 0x34	; 52
    5268:	9e 7f       	andi	r25, 0xFE	; 254
    526a:	94 bf       	out	0x34, r25	; 52
    526c:	01 c0       	rjmp	.+2      	; 0x5270 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    526e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    5270:	90 91 b0 00 	lds	r25, 0x00B0
    5274:	91 11       	cpse	r25, r1
    5276:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    5278:	08 95       	ret

0000527a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    527a:	81 11       	cpse	r24, r1
    527c:	02 c0       	rjmp	.+4      	; 0x5282 <nrk_ext_int_enable+0x8>
    527e:	e8 9a       	sbi	0x1d, 0	; 29
    5280:	39 c0       	rjmp	.+114    	; 0x52f4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5282:	81 30       	cpi	r24, 0x01	; 1
    5284:	11 f4       	brne	.+4      	; 0x528a <nrk_ext_int_enable+0x10>
    5286:	e9 9a       	sbi	0x1d, 1	; 29
    5288:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    528a:	82 30       	cpi	r24, 0x02	; 2
    528c:	11 f4       	brne	.+4      	; 0x5292 <nrk_ext_int_enable+0x18>
    528e:	ea 9a       	sbi	0x1d, 2	; 29
    5290:	31 c0       	rjmp	.+98     	; 0x52f4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    5292:	83 30       	cpi	r24, 0x03	; 3
    5294:	21 f4       	brne	.+8      	; 0x529e <nrk_ext_int_enable+0x24>
    5296:	80 91 6b 00 	lds	r24, 0x006B
    529a:	81 60       	ori	r24, 0x01	; 1
    529c:	29 c0       	rjmp	.+82     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    529e:	84 30       	cpi	r24, 0x04	; 4
    52a0:	21 f4       	brne	.+8      	; 0x52aa <nrk_ext_int_enable+0x30>
    52a2:	80 91 6b 00 	lds	r24, 0x006B
    52a6:	82 60       	ori	r24, 0x02	; 2
    52a8:	23 c0       	rjmp	.+70     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    52aa:	85 30       	cpi	r24, 0x05	; 5
    52ac:	21 f4       	brne	.+8      	; 0x52b6 <nrk_ext_int_enable+0x3c>
    52ae:	80 91 6b 00 	lds	r24, 0x006B
    52b2:	84 60       	ori	r24, 0x04	; 4
    52b4:	1d c0       	rjmp	.+58     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    52b6:	86 30       	cpi	r24, 0x06	; 6
    52b8:	21 f4       	brne	.+8      	; 0x52c2 <nrk_ext_int_enable+0x48>
    52ba:	80 91 6b 00 	lds	r24, 0x006B
    52be:	88 60       	ori	r24, 0x08	; 8
    52c0:	17 c0       	rjmp	.+46     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    52c2:	87 30       	cpi	r24, 0x07	; 7
    52c4:	21 f4       	brne	.+8      	; 0x52ce <nrk_ext_int_enable+0x54>
    52c6:	80 91 6b 00 	lds	r24, 0x006B
    52ca:	80 61       	ori	r24, 0x10	; 16
    52cc:	11 c0       	rjmp	.+34     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    52ce:	88 30       	cpi	r24, 0x08	; 8
    52d0:	21 f4       	brne	.+8      	; 0x52da <nrk_ext_int_enable+0x60>
    52d2:	80 91 6b 00 	lds	r24, 0x006B
    52d6:	80 62       	ori	r24, 0x20	; 32
    52d8:	0b c0       	rjmp	.+22     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    52da:	89 30       	cpi	r24, 0x09	; 9
    52dc:	21 f4       	brne	.+8      	; 0x52e6 <nrk_ext_int_enable+0x6c>
    52de:	80 91 6b 00 	lds	r24, 0x006B
    52e2:	80 64       	ori	r24, 0x40	; 64
    52e4:	05 c0       	rjmp	.+10     	; 0x52f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    52e6:	8a 30       	cpi	r24, 0x0A	; 10
    52e8:	39 f4       	brne	.+14     	; 0x52f8 <nrk_ext_int_enable+0x7e>
    52ea:	80 91 6b 00 	lds	r24, 0x006B
    52ee:	80 68       	ori	r24, 0x80	; 128
    52f0:	80 93 6b 00 	sts	0x006B, r24
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	08 95       	ret
return NRK_ERROR;
    52f8:	8f ef       	ldi	r24, 0xFF	; 255
}
    52fa:	08 95       	ret

000052fc <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    52fc:	81 11       	cpse	r24, r1
    52fe:	02 c0       	rjmp	.+4      	; 0x5304 <nrk_ext_int_disable+0x8>
    5300:	e8 98       	cbi	0x1d, 0	; 29
    5302:	39 c0       	rjmp	.+114    	; 0x5376 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5304:	81 30       	cpi	r24, 0x01	; 1
    5306:	11 f4       	brne	.+4      	; 0x530c <nrk_ext_int_disable+0x10>
    5308:	e9 98       	cbi	0x1d, 1	; 29
    530a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    530c:	82 30       	cpi	r24, 0x02	; 2
    530e:	11 f4       	brne	.+4      	; 0x5314 <nrk_ext_int_disable+0x18>
    5310:	e9 98       	cbi	0x1d, 1	; 29
    5312:	31 c0       	rjmp	.+98     	; 0x5376 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    5314:	83 30       	cpi	r24, 0x03	; 3
    5316:	21 f4       	brne	.+8      	; 0x5320 <nrk_ext_int_disable+0x24>
    5318:	80 91 6b 00 	lds	r24, 0x006B
    531c:	8e 7f       	andi	r24, 0xFE	; 254
    531e:	29 c0       	rjmp	.+82     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    5320:	84 30       	cpi	r24, 0x04	; 4
    5322:	21 f4       	brne	.+8      	; 0x532c <nrk_ext_int_disable+0x30>
    5324:	80 91 6b 00 	lds	r24, 0x006B
    5328:	8d 7f       	andi	r24, 0xFD	; 253
    532a:	23 c0       	rjmp	.+70     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    532c:	85 30       	cpi	r24, 0x05	; 5
    532e:	21 f4       	brne	.+8      	; 0x5338 <nrk_ext_int_disable+0x3c>
    5330:	80 91 6b 00 	lds	r24, 0x006B
    5334:	8b 7f       	andi	r24, 0xFB	; 251
    5336:	1d c0       	rjmp	.+58     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    5338:	86 30       	cpi	r24, 0x06	; 6
    533a:	21 f4       	brne	.+8      	; 0x5344 <nrk_ext_int_disable+0x48>
    533c:	80 91 6b 00 	lds	r24, 0x006B
    5340:	87 7f       	andi	r24, 0xF7	; 247
    5342:	17 c0       	rjmp	.+46     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    5344:	87 30       	cpi	r24, 0x07	; 7
    5346:	21 f4       	brne	.+8      	; 0x5350 <nrk_ext_int_disable+0x54>
    5348:	80 91 6b 00 	lds	r24, 0x006B
    534c:	8f 7e       	andi	r24, 0xEF	; 239
    534e:	11 c0       	rjmp	.+34     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5350:	88 30       	cpi	r24, 0x08	; 8
    5352:	21 f4       	brne	.+8      	; 0x535c <nrk_ext_int_disable+0x60>
    5354:	80 91 6b 00 	lds	r24, 0x006B
    5358:	8f 7d       	andi	r24, 0xDF	; 223
    535a:	0b c0       	rjmp	.+22     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    535c:	89 30       	cpi	r24, 0x09	; 9
    535e:	21 f4       	brne	.+8      	; 0x5368 <nrk_ext_int_disable+0x6c>
    5360:	80 91 6b 00 	lds	r24, 0x006B
    5364:	8f 7b       	andi	r24, 0xBF	; 191
    5366:	05 c0       	rjmp	.+10     	; 0x5372 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    5368:	8a 30       	cpi	r24, 0x0A	; 10
    536a:	39 f4       	brne	.+14     	; 0x537a <nrk_ext_int_disable+0x7e>
    536c:	80 91 6b 00 	lds	r24, 0x006B
    5370:	8f 77       	andi	r24, 0x7F	; 127
    5372:	80 93 6b 00 	sts	0x006B, r24
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	08 95       	ret
return NRK_ERROR;
    537a:	8f ef       	ldi	r24, 0xFF	; 255
}
    537c:	08 95       	ret

0000537e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    537e:	81 11       	cpse	r24, r1
    5380:	26 c0       	rjmp	.+76     	; 0x53ce <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    5382:	50 93 da 0a 	sts	0x0ADA, r21
    5386:	40 93 d9 0a 	sts	0x0AD9, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    538a:	61 11       	cpse	r22, r1
    538c:	04 c0       	rjmp	.+8      	; 0x5396 <nrk_ext_int_configure+0x18>
    538e:	80 91 69 00 	lds	r24, 0x0069
    5392:	8c 7f       	andi	r24, 0xFC	; 252
    5394:	3d c0       	rjmp	.+122    	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5396:	61 30       	cpi	r22, 0x01	; 1
    5398:	49 f4       	brne	.+18     	; 0x53ac <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    539a:	80 91 69 00 	lds	r24, 0x0069
    539e:	8d 7f       	andi	r24, 0xFD	; 253
    53a0:	80 93 69 00 	sts	0x0069, r24
    53a4:	80 91 69 00 	lds	r24, 0x0069
    53a8:	81 60       	ori	r24, 0x01	; 1
    53aa:	32 c0       	rjmp	.+100    	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    53ac:	62 30       	cpi	r22, 0x02	; 2
    53ae:	49 f4       	brne	.+18     	; 0x53c2 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    53b0:	80 91 69 00 	lds	r24, 0x0069
    53b4:	82 60       	ori	r24, 0x02	; 2
    53b6:	80 93 69 00 	sts	0x0069, r24
    53ba:	80 91 69 00 	lds	r24, 0x0069
    53be:	8e 7f       	andi	r24, 0xFE	; 254
    53c0:	27 c0       	rjmp	.+78     	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    53c2:	63 30       	cpi	r22, 0x03	; 3
    53c4:	39 f5       	brne	.+78     	; 0x5414 <nrk_ext_int_configure+0x96>
    53c6:	80 91 69 00 	lds	r24, 0x0069
    53ca:	83 60       	ori	r24, 0x03	; 3
    53cc:	21 c0       	rjmp	.+66     	; 0x5410 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    53ce:	81 30       	cpi	r24, 0x01	; 1
    53d0:	49 f5       	brne	.+82     	; 0x5424 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    53d2:	50 93 d8 0a 	sts	0x0AD8, r21
    53d6:	40 93 d7 0a 	sts	0x0AD7, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    53da:	61 11       	cpse	r22, r1
    53dc:	04 c0       	rjmp	.+8      	; 0x53e6 <nrk_ext_int_configure+0x68>
    53de:	80 91 69 00 	lds	r24, 0x0069
    53e2:	83 7f       	andi	r24, 0xF3	; 243
    53e4:	15 c0       	rjmp	.+42     	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    53e6:	61 30       	cpi	r22, 0x01	; 1
    53e8:	49 f4       	brne	.+18     	; 0x53fc <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    53ea:	80 91 69 00 	lds	r24, 0x0069
    53ee:	87 7f       	andi	r24, 0xF7	; 247
    53f0:	80 93 69 00 	sts	0x0069, r24
    53f4:	80 91 69 00 	lds	r24, 0x0069
    53f8:	84 60       	ori	r24, 0x04	; 4
    53fa:	0a c0       	rjmp	.+20     	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    53fc:	62 30       	cpi	r22, 0x02	; 2
    53fe:	61 f4       	brne	.+24     	; 0x5418 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5400:	80 91 69 00 	lds	r24, 0x0069
    5404:	88 60       	ori	r24, 0x08	; 8
    5406:	80 93 69 00 	sts	0x0069, r24
    540a:	80 91 69 00 	lds	r24, 0x0069
    540e:	8b 7f       	andi	r24, 0xFB	; 251
    5410:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5418:	63 30       	cpi	r22, 0x03	; 3
    541a:	e1 f7       	brne	.-8      	; 0x5414 <nrk_ext_int_configure+0x96>
    541c:	80 91 69 00 	lds	r24, 0x0069
    5420:	8c 60       	ori	r24, 0x0C	; 12
    5422:	f6 cf       	rjmp	.-20     	; 0x5410 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    5424:	82 30       	cpi	r24, 0x02	; 2
    5426:	31 f5       	brne	.+76     	; 0x5474 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5428:	50 93 dc 0a 	sts	0x0ADC, r21
    542c:	40 93 db 0a 	sts	0x0ADB, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5430:	61 11       	cpse	r22, r1
    5432:	04 c0       	rjmp	.+8      	; 0x543c <nrk_ext_int_configure+0xbe>
    5434:	80 91 69 00 	lds	r24, 0x0069
    5438:	8f 7c       	andi	r24, 0xCF	; 207
    543a:	ea cf       	rjmp	.-44     	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    543c:	61 30       	cpi	r22, 0x01	; 1
    543e:	49 f4       	brne	.+18     	; 0x5452 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5440:	80 91 69 00 	lds	r24, 0x0069
    5444:	8f 7d       	andi	r24, 0xDF	; 223
    5446:	80 93 69 00 	sts	0x0069, r24
    544a:	80 91 69 00 	lds	r24, 0x0069
    544e:	80 61       	ori	r24, 0x10	; 16
    5450:	df cf       	rjmp	.-66     	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5452:	62 30       	cpi	r22, 0x02	; 2
    5454:	49 f4       	brne	.+18     	; 0x5468 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5456:	80 91 69 00 	lds	r24, 0x0069
    545a:	80 62       	ori	r24, 0x20	; 32
    545c:	80 93 69 00 	sts	0x0069, r24
    5460:	80 91 69 00 	lds	r24, 0x0069
    5464:	8f 7e       	andi	r24, 0xEF	; 239
    5466:	d4 cf       	rjmp	.-88     	; 0x5410 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5468:	63 30       	cpi	r22, 0x03	; 3
    546a:	a1 f6       	brne	.-88     	; 0x5414 <nrk_ext_int_configure+0x96>
    546c:	80 91 69 00 	lds	r24, 0x0069
    5470:	80 63       	ori	r24, 0x30	; 48
    5472:	ce cf       	rjmp	.-100    	; 0x5410 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5474:	83 50       	subi	r24, 0x03	; 3
    5476:	88 30       	cpi	r24, 0x08	; 8
    5478:	50 f4       	brcc	.+20     	; 0x548e <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    547a:	80 91 68 00 	lds	r24, 0x0068
    547e:	81 60       	ori	r24, 0x01	; 1
    5480:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5484:	50 93 de 0a 	sts	0x0ADE, r21
    5488:	40 93 dd 0a 	sts	0x0ADD, r20
    548c:	c3 cf       	rjmp	.-122    	; 0x5414 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    548e:	8f ef       	ldi	r24, 0xFF	; 255
}
    5490:	08 95       	ret

00005492 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5492:	1f 92       	push	r1
    5494:	0f 92       	push	r0
    5496:	0f b6       	in	r0, 0x3f	; 63
    5498:	0f 92       	push	r0
    549a:	11 24       	eor	r1, r1
    549c:	0b b6       	in	r0, 0x3b	; 59
    549e:	0f 92       	push	r0
    54a0:	2f 93       	push	r18
    54a2:	3f 93       	push	r19
    54a4:	4f 93       	push	r20
    54a6:	5f 93       	push	r21
    54a8:	6f 93       	push	r22
    54aa:	7f 93       	push	r23
    54ac:	8f 93       	push	r24
    54ae:	9f 93       	push	r25
    54b0:	af 93       	push	r26
    54b2:	bf 93       	push	r27
    54b4:	ef 93       	push	r30
    54b6:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    54b8:	e0 91 dd 0a 	lds	r30, 0x0ADD
    54bc:	f0 91 de 0a 	lds	r31, 0x0ADE
    54c0:	30 97       	sbiw	r30, 0x00	; 0
    54c2:	11 f0       	breq	.+4      	; 0x54c8 <__vector_9+0x36>
    54c4:	09 95       	icall
    54c6:	04 c0       	rjmp	.+8      	; 0x54d0 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    54c8:	60 e0       	ldi	r22, 0x00	; 0
    54ca:	8a e0       	ldi	r24, 0x0A	; 10
    54cc:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
	return;  	
}
    54d0:	ff 91       	pop	r31
    54d2:	ef 91       	pop	r30
    54d4:	bf 91       	pop	r27
    54d6:	af 91       	pop	r26
    54d8:	9f 91       	pop	r25
    54da:	8f 91       	pop	r24
    54dc:	7f 91       	pop	r23
    54de:	6f 91       	pop	r22
    54e0:	5f 91       	pop	r21
    54e2:	4f 91       	pop	r20
    54e4:	3f 91       	pop	r19
    54e6:	2f 91       	pop	r18
    54e8:	0f 90       	pop	r0
    54ea:	0b be       	out	0x3b, r0	; 59
    54ec:	0f 90       	pop	r0
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	0f 90       	pop	r0
    54f2:	1f 90       	pop	r1
    54f4:	18 95       	reti

000054f6 <__vector_1>:


SIGNAL(INT0_vect) {
    54f6:	1f 92       	push	r1
    54f8:	0f 92       	push	r0
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	0f 92       	push	r0
    54fe:	11 24       	eor	r1, r1
    5500:	0b b6       	in	r0, 0x3b	; 59
    5502:	0f 92       	push	r0
    5504:	2f 93       	push	r18
    5506:	3f 93       	push	r19
    5508:	4f 93       	push	r20
    550a:	5f 93       	push	r21
    550c:	6f 93       	push	r22
    550e:	7f 93       	push	r23
    5510:	8f 93       	push	r24
    5512:	9f 93       	push	r25
    5514:	af 93       	push	r26
    5516:	bf 93       	push	r27
    5518:	ef 93       	push	r30
    551a:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    551c:	e0 91 d9 0a 	lds	r30, 0x0AD9
    5520:	f0 91 da 0a 	lds	r31, 0x0ADA
    5524:	30 97       	sbiw	r30, 0x00	; 0
    5526:	11 f0       	breq	.+4      	; 0x552c <__vector_1+0x36>
    5528:	09 95       	icall
    552a:	04 c0       	rjmp	.+8      	; 0x5534 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    552c:	60 e0       	ldi	r22, 0x00	; 0
    552e:	8a e0       	ldi	r24, 0x0A	; 10
    5530:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
	return;  	
}
    5534:	ff 91       	pop	r31
    5536:	ef 91       	pop	r30
    5538:	bf 91       	pop	r27
    553a:	af 91       	pop	r26
    553c:	9f 91       	pop	r25
    553e:	8f 91       	pop	r24
    5540:	7f 91       	pop	r23
    5542:	6f 91       	pop	r22
    5544:	5f 91       	pop	r21
    5546:	4f 91       	pop	r20
    5548:	3f 91       	pop	r19
    554a:	2f 91       	pop	r18
    554c:	0f 90       	pop	r0
    554e:	0b be       	out	0x3b, r0	; 59
    5550:	0f 90       	pop	r0
    5552:	0f be       	out	0x3f, r0	; 63
    5554:	0f 90       	pop	r0
    5556:	1f 90       	pop	r1
    5558:	18 95       	reti

0000555a <__vector_2>:

SIGNAL(INT1_vect) {
    555a:	1f 92       	push	r1
    555c:	0f 92       	push	r0
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	0f 92       	push	r0
    5562:	11 24       	eor	r1, r1
    5564:	0b b6       	in	r0, 0x3b	; 59
    5566:	0f 92       	push	r0
    5568:	2f 93       	push	r18
    556a:	3f 93       	push	r19
    556c:	4f 93       	push	r20
    556e:	5f 93       	push	r21
    5570:	6f 93       	push	r22
    5572:	7f 93       	push	r23
    5574:	8f 93       	push	r24
    5576:	9f 93       	push	r25
    5578:	af 93       	push	r26
    557a:	bf 93       	push	r27
    557c:	ef 93       	push	r30
    557e:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5580:	e0 91 d7 0a 	lds	r30, 0x0AD7
    5584:	f0 91 d8 0a 	lds	r31, 0x0AD8
    5588:	30 97       	sbiw	r30, 0x00	; 0
    558a:	11 f0       	breq	.+4      	; 0x5590 <__vector_2+0x36>
    558c:	09 95       	icall
    558e:	04 c0       	rjmp	.+8      	; 0x5598 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5590:	60 e0       	ldi	r22, 0x00	; 0
    5592:	8a e0       	ldi	r24, 0x0A	; 10
    5594:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
	return;  	
}
    5598:	ff 91       	pop	r31
    559a:	ef 91       	pop	r30
    559c:	bf 91       	pop	r27
    559e:	af 91       	pop	r26
    55a0:	9f 91       	pop	r25
    55a2:	8f 91       	pop	r24
    55a4:	7f 91       	pop	r23
    55a6:	6f 91       	pop	r22
    55a8:	5f 91       	pop	r21
    55aa:	4f 91       	pop	r20
    55ac:	3f 91       	pop	r19
    55ae:	2f 91       	pop	r18
    55b0:	0f 90       	pop	r0
    55b2:	0b be       	out	0x3b, r0	; 59
    55b4:	0f 90       	pop	r0
    55b6:	0f be       	out	0x3f, r0	; 63
    55b8:	0f 90       	pop	r0
    55ba:	1f 90       	pop	r1
    55bc:	18 95       	reti

000055be <__vector_3>:

SIGNAL(INT2_vect) {
    55be:	1f 92       	push	r1
    55c0:	0f 92       	push	r0
    55c2:	0f b6       	in	r0, 0x3f	; 63
    55c4:	0f 92       	push	r0
    55c6:	11 24       	eor	r1, r1
    55c8:	0b b6       	in	r0, 0x3b	; 59
    55ca:	0f 92       	push	r0
    55cc:	2f 93       	push	r18
    55ce:	3f 93       	push	r19
    55d0:	4f 93       	push	r20
    55d2:	5f 93       	push	r21
    55d4:	6f 93       	push	r22
    55d6:	7f 93       	push	r23
    55d8:	8f 93       	push	r24
    55da:	9f 93       	push	r25
    55dc:	af 93       	push	r26
    55de:	bf 93       	push	r27
    55e0:	ef 93       	push	r30
    55e2:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    55e4:	e0 91 db 0a 	lds	r30, 0x0ADB
    55e8:	f0 91 dc 0a 	lds	r31, 0x0ADC
    55ec:	30 97       	sbiw	r30, 0x00	; 0
    55ee:	11 f0       	breq	.+4      	; 0x55f4 <__vector_3+0x36>
    55f0:	09 95       	icall
    55f2:	04 c0       	rjmp	.+8      	; 0x55fc <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    55f4:	60 e0       	ldi	r22, 0x00	; 0
    55f6:	8a e0       	ldi	r24, 0x0A	; 10
    55f8:	0e 94 fe 18 	call	0x31fc	; 0x31fc <nrk_kernel_error_add>
	return;  	
}
    55fc:	ff 91       	pop	r31
    55fe:	ef 91       	pop	r30
    5600:	bf 91       	pop	r27
    5602:	af 91       	pop	r26
    5604:	9f 91       	pop	r25
    5606:	8f 91       	pop	r24
    5608:	7f 91       	pop	r23
    560a:	6f 91       	pop	r22
    560c:	5f 91       	pop	r21
    560e:	4f 91       	pop	r20
    5610:	3f 91       	pop	r19
    5612:	2f 91       	pop	r18
    5614:	0f 90       	pop	r0
    5616:	0b be       	out	0x3b, r0	; 59
    5618:	0f 90       	pop	r0
    561a:	0f be       	out	0x3f, r0	; 63
    561c:	0f 90       	pop	r0
    561e:	1f 90       	pop	r1
    5620:	18 95       	reti

00005622 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    5622:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5626:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5628:	84 b7       	in	r24, 0x34	; 52
    562a:	87 7f       	andi	r24, 0xF7	; 247
    562c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    562e:	e0 e6       	ldi	r30, 0x60	; 96
    5630:	f0 e0       	ldi	r31, 0x00	; 0
    5632:	80 81       	ld	r24, Z
    5634:	88 61       	ori	r24, 0x18	; 24
    5636:	80 83       	st	Z, r24
WDTCSR = 0;
    5638:	10 82       	st	Z, r1
nrk_int_enable();
    563a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <nrk_int_enable>

0000563e <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    563e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5642:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5644:	84 b7       	in	r24, 0x34	; 52
    5646:	87 7f       	andi	r24, 0xF7	; 247
    5648:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    564a:	e0 e6       	ldi	r30, 0x60	; 96
    564c:	f0 e0       	ldi	r31, 0x00	; 0
    564e:	80 81       	ld	r24, Z
    5650:	88 61       	ori	r24, 0x18	; 24
    5652:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5654:	8d e0       	ldi	r24, 0x0D	; 13
    5656:	80 83       	st	Z, r24
nrk_int_enable();
    5658:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <nrk_int_enable>

0000565c <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    565c:	04 b6       	in	r0, 0x34	; 52
    565e:	03 fe       	sbrs	r0, 3
    5660:	02 c0       	rjmp	.+4      	; 0x5666 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    5662:	8f ef       	ldi	r24, 0xFF	; 255
    5664:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5666:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5668:	08 95       	ret

0000566a <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    566a:	a8 95       	wdr
    566c:	08 95       	ret

0000566e <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    566e:	08 95       	ret

00005670 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5670:	83 b7       	in	r24, 0x33	; 51
    5672:	81 7f       	andi	r24, 0xF1	; 241
    5674:	86 60       	ori	r24, 0x06	; 6
    5676:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5678:	83 b7       	in	r24, 0x33	; 51
    567a:	81 60       	ori	r24, 0x01	; 1
    567c:	83 bf       	out	0x33, r24	; 51
    567e:	88 95       	sleep
    5680:	83 b7       	in	r24, 0x33	; 51
    5682:	8e 7f       	andi	r24, 0xFE	; 254
    5684:	83 bf       	out	0x33, r24	; 51
    5686:	08 95       	ret

00005688 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5688:	83 b7       	in	r24, 0x33	; 51
    568a:	81 7f       	andi	r24, 0xF1	; 241
    568c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    568e:	83 b7       	in	r24, 0x33	; 51
    5690:	81 60       	ori	r24, 0x01	; 1
    5692:	83 bf       	out	0x33, r24	; 51
    5694:	88 95       	sleep
    5696:	83 b7       	in	r24, 0x33	; 51
    5698:	8e 7f       	andi	r24, 0xFE	; 254
    569a:	83 bf       	out	0x33, r24	; 51
    569c:	08 95       	ret

0000569e <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    569e:	fc 01       	movw	r30, r24
    56a0:	76 83       	std	Z+6, r23	; 0x06
    56a2:	65 83       	std	Z+5, r22	; 0x05
    56a4:	08 95       	ret

000056a6 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    56a6:	ef 92       	push	r14
    56a8:	ff 92       	push	r15
    56aa:	0f 93       	push	r16
    56ac:	1f 93       	push	r17
    56ae:	cf 93       	push	r28
    56b0:	df 93       	push	r29
    56b2:	8c 01       	movw	r16, r24
    56b4:	7b 01       	movw	r14, r22
    56b6:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    56b8:	40 32       	cpi	r20, 0x20	; 32
    56ba:	51 05       	cpc	r21, r1
    56bc:	18 f4       	brcc	.+6      	; 0x56c4 <nrk_task_set_stk+0x1e>
    56be:	81 e1       	ldi	r24, 0x11	; 17
    56c0:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    56c4:	21 97       	sbiw	r28, 0x01	; 1
    56c6:	ce 0d       	add	r28, r14
    56c8:	df 1d       	adc	r29, r15
    56ca:	f8 01       	movw	r30, r16
    56cc:	d2 83       	std	Z+2, r29	; 0x02
    56ce:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    56d0:	f4 82       	std	Z+4, r15	; 0x04
    56d2:	e3 82       	std	Z+3, r14	; 0x03

}
    56d4:	df 91       	pop	r29
    56d6:	cf 91       	pop	r28
    56d8:	1f 91       	pop	r17
    56da:	0f 91       	pop	r16
    56dc:	ff 90       	pop	r15
    56de:	ef 90       	pop	r14
    56e0:	08 95       	ret

000056e2 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    56e2:	25 e5       	ldi	r18, 0x55	; 85
    56e4:	fa 01       	movw	r30, r20
    56e6:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    56e8:	fb 01       	movw	r30, r22
    56ea:	32 97       	sbiw	r30, 0x02	; 2
    56ec:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    56ee:	31 96       	adiw	r30, 0x01	; 1
    56f0:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    56f2:	33 97       	sbiw	r30, 0x03	; 3
    56f4:	11 82       	std	Z+1, r1	; 0x01
    56f6:	10 82       	st	Z, r1
    *(--stk) = 0;       
    56f8:	32 97       	sbiw	r30, 0x02	; 2
    56fa:	11 82       	std	Z+1, r1	; 0x01
    56fc:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    56fe:	32 97       	sbiw	r30, 0x02	; 2
    5700:	11 82       	std	Z+1, r1	; 0x01
    5702:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5704:	32 97       	sbiw	r30, 0x02	; 2
    5706:	11 82       	std	Z+1, r1	; 0x01
    5708:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    570a:	32 97       	sbiw	r30, 0x02	; 2
    570c:	11 82       	std	Z+1, r1	; 0x01
    570e:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5710:	32 97       	sbiw	r30, 0x02	; 2
    5712:	11 82       	std	Z+1, r1	; 0x01
    5714:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5716:	32 97       	sbiw	r30, 0x02	; 2
    5718:	11 82       	std	Z+1, r1	; 0x01
    571a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    571c:	32 97       	sbiw	r30, 0x02	; 2
    571e:	11 82       	std	Z+1, r1	; 0x01
    5720:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5722:	32 97       	sbiw	r30, 0x02	; 2
    5724:	11 82       	std	Z+1, r1	; 0x01
    5726:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5728:	32 97       	sbiw	r30, 0x02	; 2
    572a:	11 82       	std	Z+1, r1	; 0x01
    572c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    572e:	32 97       	sbiw	r30, 0x02	; 2
    5730:	11 82       	std	Z+1, r1	; 0x01
    5732:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5734:	32 97       	sbiw	r30, 0x02	; 2
    5736:	11 82       	std	Z+1, r1	; 0x01
    5738:	10 82       	st	Z, r1
    *(--stk) = 0; 
    573a:	32 97       	sbiw	r30, 0x02	; 2
    573c:	11 82       	std	Z+1, r1	; 0x01
    573e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5740:	32 97       	sbiw	r30, 0x02	; 2
    5742:	11 82       	std	Z+1, r1	; 0x01
    5744:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5746:	32 97       	sbiw	r30, 0x02	; 2
    5748:	11 82       	std	Z+1, r1	; 0x01
    574a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    574c:	32 97       	sbiw	r30, 0x02	; 2
    574e:	11 82       	std	Z+1, r1	; 0x01
    5750:	10 82       	st	Z, r1
    *(--stk) = 0;
    5752:	cb 01       	movw	r24, r22
    5754:	84 97       	sbiw	r24, 0x24	; 36
    5756:	fc 01       	movw	r30, r24
    5758:	11 82       	std	Z+1, r1	; 0x01
    575a:	10 82       	st	Z, r1


    return ((void *)stk);
}
    575c:	08 95       	ret

0000575e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    575e:	85 e5       	ldi	r24, 0x55	; 85
    5760:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5764:	ee ef       	ldi	r30, 0xFE	; 254
    5766:	f1 e4       	ldi	r31, 0x41	; 65
    5768:	f0 93 6e 07 	sts	0x076E, r31
    576c:	e0 93 6d 07 	sts	0x076D, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5770:	8b e4       	ldi	r24, 0x4B	; 75
    5772:	98 e1       	ldi	r25, 0x18	; 24
    5774:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5776:	80 93 ff 41 	sts	0x41FF, r24
    577a:	08 95       	ret

0000577c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    577c:	8b e4       	ldi	r24, 0x4B	; 75
    577e:	98 e1       	ldi	r25, 0x18	; 24
    5780:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5784:	80 93 ff 41 	sts	0x41FF, r24
    5788:	08 95       	ret

0000578a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    578a:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_nrk_setup_timer>
  nrk_int_enable();  
    578e:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <nrk_int_enable>

00005792 <nrk_start_high_ready_task>:
    5792:	a0 91 a5 0a 	lds	r26, 0x0AA5
    5796:	b0 91 a6 0a 	lds	r27, 0x0AA6
    579a:	cd 91       	ld	r28, X+
    579c:	cd bf       	out	0x3d, r28	; 61
    579e:	dd 91       	ld	r29, X+
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	ff 91       	pop	r31
    57a4:	ef 91       	pop	r30
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	bf 91       	pop	r27
    57ac:	af 91       	pop	r26
    57ae:	9f 91       	pop	r25
    57b0:	8f 91       	pop	r24
    57b2:	7f 91       	pop	r23
    57b4:	6f 91       	pop	r22
    57b6:	5f 91       	pop	r21
    57b8:	4f 91       	pop	r20
    57ba:	3f 91       	pop	r19
    57bc:	2f 91       	pop	r18
    57be:	1f 91       	pop	r17
    57c0:	0f 91       	pop	r16
    57c2:	ff 90       	pop	r15
    57c4:	ef 90       	pop	r14
    57c6:	df 90       	pop	r13
    57c8:	cf 90       	pop	r12
    57ca:	bf 90       	pop	r11
    57cc:	af 90       	pop	r10
    57ce:	9f 90       	pop	r9
    57d0:	8f 90       	pop	r8
    57d2:	7f 90       	pop	r7
    57d4:	6f 90       	pop	r6
    57d6:	5f 90       	pop	r5
    57d8:	4f 90       	pop	r4
    57da:	3f 90       	pop	r3
    57dc:	2f 90       	pop	r2
    57de:	1f 90       	pop	r1
    57e0:	0f 90       	pop	r0
    57e2:	0f be       	out	0x3f, r0	; 63
    57e4:	0f 90       	pop	r0
    57e6:	18 95       	reti

000057e8 <main>:
}

int main ()
{
    nrk_setup_ports ();
    57e8:	0e 94 31 12 	call	0x2462	; 0x2462 <nrk_setup_ports>
    nrk_setup_uart (UART_BAUDRATE_115K2);
    57ec:	80 e1       	ldi	r24, 0x10	; 16
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <nrk_setup_uart>
    
    nrk_init ();
    57f4:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <nrk_init>
    
    nrk_led_clr (0);
    57f8:	80 e0       	ldi	r24, 0x00	; 0
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
    nrk_led_clr (1);
    5800:	81 e0       	ldi	r24, 0x01	; 1
    5802:	90 e0       	ldi	r25, 0x00	; 0
    5804:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
    nrk_led_clr (2);
    5808:	82 e0       	ldi	r24, 0x02	; 2
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
    nrk_led_clr (3);
    5810:	83 e0       	ldi	r24, 0x03	; 3
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nrk_led_clr>
    
    nrk_time_set (0, 0);
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	a9 01       	movw	r20, r18
    581e:	60 e0       	ldi	r22, 0x00	; 0
    5820:	70 e0       	ldi	r23, 0x00	; 0
    5822:	cb 01       	movw	r24, r22
    5824:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <nrk_time_set>
    
    bmac_task_config ();
    5828:	0e 94 90 0b 	call	0x1720	; 0x1720 <bmac_task_config>
    
    nrk_create_taskset ();
    582c:	0e 94 f5 07 	call	0xfea	; 0xfea <nrk_create_taskset>
    nrk_start ();
    5830:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrk_start>
    
    return 0;
}
    5834:	80 e0       	ldi	r24, 0x00	; 0
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	08 95       	ret

0000583a <vfprintf>:
    583a:	6f 92       	push	r6
    583c:	7f 92       	push	r7
    583e:	8f 92       	push	r8
    5840:	9f 92       	push	r9
    5842:	af 92       	push	r10
    5844:	bf 92       	push	r11
    5846:	cf 92       	push	r12
    5848:	df 92       	push	r13
    584a:	ef 92       	push	r14
    584c:	ff 92       	push	r15
    584e:	0f 93       	push	r16
    5850:	1f 93       	push	r17
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
    5856:	cd b7       	in	r28, 0x3d	; 61
    5858:	de b7       	in	r29, 0x3e	; 62
    585a:	2c 97       	sbiw	r28, 0x0c	; 12
    585c:	0f b6       	in	r0, 0x3f	; 63
    585e:	f8 94       	cli
    5860:	de bf       	out	0x3e, r29	; 62
    5862:	0f be       	out	0x3f, r0	; 63
    5864:	cd bf       	out	0x3d, r28	; 61
    5866:	6c 01       	movw	r12, r24
    5868:	5b 01       	movw	r10, r22
    586a:	7a 01       	movw	r14, r20
    586c:	fc 01       	movw	r30, r24
    586e:	17 82       	std	Z+7, r1	; 0x07
    5870:	16 82       	std	Z+6, r1	; 0x06
    5872:	83 81       	ldd	r24, Z+3	; 0x03
    5874:	81 ff       	sbrs	r24, 1
    5876:	0e c1       	rjmp	.+540    	; 0x5a94 <vfprintf+0x25a>
    5878:	ce 01       	movw	r24, r28
    587a:	01 96       	adiw	r24, 0x01	; 1
    587c:	4c 01       	movw	r8, r24
    587e:	f6 01       	movw	r30, r12
    5880:	03 81       	ldd	r16, Z+3	; 0x03
    5882:	f5 01       	movw	r30, r10
    5884:	03 fd       	sbrc	r16, 3
    5886:	15 91       	lpm	r17, Z+
    5888:	03 ff       	sbrs	r16, 3
    588a:	11 91       	ld	r17, Z+
    588c:	5f 01       	movw	r10, r30
    588e:	11 23       	and	r17, r17
    5890:	09 f4       	brne	.+2      	; 0x5894 <vfprintf+0x5a>
    5892:	fc c0       	rjmp	.+504    	; 0x5a8c <vfprintf+0x252>
    5894:	15 32       	cpi	r17, 0x25	; 37
    5896:	49 f4       	brne	.+18     	; 0x58aa <vfprintf+0x70>
    5898:	03 fd       	sbrc	r16, 3
    589a:	15 91       	lpm	r17, Z+
    589c:	03 ff       	sbrs	r16, 3
    589e:	11 91       	ld	r17, Z+
    58a0:	5f 01       	movw	r10, r30
    58a2:	15 32       	cpi	r17, 0x25	; 37
    58a4:	11 f0       	breq	.+4      	; 0x58aa <vfprintf+0x70>
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	1b c0       	rjmp	.+54     	; 0x58e0 <vfprintf+0xa6>
    58aa:	b6 01       	movw	r22, r12
    58ac:	81 2f       	mov	r24, r17
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    58b4:	37 01       	movw	r6, r14
    58b6:	73 01       	movw	r14, r6
    58b8:	e2 cf       	rjmp	.-60     	; 0x587e <vfprintf+0x44>
    58ba:	11 23       	and	r17, r17
    58bc:	09 f4       	brne	.+2      	; 0x58c0 <vfprintf+0x86>
    58be:	e6 c0       	rjmp	.+460    	; 0x5a8c <vfprintf+0x252>
    58c0:	61 2f       	mov	r22, r17
    58c2:	70 e0       	ldi	r23, 0x00	; 0
    58c4:	89 e4       	ldi	r24, 0x49	; 73
    58c6:	97 e0       	ldi	r25, 0x07	; 7
    58c8:	2c 87       	std	Y+12, r18	; 0x0c
    58ca:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <strchr_P>
    58ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    58d0:	89 2b       	or	r24, r25
    58d2:	49 f0       	breq	.+18     	; 0x58e6 <vfprintf+0xac>
    58d4:	f5 01       	movw	r30, r10
    58d6:	03 fd       	sbrc	r16, 3
    58d8:	15 91       	lpm	r17, Z+
    58da:	03 ff       	sbrs	r16, 3
    58dc:	11 91       	ld	r17, Z+
    58de:	5f 01       	movw	r10, r30
    58e0:	27 ff       	sbrs	r18, 7
    58e2:	eb cf       	rjmp	.-42     	; 0x58ba <vfprintf+0x80>
    58e4:	09 c0       	rjmp	.+18     	; 0x58f8 <vfprintf+0xbe>
    58e6:	13 32       	cpi	r17, 0x23	; 35
    58e8:	29 f0       	breq	.+10     	; 0x58f4 <vfprintf+0xba>
    58ea:	1c 36       	cpi	r17, 0x6C	; 108
    58ec:	09 f0       	breq	.+2      	; 0x58f0 <vfprintf+0xb6>
    58ee:	d5 c0       	rjmp	.+426    	; 0x5a9a <vfprintf+0x260>
    58f0:	20 68       	ori	r18, 0x80	; 128
    58f2:	f0 cf       	rjmp	.-32     	; 0x58d4 <vfprintf+0x9a>
    58f4:	20 e1       	ldi	r18, 0x10	; 16
    58f6:	ee cf       	rjmp	.-36     	; 0x58d4 <vfprintf+0x9a>
    58f8:	02 2f       	mov	r16, r18
    58fa:	11 23       	and	r17, r17
    58fc:	09 f4       	brne	.+2      	; 0x5900 <vfprintf+0xc6>
    58fe:	c6 c0       	rjmp	.+396    	; 0x5a8c <vfprintf+0x252>
    5900:	61 2f       	mov	r22, r17
    5902:	70 e0       	ldi	r23, 0x00	; 0
    5904:	82 e4       	ldi	r24, 0x42	; 66
    5906:	97 e0       	ldi	r25, 0x07	; 7
    5908:	2c 87       	std	Y+12, r18	; 0x0c
    590a:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <strchr_P>
    590e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5910:	89 2b       	or	r24, r25
    5912:	41 f0       	breq	.+16     	; 0x5924 <vfprintf+0xea>
    5914:	37 01       	movw	r6, r14
    5916:	f4 e0       	ldi	r31, 0x04	; 4
    5918:	6f 0e       	add	r6, r31
    591a:	71 1c       	adc	r7, r1
    591c:	b6 01       	movw	r22, r12
    591e:	8f e3       	ldi	r24, 0x3F	; 63
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	11 c0       	rjmp	.+34     	; 0x5946 <vfprintf+0x10c>
    5924:	13 36       	cpi	r17, 0x63	; 99
    5926:	39 f0       	breq	.+14     	; 0x5936 <vfprintf+0xfc>
    5928:	13 37       	cpi	r17, 0x73	; 115
    592a:	81 f0       	breq	.+32     	; 0x594c <vfprintf+0x112>
    592c:	13 35       	cpi	r17, 0x53	; 83
    592e:	19 f5       	brne	.+70     	; 0x5976 <vfprintf+0x13c>
    5930:	02 2f       	mov	r16, r18
    5932:	01 60       	ori	r16, 0x01	; 1
    5934:	0b c0       	rjmp	.+22     	; 0x594c <vfprintf+0x112>
    5936:	37 01       	movw	r6, r14
    5938:	82 e0       	ldi	r24, 0x02	; 2
    593a:	68 0e       	add	r6, r24
    593c:	71 1c       	adc	r7, r1
    593e:	b6 01       	movw	r22, r12
    5940:	f7 01       	movw	r30, r14
    5942:	80 81       	ld	r24, Z
    5944:	91 81       	ldd	r25, Z+1	; 0x01
    5946:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    594a:	b5 cf       	rjmp	.-150    	; 0x58b6 <vfprintf+0x7c>
    594c:	37 01       	movw	r6, r14
    594e:	f2 e0       	ldi	r31, 0x02	; 2
    5950:	6f 0e       	add	r6, r31
    5952:	71 1c       	adc	r7, r1
    5954:	f7 01       	movw	r30, r14
    5956:	e0 80       	ld	r14, Z
    5958:	f1 80       	ldd	r15, Z+1	; 0x01
    595a:	f7 01       	movw	r30, r14
    595c:	00 fd       	sbrc	r16, 0
    595e:	85 91       	lpm	r24, Z+
    5960:	00 ff       	sbrs	r16, 0
    5962:	81 91       	ld	r24, Z+
    5964:	7f 01       	movw	r14, r30
    5966:	88 23       	and	r24, r24
    5968:	09 f4       	brne	.+2      	; 0x596c <vfprintf+0x132>
    596a:	a5 cf       	rjmp	.-182    	; 0x58b6 <vfprintf+0x7c>
    596c:	b6 01       	movw	r22, r12
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    5974:	f2 cf       	rjmp	.-28     	; 0x595a <vfprintf+0x120>
    5976:	14 36       	cpi	r17, 0x64	; 100
    5978:	11 f0       	breq	.+4      	; 0x597e <vfprintf+0x144>
    597a:	19 36       	cpi	r17, 0x69	; 105
    597c:	29 f5       	brne	.+74     	; 0x59c8 <vfprintf+0x18e>
    597e:	37 01       	movw	r6, r14
    5980:	27 ff       	sbrs	r18, 7
    5982:	09 c0       	rjmp	.+18     	; 0x5996 <vfprintf+0x15c>
    5984:	f4 e0       	ldi	r31, 0x04	; 4
    5986:	6f 0e       	add	r6, r31
    5988:	71 1c       	adc	r7, r1
    598a:	f7 01       	movw	r30, r14
    598c:	60 81       	ld	r22, Z
    598e:	71 81       	ldd	r23, Z+1	; 0x01
    5990:	82 81       	ldd	r24, Z+2	; 0x02
    5992:	93 81       	ldd	r25, Z+3	; 0x03
    5994:	0a c0       	rjmp	.+20     	; 0x59aa <vfprintf+0x170>
    5996:	f2 e0       	ldi	r31, 0x02	; 2
    5998:	6f 0e       	add	r6, r31
    599a:	71 1c       	adc	r7, r1
    599c:	f7 01       	movw	r30, r14
    599e:	60 81       	ld	r22, Z
    59a0:	71 81       	ldd	r23, Z+1	; 0x01
    59a2:	88 27       	eor	r24, r24
    59a4:	77 fd       	sbrc	r23, 7
    59a6:	80 95       	com	r24
    59a8:	98 2f       	mov	r25, r24
    59aa:	02 2f       	mov	r16, r18
    59ac:	0f 7e       	andi	r16, 0xEF	; 239
    59ae:	97 ff       	sbrs	r25, 7
    59b0:	08 c0       	rjmp	.+16     	; 0x59c2 <vfprintf+0x188>
    59b2:	90 95       	com	r25
    59b4:	80 95       	com	r24
    59b6:	70 95       	com	r23
    59b8:	61 95       	neg	r22
    59ba:	7f 4f       	sbci	r23, 0xFF	; 255
    59bc:	8f 4f       	sbci	r24, 0xFF	; 255
    59be:	9f 4f       	sbci	r25, 0xFF	; 255
    59c0:	00 64       	ori	r16, 0x40	; 64
    59c2:	2a e0       	ldi	r18, 0x0A	; 10
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	33 c0       	rjmp	.+102    	; 0x5a2e <vfprintf+0x1f4>
    59c8:	10 37       	cpi	r17, 0x70	; 112
    59ca:	99 f0       	breq	.+38     	; 0x59f2 <vfprintf+0x1b8>
    59cc:	40 f4       	brcc	.+16     	; 0x59de <vfprintf+0x1a4>
    59ce:	18 35       	cpi	r17, 0x58	; 88
    59d0:	b1 f0       	breq	.+44     	; 0x59fe <vfprintf+0x1c4>
    59d2:	1f 36       	cpi	r17, 0x6F	; 111
    59d4:	09 f0       	breq	.+2      	; 0x59d8 <vfprintf+0x19e>
    59d6:	5a c0       	rjmp	.+180    	; 0x5a8c <vfprintf+0x252>
    59d8:	28 e0       	ldi	r18, 0x08	; 8
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	14 c0       	rjmp	.+40     	; 0x5a06 <vfprintf+0x1cc>
    59de:	15 37       	cpi	r17, 0x75	; 117
    59e0:	19 f0       	breq	.+6      	; 0x59e8 <vfprintf+0x1ae>
    59e2:	18 37       	cpi	r17, 0x78	; 120
    59e4:	41 f0       	breq	.+16     	; 0x59f6 <vfprintf+0x1bc>
    59e6:	52 c0       	rjmp	.+164    	; 0x5a8c <vfprintf+0x252>
    59e8:	02 2f       	mov	r16, r18
    59ea:	0f 7e       	andi	r16, 0xEF	; 239
    59ec:	2a e0       	ldi	r18, 0x0A	; 10
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	0a c0       	rjmp	.+20     	; 0x5a06 <vfprintf+0x1cc>
    59f2:	02 2f       	mov	r16, r18
    59f4:	00 61       	ori	r16, 0x10	; 16
    59f6:	04 62       	ori	r16, 0x24	; 36
    59f8:	20 e1       	ldi	r18, 0x10	; 16
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	04 c0       	rjmp	.+8      	; 0x5a06 <vfprintf+0x1cc>
    59fe:	02 2f       	mov	r16, r18
    5a00:	04 60       	ori	r16, 0x04	; 4
    5a02:	20 e1       	ldi	r18, 0x10	; 16
    5a04:	32 e0       	ldi	r19, 0x02	; 2
    5a06:	37 01       	movw	r6, r14
    5a08:	07 ff       	sbrs	r16, 7
    5a0a:	09 c0       	rjmp	.+18     	; 0x5a1e <vfprintf+0x1e4>
    5a0c:	f4 e0       	ldi	r31, 0x04	; 4
    5a0e:	6f 0e       	add	r6, r31
    5a10:	71 1c       	adc	r7, r1
    5a12:	f7 01       	movw	r30, r14
    5a14:	60 81       	ld	r22, Z
    5a16:	71 81       	ldd	r23, Z+1	; 0x01
    5a18:	82 81       	ldd	r24, Z+2	; 0x02
    5a1a:	93 81       	ldd	r25, Z+3	; 0x03
    5a1c:	08 c0       	rjmp	.+16     	; 0x5a2e <vfprintf+0x1f4>
    5a1e:	f2 e0       	ldi	r31, 0x02	; 2
    5a20:	6f 0e       	add	r6, r31
    5a22:	71 1c       	adc	r7, r1
    5a24:	f7 01       	movw	r30, r14
    5a26:	60 81       	ld	r22, Z
    5a28:	71 81       	ldd	r23, Z+1	; 0x01
    5a2a:	80 e0       	ldi	r24, 0x00	; 0
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	a4 01       	movw	r20, r8
    5a30:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__ultoa_invert>
    5a34:	18 2f       	mov	r17, r24
    5a36:	18 19       	sub	r17, r8
    5a38:	06 ff       	sbrs	r16, 6
    5a3a:	05 c0       	rjmp	.+10     	; 0x5a46 <vfprintf+0x20c>
    5a3c:	b6 01       	movw	r22, r12
    5a3e:	8d e2       	ldi	r24, 0x2D	; 45
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    5a46:	04 ff       	sbrs	r16, 4
    5a48:	15 c0       	rjmp	.+42     	; 0x5a74 <vfprintf+0x23a>
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	e1 0f       	add	r30, r17
    5a4e:	f1 1d       	adc	r31, r1
    5a50:	80 81       	ld	r24, Z
    5a52:	80 33       	cpi	r24, 0x30	; 48
    5a54:	79 f0       	breq	.+30     	; 0x5a74 <vfprintf+0x23a>
    5a56:	b6 01       	movw	r22, r12
    5a58:	80 e3       	ldi	r24, 0x30	; 48
    5a5a:	90 e0       	ldi	r25, 0x00	; 0
    5a5c:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    5a60:	02 ff       	sbrs	r16, 2
    5a62:	08 c0       	rjmp	.+16     	; 0x5a74 <vfprintf+0x23a>
    5a64:	00 72       	andi	r16, 0x20	; 32
    5a66:	80 2f       	mov	r24, r16
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	b6 01       	movw	r22, r12
    5a6c:	88 5a       	subi	r24, 0xA8	; 168
    5a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a70:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    5a74:	11 50       	subi	r17, 0x01	; 1
    5a76:	f4 01       	movw	r30, r8
    5a78:	e1 0f       	add	r30, r17
    5a7a:	f1 1d       	adc	r31, r1
    5a7c:	80 81       	ld	r24, Z
    5a7e:	b6 01       	movw	r22, r12
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <fputc>
    5a86:	11 11       	cpse	r17, r1
    5a88:	f5 cf       	rjmp	.-22     	; 0x5a74 <vfprintf+0x23a>
    5a8a:	15 cf       	rjmp	.-470    	; 0x58b6 <vfprintf+0x7c>
    5a8c:	f6 01       	movw	r30, r12
    5a8e:	86 81       	ldd	r24, Z+6	; 0x06
    5a90:	97 81       	ldd	r25, Z+7	; 0x07
    5a92:	05 c0       	rjmp	.+10     	; 0x5a9e <vfprintf+0x264>
    5a94:	8f ef       	ldi	r24, 0xFF	; 255
    5a96:	9f ef       	ldi	r25, 0xFF	; 255
    5a98:	02 c0       	rjmp	.+4      	; 0x5a9e <vfprintf+0x264>
    5a9a:	02 2f       	mov	r16, r18
    5a9c:	31 cf       	rjmp	.-414    	; 0x5900 <vfprintf+0xc6>
    5a9e:	2c 96       	adiw	r28, 0x0c	; 12
    5aa0:	0f b6       	in	r0, 0x3f	; 63
    5aa2:	f8 94       	cli
    5aa4:	de bf       	out	0x3e, r29	; 62
    5aa6:	0f be       	out	0x3f, r0	; 63
    5aa8:	cd bf       	out	0x3d, r28	; 61
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	0f 91       	pop	r16
    5ab2:	ff 90       	pop	r15
    5ab4:	ef 90       	pop	r14
    5ab6:	df 90       	pop	r13
    5ab8:	cf 90       	pop	r12
    5aba:	bf 90       	pop	r11
    5abc:	af 90       	pop	r10
    5abe:	9f 90       	pop	r9
    5ac0:	8f 90       	pop	r8
    5ac2:	7f 90       	pop	r7
    5ac4:	6f 90       	pop	r6
    5ac6:	08 95       	ret

00005ac8 <__muluhisi3>:
    5ac8:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__umulhisi3>
    5acc:	a5 9f       	mul	r26, r21
    5ace:	90 0d       	add	r25, r0
    5ad0:	b4 9f       	mul	r27, r20
    5ad2:	90 0d       	add	r25, r0
    5ad4:	a4 9f       	mul	r26, r20
    5ad6:	80 0d       	add	r24, r0
    5ad8:	91 1d       	adc	r25, r1
    5ada:	11 24       	eor	r1, r1
    5adc:	08 95       	ret

00005ade <__mulsi3>:
    5ade:	db 01       	movw	r26, r22
    5ae0:	8f 93       	push	r24
    5ae2:	9f 93       	push	r25
    5ae4:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    5ae8:	bf 91       	pop	r27
    5aea:	af 91       	pop	r26
    5aec:	a2 9f       	mul	r26, r18
    5aee:	80 0d       	add	r24, r0
    5af0:	91 1d       	adc	r25, r1
    5af2:	a3 9f       	mul	r26, r19
    5af4:	90 0d       	add	r25, r0
    5af6:	b2 9f       	mul	r27, r18
    5af8:	90 0d       	add	r25, r0
    5afa:	11 24       	eor	r1, r1
    5afc:	08 95       	ret

00005afe <__udivmodhi4>:
    5afe:	aa 1b       	sub	r26, r26
    5b00:	bb 1b       	sub	r27, r27
    5b02:	51 e1       	ldi	r21, 0x11	; 17
    5b04:	07 c0       	rjmp	.+14     	; 0x5b14 <__udivmodhi4_ep>

00005b06 <__udivmodhi4_loop>:
    5b06:	aa 1f       	adc	r26, r26
    5b08:	bb 1f       	adc	r27, r27
    5b0a:	a6 17       	cp	r26, r22
    5b0c:	b7 07       	cpc	r27, r23
    5b0e:	10 f0       	brcs	.+4      	; 0x5b14 <__udivmodhi4_ep>
    5b10:	a6 1b       	sub	r26, r22
    5b12:	b7 0b       	sbc	r27, r23

00005b14 <__udivmodhi4_ep>:
    5b14:	88 1f       	adc	r24, r24
    5b16:	99 1f       	adc	r25, r25
    5b18:	5a 95       	dec	r21
    5b1a:	a9 f7       	brne	.-22     	; 0x5b06 <__udivmodhi4_loop>
    5b1c:	80 95       	com	r24
    5b1e:	90 95       	com	r25
    5b20:	bc 01       	movw	r22, r24
    5b22:	cd 01       	movw	r24, r26
    5b24:	08 95       	ret

00005b26 <__divmodhi4>:
    5b26:	97 fb       	bst	r25, 7
    5b28:	07 2e       	mov	r0, r23
    5b2a:	16 f4       	brtc	.+4      	; 0x5b30 <__divmodhi4+0xa>
    5b2c:	00 94       	com	r0
    5b2e:	07 d0       	rcall	.+14     	; 0x5b3e <__divmodhi4_neg1>
    5b30:	77 fd       	sbrc	r23, 7
    5b32:	09 d0       	rcall	.+18     	; 0x5b46 <__divmodhi4_neg2>
    5b34:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__udivmodhi4>
    5b38:	07 fc       	sbrc	r0, 7
    5b3a:	05 d0       	rcall	.+10     	; 0x5b46 <__divmodhi4_neg2>
    5b3c:	3e f4       	brtc	.+14     	; 0x5b4c <__divmodhi4_exit>

00005b3e <__divmodhi4_neg1>:
    5b3e:	90 95       	com	r25
    5b40:	81 95       	neg	r24
    5b42:	9f 4f       	sbci	r25, 0xFF	; 255
    5b44:	08 95       	ret

00005b46 <__divmodhi4_neg2>:
    5b46:	70 95       	com	r23
    5b48:	61 95       	neg	r22
    5b4a:	7f 4f       	sbci	r23, 0xFF	; 255

00005b4c <__divmodhi4_exit>:
    5b4c:	08 95       	ret

00005b4e <__udivmodsi4>:
    5b4e:	a1 e2       	ldi	r26, 0x21	; 33
    5b50:	1a 2e       	mov	r1, r26
    5b52:	aa 1b       	sub	r26, r26
    5b54:	bb 1b       	sub	r27, r27
    5b56:	fd 01       	movw	r30, r26
    5b58:	0d c0       	rjmp	.+26     	; 0x5b74 <__udivmodsi4_ep>

00005b5a <__udivmodsi4_loop>:
    5b5a:	aa 1f       	adc	r26, r26
    5b5c:	bb 1f       	adc	r27, r27
    5b5e:	ee 1f       	adc	r30, r30
    5b60:	ff 1f       	adc	r31, r31
    5b62:	a2 17       	cp	r26, r18
    5b64:	b3 07       	cpc	r27, r19
    5b66:	e4 07       	cpc	r30, r20
    5b68:	f5 07       	cpc	r31, r21
    5b6a:	20 f0       	brcs	.+8      	; 0x5b74 <__udivmodsi4_ep>
    5b6c:	a2 1b       	sub	r26, r18
    5b6e:	b3 0b       	sbc	r27, r19
    5b70:	e4 0b       	sbc	r30, r20
    5b72:	f5 0b       	sbc	r31, r21

00005b74 <__udivmodsi4_ep>:
    5b74:	66 1f       	adc	r22, r22
    5b76:	77 1f       	adc	r23, r23
    5b78:	88 1f       	adc	r24, r24
    5b7a:	99 1f       	adc	r25, r25
    5b7c:	1a 94       	dec	r1
    5b7e:	69 f7       	brne	.-38     	; 0x5b5a <__udivmodsi4_loop>
    5b80:	60 95       	com	r22
    5b82:	70 95       	com	r23
    5b84:	80 95       	com	r24
    5b86:	90 95       	com	r25
    5b88:	9b 01       	movw	r18, r22
    5b8a:	ac 01       	movw	r20, r24
    5b8c:	bd 01       	movw	r22, r26
    5b8e:	cf 01       	movw	r24, r30
    5b90:	08 95       	ret

00005b92 <__umoddi3>:
    5b92:	68 94       	set
    5b94:	01 c0       	rjmp	.+2      	; 0x5b98 <__udivdi3_umoddi3>

00005b96 <__udivdi3>:
    5b96:	e8 94       	clt

00005b98 <__udivdi3_umoddi3>:
    5b98:	8f 92       	push	r8
    5b9a:	9f 92       	push	r9
    5b9c:	cf 93       	push	r28
    5b9e:	df 93       	push	r29
    5ba0:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__udivmod64>
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	9f 90       	pop	r9
    5baa:	8f 90       	pop	r8
    5bac:	08 95       	ret

00005bae <__udivmod64>:
    5bae:	88 24       	eor	r8, r8
    5bb0:	99 24       	eor	r9, r9
    5bb2:	f4 01       	movw	r30, r8
    5bb4:	e4 01       	movw	r28, r8
    5bb6:	b0 e4       	ldi	r27, 0x40	; 64
    5bb8:	9f 93       	push	r25
    5bba:	aa 27       	eor	r26, r26
    5bbc:	9a 15       	cp	r25, r10
    5bbe:	8b 04       	cpc	r8, r11
    5bc0:	9c 04       	cpc	r9, r12
    5bc2:	ed 05       	cpc	r30, r13
    5bc4:	fe 05       	cpc	r31, r14
    5bc6:	cf 05       	cpc	r28, r15
    5bc8:	d0 07       	cpc	r29, r16
    5bca:	a1 07       	cpc	r26, r17
    5bcc:	98 f4       	brcc	.+38     	; 0x5bf4 <__udivmod64+0x46>
    5bce:	ad 2f       	mov	r26, r29
    5bd0:	dc 2f       	mov	r29, r28
    5bd2:	cf 2f       	mov	r28, r31
    5bd4:	fe 2f       	mov	r31, r30
    5bd6:	e9 2d       	mov	r30, r9
    5bd8:	98 2c       	mov	r9, r8
    5bda:	89 2e       	mov	r8, r25
    5bdc:	98 2f       	mov	r25, r24
    5bde:	87 2f       	mov	r24, r23
    5be0:	76 2f       	mov	r23, r22
    5be2:	65 2f       	mov	r22, r21
    5be4:	54 2f       	mov	r21, r20
    5be6:	43 2f       	mov	r20, r19
    5be8:	32 2f       	mov	r19, r18
    5bea:	22 27       	eor	r18, r18
    5bec:	b8 50       	subi	r27, 0x08	; 8
    5bee:	31 f7       	brne	.-52     	; 0x5bbc <__udivmod64+0xe>
    5bf0:	bf 91       	pop	r27
    5bf2:	27 c0       	rjmp	.+78     	; 0x5c42 <__udivmod64+0x94>
    5bf4:	1b 2e       	mov	r1, r27
    5bf6:	bf 91       	pop	r27
    5bf8:	bb 27       	eor	r27, r27
    5bfa:	22 0f       	add	r18, r18
    5bfc:	33 1f       	adc	r19, r19
    5bfe:	44 1f       	adc	r20, r20
    5c00:	55 1f       	adc	r21, r21
    5c02:	66 1f       	adc	r22, r22
    5c04:	77 1f       	adc	r23, r23
    5c06:	88 1f       	adc	r24, r24
    5c08:	99 1f       	adc	r25, r25
    5c0a:	88 1c       	adc	r8, r8
    5c0c:	99 1c       	adc	r9, r9
    5c0e:	ee 1f       	adc	r30, r30
    5c10:	ff 1f       	adc	r31, r31
    5c12:	cc 1f       	adc	r28, r28
    5c14:	dd 1f       	adc	r29, r29
    5c16:	aa 1f       	adc	r26, r26
    5c18:	bb 1f       	adc	r27, r27
    5c1a:	8a 14       	cp	r8, r10
    5c1c:	9b 04       	cpc	r9, r11
    5c1e:	ec 05       	cpc	r30, r12
    5c20:	fd 05       	cpc	r31, r13
    5c22:	ce 05       	cpc	r28, r14
    5c24:	df 05       	cpc	r29, r15
    5c26:	a0 07       	cpc	r26, r16
    5c28:	b1 07       	cpc	r27, r17
    5c2a:	48 f0       	brcs	.+18     	; 0x5c3e <__udivmod64+0x90>
    5c2c:	8a 18       	sub	r8, r10
    5c2e:	9b 08       	sbc	r9, r11
    5c30:	ec 09       	sbc	r30, r12
    5c32:	fd 09       	sbc	r31, r13
    5c34:	ce 09       	sbc	r28, r14
    5c36:	df 09       	sbc	r29, r15
    5c38:	a0 0b       	sbc	r26, r16
    5c3a:	b1 0b       	sbc	r27, r17
    5c3c:	21 60       	ori	r18, 0x01	; 1
    5c3e:	1a 94       	dec	r1
    5c40:	e1 f6       	brne	.-72     	; 0x5bfa <__udivmod64+0x4c>
    5c42:	2e f4       	brtc	.+10     	; 0x5c4e <__udivmod64+0xa0>
    5c44:	94 01       	movw	r18, r8
    5c46:	af 01       	movw	r20, r30
    5c48:	be 01       	movw	r22, r28
    5c4a:	cd 01       	movw	r24, r26
    5c4c:	00 0c       	add	r0, r0
    5c4e:	08 95       	ret

00005c50 <__tablejump2__>:
    5c50:	ee 0f       	add	r30, r30
    5c52:	ff 1f       	adc	r31, r31

00005c54 <__tablejump__>:
    5c54:	05 90       	lpm	r0, Z+
    5c56:	f4 91       	lpm	r31, Z
    5c58:	e0 2d       	mov	r30, r0
    5c5a:	09 94       	ijmp

00005c5c <__umulhisi3>:
    5c5c:	a2 9f       	mul	r26, r18
    5c5e:	b0 01       	movw	r22, r0
    5c60:	b3 9f       	mul	r27, r19
    5c62:	c0 01       	movw	r24, r0
    5c64:	a3 9f       	mul	r26, r19
    5c66:	70 0d       	add	r23, r0
    5c68:	81 1d       	adc	r24, r1
    5c6a:	11 24       	eor	r1, r1
    5c6c:	91 1d       	adc	r25, r1
    5c6e:	b2 9f       	mul	r27, r18
    5c70:	70 0d       	add	r23, r0
    5c72:	81 1d       	adc	r24, r1
    5c74:	11 24       	eor	r1, r1
    5c76:	91 1d       	adc	r25, r1
    5c78:	08 95       	ret

00005c7a <do_rand>:
    5c7a:	8f 92       	push	r8
    5c7c:	9f 92       	push	r9
    5c7e:	af 92       	push	r10
    5c80:	bf 92       	push	r11
    5c82:	cf 92       	push	r12
    5c84:	df 92       	push	r13
    5c86:	ef 92       	push	r14
    5c88:	ff 92       	push	r15
    5c8a:	cf 93       	push	r28
    5c8c:	df 93       	push	r29
    5c8e:	ec 01       	movw	r28, r24
    5c90:	68 81       	ld	r22, Y
    5c92:	79 81       	ldd	r23, Y+1	; 0x01
    5c94:	8a 81       	ldd	r24, Y+2	; 0x02
    5c96:	9b 81       	ldd	r25, Y+3	; 0x03
    5c98:	61 15       	cp	r22, r1
    5c9a:	71 05       	cpc	r23, r1
    5c9c:	81 05       	cpc	r24, r1
    5c9e:	91 05       	cpc	r25, r1
    5ca0:	21 f4       	brne	.+8      	; 0x5caa <do_rand+0x30>
    5ca2:	64 e2       	ldi	r22, 0x24	; 36
    5ca4:	79 ed       	ldi	r23, 0xD9	; 217
    5ca6:	8b e5       	ldi	r24, 0x5B	; 91
    5ca8:	97 e0       	ldi	r25, 0x07	; 7
    5caa:	2d e1       	ldi	r18, 0x1D	; 29
    5cac:	33 ef       	ldi	r19, 0xF3	; 243
    5cae:	41 e0       	ldi	r20, 0x01	; 1
    5cb0:	50 e0       	ldi	r21, 0x00	; 0
    5cb2:	0e 94 ae 31 	call	0x635c	; 0x635c <__divmodsi4>
    5cb6:	49 01       	movw	r8, r18
    5cb8:	5a 01       	movw	r10, r20
    5cba:	9b 01       	movw	r18, r22
    5cbc:	ac 01       	movw	r20, r24
    5cbe:	a7 ea       	ldi	r26, 0xA7	; 167
    5cc0:	b1 e4       	ldi	r27, 0x41	; 65
    5cc2:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    5cc6:	6b 01       	movw	r12, r22
    5cc8:	7c 01       	movw	r14, r24
    5cca:	ac ee       	ldi	r26, 0xEC	; 236
    5ccc:	b4 ef       	ldi	r27, 0xF4	; 244
    5cce:	a5 01       	movw	r20, r10
    5cd0:	94 01       	movw	r18, r8
    5cd2:	0e 94 a9 31 	call	0x6352	; 0x6352 <__mulohisi3>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	8c 0d       	add	r24, r12
    5cdc:	9d 1d       	adc	r25, r13
    5cde:	ae 1d       	adc	r26, r14
    5ce0:	bf 1d       	adc	r27, r15
    5ce2:	b7 ff       	sbrs	r27, 7
    5ce4:	03 c0       	rjmp	.+6      	; 0x5cec <do_rand+0x72>
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	a1 09       	sbc	r26, r1
    5cea:	b0 48       	sbci	r27, 0x80	; 128
    5cec:	88 83       	st	Y, r24
    5cee:	99 83       	std	Y+1, r25	; 0x01
    5cf0:	aa 83       	std	Y+2, r26	; 0x02
    5cf2:	bb 83       	std	Y+3, r27	; 0x03
    5cf4:	9f 77       	andi	r25, 0x7F	; 127
    5cf6:	df 91       	pop	r29
    5cf8:	cf 91       	pop	r28
    5cfa:	ff 90       	pop	r15
    5cfc:	ef 90       	pop	r14
    5cfe:	df 90       	pop	r13
    5d00:	cf 90       	pop	r12
    5d02:	bf 90       	pop	r11
    5d04:	af 90       	pop	r10
    5d06:	9f 90       	pop	r9
    5d08:	8f 90       	pop	r8
    5d0a:	08 95       	ret

00005d0c <rand_r>:
    5d0c:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <do_rand>

00005d10 <rand>:
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	92 e0       	ldi	r25, 0x02	; 2
    5d14:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <do_rand>

00005d18 <srand>:
    5d18:	a0 e0       	ldi	r26, 0x00	; 0
    5d1a:	b0 e0       	ldi	r27, 0x00	; 0
    5d1c:	80 93 00 02 	sts	0x0200, r24
    5d20:	90 93 01 02 	sts	0x0201, r25
    5d24:	a0 93 02 02 	sts	0x0202, r26
    5d28:	b0 93 03 02 	sts	0x0203, r27
    5d2c:	08 95       	ret

00005d2e <atoi>:
    5d2e:	fc 01       	movw	r30, r24
    5d30:	88 27       	eor	r24, r24
    5d32:	99 27       	eor	r25, r25
    5d34:	e8 94       	clt
    5d36:	21 91       	ld	r18, Z+
    5d38:	20 32       	cpi	r18, 0x20	; 32
    5d3a:	e9 f3       	breq	.-6      	; 0x5d36 <atoi+0x8>
    5d3c:	29 30       	cpi	r18, 0x09	; 9
    5d3e:	10 f0       	brcs	.+4      	; 0x5d44 <atoi+0x16>
    5d40:	2e 30       	cpi	r18, 0x0E	; 14
    5d42:	c8 f3       	brcs	.-14     	; 0x5d36 <atoi+0x8>
    5d44:	2b 32       	cpi	r18, 0x2B	; 43
    5d46:	41 f0       	breq	.+16     	; 0x5d58 <atoi+0x2a>
    5d48:	2d 32       	cpi	r18, 0x2D	; 45
    5d4a:	39 f4       	brne	.+14     	; 0x5d5a <atoi+0x2c>
    5d4c:	68 94       	set
    5d4e:	04 c0       	rjmp	.+8      	; 0x5d58 <atoi+0x2a>
    5d50:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__mulhi_const_10>
    5d54:	82 0f       	add	r24, r18
    5d56:	91 1d       	adc	r25, r1
    5d58:	21 91       	ld	r18, Z+
    5d5a:	20 53       	subi	r18, 0x30	; 48
    5d5c:	2a 30       	cpi	r18, 0x0A	; 10
    5d5e:	c0 f3       	brcs	.-16     	; 0x5d50 <atoi+0x22>
    5d60:	1e f4       	brtc	.+6      	; 0x5d68 <atoi+0x3a>
    5d62:	90 95       	com	r25
    5d64:	81 95       	neg	r24
    5d66:	9f 4f       	sbci	r25, 0xFF	; 255
    5d68:	08 95       	ret

00005d6a <strchr_P>:
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	05 90       	lpm	r0, Z+
    5d6e:	06 16       	cp	r0, r22
    5d70:	21 f0       	breq	.+8      	; 0x5d7a <strchr_P+0x10>
    5d72:	00 20       	and	r0, r0
    5d74:	d9 f7       	brne	.-10     	; 0x5d6c <strchr_P+0x2>
    5d76:	c0 01       	movw	r24, r0
    5d78:	08 95       	ret
    5d7a:	31 97       	sbiw	r30, 0x01	; 1
    5d7c:	cf 01       	movw	r24, r30
    5d7e:	08 95       	ret

00005d80 <memcpy>:
    5d80:	fb 01       	movw	r30, r22
    5d82:	dc 01       	movw	r26, r24
    5d84:	02 c0       	rjmp	.+4      	; 0x5d8a <memcpy+0xa>
    5d86:	01 90       	ld	r0, Z+
    5d88:	0d 92       	st	X+, r0
    5d8a:	41 50       	subi	r20, 0x01	; 1
    5d8c:	50 40       	sbci	r21, 0x00	; 0
    5d8e:	d8 f7       	brcc	.-10     	; 0x5d86 <memcpy+0x6>
    5d90:	08 95       	ret

00005d92 <strcat>:
    5d92:	fb 01       	movw	r30, r22
    5d94:	dc 01       	movw	r26, r24
    5d96:	0d 90       	ld	r0, X+
    5d98:	00 20       	and	r0, r0
    5d9a:	e9 f7       	brne	.-6      	; 0x5d96 <strcat+0x4>
    5d9c:	11 97       	sbiw	r26, 0x01	; 1
    5d9e:	01 90       	ld	r0, Z+
    5da0:	0d 92       	st	X+, r0
    5da2:	00 20       	and	r0, r0
    5da4:	e1 f7       	brne	.-8      	; 0x5d9e <strcat+0xc>
    5da6:	08 95       	ret

00005da8 <strcmp>:
    5da8:	fb 01       	movw	r30, r22
    5daa:	dc 01       	movw	r26, r24
    5dac:	8d 91       	ld	r24, X+
    5dae:	01 90       	ld	r0, Z+
    5db0:	80 19       	sub	r24, r0
    5db2:	01 10       	cpse	r0, r1
    5db4:	d9 f3       	breq	.-10     	; 0x5dac <strcmp+0x4>
    5db6:	99 0b       	sbc	r25, r25
    5db8:	08 95       	ret

00005dba <__mulhi_const_10>:
    5dba:	7a e0       	ldi	r23, 0x0A	; 10
    5dbc:	97 9f       	mul	r25, r23
    5dbe:	90 2d       	mov	r25, r0
    5dc0:	87 9f       	mul	r24, r23
    5dc2:	80 2d       	mov	r24, r0
    5dc4:	91 0d       	add	r25, r1
    5dc6:	11 24       	eor	r1, r1
    5dc8:	08 95       	ret

00005dca <fdevopen>:
    5dca:	0f 93       	push	r16
    5dcc:	1f 93       	push	r17
    5dce:	cf 93       	push	r28
    5dd0:	df 93       	push	r29
    5dd2:	00 97       	sbiw	r24, 0x00	; 0
    5dd4:	31 f4       	brne	.+12     	; 0x5de2 <fdevopen+0x18>
    5dd6:	61 15       	cp	r22, r1
    5dd8:	71 05       	cpc	r23, r1
    5dda:	19 f4       	brne	.+6      	; 0x5de2 <fdevopen+0x18>
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	3a c0       	rjmp	.+116    	; 0x5e56 <fdevopen+0x8c>
    5de2:	8b 01       	movw	r16, r22
    5de4:	ec 01       	movw	r28, r24
    5de6:	6e e0       	ldi	r22, 0x0E	; 14
    5de8:	70 e0       	ldi	r23, 0x00	; 0
    5dea:	81 e0       	ldi	r24, 0x01	; 1
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	0e 94 56 30 	call	0x60ac	; 0x60ac <calloc>
    5df2:	fc 01       	movw	r30, r24
    5df4:	00 97       	sbiw	r24, 0x00	; 0
    5df6:	91 f3       	breq	.-28     	; 0x5ddc <fdevopen+0x12>
    5df8:	80 e8       	ldi	r24, 0x80	; 128
    5dfa:	83 83       	std	Z+3, r24	; 0x03
    5dfc:	01 15       	cp	r16, r1
    5dfe:	11 05       	cpc	r17, r1
    5e00:	71 f0       	breq	.+28     	; 0x5e1e <fdevopen+0x54>
    5e02:	13 87       	std	Z+11, r17	; 0x0b
    5e04:	02 87       	std	Z+10, r16	; 0x0a
    5e06:	81 e8       	ldi	r24, 0x81	; 129
    5e08:	83 83       	std	Z+3, r24	; 0x03
    5e0a:	80 91 df 0a 	lds	r24, 0x0ADF
    5e0e:	90 91 e0 0a 	lds	r25, 0x0AE0
    5e12:	89 2b       	or	r24, r25
    5e14:	21 f4       	brne	.+8      	; 0x5e1e <fdevopen+0x54>
    5e16:	f0 93 e0 0a 	sts	0x0AE0, r31
    5e1a:	e0 93 df 0a 	sts	0x0ADF, r30
    5e1e:	20 97       	sbiw	r28, 0x00	; 0
    5e20:	c9 f0       	breq	.+50     	; 0x5e54 <fdevopen+0x8a>
    5e22:	d1 87       	std	Z+9, r29	; 0x09
    5e24:	c0 87       	std	Z+8, r28	; 0x08
    5e26:	83 81       	ldd	r24, Z+3	; 0x03
    5e28:	82 60       	ori	r24, 0x02	; 2
    5e2a:	83 83       	std	Z+3, r24	; 0x03
    5e2c:	80 91 e1 0a 	lds	r24, 0x0AE1
    5e30:	90 91 e2 0a 	lds	r25, 0x0AE2
    5e34:	89 2b       	or	r24, r25
    5e36:	71 f4       	brne	.+28     	; 0x5e54 <fdevopen+0x8a>
    5e38:	f0 93 e2 0a 	sts	0x0AE2, r31
    5e3c:	e0 93 e1 0a 	sts	0x0AE1, r30
    5e40:	80 91 e3 0a 	lds	r24, 0x0AE3
    5e44:	90 91 e4 0a 	lds	r25, 0x0AE4
    5e48:	89 2b       	or	r24, r25
    5e4a:	21 f4       	brne	.+8      	; 0x5e54 <fdevopen+0x8a>
    5e4c:	f0 93 e4 0a 	sts	0x0AE4, r31
    5e50:	e0 93 e3 0a 	sts	0x0AE3, r30
    5e54:	cf 01       	movw	r24, r30
    5e56:	df 91       	pop	r29
    5e58:	cf 91       	pop	r28
    5e5a:	1f 91       	pop	r17
    5e5c:	0f 91       	pop	r16
    5e5e:	08 95       	ret

00005e60 <fputc>:
    5e60:	0f 93       	push	r16
    5e62:	1f 93       	push	r17
    5e64:	cf 93       	push	r28
    5e66:	df 93       	push	r29
    5e68:	fb 01       	movw	r30, r22
    5e6a:	23 81       	ldd	r18, Z+3	; 0x03
    5e6c:	21 fd       	sbrc	r18, 1
    5e6e:	03 c0       	rjmp	.+6      	; 0x5e76 <fputc+0x16>
    5e70:	8f ef       	ldi	r24, 0xFF	; 255
    5e72:	9f ef       	ldi	r25, 0xFF	; 255
    5e74:	28 c0       	rjmp	.+80     	; 0x5ec6 <fputc+0x66>
    5e76:	22 ff       	sbrs	r18, 2
    5e78:	16 c0       	rjmp	.+44     	; 0x5ea6 <fputc+0x46>
    5e7a:	46 81       	ldd	r20, Z+6	; 0x06
    5e7c:	57 81       	ldd	r21, Z+7	; 0x07
    5e7e:	24 81       	ldd	r18, Z+4	; 0x04
    5e80:	35 81       	ldd	r19, Z+5	; 0x05
    5e82:	42 17       	cp	r20, r18
    5e84:	53 07       	cpc	r21, r19
    5e86:	44 f4       	brge	.+16     	; 0x5e98 <fputc+0x38>
    5e88:	a0 81       	ld	r26, Z
    5e8a:	b1 81       	ldd	r27, Z+1	; 0x01
    5e8c:	9d 01       	movw	r18, r26
    5e8e:	2f 5f       	subi	r18, 0xFF	; 255
    5e90:	3f 4f       	sbci	r19, 0xFF	; 255
    5e92:	31 83       	std	Z+1, r19	; 0x01
    5e94:	20 83       	st	Z, r18
    5e96:	8c 93       	st	X, r24
    5e98:	26 81       	ldd	r18, Z+6	; 0x06
    5e9a:	37 81       	ldd	r19, Z+7	; 0x07
    5e9c:	2f 5f       	subi	r18, 0xFF	; 255
    5e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea0:	37 83       	std	Z+7, r19	; 0x07
    5ea2:	26 83       	std	Z+6, r18	; 0x06
    5ea4:	10 c0       	rjmp	.+32     	; 0x5ec6 <fputc+0x66>
    5ea6:	eb 01       	movw	r28, r22
    5ea8:	09 2f       	mov	r16, r25
    5eaa:	18 2f       	mov	r17, r24
    5eac:	00 84       	ldd	r0, Z+8	; 0x08
    5eae:	f1 85       	ldd	r31, Z+9	; 0x09
    5eb0:	e0 2d       	mov	r30, r0
    5eb2:	09 95       	icall
    5eb4:	89 2b       	or	r24, r25
    5eb6:	e1 f6       	brne	.-72     	; 0x5e70 <fputc+0x10>
    5eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    5eba:	9f 81       	ldd	r25, Y+7	; 0x07
    5ebc:	01 96       	adiw	r24, 0x01	; 1
    5ebe:	9f 83       	std	Y+7, r25	; 0x07
    5ec0:	8e 83       	std	Y+6, r24	; 0x06
    5ec2:	81 2f       	mov	r24, r17
    5ec4:	90 2f       	mov	r25, r16
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	1f 91       	pop	r17
    5ecc:	0f 91       	pop	r16
    5ece:	08 95       	ret

00005ed0 <printf>:
    5ed0:	cf 93       	push	r28
    5ed2:	df 93       	push	r29
    5ed4:	cd b7       	in	r28, 0x3d	; 61
    5ed6:	de b7       	in	r29, 0x3e	; 62
    5ed8:	ae 01       	movw	r20, r28
    5eda:	4b 5f       	subi	r20, 0xFB	; 251
    5edc:	5f 4f       	sbci	r21, 0xFF	; 255
    5ede:	fa 01       	movw	r30, r20
    5ee0:	61 91       	ld	r22, Z+
    5ee2:	71 91       	ld	r23, Z+
    5ee4:	af 01       	movw	r20, r30
    5ee6:	80 91 e1 0a 	lds	r24, 0x0AE1
    5eea:	90 91 e2 0a 	lds	r25, 0x0AE2
    5eee:	0e 94 1d 2c 	call	0x583a	; 0x583a <vfprintf>
    5ef2:	df 91       	pop	r29
    5ef4:	cf 91       	pop	r28
    5ef6:	08 95       	ret

00005ef8 <putchar>:
    5ef8:	60 91 e1 0a 	lds	r22, 0x0AE1
    5efc:	70 91 e2 0a 	lds	r23, 0x0AE2
    5f00:	0c 94 30 2f 	jmp	0x5e60	; 0x5e60 <fputc>

00005f04 <puts>:
    5f04:	0f 93       	push	r16
    5f06:	1f 93       	push	r17
    5f08:	cf 93       	push	r28
    5f0a:	df 93       	push	r29
    5f0c:	e0 91 e1 0a 	lds	r30, 0x0AE1
    5f10:	f0 91 e2 0a 	lds	r31, 0x0AE2
    5f14:	23 81       	ldd	r18, Z+3	; 0x03
    5f16:	21 ff       	sbrs	r18, 1
    5f18:	1b c0       	rjmp	.+54     	; 0x5f50 <puts+0x4c>
    5f1a:	8c 01       	movw	r16, r24
    5f1c:	d0 e0       	ldi	r29, 0x00	; 0
    5f1e:	c0 e0       	ldi	r28, 0x00	; 0
    5f20:	f8 01       	movw	r30, r16
    5f22:	81 91       	ld	r24, Z+
    5f24:	8f 01       	movw	r16, r30
    5f26:	60 91 e1 0a 	lds	r22, 0x0AE1
    5f2a:	70 91 e2 0a 	lds	r23, 0x0AE2
    5f2e:	db 01       	movw	r26, r22
    5f30:	18 96       	adiw	r26, 0x08	; 8
    5f32:	ed 91       	ld	r30, X+
    5f34:	fc 91       	ld	r31, X
    5f36:	19 97       	sbiw	r26, 0x09	; 9
    5f38:	88 23       	and	r24, r24
    5f3a:	31 f0       	breq	.+12     	; 0x5f48 <puts+0x44>
    5f3c:	09 95       	icall
    5f3e:	89 2b       	or	r24, r25
    5f40:	79 f3       	breq	.-34     	; 0x5f20 <puts+0x1c>
    5f42:	df ef       	ldi	r29, 0xFF	; 255
    5f44:	cf ef       	ldi	r28, 0xFF	; 255
    5f46:	ec cf       	rjmp	.-40     	; 0x5f20 <puts+0x1c>
    5f48:	8a e0       	ldi	r24, 0x0A	; 10
    5f4a:	09 95       	icall
    5f4c:	89 2b       	or	r24, r25
    5f4e:	19 f0       	breq	.+6      	; 0x5f56 <puts+0x52>
    5f50:	8f ef       	ldi	r24, 0xFF	; 255
    5f52:	9f ef       	ldi	r25, 0xFF	; 255
    5f54:	02 c0       	rjmp	.+4      	; 0x5f5a <puts+0x56>
    5f56:	8d 2f       	mov	r24, r29
    5f58:	9c 2f       	mov	r25, r28
    5f5a:	df 91       	pop	r29
    5f5c:	cf 91       	pop	r28
    5f5e:	1f 91       	pop	r17
    5f60:	0f 91       	pop	r16
    5f62:	08 95       	ret

00005f64 <sprintf>:
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	cd b7       	in	r28, 0x3d	; 61
    5f6e:	de b7       	in	r29, 0x3e	; 62
    5f70:	2e 97       	sbiw	r28, 0x0e	; 14
    5f72:	0f b6       	in	r0, 0x3f	; 63
    5f74:	f8 94       	cli
    5f76:	de bf       	out	0x3e, r29	; 62
    5f78:	0f be       	out	0x3f, r0	; 63
    5f7a:	cd bf       	out	0x3d, r28	; 61
    5f7c:	0d 89       	ldd	r16, Y+21	; 0x15
    5f7e:	1e 89       	ldd	r17, Y+22	; 0x16
    5f80:	86 e0       	ldi	r24, 0x06	; 6
    5f82:	8c 83       	std	Y+4, r24	; 0x04
    5f84:	1a 83       	std	Y+2, r17	; 0x02
    5f86:	09 83       	std	Y+1, r16	; 0x01
    5f88:	8f ef       	ldi	r24, 0xFF	; 255
    5f8a:	9f e7       	ldi	r25, 0x7F	; 127
    5f8c:	9e 83       	std	Y+6, r25	; 0x06
    5f8e:	8d 83       	std	Y+5, r24	; 0x05
    5f90:	ae 01       	movw	r20, r28
    5f92:	47 5e       	subi	r20, 0xE7	; 231
    5f94:	5f 4f       	sbci	r21, 0xFF	; 255
    5f96:	6f 89       	ldd	r22, Y+23	; 0x17
    5f98:	78 8d       	ldd	r23, Y+24	; 0x18
    5f9a:	ce 01       	movw	r24, r28
    5f9c:	01 96       	adiw	r24, 0x01	; 1
    5f9e:	0e 94 1d 2c 	call	0x583a	; 0x583a <vfprintf>
    5fa2:	2f 81       	ldd	r18, Y+7	; 0x07
    5fa4:	38 85       	ldd	r19, Y+8	; 0x08
    5fa6:	f8 01       	movw	r30, r16
    5fa8:	e2 0f       	add	r30, r18
    5faa:	f3 1f       	adc	r31, r19
    5fac:	10 82       	st	Z, r1
    5fae:	2e 96       	adiw	r28, 0x0e	; 14
    5fb0:	0f b6       	in	r0, 0x3f	; 63
    5fb2:	f8 94       	cli
    5fb4:	de bf       	out	0x3e, r29	; 62
    5fb6:	0f be       	out	0x3f, r0	; 63
    5fb8:	cd bf       	out	0x3d, r28	; 61
    5fba:	df 91       	pop	r29
    5fbc:	cf 91       	pop	r28
    5fbe:	1f 91       	pop	r17
    5fc0:	0f 91       	pop	r16
    5fc2:	08 95       	ret

00005fc4 <__ultoa_invert>:
    5fc4:	fa 01       	movw	r30, r20
    5fc6:	aa 27       	eor	r26, r26
    5fc8:	28 30       	cpi	r18, 0x08	; 8
    5fca:	51 f1       	breq	.+84     	; 0x6020 <__ultoa_invert+0x5c>
    5fcc:	20 31       	cpi	r18, 0x10	; 16
    5fce:	81 f1       	breq	.+96     	; 0x6030 <__ultoa_invert+0x6c>
    5fd0:	e8 94       	clt
    5fd2:	6f 93       	push	r22
    5fd4:	6e 7f       	andi	r22, 0xFE	; 254
    5fd6:	6e 5f       	subi	r22, 0xFE	; 254
    5fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    5fda:	8f 4f       	sbci	r24, 0xFF	; 255
    5fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    5fde:	af 4f       	sbci	r26, 0xFF	; 255
    5fe0:	b1 e0       	ldi	r27, 0x01	; 1
    5fe2:	3e d0       	rcall	.+124    	; 0x6060 <__ultoa_invert+0x9c>
    5fe4:	b4 e0       	ldi	r27, 0x04	; 4
    5fe6:	3c d0       	rcall	.+120    	; 0x6060 <__ultoa_invert+0x9c>
    5fe8:	67 0f       	add	r22, r23
    5fea:	78 1f       	adc	r23, r24
    5fec:	89 1f       	adc	r24, r25
    5fee:	9a 1f       	adc	r25, r26
    5ff0:	a1 1d       	adc	r26, r1
    5ff2:	68 0f       	add	r22, r24
    5ff4:	79 1f       	adc	r23, r25
    5ff6:	8a 1f       	adc	r24, r26
    5ff8:	91 1d       	adc	r25, r1
    5ffa:	a1 1d       	adc	r26, r1
    5ffc:	6a 0f       	add	r22, r26
    5ffe:	71 1d       	adc	r23, r1
    6000:	81 1d       	adc	r24, r1
    6002:	91 1d       	adc	r25, r1
    6004:	a1 1d       	adc	r26, r1
    6006:	20 d0       	rcall	.+64     	; 0x6048 <__ultoa_invert+0x84>
    6008:	09 f4       	brne	.+2      	; 0x600c <__ultoa_invert+0x48>
    600a:	68 94       	set
    600c:	3f 91       	pop	r19
    600e:	2a e0       	ldi	r18, 0x0A	; 10
    6010:	26 9f       	mul	r18, r22
    6012:	11 24       	eor	r1, r1
    6014:	30 19       	sub	r19, r0
    6016:	30 5d       	subi	r19, 0xD0	; 208
    6018:	31 93       	st	Z+, r19
    601a:	de f6       	brtc	.-74     	; 0x5fd2 <__ultoa_invert+0xe>
    601c:	cf 01       	movw	r24, r30
    601e:	08 95       	ret
    6020:	46 2f       	mov	r20, r22
    6022:	47 70       	andi	r20, 0x07	; 7
    6024:	40 5d       	subi	r20, 0xD0	; 208
    6026:	41 93       	st	Z+, r20
    6028:	b3 e0       	ldi	r27, 0x03	; 3
    602a:	0f d0       	rcall	.+30     	; 0x604a <__ultoa_invert+0x86>
    602c:	c9 f7       	brne	.-14     	; 0x6020 <__ultoa_invert+0x5c>
    602e:	f6 cf       	rjmp	.-20     	; 0x601c <__ultoa_invert+0x58>
    6030:	46 2f       	mov	r20, r22
    6032:	4f 70       	andi	r20, 0x0F	; 15
    6034:	40 5d       	subi	r20, 0xD0	; 208
    6036:	4a 33       	cpi	r20, 0x3A	; 58
    6038:	18 f0       	brcs	.+6      	; 0x6040 <__ultoa_invert+0x7c>
    603a:	49 5d       	subi	r20, 0xD9	; 217
    603c:	31 fd       	sbrc	r19, 1
    603e:	40 52       	subi	r20, 0x20	; 32
    6040:	41 93       	st	Z+, r20
    6042:	02 d0       	rcall	.+4      	; 0x6048 <__ultoa_invert+0x84>
    6044:	a9 f7       	brne	.-22     	; 0x6030 <__ultoa_invert+0x6c>
    6046:	ea cf       	rjmp	.-44     	; 0x601c <__ultoa_invert+0x58>
    6048:	b4 e0       	ldi	r27, 0x04	; 4
    604a:	a6 95       	lsr	r26
    604c:	97 95       	ror	r25
    604e:	87 95       	ror	r24
    6050:	77 95       	ror	r23
    6052:	67 95       	ror	r22
    6054:	ba 95       	dec	r27
    6056:	c9 f7       	brne	.-14     	; 0x604a <__ultoa_invert+0x86>
    6058:	00 97       	sbiw	r24, 0x00	; 0
    605a:	61 05       	cpc	r22, r1
    605c:	71 05       	cpc	r23, r1
    605e:	08 95       	ret
    6060:	9b 01       	movw	r18, r22
    6062:	ac 01       	movw	r20, r24
    6064:	0a 2e       	mov	r0, r26
    6066:	06 94       	lsr	r0
    6068:	57 95       	ror	r21
    606a:	47 95       	ror	r20
    606c:	37 95       	ror	r19
    606e:	27 95       	ror	r18
    6070:	ba 95       	dec	r27
    6072:	c9 f7       	brne	.-14     	; 0x6066 <__ultoa_invert+0xa2>
    6074:	62 0f       	add	r22, r18
    6076:	73 1f       	adc	r23, r19
    6078:	84 1f       	adc	r24, r20
    607a:	95 1f       	adc	r25, r21
    607c:	a0 1d       	adc	r26, r0
    607e:	08 95       	ret

00006080 <__eerd_byte_m128rfa1>:
    6080:	f9 99       	sbic	0x1f, 1	; 31
    6082:	fe cf       	rjmp	.-4      	; 0x6080 <__eerd_byte_m128rfa1>
    6084:	92 bd       	out	0x22, r25	; 34
    6086:	81 bd       	out	0x21, r24	; 33
    6088:	f8 9a       	sbi	0x1f, 0	; 31
    608a:	99 27       	eor	r25, r25
    608c:	80 b5       	in	r24, 0x20	; 32
    608e:	08 95       	ret

00006090 <__eewr_byte_m128rfa1>:
    6090:	26 2f       	mov	r18, r22

00006092 <__eewr_r18_m128rfa1>:
    6092:	f9 99       	sbic	0x1f, 1	; 31
    6094:	fe cf       	rjmp	.-4      	; 0x6092 <__eewr_r18_m128rfa1>
    6096:	1f ba       	out	0x1f, r1	; 31
    6098:	92 bd       	out	0x22, r25	; 34
    609a:	81 bd       	out	0x21, r24	; 33
    609c:	20 bd       	out	0x20, r18	; 32
    609e:	0f b6       	in	r0, 0x3f	; 63
    60a0:	f8 94       	cli
    60a2:	fa 9a       	sbi	0x1f, 2	; 31
    60a4:	f9 9a       	sbi	0x1f, 1	; 31
    60a6:	0f be       	out	0x3f, r0	; 63
    60a8:	01 96       	adiw	r24, 0x01	; 1
    60aa:	08 95       	ret

000060ac <calloc>:
    60ac:	0f 93       	push	r16
    60ae:	1f 93       	push	r17
    60b0:	cf 93       	push	r28
    60b2:	df 93       	push	r29
    60b4:	86 9f       	mul	r24, r22
    60b6:	80 01       	movw	r16, r0
    60b8:	87 9f       	mul	r24, r23
    60ba:	10 0d       	add	r17, r0
    60bc:	96 9f       	mul	r25, r22
    60be:	10 0d       	add	r17, r0
    60c0:	11 24       	eor	r1, r1
    60c2:	c8 01       	movw	r24, r16
    60c4:	0e 94 72 30 	call	0x60e4	; 0x60e4 <malloc>
    60c8:	ec 01       	movw	r28, r24
    60ca:	00 97       	sbiw	r24, 0x00	; 0
    60cc:	29 f0       	breq	.+10     	; 0x60d8 <calloc+0x2c>
    60ce:	a8 01       	movw	r20, r16
    60d0:	60 e0       	ldi	r22, 0x00	; 0
    60d2:	70 e0       	ldi	r23, 0x00	; 0
    60d4:	0e 94 9f 31 	call	0x633e	; 0x633e <memset>
    60d8:	ce 01       	movw	r24, r28
    60da:	df 91       	pop	r29
    60dc:	cf 91       	pop	r28
    60de:	1f 91       	pop	r17
    60e0:	0f 91       	pop	r16
    60e2:	08 95       	ret

000060e4 <malloc>:
    60e4:	cf 93       	push	r28
    60e6:	df 93       	push	r29
    60e8:	82 30       	cpi	r24, 0x02	; 2
    60ea:	91 05       	cpc	r25, r1
    60ec:	10 f4       	brcc	.+4      	; 0x60f2 <malloc+0xe>
    60ee:	82 e0       	ldi	r24, 0x02	; 2
    60f0:	90 e0       	ldi	r25, 0x00	; 0
    60f2:	e0 91 e7 0a 	lds	r30, 0x0AE7
    60f6:	f0 91 e8 0a 	lds	r31, 0x0AE8
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	c0 e0       	ldi	r28, 0x00	; 0
    6100:	d0 e0       	ldi	r29, 0x00	; 0
    6102:	30 97       	sbiw	r30, 0x00	; 0
    6104:	11 f1       	breq	.+68     	; 0x614a <malloc+0x66>
    6106:	40 81       	ld	r20, Z
    6108:	51 81       	ldd	r21, Z+1	; 0x01
    610a:	48 17       	cp	r20, r24
    610c:	59 07       	cpc	r21, r25
    610e:	c0 f0       	brcs	.+48     	; 0x6140 <malloc+0x5c>
    6110:	48 17       	cp	r20, r24
    6112:	59 07       	cpc	r21, r25
    6114:	61 f4       	brne	.+24     	; 0x612e <malloc+0x4a>
    6116:	82 81       	ldd	r24, Z+2	; 0x02
    6118:	93 81       	ldd	r25, Z+3	; 0x03
    611a:	20 97       	sbiw	r28, 0x00	; 0
    611c:	19 f0       	breq	.+6      	; 0x6124 <malloc+0x40>
    611e:	9b 83       	std	Y+3, r25	; 0x03
    6120:	8a 83       	std	Y+2, r24	; 0x02
    6122:	2b c0       	rjmp	.+86     	; 0x617a <malloc+0x96>
    6124:	90 93 e8 0a 	sts	0x0AE8, r25
    6128:	80 93 e7 0a 	sts	0x0AE7, r24
    612c:	26 c0       	rjmp	.+76     	; 0x617a <malloc+0x96>
    612e:	21 15       	cp	r18, r1
    6130:	31 05       	cpc	r19, r1
    6132:	19 f0       	breq	.+6      	; 0x613a <malloc+0x56>
    6134:	42 17       	cp	r20, r18
    6136:	53 07       	cpc	r21, r19
    6138:	18 f4       	brcc	.+6      	; 0x6140 <malloc+0x5c>
    613a:	9a 01       	movw	r18, r20
    613c:	be 01       	movw	r22, r28
    613e:	df 01       	movw	r26, r30
    6140:	ef 01       	movw	r28, r30
    6142:	02 80       	ldd	r0, Z+2	; 0x02
    6144:	f3 81       	ldd	r31, Z+3	; 0x03
    6146:	e0 2d       	mov	r30, r0
    6148:	dc cf       	rjmp	.-72     	; 0x6102 <malloc+0x1e>
    614a:	21 15       	cp	r18, r1
    614c:	31 05       	cpc	r19, r1
    614e:	09 f1       	breq	.+66     	; 0x6192 <malloc+0xae>
    6150:	28 1b       	sub	r18, r24
    6152:	39 0b       	sbc	r19, r25
    6154:	24 30       	cpi	r18, 0x04	; 4
    6156:	31 05       	cpc	r19, r1
    6158:	90 f4       	brcc	.+36     	; 0x617e <malloc+0x9a>
    615a:	12 96       	adiw	r26, 0x02	; 2
    615c:	8d 91       	ld	r24, X+
    615e:	9c 91       	ld	r25, X
    6160:	13 97       	sbiw	r26, 0x03	; 3
    6162:	61 15       	cp	r22, r1
    6164:	71 05       	cpc	r23, r1
    6166:	21 f0       	breq	.+8      	; 0x6170 <malloc+0x8c>
    6168:	fb 01       	movw	r30, r22
    616a:	93 83       	std	Z+3, r25	; 0x03
    616c:	82 83       	std	Z+2, r24	; 0x02
    616e:	04 c0       	rjmp	.+8      	; 0x6178 <malloc+0x94>
    6170:	90 93 e8 0a 	sts	0x0AE8, r25
    6174:	80 93 e7 0a 	sts	0x0AE7, r24
    6178:	fd 01       	movw	r30, r26
    617a:	32 96       	adiw	r30, 0x02	; 2
    617c:	44 c0       	rjmp	.+136    	; 0x6206 <malloc+0x122>
    617e:	fd 01       	movw	r30, r26
    6180:	e2 0f       	add	r30, r18
    6182:	f3 1f       	adc	r31, r19
    6184:	81 93       	st	Z+, r24
    6186:	91 93       	st	Z+, r25
    6188:	22 50       	subi	r18, 0x02	; 2
    618a:	31 09       	sbc	r19, r1
    618c:	2d 93       	st	X+, r18
    618e:	3c 93       	st	X, r19
    6190:	3a c0       	rjmp	.+116    	; 0x6206 <malloc+0x122>
    6192:	20 91 e5 0a 	lds	r18, 0x0AE5
    6196:	30 91 e6 0a 	lds	r19, 0x0AE6
    619a:	23 2b       	or	r18, r19
    619c:	41 f4       	brne	.+16     	; 0x61ae <malloc+0xca>
    619e:	20 91 06 02 	lds	r18, 0x0206
    61a2:	30 91 07 02 	lds	r19, 0x0207
    61a6:	30 93 e6 0a 	sts	0x0AE6, r19
    61aa:	20 93 e5 0a 	sts	0x0AE5, r18
    61ae:	20 91 04 02 	lds	r18, 0x0204
    61b2:	30 91 05 02 	lds	r19, 0x0205
    61b6:	21 15       	cp	r18, r1
    61b8:	31 05       	cpc	r19, r1
    61ba:	41 f4       	brne	.+16     	; 0x61cc <malloc+0xe8>
    61bc:	2d b7       	in	r18, 0x3d	; 61
    61be:	3e b7       	in	r19, 0x3e	; 62
    61c0:	40 91 08 02 	lds	r20, 0x0208
    61c4:	50 91 09 02 	lds	r21, 0x0209
    61c8:	24 1b       	sub	r18, r20
    61ca:	35 0b       	sbc	r19, r21
    61cc:	e0 91 e5 0a 	lds	r30, 0x0AE5
    61d0:	f0 91 e6 0a 	lds	r31, 0x0AE6
    61d4:	e2 17       	cp	r30, r18
    61d6:	f3 07       	cpc	r31, r19
    61d8:	a0 f4       	brcc	.+40     	; 0x6202 <malloc+0x11e>
    61da:	2e 1b       	sub	r18, r30
    61dc:	3f 0b       	sbc	r19, r31
    61de:	28 17       	cp	r18, r24
    61e0:	39 07       	cpc	r19, r25
    61e2:	78 f0       	brcs	.+30     	; 0x6202 <malloc+0x11e>
    61e4:	ac 01       	movw	r20, r24
    61e6:	4e 5f       	subi	r20, 0xFE	; 254
    61e8:	5f 4f       	sbci	r21, 0xFF	; 255
    61ea:	24 17       	cp	r18, r20
    61ec:	35 07       	cpc	r19, r21
    61ee:	48 f0       	brcs	.+18     	; 0x6202 <malloc+0x11e>
    61f0:	4e 0f       	add	r20, r30
    61f2:	5f 1f       	adc	r21, r31
    61f4:	50 93 e6 0a 	sts	0x0AE6, r21
    61f8:	40 93 e5 0a 	sts	0x0AE5, r20
    61fc:	81 93       	st	Z+, r24
    61fe:	91 93       	st	Z+, r25
    6200:	02 c0       	rjmp	.+4      	; 0x6206 <malloc+0x122>
    6202:	e0 e0       	ldi	r30, 0x00	; 0
    6204:	f0 e0       	ldi	r31, 0x00	; 0
    6206:	cf 01       	movw	r24, r30
    6208:	df 91       	pop	r29
    620a:	cf 91       	pop	r28
    620c:	08 95       	ret

0000620e <free>:
    620e:	0f 93       	push	r16
    6210:	1f 93       	push	r17
    6212:	cf 93       	push	r28
    6214:	df 93       	push	r29
    6216:	00 97       	sbiw	r24, 0x00	; 0
    6218:	09 f4       	brne	.+2      	; 0x621c <free+0xe>
    621a:	8c c0       	rjmp	.+280    	; 0x6334 <free+0x126>
    621c:	fc 01       	movw	r30, r24
    621e:	32 97       	sbiw	r30, 0x02	; 2
    6220:	13 82       	std	Z+3, r1	; 0x03
    6222:	12 82       	std	Z+2, r1	; 0x02
    6224:	00 91 e7 0a 	lds	r16, 0x0AE7
    6228:	10 91 e8 0a 	lds	r17, 0x0AE8
    622c:	01 15       	cp	r16, r1
    622e:	11 05       	cpc	r17, r1
    6230:	81 f4       	brne	.+32     	; 0x6252 <free+0x44>
    6232:	20 81       	ld	r18, Z
    6234:	31 81       	ldd	r19, Z+1	; 0x01
    6236:	82 0f       	add	r24, r18
    6238:	93 1f       	adc	r25, r19
    623a:	20 91 e5 0a 	lds	r18, 0x0AE5
    623e:	30 91 e6 0a 	lds	r19, 0x0AE6
    6242:	28 17       	cp	r18, r24
    6244:	39 07       	cpc	r19, r25
    6246:	79 f5       	brne	.+94     	; 0x62a6 <free+0x98>
    6248:	f0 93 e6 0a 	sts	0x0AE6, r31
    624c:	e0 93 e5 0a 	sts	0x0AE5, r30
    6250:	71 c0       	rjmp	.+226    	; 0x6334 <free+0x126>
    6252:	d8 01       	movw	r26, r16
    6254:	40 e0       	ldi	r20, 0x00	; 0
    6256:	50 e0       	ldi	r21, 0x00	; 0
    6258:	ae 17       	cp	r26, r30
    625a:	bf 07       	cpc	r27, r31
    625c:	50 f4       	brcc	.+20     	; 0x6272 <free+0x64>
    625e:	12 96       	adiw	r26, 0x02	; 2
    6260:	2d 91       	ld	r18, X+
    6262:	3c 91       	ld	r19, X
    6264:	13 97       	sbiw	r26, 0x03	; 3
    6266:	ad 01       	movw	r20, r26
    6268:	21 15       	cp	r18, r1
    626a:	31 05       	cpc	r19, r1
    626c:	09 f1       	breq	.+66     	; 0x62b0 <free+0xa2>
    626e:	d9 01       	movw	r26, r18
    6270:	f3 cf       	rjmp	.-26     	; 0x6258 <free+0x4a>
    6272:	9d 01       	movw	r18, r26
    6274:	da 01       	movw	r26, r20
    6276:	33 83       	std	Z+3, r19	; 0x03
    6278:	22 83       	std	Z+2, r18	; 0x02
    627a:	60 81       	ld	r22, Z
    627c:	71 81       	ldd	r23, Z+1	; 0x01
    627e:	86 0f       	add	r24, r22
    6280:	97 1f       	adc	r25, r23
    6282:	82 17       	cp	r24, r18
    6284:	93 07       	cpc	r25, r19
    6286:	69 f4       	brne	.+26     	; 0x62a2 <free+0x94>
    6288:	ec 01       	movw	r28, r24
    628a:	28 81       	ld	r18, Y
    628c:	39 81       	ldd	r19, Y+1	; 0x01
    628e:	26 0f       	add	r18, r22
    6290:	37 1f       	adc	r19, r23
    6292:	2e 5f       	subi	r18, 0xFE	; 254
    6294:	3f 4f       	sbci	r19, 0xFF	; 255
    6296:	31 83       	std	Z+1, r19	; 0x01
    6298:	20 83       	st	Z, r18
    629a:	8a 81       	ldd	r24, Y+2	; 0x02
    629c:	9b 81       	ldd	r25, Y+3	; 0x03
    629e:	93 83       	std	Z+3, r25	; 0x03
    62a0:	82 83       	std	Z+2, r24	; 0x02
    62a2:	45 2b       	or	r20, r21
    62a4:	29 f4       	brne	.+10     	; 0x62b0 <free+0xa2>
    62a6:	f0 93 e8 0a 	sts	0x0AE8, r31
    62aa:	e0 93 e7 0a 	sts	0x0AE7, r30
    62ae:	42 c0       	rjmp	.+132    	; 0x6334 <free+0x126>
    62b0:	13 96       	adiw	r26, 0x03	; 3
    62b2:	fc 93       	st	X, r31
    62b4:	ee 93       	st	-X, r30
    62b6:	12 97       	sbiw	r26, 0x02	; 2
    62b8:	ed 01       	movw	r28, r26
    62ba:	49 91       	ld	r20, Y+
    62bc:	59 91       	ld	r21, Y+
    62be:	9e 01       	movw	r18, r28
    62c0:	24 0f       	add	r18, r20
    62c2:	35 1f       	adc	r19, r21
    62c4:	e2 17       	cp	r30, r18
    62c6:	f3 07       	cpc	r31, r19
    62c8:	71 f4       	brne	.+28     	; 0x62e6 <free+0xd8>
    62ca:	80 81       	ld	r24, Z
    62cc:	91 81       	ldd	r25, Z+1	; 0x01
    62ce:	84 0f       	add	r24, r20
    62d0:	95 1f       	adc	r25, r21
    62d2:	02 96       	adiw	r24, 0x02	; 2
    62d4:	11 96       	adiw	r26, 0x01	; 1
    62d6:	9c 93       	st	X, r25
    62d8:	8e 93       	st	-X, r24
    62da:	82 81       	ldd	r24, Z+2	; 0x02
    62dc:	93 81       	ldd	r25, Z+3	; 0x03
    62de:	13 96       	adiw	r26, 0x03	; 3
    62e0:	9c 93       	st	X, r25
    62e2:	8e 93       	st	-X, r24
    62e4:	12 97       	sbiw	r26, 0x02	; 2
    62e6:	e0 e0       	ldi	r30, 0x00	; 0
    62e8:	f0 e0       	ldi	r31, 0x00	; 0
    62ea:	d8 01       	movw	r26, r16
    62ec:	12 96       	adiw	r26, 0x02	; 2
    62ee:	8d 91       	ld	r24, X+
    62f0:	9c 91       	ld	r25, X
    62f2:	13 97       	sbiw	r26, 0x03	; 3
    62f4:	00 97       	sbiw	r24, 0x00	; 0
    62f6:	19 f0       	breq	.+6      	; 0x62fe <free+0xf0>
    62f8:	f8 01       	movw	r30, r16
    62fa:	8c 01       	movw	r16, r24
    62fc:	f6 cf       	rjmp	.-20     	; 0x62ea <free+0xdc>
    62fe:	8d 91       	ld	r24, X+
    6300:	9c 91       	ld	r25, X
    6302:	98 01       	movw	r18, r16
    6304:	2e 5f       	subi	r18, 0xFE	; 254
    6306:	3f 4f       	sbci	r19, 0xFF	; 255
    6308:	82 0f       	add	r24, r18
    630a:	93 1f       	adc	r25, r19
    630c:	20 91 e5 0a 	lds	r18, 0x0AE5
    6310:	30 91 e6 0a 	lds	r19, 0x0AE6
    6314:	28 17       	cp	r18, r24
    6316:	39 07       	cpc	r19, r25
    6318:	69 f4       	brne	.+26     	; 0x6334 <free+0x126>
    631a:	30 97       	sbiw	r30, 0x00	; 0
    631c:	29 f4       	brne	.+10     	; 0x6328 <free+0x11a>
    631e:	10 92 e8 0a 	sts	0x0AE8, r1
    6322:	10 92 e7 0a 	sts	0x0AE7, r1
    6326:	02 c0       	rjmp	.+4      	; 0x632c <free+0x11e>
    6328:	13 82       	std	Z+3, r1	; 0x03
    632a:	12 82       	std	Z+2, r1	; 0x02
    632c:	10 93 e6 0a 	sts	0x0AE6, r17
    6330:	00 93 e5 0a 	sts	0x0AE5, r16
    6334:	df 91       	pop	r29
    6336:	cf 91       	pop	r28
    6338:	1f 91       	pop	r17
    633a:	0f 91       	pop	r16
    633c:	08 95       	ret

0000633e <memset>:
    633e:	dc 01       	movw	r26, r24
    6340:	01 c0       	rjmp	.+2      	; 0x6344 <memset+0x6>
    6342:	6d 93       	st	X+, r22
    6344:	41 50       	subi	r20, 0x01	; 1
    6346:	50 40       	sbci	r21, 0x00	; 0
    6348:	e0 f7       	brcc	.-8      	; 0x6342 <memset+0x4>
    634a:	08 95       	ret

0000634c <__mulshisi3>:
    634c:	b7 ff       	sbrs	r27, 7
    634e:	0c 94 64 2d 	jmp	0x5ac8	; 0x5ac8 <__muluhisi3>

00006352 <__mulohisi3>:
    6352:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <__muluhisi3>
    6356:	82 1b       	sub	r24, r18
    6358:	93 0b       	sbc	r25, r19
    635a:	08 95       	ret

0000635c <__divmodsi4>:
    635c:	05 2e       	mov	r0, r21
    635e:	97 fb       	bst	r25, 7
    6360:	1e f4       	brtc	.+6      	; 0x6368 <__divmodsi4+0xc>
    6362:	00 94       	com	r0
    6364:	0e 94 c5 31 	call	0x638a	; 0x638a <__negsi2>
    6368:	57 fd       	sbrc	r21, 7
    636a:	07 d0       	rcall	.+14     	; 0x637a <__divmodsi4_neg2>
    636c:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__udivmodsi4>
    6370:	07 fc       	sbrc	r0, 7
    6372:	03 d0       	rcall	.+6      	; 0x637a <__divmodsi4_neg2>
    6374:	4e f4       	brtc	.+18     	; 0x6388 <__divmodsi4_exit>
    6376:	0c 94 c5 31 	jmp	0x638a	; 0x638a <__negsi2>

0000637a <__divmodsi4_neg2>:
    637a:	50 95       	com	r21
    637c:	40 95       	com	r20
    637e:	30 95       	com	r19
    6380:	21 95       	neg	r18
    6382:	3f 4f       	sbci	r19, 0xFF	; 255
    6384:	4f 4f       	sbci	r20, 0xFF	; 255
    6386:	5f 4f       	sbci	r21, 0xFF	; 255

00006388 <__divmodsi4_exit>:
    6388:	08 95       	ret

0000638a <__negsi2>:
    638a:	90 95       	com	r25
    638c:	80 95       	com	r24
    638e:	70 95       	com	r23
    6390:	61 95       	neg	r22
    6392:	7f 4f       	sbci	r23, 0xFF	; 255
    6394:	8f 4f       	sbci	r24, 0xFF	; 255
    6396:	9f 4f       	sbci	r25, 0xFF	; 255
    6398:	08 95       	ret

0000639a <_exit>:
    639a:	f8 94       	cli

0000639c <__stop_program>:
    639c:	ff cf       	rjmp	.-2      	; 0x639c <__stop_program>

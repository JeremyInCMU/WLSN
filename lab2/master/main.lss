
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800200  0000609a  0000612e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000609a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000568  008003da  008003da  00006308  2**0
                  ALLOC
  3 .stab         000120b4  00000000  00000000  00006308  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009459  00000000  00000000  000183bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00021815  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00021826  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00022986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000239f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00023a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 03 	jmp	0x604	; 0x604 <__ctors_end>
       4:	0c 94 88 28 	jmp	0x5110	; 0x5110 <__vector_1>
       8:	0c 94 ba 28 	jmp	0x5174	; 0x5174 <__vector_2>
       c:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <__vector_3>
      10:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      14:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      18:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      1c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      20:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      24:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__vector_9>
      28:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      2c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      30:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      34:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__vector_13>
      38:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      3c:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__vector_13>
      40:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      44:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      48:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      4c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      50:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      54:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      58:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      5c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      60:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      64:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__vector_25>
      68:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      6c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      70:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      74:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      78:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      7c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      80:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__vector_32>
      84:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      88:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      8c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      90:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      94:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      98:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      9c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      a0:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      a4:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      a8:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      ac:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      b0:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      b4:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      b8:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      bc:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      c0:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      c4:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      c8:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      cc:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      d0:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      d4:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      d8:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      dc:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      e0:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
      e4:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__vector_57>
      e8:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_58>
      ec:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_59>
      f0:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_60>
      f4:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__vector_61>
      f8:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_62>
      fc:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_63>
     100:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__vector_64>
     104:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     108:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     10c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     110:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     114:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     118:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     11c:	0c 94 21 03 	jmp	0x642	; 0x642 <__bad_interrupt>
     120:	53 10       	cpse	r5, r3
     122:	60 10       	cpse	r6, r0
     124:	6d 10       	cpse	r6, r13
     126:	7a 10       	cpse	r7, r10
     128:	87 10       	cpse	r8, r7
     12a:	94 10       	cpse	r9, r4
     12c:	a1 10       	cpse	r10, r1
     12e:	c4 10       	cpse	r12, r4
     130:	d2 10       	cpse	r13, r2
     132:	e0 10       	cpse	r14, r0
     134:	ee 10       	cpse	r14, r14
     136:	fc 10       	cpse	r15, r12
     138:	0a 11       	cpse	r16, r10
     13a:	0a 11       	cpse	r16, r10
     13c:	2d 11       	cpse	r18, r13
     13e:	2f 11       	cpse	r18, r15
     140:	31 11       	cpse	r19, r1
     142:	33 11       	cpse	r19, r3
     144:	35 11       	cpse	r19, r5
     146:	37 11       	cpse	r19, r7
     148:	39 11       	cpse	r19, r9
     14a:	58 11       	cpse	r21, r8
     14c:	7b 11       	cpse	r23, r11
     14e:	9f 11       	cpse	r25, r15
     150:	c2 11       	cpse	r28, r2
     152:	e5 11       	cpse	r30, r5
     154:	08 12       	cpse	r0, r24
     156:	2b 12       	cpse	r2, r27
     158:	65 12       	cpse	r6, r21
     15a:	72 12       	cpse	r7, r18
     15c:	7f 12       	cpse	r7, r31
     15e:	8c 12       	cpse	r8, r28
     160:	99 12       	cpse	r9, r25
     162:	a6 12       	cpse	r10, r22
     164:	b3 12       	cpse	r11, r19
     166:	cc 12       	cpse	r12, r28
     168:	d9 12       	cpse	r13, r25
     16a:	e6 12       	cpse	r14, r22
     16c:	f3 12       	cpse	r15, r19
     16e:	00 13       	cpse	r16, r16
     170:	0d 13       	cpse	r16, r29
     172:	1a 13       	cpse	r17, r26
     174:	ac 16       	cp	r10, r28
     176:	b2 16       	cp	r11, r18
     178:	b5 16       	cp	r11, r21
     17a:	b8 16       	cp	r11, r24
     17c:	bb 16       	cp	r11, r27
     17e:	be 16       	cp	r11, r30
     180:	c4 16       	cp	r12, r20
     182:	c1 16       	cp	r12, r17
     184:	c7 16       	cp	r12, r23
     186:	ca 16       	cp	r12, r26
     188:	cd 16       	cp	r12, r29
     18a:	d6 16       	cp	r13, r22
     18c:	d9 16       	cp	r13, r25
     18e:	dc 16       	cp	r13, r28
     190:	df 16       	cp	r13, r31
     192:	d3 16       	cp	r13, r19
     194:	a9 16       	cp	r10, r25
     196:	af 16       	cp	r10, r31
     198:	e2 16       	cp	r14, r18
     19a:	e5 16       	cp	r14, r21
     19c:	d0 16       	cp	r13, r16
     19e:	a6 16       	cp	r10, r22
     1a0:	7c 17       	cp	r23, r28
     1a2:	7f 17       	cp	r23, r31
     1a4:	8a 17       	cp	r24, r26
     1a6:	8f 17       	cp	r24, r31
     1a8:	96 17       	cp	r25, r22
     1aa:	9f 17       	cp	r25, r31
     1ac:	a2 17       	cp	r26, r18
     1ae:	a7 17       	cp	r26, r23
     1b0:	ae 17       	cp	r26, r30
     1b2:	b7 17       	cp	r27, r23

000001b4 <__trampolines_end>:
     1b4:	54 68       	ori	r21, 0x84	; 132
     1b6:	65 20       	and	r6, r5
     1b8:	47 61       	ori	r20, 0x17	; 23
     1ba:	6d 65       	ori	r22, 0x5D	; 93
     1bc:	20 69       	ori	r18, 0x90	; 144
     1be:	73 20       	and	r7, r3
     1c0:	4f 76       	andi	r20, 0x6F	; 111
     1c2:	65 72       	andi	r22, 0x25	; 37
     1c4:	2e 0d       	add	r18, r14
     1c6:	0a 00       	.word	0x000a	; ????

000001c8 <__c.3615>:
     1c8:	21 20 4d 6f 6c 65 20 77 68 61 63 6b 65 64 20 21     ! Mole whacked !
     1d8:	0d 0a 00                                            ...

000001db <__c.3613>:
     1db:	21 20 4d 6f 6c 65 20 74 69 6d 65 64 20 6f 75 74     ! Mole timed out
     1eb:	20 21 0d 0a 00                                       !...

000001f0 <__c.3607>:
     1f0:	21 20 4d 61 78 20 74 69 6d 65 6f 75 74 20 63 6f     ! Max timeout co
     200:	75 6e 74 20 72 65 61 63 68 65 64 20 21 0d 0a 00     unt reached !...

00000210 <__c.3605>:
     210:	52 78 20 54 69 6d 65 64 20 4f 75 74 21 0d 0a 00     Rx Timed Out!...

00000220 <__c.3598>:
     220:	2d 3e 20 57 48 41 43 4b 45 44 20 52 65 71 75 65     -> WHACKED Reque
     230:	73 74 2e 0d 0a 00                                   st....

00000236 <__c.3596>:
     236:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     246:	69 74 21 0d 0a 00                                   it!...

0000024c <__c.3594>:
     24c:	2d 3e 20 4d 4f 4c 45 20 72 65 71 75 65 73 74 0d     -> MOLE request.
     25c:	0a 00                                               ..

0000025e <__c.3592>:
     25e:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     26e:	69 74 21 0d 0a 00                                   it!...

00000274 <__c.3590>:
     274:	2d 3e 20 50 4f 4c 4c 20 72 65 71 75 65 73 74 0d     -> POLL request.
     284:	0a 00                                               ..

00000286 <__c.3588>:
     286:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     296:	69 74 21 0d 0a 00                                   it!...

0000029c <__c.3584>:
     29c:	50 72 65 73 73 20 27 73 27 20 74 6f 20 73 74 61     Press 's' to sta
     2ac:	72 74 0d 0a 00                                      rt...

000002b1 <__c.3762>:
     2b1:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     2c1:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

000002cd <__c.3736>:
     2cd:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     2dd:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     2ed:	0d 0a 00                                            ...

000002f0 <__c.3734>:
     2f0:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     300:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     310:	74 0d 0a 00                                         t...

00000314 <__c.3718>:
     314:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     324:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     334:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000340 <__c.3716>:
     340:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     350:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     360:	61 69 6c 65 64 0d 0a 00                             ailed...

00000368 <__c.3714>:
     368:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     378:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     388:	61 69 6c 65 64 0d 0a 00                             ailed...

00000390 <__c.3125>:
     390:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     3a0:	65 64 0d 0a 00                                      ed...

000003a5 <__c.3381>:
     3a5:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000003ac <__c.3378>:
     3ac:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000003bb <__c.3375>:
     3bb:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000003cc <__c.3372>:
     3cc:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3dc:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000003e7 <__c.3369>:
     3e7:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3f7:	20 53 69 67 6e 61 6c 00                              Signal.

000003ff <__c.3366>:
     3ff:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     40f:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000041f <__c.3363>:
     41f:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     42f:	72 6f 72 00                                         ror.

00000433 <__c.3360>:
     433:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000444 <__c.3357>:
     444:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     454:	61 72 74 00                                         art.

00000458 <__c.3354>:
     458:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000467 <__c.3351>:
     467:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     477:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000482 <__c.3348>:
     482:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000048e <__c.3345>:
     48e:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     49e:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     4ae:	20 6f 6b 3f 00                                       ok?.

000004b3 <__c.3342>:
     4b3:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     4c3:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000004d1 <__c.3339>:
     4d1:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     4e1:	72 74 00                                            rt.

000004e4 <__c.3336>:
     4e4:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     4f4:	49 44 00                                            ID.

000004f7 <__c.3333>:
     4f7:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     507:	20 57 61 6b 65 75 70 00                              Wakeup.

0000050f <__c.3330>:
     50f:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     51f:	6c 61 74 65 64 00                                   lated.

00000525 <__c.3327>:
     525:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     535:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000540 <__c.3324>:
     540:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     550:	69 6e 74 65 72 00                                   inter.

00000556 <__c.3321>:
     556:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     566:	6c 6f 77 00                                         low.

0000056a <__c.3318>:
     56a:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     57a:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     58a:	6e 6f 75 67 68 21 00                                nough!.

00000591 <__c.3314>:
     591:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     5a1:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     5b1:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     5c1:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000005cd <__c.3311>:
     5cd:	29 3a 20 00                                         ): .

000005d1 <__c.3309>:
     5d1:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000005dd <__c.3246>:
     5dd:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000005ec <__c.2228>:
     5ec:	45 46 47 65 66 67 00                                EFGefg.

000005f3 <__c.2222>:
     5f3:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000604 <__ctors_end>:
     604:	11 24       	eor	r1, r1
     606:	1f be       	out	0x3f, r1	; 63
     608:	cf ef       	ldi	r28, 0xFF	; 255
     60a:	d1 e4       	ldi	r29, 0x41	; 65
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	cd bf       	out	0x3d, r28	; 61

00000610 <__do_copy_data>:
     610:	13 e0       	ldi	r17, 0x03	; 3
     612:	a0 e0       	ldi	r26, 0x00	; 0
     614:	b2 e0       	ldi	r27, 0x02	; 2
     616:	ea e9       	ldi	r30, 0x9A	; 154
     618:	f0 e6       	ldi	r31, 0x60	; 96
     61a:	00 e0       	ldi	r16, 0x00	; 0
     61c:	0b bf       	out	0x3b, r16	; 59
     61e:	02 c0       	rjmp	.+4      	; 0x624 <__do_copy_data+0x14>
     620:	07 90       	elpm	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	aa 3d       	cpi	r26, 0xDA	; 218
     626:	b1 07       	cpc	r27, r17
     628:	d9 f7       	brne	.-10     	; 0x620 <__do_copy_data+0x10>

0000062a <__do_clear_bss>:
     62a:	19 e0       	ldi	r17, 0x09	; 9
     62c:	aa ed       	ldi	r26, 0xDA	; 218
     62e:	b3 e0       	ldi	r27, 0x03	; 3
     630:	01 c0       	rjmp	.+2      	; 0x634 <.do_clear_bss_start>

00000632 <.do_clear_bss_loop>:
     632:	1d 92       	st	X+, r1

00000634 <.do_clear_bss_start>:
     634:	a2 34       	cpi	r26, 0x42	; 66
     636:	b1 07       	cpc	r27, r17
     638:	e1 f7       	brne	.-8      	; 0x632 <.do_clear_bss_loop>
     63a:	0e 94 14 2a 	call	0x5428	; 0x5428 <main>
     63e:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <_exit>

00000642 <__bad_interrupt>:
     642:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__vector_default>

00000646 <whacky_task>:
    
    return 0;
}

void whacky_task ()
{
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	e7 97       	sbiw	r28, 0x37	; 55
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61

    //Timer management for receiving timeout
    nrk_time_t start_time_receive, end_time_receive;
    nrk_time_t start_time_mole, end_time_mole;
    nrk_time_t time_rx, time_tx;
    srand(time(NULL));
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 01 2a 	call	0x5402	; 0x5402 <time>
     662:	0e 94 ac 2c 	call	0x5958	; 0x5958 <srand>

    // printf ("whacky_task PID=%d\r\n", nrk_get_pid ());
    
    // This shows you how to wait until a key is pressed to start
    nrk_kprintf( PSTR("Press 's' to start\r\n" ));
     666:	8c e9       	ldi	r24, 0x9C	; 156
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
    
    // Get the signal for UART RX
    uart_rx_signal=nrk_uart_rx_signal_get();
     66e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <nrk_uart_rx_signal_get>
     672:	18 2f       	mov	r17, r24

    // Register task to wait on signal
    nrk_signal_register(uart_rx_signal);
     674:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
        if(nrk_uart_data_ready(NRK_DEFAULT_UART))
        {
            option=getchar();
        }

        else nrk_event_wait(SIG(uart_rx_signal));
     678:	c1 2c       	mov	r12, r1
     67a:	d1 2c       	mov	r13, r1
     67c:	76 01       	movw	r14, r12
     67e:	c3 94       	inc	r12
     680:	04 c0       	rjmp	.+8      	; 0x68a <whacky_task+0x44>
     682:	cc 0c       	add	r12, r12
     684:	dd 1c       	adc	r13, r13
     686:	ee 1c       	adc	r14, r14
     688:	ff 1c       	adc	r15, r15
     68a:	1a 95       	dec	r17
     68c:	d2 f7       	brpl	.-12     	; 0x682 <whacky_task+0x3c>

    // Register task to wait on signal
    nrk_signal_register(uart_rx_signal);
    
    do{
        if(nrk_uart_data_ready(NRK_DEFAULT_UART))
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <nrk_uart_data_ready>
     694:	88 23       	and	r24, r24
     696:	41 f1       	breq	.+80     	; 0x6e8 <whacky_task+0xa2>
        {
            option=getchar();
     698:	80 91 34 09 	lds	r24, 0x0934
     69c:	90 91 35 09 	lds	r25, 0x0935
     6a0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <fgetc>
        }

        else nrk_event_wait(SIG(uart_rx_signal));

    } while(option!='s');
     6a4:	83 37       	cpi	r24, 0x73	; 115
     6a6:	99 f7       	brne	.-26     	; 0x68e <whacky_task+0x48>
    
    // init bmac on channel 12 and max power
    bmac_init (12);
     6a8:	8c e0       	ldi	r24, 0x0C	; 12
     6aa:	0e 94 dd 06 	call	0xdba	; 0xdba <bmac_init>
    bmac_set_rf_power(32);
     6ae:	80 e2       	ldi	r24, 0x20	; 32
     6b0:	0e 94 77 06 	call	0xcee	; 0xcee <bmac_set_rf_power>
    
    // This sets the next RX buffer.
    // This can be called at anytime before releasing the packet
    // if you wish to do a zero-copy buffer switch
    bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     6b4:	64 e7       	ldi	r22, 0x74	; 116
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	94 e0       	ldi	r25, 0x04	; 4
     6ba:	0e 94 cf 06 	call	0xd9e	; 0xd9e <bmac_rx_pkt_set_buffer>
    
    // initialize the slave id
    slave_id = rand() % NUM_SLAVES;
     6be:	0e 94 a8 2c 	call	0x5950	; 0x5950 <rand>
     6c2:	62 e0       	ldi	r22, 0x02	; 2
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__divmodhi4>
     6ca:	18 2f       	mov	r17, r24
    nrk_sig_t uart_rx_signal;

    uint16_t slave_id_received; // slave id received from the slave
    uint16_t light_value;       // light value received from the slave during polling state

    uint8_t timeout_counts = 0;
     6cc:	00 e0       	ldi	r16, 0x00	; 0
    uint8_t i, len;
    int8_t rssi, val;
    uint8_t *local_buf;
    uint8_t slave_id;
    uint8_t timeout;
    uint8_t mole_timeout = 0; // set to 1 if the mole timed out, set to 0 otherwise
     6ce:	1b aa       	std	Y+51, r1	; 0x33
            }
            
            // Implement timeouts
            nrk_time_get(&end_time_receive);
            nrk_time_get(&time_rx);
            printf("time_rx: %lu\r\n",time_rx.secs);
     6d0:	51 e7       	ldi	r21, 0x71	; 113
     6d2:	25 2e       	mov	r2, r21
     6d4:	52 e0       	ldi	r21, 0x02	; 2
     6d6:	35 2e       	mov	r3, r21
                    break;
                }
            }
            else
            {
                if(((end_time_receive.secs-start_time_receive.secs)*1000-(start_time_receive.nano_secs-end_time_receive.nano_secs)/1000000) > 1000)
     6d8:	60 e4       	ldi	r22, 0x40	; 64
     6da:	46 2e       	mov	r4, r22
     6dc:	62 e4       	ldi	r22, 0x42	; 66
     6de:	56 2e       	mov	r5, r22
     6e0:	6f e0       	ldi	r22, 0x0F	; 15
     6e2:	66 2e       	mov	r6, r22
     6e4:	71 2c       	mov	r7, r1
     6e6:	96 c0       	rjmp	.+300    	; 0x814 <whacky_task+0x1ce>
        if(nrk_uart_data_ready(NRK_DEFAULT_UART))
        {
            option=getchar();
        }

        else nrk_event_wait(SIG(uart_rx_signal));
     6e8:	c7 01       	movw	r24, r14
     6ea:	b6 01       	movw	r22, r12
     6ec:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_event_wait>
     6f0:	ce cf       	rjmp	.-100    	; 0x68e <whacky_task+0x48>
                bmac_rx_pkt_release ();
                break;
            }
            
            // Implement timeouts
            nrk_time_get(&end_time_receive);
     6f2:	ce 01       	movw	r24, r28
     6f4:	81 96       	adiw	r24, 0x21	; 33
     6f6:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
            nrk_time_get(&time_rx);
     6fa:	ce 01       	movw	r24, r28
     6fc:	09 96       	adiw	r24, 0x09	; 9
     6fe:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
            printf("time_rx: %lu\r\n",time_rx.secs);
     702:	8c 85       	ldd	r24, Y+12	; 0x0c
     704:	8f 93       	push	r24
     706:	8b 85       	ldd	r24, Y+11	; 0x0b
     708:	8f 93       	push	r24
     70a:	8a 85       	ldd	r24, Y+10	; 0x0a
     70c:	8f 93       	push	r24
     70e:	89 85       	ldd	r24, Y+9	; 0x09
     710:	8f 93       	push	r24
     712:	3f 92       	push	r3
     714:	2f 92       	push	r2
     716:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
            printf("time_rx: %lu\r\n",time_rx.nano_secs);
     71a:	88 89       	ldd	r24, Y+16	; 0x10
     71c:	8f 93       	push	r24
     71e:	8f 85       	ldd	r24, Y+15	; 0x0f
     720:	8f 93       	push	r24
     722:	8e 85       	ldd	r24, Y+14	; 0x0e
     724:	8f 93       	push	r24
     726:	8d 85       	ldd	r24, Y+13	; 0x0d
     728:	8f 93       	push	r24
     72a:	3f 92       	push	r3
     72c:	2f 92       	push	r2
     72e:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
            // printf("%d \r\n",(end_time_receive.secs-start_time_receive.secs)*1000-(start_time_receive.nano_secs-end_time_receive.nano_secs)/1000000);
            if(end_time_receive.nano_secs > start_time_receive.nano_secs)
     732:	8d a0       	ldd	r8, Y+37	; 0x25
     734:	9e a0       	ldd	r9, Y+38	; 0x26
     736:	af a0       	ldd	r10, Y+39	; 0x27
     738:	b8 a4       	ldd	r11, Y+40	; 0x28
     73a:	cd a4       	ldd	r12, Y+45	; 0x2d
     73c:	de a4       	ldd	r13, Y+46	; 0x2e
     73e:	ef a4       	ldd	r14, Y+47	; 0x2f
     740:	f8 a8       	ldd	r15, Y+48	; 0x30
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
            {

                if(((end_time_receive.secs-start_time_receive.secs)*1000+(end_time_receive.nano_secs-start_time_receive.nano_secs)/1000000) > 1000)
     74c:	49 a1       	ldd	r20, Y+33	; 0x21
     74e:	5a a1       	ldd	r21, Y+34	; 0x22
     750:	6b a1       	ldd	r22, Y+35	; 0x23
     752:	7c a1       	ldd	r23, Y+36	; 0x24
     754:	89 a5       	ldd	r24, Y+41	; 0x29
     756:	9a a5       	ldd	r25, Y+42	; 0x2a
     758:	ab a5       	ldd	r26, Y+43	; 0x2b
     75a:	bc a5       	ldd	r27, Y+44	; 0x2c
     75c:	9a 01       	movw	r18, r20
     75e:	ab 01       	movw	r20, r22
     760:	28 1b       	sub	r18, r24
     762:	39 0b       	sbc	r19, r25
     764:	4a 0b       	sbc	r20, r26
     766:	5b 0b       	sbc	r21, r27
     768:	a8 ee       	ldi	r26, 0xE8	; 232
     76a:	b3 e0       	ldi	r27, 0x03	; 3
     76c:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
     770:	6c ab       	std	Y+52, r22	; 0x34
     772:	7d ab       	std	Y+53, r23	; 0x35
     774:	8e ab       	std	Y+54, r24	; 0x36
     776:	9f ab       	std	Y+55, r25	; 0x37
            nrk_time_get(&end_time_receive);
            nrk_time_get(&time_rx);
            printf("time_rx: %lu\r\n",time_rx.secs);
            printf("time_rx: %lu\r\n",time_rx.nano_secs);
            // printf("%d \r\n",(end_time_receive.secs-start_time_receive.secs)*1000-(start_time_receive.nano_secs-end_time_receive.nano_secs)/1000000);
            if(end_time_receive.nano_secs > start_time_receive.nano_secs)
     778:	c8 14       	cp	r12, r8
     77a:	d9 04       	cpc	r13, r9
     77c:	ea 04       	cpc	r14, r10
     77e:	fb 04       	cpc	r15, r11
     780:	08 f0       	brcs	.+2      	; 0x784 <whacky_task+0x13e>
     782:	24 c1       	rjmp	.+584    	; 0x9cc <whacky_task+0x386>
            {

                if(((end_time_receive.secs-start_time_receive.secs)*1000+(end_time_receive.nano_secs-start_time_receive.nano_secs)/1000000) > 1000)
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	6c 19       	sub	r22, r12
     78a:	7d 09       	sbc	r23, r13
     78c:	8e 09       	sbc	r24, r14
     78e:	9f 09       	sbc	r25, r15
     790:	a3 01       	movw	r20, r6
     792:	92 01       	movw	r18, r4
     794:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
     798:	8c a9       	ldd	r24, Y+52	; 0x34
     79a:	9d a9       	ldd	r25, Y+53	; 0x35
     79c:	ae a9       	ldd	r26, Y+54	; 0x36
     79e:	bf a9       	ldd	r27, Y+55	; 0x37
     7a0:	82 0f       	add	r24, r18
     7a2:	93 1f       	adc	r25, r19
     7a4:	a4 1f       	adc	r26, r20
     7a6:	b5 1f       	adc	r27, r21
                    break;
                }
            }
            else
            {
                if(((end_time_receive.secs-start_time_receive.secs)*1000-(start_time_receive.nano_secs-end_time_receive.nano_secs)/1000000) > 1000)
     7a8:	89 3e       	cpi	r24, 0xE9	; 233
     7aa:	93 40       	sbci	r25, 0x03	; 3
     7ac:	a1 05       	cpc	r26, r1
     7ae:	b1 05       	cpc	r27, r1
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <whacky_task+0x16e>
     7b2:	ed c0       	rjmp	.+474    	; 0x98e <whacky_task+0x348>
        /*
         * If there's a timeout, don't execute any code code below and go back to while loop
         */ 
        if(timeout == 1)
        {
            nrk_kprintf(PSTR("Rx Timed Out!\r\n"));
     7b4:	80 e1       	ldi	r24, 0x10	; 16
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
            timeout_counts++;
     7bc:	0f 5f       	subi	r16, 0xFF	; 255
             * 
             * IMPORTANT: If there are only 2 slaves, this will cause a problem because if one of them is dead,
             * it leaves only one node and the while(1) below will spin infinitely because it can't choose a slave twice
             * in a row
             */
            if(timeout_counts >= MAX_TIMEOUT_COUNTS)
     7be:	05 30       	cpi	r16, 0x05	; 5
     7c0:	48 f1       	brcs	.+82     	; 0x814 <whacky_task+0x1ce>
            {
                nrk_kprintf( PSTR("! Max timeout count reached !\r\n" ));
     7c2:	80 ef       	ldi	r24, 0xF0	; 240
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
                // Set to mole state and choose a new slave_id
                state = STATE_MOLE;
     7ca:	10 92 da 03 	sts	0x03DA, r1

                // Ensure we never choose this slave again because its dead
                dead_devices[slave_id] = 1;
     7ce:	81 2f       	mov	r24, r17
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	fc 01       	movw	r30, r24
     7d4:	eb 58       	subi	r30, 0x8B	; 139
     7d6:	fa 4f       	sbci	r31, 0xFA	; 250
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	20 83       	st	Z, r18
                previous_slave_id = slave_id;
     7dc:	90 93 b9 04 	sts	0x04B9, r25
     7e0:	80 93 b8 04 	sts	0x04B8, r24

                // Choose new slave id
                while(1)
                {
                    slave_id = rand()%NUM_SLAVES;
     7e4:	02 e0       	ldi	r16, 0x02	; 2
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	0e 94 a8 2c 	call	0x5950	; 0x5950 <rand>
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__divmodhi4>

                    if((dead_devices[slave_id] == 0) && (slave_id != previous_slave_id) )  // This loop becomes an infinite loop when there is only one node left
     7f2:	9c 01       	movw	r18, r24
     7f4:	33 27       	eor	r19, r19
     7f6:	f9 01       	movw	r30, r18
     7f8:	eb 58       	subi	r30, 0x8B	; 139
     7fa:	fa 4f       	sbci	r31, 0xFA	; 250
     7fc:	40 81       	ld	r20, Z
     7fe:	41 11       	cpse	r20, r1
     800:	f3 cf       	rjmp	.-26     	; 0x7e8 <whacky_task+0x1a2>
     802:	40 91 b8 04 	lds	r20, 0x04B8
     806:	50 91 b9 04 	lds	r21, 0x04B9
     80a:	24 17       	cp	r18, r20
     80c:	35 07       	cpc	r19, r21
     80e:	61 f3       	breq	.-40     	; 0x7e8 <whacky_task+0x1a2>
                previous_slave_id = slave_id;

                // Choose new slave id
                while(1)
                {
                    slave_id = rand()%NUM_SLAVES;
     810:	18 2f       	mov	r17, r24
                    {
                        break;
                    }
                }

                timeout_counts = 0; // reset timeout counts for new slave device
     812:	00 e0       	ldi	r16, 0x00	; 0
        // printf("State: %d\r\n", state);

        /*
         * TRANSMIT BUFFER CONSTRUCTION BASED ON STATE
         */
        if(state == STATE_POLL)
     814:	80 91 da 03 	lds	r24, 0x03DA
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	69 f5       	brne	.+90     	; 0x876 <whacky_task+0x230>
        {
            sprintf (tx_buf, "POLL: %u", slave_id);
     81c:	1f 92       	push	r1
     81e:	1f 93       	push	r17
     820:	8b e5       	ldi	r24, 0x5B	; 91
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	47 e7       	ldi	r20, 0x77	; 119
     82a:	e4 2e       	mov	r14, r20
     82c:	45 e0       	ldi	r20, 0x05	; 5
     82e:	f4 2e       	mov	r15, r20
     830:	ff 92       	push	r15
     832:	ef 92       	push	r14
     834:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <sprintf>

            nrk_led_set (BLUE_LED);
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
            val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     840:	f7 01       	movw	r30, r14
     842:	01 90       	ld	r0, Z+
     844:	00 20       	and	r0, r0
     846:	e9 f7       	brne	.-6      	; 0x842 <whacky_task+0x1fc>
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	e7 57       	subi	r30, 0x77	; 119
     84c:	f5 40       	sbci	r31, 0x05	; 5
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	6e 0f       	add	r22, r30
     852:	c7 01       	movw	r24, r14
     854:	0e 94 71 07 	call	0xee2	; 0xee2 <bmac_tx_pkt>

            if(val != NRK_OK)
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	21 f0       	breq	.+8      	; 0x870 <whacky_task+0x22a>
            {
                nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     868:	86 e8       	ldi	r24, 0x86	; 134
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
            }

            // Task gets control again after TX complete
            nrk_kprintf (PSTR ("-> POLL request\r\n"));
     870:	84 e7       	ldi	r24, 0x74	; 116
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	7e c0       	rjmp	.+252    	; 0x972 <whacky_task+0x32c>
            nrk_led_clr (BLUE_LED);
        }
        else if(state == STATE_MOLE)
     876:	81 11       	cpse	r24, r1
     878:	4e c0       	rjmp	.+156    	; 0x916 <whacky_task+0x2d0>
        {
            sprintf (tx_buf, "MOLE: %u", slave_id);
     87a:	1f 92       	push	r1
     87c:	1f 93       	push	r17
     87e:	86 e8       	ldi	r24, 0x86	; 134
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	27 e7       	ldi	r18, 0x77	; 119
     888:	e2 2e       	mov	r14, r18
     88a:	25 e0       	ldi	r18, 0x05	; 5
     88c:	f2 2e       	mov	r15, r18
     88e:	ff 92       	push	r15
     890:	ef 92       	push	r14
     892:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <sprintf>

            nrk_led_set (BLUE_LED);
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
            val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     89e:	f7 01       	movw	r30, r14
     8a0:	01 90       	ld	r0, Z+
     8a2:	00 20       	and	r0, r0
     8a4:	e9 f7       	brne	.-6      	; 0x8a0 <whacky_task+0x25a>
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	e7 57       	subi	r30, 0x77	; 119
     8aa:	f5 40       	sbci	r31, 0x05	; 5
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	6e 0f       	add	r22, r30
     8b0:	c7 01       	movw	r24, r14
     8b2:	0e 94 71 07 	call	0xee2	; 0xee2 <bmac_tx_pkt>
     8b6:	d8 2e       	mov	r13, r24
            nrk_time_get(&time_tx);
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
            printf("time_Tx: %lu", time_tx.secs);
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	8f 93       	push	r24
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	8f 93       	push	r24
     8c8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ca:	8f 93       	push	r24
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	8f 93       	push	r24
     8d0:	34 e6       	ldi	r19, 0x64	; 100
     8d2:	e3 2e       	mov	r14, r19
     8d4:	32 e0       	ldi	r19, 0x02	; 2
     8d6:	f3 2e       	mov	r15, r19
     8d8:	ff 92       	push	r15
     8da:	ef 92       	push	r14
     8dc:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
            printf("time_Tx: %lu", time_tx.nano_secs);
     8e0:	88 85       	ldd	r24, Y+8	; 0x08
     8e2:	8f 93       	push	r24
     8e4:	8f 81       	ldd	r24, Y+7	; 0x07
     8e6:	8f 93       	push	r24
     8e8:	8e 81       	ldd	r24, Y+6	; 0x06
     8ea:	8f 93       	push	r24
     8ec:	8d 81       	ldd	r24, Y+5	; 0x05
     8ee:	8f 93       	push	r24
     8f0:	ff 92       	push	r15
     8f2:	ef 92       	push	r14
     8f4:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>

            if(val != NRK_OK)
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	d9 16       	cp	r13, r25
     906:	21 f0       	breq	.+8      	; 0x910 <whacky_task+0x2ca>
            {
                nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     908:	8e e5       	ldi	r24, 0x5E	; 94
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
            }

            // Task gets control again after TX complete
            nrk_kprintf (PSTR ("-> MOLE request\r\n"));
     910:	8c e4       	ldi	r24, 0x4C	; 76
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	2e c0       	rjmp	.+92     	; 0x972 <whacky_task+0x32c>
            nrk_led_clr (BLUE_LED);
        }
        else if(state == STATE_WHACKED)
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	91 f5       	brne	.+100    	; 0x97e <whacky_task+0x338>
        {
            sprintf (tx_buf, "WHACKED: %u", slave_id);
     91a:	1f 92       	push	r1
     91c:	1f 93       	push	r17
     91e:	83 e9       	ldi	r24, 0x93	; 147
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	97 e7       	ldi	r25, 0x77	; 119
     928:	e9 2e       	mov	r14, r25
     92a:	95 e0       	ldi	r25, 0x05	; 5
     92c:	f9 2e       	mov	r15, r25
     92e:	ff 92       	push	r15
     930:	ef 92       	push	r14
     932:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <sprintf>
            nrk_led_set (BLUE_LED);
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
            val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     93e:	f7 01       	movw	r30, r14
     940:	01 90       	ld	r0, Z+
     942:	00 20       	and	r0, r0
     944:	e9 f7       	brne	.-6      	; 0x940 <whacky_task+0x2fa>
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	e7 57       	subi	r30, 0x77	; 119
     94a:	f5 40       	sbci	r31, 0x05	; 5
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	6e 0f       	add	r22, r30
     950:	c7 01       	movw	r24, r14
     952:	0e 94 71 07 	call	0xee2	; 0xee2 <bmac_tx_pkt>

            if(val != NRK_OK)
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	21 f0       	breq	.+8      	; 0x96e <whacky_task+0x328>
            {
                nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     966:	86 e3       	ldi	r24, 0x36	; 54
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
            }

            // Task gets control again after TX complete
            nrk_kprintf (PSTR ("-> WHACKED Request.\r\n"));
     96e:	80 e2       	ldi	r24, 0x20	; 32
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
            nrk_led_clr (BLUE_LED);
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
            // error
        }
       
        // nrk_kprintf(PSTR("Waiting for Response\r\n"));
        // Get the RX packet
        nrk_led_set (ORANGE_LED);
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
        
        // Wait until an RX packet is received
        timeout = 0;

        // DEBUG_PRINTF(timeout);
        nrk_time_get(&start_time_receive);
     986:	ce 01       	movw	r24, r28
     988:	89 96       	adiw	r24, 0x29	; 41
     98a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
        /*
         *  Code takes care of receiving and sets timeout = 1 if there's a timeout receiving a packet
         */
        while(1)
        {
            if(bmac_rx_pkt_ready())
     98e:	0e 94 d7 07 	call	0xfae	; 0xfae <bmac_rx_pkt_ready>
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <whacky_task+0x352>
     996:	ad ce       	rjmp	.-678    	; 0x6f2 <whacky_task+0xac>
            {
                local_buf = bmac_rx_pkt_get (&len, &rssi);
     998:	be 01       	movw	r22, r28
     99a:	6f 5c       	subi	r22, 0xCF	; 207
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	ce 01       	movw	r24, r28
     9a0:	c2 96       	adiw	r24, 0x32	; 50
     9a2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <bmac_rx_pkt_get>
     9a6:	7c 01       	movw	r14, r24
                // printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
                for (i = 0; i < len; i++)
     9a8:	9a a9       	ldd	r25, Y+50	; 0x32
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	89 17       	cp	r24, r25
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <whacky_task+0x36e>
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	fc cf       	rjmp	.-8      	; 0x9ac <whacky_task+0x366>
                {
                    // printf ("%c", local_buf[i]);
                    // printf ("]\r\n");
                }
                
                nrk_led_clr (ORANGE_LED);
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
                // Release the RX buffer so future packets can arrive
                bmac_rx_pkt_release ();
     9bc:	0e 94 dd 07 	call	0xfba	; 0xfba <bmac_rx_pkt_release>
        }

        /*
         *  DECODE RECEIVED STRING
         */
        if(state == STATE_POLL)
     9c0:	80 91 da 03 	lds	r24, 0x03DA
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	09 f0       	breq	.+2      	; 0x9ca <whacky_task+0x384>
     9c8:	4e c0       	rjmp	.+156    	; 0xa66 <whacky_task+0x420>
     9ca:	13 c0       	rjmp	.+38     	; 0x9f2 <whacky_task+0x3ac>
                    break;
                }
            }
            else
            {
                if(((end_time_receive.secs-start_time_receive.secs)*1000-(start_time_receive.nano_secs-end_time_receive.nano_secs)/1000000) > 1000)
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	68 19       	sub	r22, r8
     9d2:	79 09       	sbc	r23, r9
     9d4:	8a 09       	sbc	r24, r10
     9d6:	9b 09       	sbc	r25, r11
     9d8:	a3 01       	movw	r20, r6
     9da:	92 01       	movw	r18, r4
     9dc:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
     9e0:	8c a9       	ldd	r24, Y+52	; 0x34
     9e2:	9d a9       	ldd	r25, Y+53	; 0x35
     9e4:	ae a9       	ldd	r26, Y+54	; 0x36
     9e6:	bf a9       	ldd	r27, Y+55	; 0x37
     9e8:	82 1b       	sub	r24, r18
     9ea:	93 0b       	sbc	r25, r19
     9ec:	a4 0b       	sbc	r26, r20
     9ee:	b5 0b       	sbc	r27, r21
     9f0:	db ce       	rjmp	.-586    	; 0x7a8 <whacky_task+0x162>
        /*
         *  DECODE RECEIVED STRING
         */
        if(state == STATE_POLL)
        {   
            slave_id_received = atoi(strtok((char*)local_buf,":"));
     9f2:	60 e8       	ldi	r22, 0x80	; 128
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	c7 01       	movw	r24, r14
     9f8:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <strtok>
     9fc:	0e 94 b7 2c 	call	0x596e	; 0x596e <atoi>
     a00:	7c 01       	movw	r14, r24

            // printf("%s\n", slave_id);
            light_value=atoi(strtok(NULL,"\n"));
     a02:	61 e5       	ldi	r22, 0x51	; 81
     a04:	73 e0       	ldi	r23, 0x03	; 3
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <strtok>
     a0e:	0e 94 b7 2c 	call	0x596e	; 0x596e <atoi>
     a12:	6c 01       	movw	r12, r24
            // printf("%s\n",light_value);

            // check length of time elapsed for each iteration of the loop
            nrk_time_get(&end_time_mole);
     a14:	ce 01       	movw	r24, r28
     a16:	41 96       	adiw	r24, 0x11	; 17
     a18:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>

            uint16_t poll_time_elapsed = end_time_mole.secs - start_time_mole.secs;
     a1c:	89 89       	ldd	r24, Y+17	; 0x11
     a1e:	9a 89       	ldd	r25, Y+18	; 0x12
     a20:	29 8d       	ldd	r18, Y+25	; 0x19
     a22:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a24:	82 1b       	sub	r24, r18
     a26:	93 0b       	sbc	r25, r19

            // Tell mole to whack itself, and set boolean to indicate to subtract from score 
            if(poll_time_elapsed > MOLE_TIMOUT_SECS)
     a28:	0b 97       	sbiw	r24, 0x0b	; 11
     a2a:	48 f0       	brcs	.+18     	; 0xa3e <whacky_task+0x3f8>
            {
                nrk_kprintf( PSTR("! Mole timed out !\r\n" ));
     a2c:	8b ed       	ldi	r24, 0xDB	; 219
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
                mole_timeout = 1;
                state = STATE_WHACKED;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 da 03 	sts	0x03DA, r24

            // Tell mole to whack itself, and set boolean to indicate to subtract from score 
            if(poll_time_elapsed > MOLE_TIMOUT_SECS)
            {
                nrk_kprintf( PSTR("! Mole timed out !\r\n" ));
                mole_timeout = 1;
     a3a:	8b ab       	std	Y+51, r24	; 0x33
     a3c:	b9 c0       	rjmp	.+370    	; 0xbb0 <whacky_task+0x56a>
                state = STATE_WHACKED;
            }
            else if ((light_value < 600) && (slave_id_received == slave_id))
     a3e:	98 e5       	ldi	r25, 0x58	; 88
     a40:	c9 16       	cp	r12, r25
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	d9 06       	cpc	r13, r25
     a46:	08 f0       	brcs	.+2      	; 0xa4a <whacky_task+0x404>
     a48:	b3 c0       	rjmp	.+358    	; 0xbb0 <whacky_task+0x56a>
     a4a:	81 2f       	mov	r24, r17
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	f9 06       	cpc	r15, r25
     a52:	09 f0       	breq	.+2      	; 0xa56 <whacky_task+0x410>
     a54:	ad c0       	rjmp	.+346    	; 0xbb0 <whacky_task+0x56a>
            {
                nrk_kprintf( PSTR("! Mole whacked !\r\n" ));
     a56:	88 ec       	ldi	r24, 0xC8	; 200
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
                state = STATE_WHACKED;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 da 03 	sts	0x03DA, r24
     a64:	a5 c0       	rjmp	.+330    	; 0xbb0 <whacky_task+0x56a>
            }

        }   
        else if(state == STATE_MOLE)
     a66:	81 11       	cpse	r24, r1
     a68:	27 c0       	rjmp	.+78     	; 0xab8 <whacky_task+0x472>
        {
            sprintf(buffer, "GOT_MOLE: %u", slave_id);
     a6a:	1f 92       	push	r1
     a6c:	1f 93       	push	r17
     a6e:	82 e8       	ldi	r24, 0x82	; 130
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	9f 93       	push	r25
     a74:	8f 93       	push	r24
     a76:	8a ee       	ldi	r24, 0xEA	; 234
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <sprintf>
            /**
              * Change to polling state if received string is equal to "GOT_MOLE: <slave_id>"
              */ 
            if (strcmp(buffer,(char*)local_buf)==0)
     a82:	b7 01       	movw	r22, r14
     a84:	8a ee       	ldi	r24, 0xEA	; 234
     a86:	94 e0       	ldi	r25, 0x04	; 4
     a88:	0e 94 ed 2c 	call	0x59da	; 0x59da <strcmp>
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	89 2b       	or	r24, r25
     a9a:	09 f0       	breq	.+2      	; 0xa9e <whacky_task+0x458>
     a9c:	89 c0       	rjmp	.+274    	; 0xbb0 <whacky_task+0x56a>
            {
                num_moles++;
     a9e:	80 91 dd 03 	lds	r24, 0x03DD
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	80 93 dd 03 	sts	0x03DD, r24
                state = STATE_POLL;
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	80 93 da 03 	sts	0x03DA, r24

                // start a timer here
                nrk_time_get(&start_time_mole);
     aae:	ce 01       	movw	r24, r28
     ab0:	49 96       	adiw	r24, 0x19	; 25
     ab2:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
     ab6:	7c c0       	rjmp	.+248    	; 0xbb0 <whacky_task+0x56a>
            }
        }
        else if(state == STATE_WHACKED)
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	09 f0       	breq	.+2      	; 0xabe <whacky_task+0x478>
     abc:	79 c0       	rjmp	.+242    	; 0xbb0 <whacky_task+0x56a>
        {
            sprintf(buffer,"GOT_WHACKED: %u", slave_id);
     abe:	c1 2e       	mov	r12, r17
     ac0:	d1 2c       	mov	r13, r1
     ac2:	1f 92       	push	r1
     ac4:	1f 93       	push	r17
     ac6:	8f e8       	ldi	r24, 0x8F	; 143
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	8a ee       	ldi	r24, 0xEA	; 234
     ad0:	94 e0       	ldi	r25, 0x04	; 4
     ad2:	9f 93       	push	r25
     ad4:	8f 93       	push	r24
     ad6:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <sprintf>

            /**
              * Change to polling state if received string is equal to "GOT_WHACKED: <slave_id>"
              */ 
            if (strcmp(buffer,(char*)local_buf)==0)
     ada:	b7 01       	movw	r22, r14
     adc:	8a ee       	ldi	r24, 0xEA	; 234
     ade:	94 e0       	ldi	r25, 0x04	; 4
     ae0:	0e 94 ed 2c 	call	0x59da	; 0x59da <strcmp>
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	89 2b       	or	r24, r25
     af2:	09 f0       	breq	.+2      	; 0xaf6 <whacky_task+0x4b0>
     af4:	5d c0       	rjmp	.+186    	; 0xbb0 <whacky_task+0x56a>
            {
                // Set previous slave id and find new one not equal to the old one
                previous_slave_id = slave_id;
     af6:	d0 92 b9 04 	sts	0x04B9, r13
     afa:	c0 92 b8 04 	sts	0x04B8, r12

                // Stop timer
                nrk_time_get(&end_time_mole);
     afe:	ce 01       	movw	r24, r28
     b00:	41 96       	adiw	r24, 0x11	; 17
     b02:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
                /*
                 * Choose new slave_id, ensuring we don't pick our previous one AND ensuring we don't pick a dead one
                 */
                while(1)
                {
                    slave_id = rand() % NUM_SLAVES;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	e8 2e       	mov	r14, r24
     b0a:	f1 2c       	mov	r15, r1
     b0c:	0e 94 a8 2c 	call	0x5950	; 0x5950 <rand>
     b10:	b7 01       	movw	r22, r14
     b12:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__divmodhi4>
     b16:	6c 01       	movw	r12, r24

                    // Only let this be the new slave_id if it's not dead and its not equal to the previous slave id
                    if((dead_devices[slave_id] == 0) && (slave_id != previous_slave_id)) 
     b18:	99 27       	eor	r25, r25
     b1a:	fc 01       	movw	r30, r24
     b1c:	eb 58       	subi	r30, 0x8B	; 139
     b1e:	fa 4f       	sbci	r31, 0xFA	; 250
     b20:	20 81       	ld	r18, Z
     b22:	21 11       	cpse	r18, r1
     b24:	f3 cf       	rjmp	.-26     	; 0xb0c <whacky_task+0x4c6>
     b26:	20 91 b8 04 	lds	r18, 0x04B8
     b2a:	30 91 b9 04 	lds	r19, 0x04B9
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	61 f3       	breq	.-40     	; 0xb0c <whacky_task+0x4c6>
                    {
                        break;
                    }
                }    

                uint16_t seconds_to_whack = end_time_mole.secs - start_time_mole.secs;
     b34:	e9 88       	ldd	r14, Y+17	; 0x11
     b36:	fa 88       	ldd	r15, Y+18	; 0x12
     b38:	89 8d       	ldd	r24, Y+25	; 0x19
     b3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b3c:	e8 1a       	sub	r14, r24
     b3e:	f9 0a       	sbc	r15, r25
                printf("Recieve time: %lu", seconds_to_whack);
     b40:	ff 92       	push	r15
     b42:	ef 92       	push	r14
     b44:	8f e9       	ldi	r24, 0x9F	; 159
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>

                if(mole_timeout == 0)
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	80 91 db 03 	lds	r24, 0x03DB
     b5c:	90 91 dc 03 	lds	r25, 0x03DC
     b60:	2b a9       	ldd	r18, Y+51	; 0x33
     b62:	21 11       	cpse	r18, r1
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <whacky_task+0x526>
                {
                    score += seconds_to_whack;
     b66:	8e 0d       	add	r24, r14
     b68:	9f 1d       	adc	r25, r15
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <whacky_task+0x528>
                }
                else
                {
                    score += MOLE_TIMEOUT_PENALTY;
     b6c:	44 96       	adiw	r24, 0x14	; 20
     b6e:	90 93 dc 03 	sts	0x03DC, r25
     b72:	80 93 db 03 	sts	0x03DB, r24
                /*
                 * Choose new slave_id, ensuring we don't pick our previous one AND ensuring we don't pick a dead one
                 */
                while(1)
                {
                    slave_id = rand() % NUM_SLAVES;
     b76:	1c 2d       	mov	r17, r12
                {
                    score += MOLE_TIMEOUT_PENALTY;
                    mole_timeout = 0;
                }

                state = STATE_MOLE;
     b78:	10 92 da 03 	sts	0x03DA, r1

                printf("Seconds to whack mole = %d\r\n", seconds_to_whack);
     b7c:	ff 92       	push	r15
     b7e:	ef 92       	push	r14
     b80:	81 eb       	ldi	r24, 0xB1	; 177
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
                printf("Your score after this turn is = %d\r\n", score);
     b8c:	80 91 dc 03 	lds	r24, 0x03DC
     b90:	8f 93       	push	r24
     b92:	80 91 db 03 	lds	r24, 0x03DB
     b96:	8f 93       	push	r24
     b98:	8e ec       	ldi	r24, 0xCE	; 206
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	1b aa       	std	Y+51, r1	; 0x33
        }
        
        /*
         * Only play MAX_NUM_MOLES times
         */
        if(num_moles >= MAX_NUM_MOLES)
     bb0:	80 91 dd 03 	lds	r24, 0x03DD
     bb4:	8a 30       	cpi	r24, 0x0A	; 10
     bb6:	08 f4       	brcc	.+2      	; 0xbba <whacky_task+0x574>
     bb8:	2d ce       	rjmp	.-934    	; 0x814 <whacky_task+0x1ce>
        {
            break;
        }
    }
    
    nrk_kprintf (PSTR ("The Game is Over.\r\n"));
     bba:	84 eb       	ldi	r24, 0xB4	; 180
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
    nrk_led_set (BLUE_LED);
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
    nrk_led_set (ORANGE_LED);
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
    nrk_led_set (RED_LED);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
    nrk_led_set (GREEN_LED);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>

    // Print out score achieved
    printf("FINAL SCORE: %d\n", score); 
     be2:	80 91 dc 03 	lds	r24, 0x03DC
     be6:	8f 93       	push	r24
     be8:	80 91 db 03 	lds	r24, 0x03DB
     bec:	8f 93       	push	r24
     bee:	83 ef       	ldi	r24, 0xF3	; 243
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0

    // Game over
    while(1);
     c02:	ff cf       	rjmp	.-2      	; 0xc02 <whacky_task+0x5bc>

00000c04 <nrk_create_taskset>:
}

void nrk_create_taskset ()
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
    WHACKY_TASK.task = whacky_task;
     c08:	ca eb       	ldi	r28, 0xBA	; 186
     c0a:	d4 e0       	ldi	r29, 0x04	; 4
     c0c:	83 e2       	ldi	r24, 0x23	; 35
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
    nrk_task_set_stk( &WHACKY_TASK, whacky_task_stack, NRK_APP_STACKSIZE);
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	51 e0       	ldi	r21, 0x01	; 1
     c18:	6d ee       	ldi	r22, 0xED	; 237
     c1a:	76 e0       	ldi	r23, 0x06	; 6
     c1c:	ce 01       	movw	r24, r28
     c1e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <nrk_task_set_stk>
    WHACKY_TASK.prio = 2;
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	88 87       	std	Y+8, r24	; 0x08
    WHACKY_TASK.FirstActivation = TRUE;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	8f 83       	std	Y+7, r24	; 0x07
    WHACKY_TASK.Type = BASIC_TASK;
     c2a:	89 87       	std	Y+9, r24	; 0x09
    WHACKY_TASK.SchType = PREEMPTIVE;
     c2c:	8a 87       	std	Y+10, r24	; 0x0a
    WHACKY_TASK.period.secs = 1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	8b 87       	std	Y+11, r24	; 0x0b
     c38:	9c 87       	std	Y+12, r25	; 0x0c
     c3a:	ad 87       	std	Y+13, r26	; 0x0d
     c3c:	be 87       	std	Y+14, r27	; 0x0e
    WHACKY_TASK.period.nano_secs = 0;
     c3e:	1f 86       	std	Y+15, r1	; 0x0f
     c40:	18 8a       	std	Y+16, r1	; 0x10
     c42:	19 8a       	std	Y+17, r1	; 0x11
     c44:	1a 8a       	std	Y+18, r1	; 0x12
    WHACKY_TASK.cpu_reserve.secs = 2;
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	8b 8b       	std	Y+19, r24	; 0x13
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	ad 8b       	std	Y+21, r26	; 0x15
     c54:	be 8b       	std	Y+22, r27	; 0x16
    WHACKY_TASK.cpu_reserve.nano_secs = 0;
     c56:	1f 8a       	std	Y+23, r1	; 0x17
     c58:	18 8e       	std	Y+24, r1	; 0x18
     c5a:	19 8e       	std	Y+25, r1	; 0x19
     c5c:	1a 8e       	std	Y+26, r1	; 0x1a
    WHACKY_TASK.offset.secs = 0;
     c5e:	1b 8e       	std	Y+27, r1	; 0x1b
     c60:	1c 8e       	std	Y+28, r1	; 0x1c
     c62:	1d 8e       	std	Y+29, r1	; 0x1d
     c64:	1e 8e       	std	Y+30, r1	; 0x1e
    WHACKY_TASK.offset.nano_secs = 0;
     c66:	1f 8e       	std	Y+31, r1	; 0x1f
     c68:	18 a2       	std	Y+32, r1	; 0x20
     c6a:	19 a2       	std	Y+33, r1	; 0x21
     c6c:	1a a2       	std	Y+34, r1	; 0x22
    nrk_activate_task (&WHACKY_TASK);
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 c2 1c 	call	0x3984	; 0x3984 <nrk_activate_task>
    
    nrk_kprintf ("Create done\r\n");
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
    WHACKY_TASK.cpu_reserve.nano_secs = 0;
    WHACKY_TASK.offset.secs = 0;
    WHACKY_TASK.offset.nano_secs = 0;
    nrk_activate_task (&WHACKY_TASK);
    
    nrk_kprintf ("Create done\r\n");
     c7c:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <nrk_kprintf>

00000c80 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     c80:	08 95       	ret

00000c82 <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     c82:	64 30       	cpi	r22, 0x04	; 4
     c84:	21 f4       	brne	.+8      	; 0xc8e <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     c86:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <rf_security_set_ctr_counter>
  return NRK_OK;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     c8e:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     c90:	08 95       	ret

00000c92 <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	08 95       	ret

00000c96 <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	08 95       	ret

00000c9c <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     c9c:	0e 94 39 0a 	call	0x1472	; 0x1472 <rf_auto_ack_disable>
  return NRK_OK;
}
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	08 95       	ret

00000ca4 <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     ca4:	0e 94 33 0a 	call	0x1466	; 0x1466 <rf_auto_ack_enable>
  return NRK_OK;
}
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	08 95       	ret

00000cac <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     cac:	0e 94 2d 0a 	call	0x145a	; 0x145a <rf_addr_decode_disable>
  return NRK_OK;
}
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	08 95       	ret

00000cb4 <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     cb4:	0e 94 27 0a 	call	0x144e	; 0x144e <rf_addr_decode_enable>
  return NRK_OK;
}
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	08 95       	ret

00000cbc <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     cbc:	0e 94 3f 0a 	call	0x147e	; 0x147e <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret

00000cc4 <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     cc4:	90 93 e0 04 	sts	0x04E0, r25
     cc8:	80 93 df 04 	sts	0x04DF, r24
  return NRK_OK;
}
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	08 95       	ret

00000cd0 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     cd0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <rf_security_last_pkt_status>
}
     cd4:	08 95       	ret

00000cd6 <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     cd6:	60 31       	cpi	r22, 0x10	; 16
     cd8:	21 f4       	brne	.+8      	; 0xce2 <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     cda:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <rf_security_set_key>
  return NRK_OK;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     ce4:	08 95       	ret

00000ce6 <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	08 95       	ret

00000cea <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	08 95       	ret

00000cee <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     cee:	80 32       	cpi	r24, 0x20	; 32
     cf0:	20 f4       	brcc	.+8      	; 0xcfa <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     cf2:	0e 94 1d 0a 	call	0x143a	; 0x143a <rf_tx_power>
  return NRK_OK;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     cfc:	08 95       	ret

00000cfe <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     cfe:	80 93 e7 03 	sts	0x03E7, r24
     d02:	08 95       	ret

00000d04 <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     d04:	99 27       	eor	r25, r25
     d06:	87 fd       	sbrc	r24, 7
     d08:	90 95       	com	r25
     d0a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <rf_set_cca_thresh>
  return NRK_OK;
}
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	08 95       	ret

00000d12 <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	1f 92       	push	r1
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     d1c:	8b 31       	cpi	r24, 0x1B	; 27
     d1e:	80 f4       	brcc	.+32     	; 0xd40 <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     d20:	80 93 f1 03 	sts	0x03F1, r24
  rf_power_up ();
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4f ef       	ldi	r20, 0xFF	; 255
     d30:	5f ef       	ldi	r21, 0xFF	; 255
     d32:	69 81       	ldd	r22, Y+1	; 0x01
     d34:	8b ee       	ldi	r24, 0xEB	; 235
     d36:	95 e0       	ldi	r25, 0x05	; 5
     d38:	0e 94 5f 0a 	call	0x14be	; 0x14be <rf_init>
  return NRK_OK;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     d40:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     d42:	0f 90       	pop	r0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     d4a:	80 91 f4 03 	lds	r24, 0x03F4
     d4e:	88 23       	and	r24, r24
     d50:	11 f1       	breq	.+68     	; 0xd96 <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     d52:	80 91 fe 04 	lds	r24, 0x04FE
     d56:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	00 90 fe 04 	lds	r0, 0x04FE
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <bmac_wait_until_rx_pkt+0x2a>
     d6c:	66 0f       	add	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	88 1f       	adc	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	d2 f7       	brpl	.-12     	; 0xd6c <bmac_wait_until_rx_pkt+0x22>
     d78:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	00 90 fe 04 	lds	r0, 0x04FE
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <bmac_wait_until_rx_pkt+0x44>
     d86:	b6 95       	lsr	r27
     d88:	a7 95       	ror	r26
     d8a:	97 95       	ror	r25
     d8c:	87 95       	ror	r24
     d8e:	0a 94       	dec	r0
     d90:	d2 f7       	brpl	.-12     	; 0xd86 <bmac_wait_until_rx_pkt+0x3c>
     d92:	80 ff       	sbrs	r24, 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     d9c:	08 95       	ret

00000d9e <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	51 f0       	breq	.+20     	; 0xdb6 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     da2:	90 93 f1 05 	sts	0x05F1, r25
     da6:	80 93 f0 05 	sts	0x05F0, r24
  bmac_rfRxInfo.max_length = size;
     daa:	60 93 ef 05 	sts	0x05EF, r22
  rx_buf_empty = 1;
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	80 93 f4 03 	sts	0x03F4, r24
  return NRK_OK;
     db4:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     db6:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     db8:	08 95       	ret

00000dba <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	18 2f       	mov	r17, r24
  bmac_running = 0;
     dc2:	10 92 f3 03 	sts	0x03F3, r1
  tx_reserve = -1;
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	80 93 e6 03 	sts	0x03E6, r24
  cca_active = true;
     dcc:	d1 e0       	ldi	r29, 0x01	; 1
     dce:	d0 93 e7 03 	sts	0x03E7, r29
  rx_failure_cnt = 0;
     dd2:	10 92 f6 03 	sts	0x03F6, r1
     dd6:	10 92 f7 03 	sts	0x03F7, r1
     dda:	10 92 f8 03 	sts	0x03F8, r1
     dde:	10 92 f9 03 	sts	0x03F9, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     de2:	10 92 e8 03 	sts	0x03E8, r1
     de6:	10 92 e9 03 	sts	0x03E9, r1
     dea:	10 92 ea 03 	sts	0x03EA, r1
     dee:	10 92 eb 03 	sts	0x03EB, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	91 ee       	ldi	r25, 0xE1	; 225
     df6:	a5 ef       	ldi	r26, 0xF5	; 245
     df8:	b5 e0       	ldi	r27, 0x05	; 5
     dfa:	80 93 ec 03 	sts	0x03EC, r24
     dfe:	90 93 ed 03 	sts	0x03ED, r25
     e02:	a0 93 ee 03 	sts	0x03EE, r26
     e06:	b0 93 ef 03 	sts	0x03EF, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
     e0a:	0e 94 bf 18 	call	0x317e	; 0x317e <nrk_signal_create>
     e0e:	c8 2f       	mov	r28, r24
     e10:	80 93 fe 04 	sts	0x04FE, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     e14:	8f 3f       	cpi	r24, 0xFF	; 255
     e16:	19 f4       	brne	.+6      	; 0xe1e <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     e18:	88 e6       	ldi	r24, 0x68	; 104
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     e1e:	0e 94 bf 18 	call	0x317e	; 0x317e <nrk_signal_create>
     e22:	c8 2f       	mov	r28, r24
     e24:	80 93 ec 06 	sts	0x06EC, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	69 f4       	brne	.+26     	; 0xe46 <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     e2c:	80 e4       	ldi	r24, 0x40	; 64
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     e34:	e0 91 09 09 	lds	r30, 0x0909
     e38:	f0 91 0a 09 	lds	r31, 0x090A
     e3c:	60 85       	ldd	r22, Z+8	; 0x08
     e3e:	8e e0       	ldi	r24, 0x0E	; 14
     e40:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
    return NRK_ERROR;
     e44:	2a c0       	rjmp	.+84     	; 0xe9a <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
     e46:	0e 94 bf 18 	call	0x317e	; 0x317e <nrk_signal_create>
     e4a:	c8 2f       	mov	r28, r24
     e4c:	80 93 de 04 	sts	0x04DE, r24
  if (bmac_enable_signal == NRK_ERROR) {
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	19 f4       	brne	.+6      	; 0xe5a <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     e54:	84 e1       	ldi	r24, 0x14	; 20
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	eb cf       	rjmp	.-42     	; 0xe30 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     e5a:	10 92 f5 03 	sts	0x03F5, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     e5e:	10 92 f4 03 	sts	0x03F4, r1
  bmac_rfRxInfo.pPayload = NULL;
     e62:	10 92 f1 05 	sts	0x05F1, r1
     e66:	10 92 f0 05 	sts	0x05F0, r1
  bmac_rfRxInfo.max_length = 0;
     e6a:	10 92 ef 05 	sts	0x05EF, r1

  // Setup the cc2420 chip
  rf_power_up ();
     e6e:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4f ef       	ldi	r20, 0xFF	; 255
     e78:	5f ef       	ldi	r21, 0xFF	; 255
     e7a:	61 2f       	mov	r22, r17
     e7c:	8b ee       	ldi	r24, 0xEB	; 235
     e7e:	95 e0       	ldi	r25, 0x05	; 5
     e80:	0e 94 5f 0a 	call	0x14be	; 0x14be <rf_init>
  g_chan = chan;
     e84:	10 93 f1 03 	sts	0x03F1, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <rf_set_cca_thresh>
  bmac_running = 1;
     e90:	d0 93 f3 03 	sts	0x03F3, r29
  is_enabled = 1;
     e94:	d0 93 f0 03 	sts	0x03F0, r29
  return NRK_OK;
     e98:	c1 e0       	ldi	r28, 0x01	; 1
}
     e9a:	8c 2f       	mov	r24, r28
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	08 95       	ret

00000ea4 <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     ea4:	20 91 f5 03 	lds	r18, 0x03F5
     ea8:	21 30       	cpi	r18, 0x01	; 1
     eaa:	59 f0       	breq	.+22     	; 0xec2 <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	20 93 f5 03 	sts	0x03F5, r18
  bmac_rfTxInfo.pPayload = buf;
     eb2:	90 93 e3 04 	sts	0x04E3, r25
     eb6:	80 93 e2 04 	sts	0x04E2, r24
  bmac_rfTxInfo.length = len;
     eba:	60 93 e1 04 	sts	0x04E1, r22
  return NRK_OK;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     ec4:	08 95       	ret

00000ec6 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     ec6:	80 91 fe 04 	lds	r24, 0x04FE
     eca:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     ece:	80 91 fe 04 	lds	r24, 0x04FE
     ed2:	08 95       	ret

00000ed4 <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     ed4:	80 91 ec 06 	lds	r24, 0x06EC
     ed8:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     edc:	80 91 ec 06 	lds	r24, 0x06EC
     ee0:	08 95       	ret

00000ee2 <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
     eea:	20 91 f5 03 	lds	r18, 0x03F5
     eee:	21 30       	cpi	r18, 0x01	; 1
     ef0:	f1 f1       	breq	.+124    	; 0xf6e <bmac_tx_pkt+0x8c>
     ef2:	f6 2e       	mov	r15, r22
     ef4:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     ef6:	80 91 ec 06 	lds	r24, 0x06EC
     efa:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
  tx_data_ready = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 f5 03 	sts	0x03F5, r24
  bmac_rfTxInfo.pPayload = buf;
     f04:	d0 92 e3 04 	sts	0x04E3, r13
     f08:	c0 92 e2 04 	sts	0x04E2, r12
  bmac_rfTxInfo.length = len;
     f0c:	f0 92 e1 04 	sts	0x04E1, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	00 90 ec 06 	lds	r0, 0x06EC
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <bmac_tx_pkt+0x48>
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	d2 f7       	brpl	.-12     	; 0xf22 <bmac_tx_pkt+0x40>
     f2e:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_event_wait>
     f32:	6b 01       	movw	r12, r22
     f34:	7c 01       	movw	r14, r24
  if (mask == 0)
     f36:	61 15       	cp	r22, r1
     f38:	71 05       	cpc	r23, r1
     f3a:	81 05       	cpc	r24, r1
     f3c:	91 05       	cpc	r25, r1
     f3e:	21 f4       	brne	.+8      	; 0xf48 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     f40:	80 ef       	ldi	r24, 0xF0	; 240
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     f48:	00 90 ec 06 	lds	r0, 0x06EC
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <bmac_tx_pkt+0x74>
     f4e:	f6 94       	lsr	r15
     f50:	e7 94       	ror	r14
     f52:	d7 94       	ror	r13
     f54:	c7 94       	ror	r12
     f56:	0a 94       	dec	r0
     f58:	d2 f7       	brpl	.-12     	; 0xf4e <bmac_tx_pkt+0x6c>
     f5a:	c0 fc       	sbrc	r12, 0
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     f5e:	8d ec       	ldi	r24, 0xCD	; 205
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
  if (pkt_got_ack)
     f66:	80 91 f2 03 	lds	r24, 0x03F2
     f6a:	81 11       	cpse	r24, r1
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
     f72:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	08 95       	ret

00000f7e <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
     f7e:	20 91 f4 03 	lds	r18, 0x03F4
     f82:	22 23       	and	r18, r18
     f84:	39 f0       	breq	.+14     	; 0xf94 <bmac_rx_pkt_get+0x16>
    *len = 0;
     f86:	fc 01       	movw	r30, r24
     f88:	10 82       	st	Z, r1
    *rssi = 0;
     f8a:	fb 01       	movw	r30, r22
     f8c:	10 82       	st	Z, r1
    return NULL;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
     f94:	20 91 ee 05 	lds	r18, 0x05EE
     f98:	fc 01       	movw	r30, r24
     f9a:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
     f9c:	80 91 f3 05 	lds	r24, 0x05F3
     fa0:	fb 01       	movw	r30, r22
     fa2:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
     fa4:	80 91 f0 05 	lds	r24, 0x05F0
     fa8:	90 91 f1 05 	lds	r25, 0x05F1
}
     fac:	08 95       	ret

00000fae <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 91 f4 03 	lds	r25, 0x03F4
     fb4:	91 11       	cpse	r25, r1
     fb6:	80 e0       	ldi	r24, 0x00	; 0
}
     fb8:	08 95       	ret

00000fba <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 f4 03 	sts	0x03F4, r24
  return NRK_OK;
}
     fc0:	08 95       	ret

00000fc2 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     fc2:	10 92 f0 03 	sts	0x03F0, r1
  rf_power_down ();
     fc6:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <rf_power_down>

00000fca <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 f0 03 	sts	0x03F0, r24
  rf_power_up ();
     fd0:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     fd4:	80 91 de 04 	lds	r24, 0x04DE
     fd8:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <nrk_event_signal>

00000fdc <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	28 97       	sbiw	r28, 0x08	; 8
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	29 83       	std	Y+1, r18	; 0x01
     ff2:	3a 83       	std	Y+2, r19	; 0x02
     ff4:	4b 83       	std	Y+3, r20	; 0x03
     ff6:	5c 83       	std	Y+4, r21	; 0x04
     ff8:	6d 83       	std	Y+5, r22	; 0x05
     ffa:	7e 83       	std	Y+6, r23	; 0x06
     ffc:	8f 83       	std	Y+7, r24	; 0x07
     ffe:	98 87       	std	Y+8, r25	; 0x08
    1000:	49 81       	ldd	r20, Y+1	; 0x01
    1002:	5a 81       	ldd	r21, Y+2	; 0x02
    1004:	6b 81       	ldd	r22, Y+3	; 0x03
    1006:	7c 81       	ldd	r23, Y+4	; 0x04
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	af 81       	ldd	r26, Y+7	; 0x07
    100e:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
    1010:	41 15       	cp	r20, r1
    1012:	51 05       	cpc	r21, r1
    1014:	61 05       	cpc	r22, r1
    1016:	71 05       	cpc	r23, r1
    1018:	41 f4       	brne	.+16     	; 0x102a <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    101a:	81 15       	cp	r24, r1
    101c:	2d e2       	ldi	r18, 0x2D	; 45
    101e:	92 07       	cpc	r25, r18
    1020:	21 e3       	ldi	r18, 0x31	; 49
    1022:	a2 07       	cpc	r26, r18
    1024:	21 e0       	ldi	r18, 0x01	; 1
    1026:	b2 07       	cpc	r27, r18
    1028:	90 f0       	brcs	.+36     	; 0x104e <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
    102a:	40 93 e8 03 	sts	0x03E8, r20
    102e:	50 93 e9 03 	sts	0x03E9, r21
    1032:	60 93 ea 03 	sts	0x03EA, r22
    1036:	70 93 eb 03 	sts	0x03EB, r23
  _bmac_check_period.nano_secs = period.nano_secs;
    103a:	80 93 ec 03 	sts	0x03EC, r24
    103e:	90 93 ed 03 	sts	0x03ED, r25
    1042:	a0 93 ee 03 	sts	0x03EE, r26
    1046:	b0 93 ef 03 	sts	0x03EF, r27
  return NRK_OK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
    104e:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
    1050:	28 96       	adiw	r28, 0x08	; 8
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
    1062:	80 91 f3 03 	lds	r24, 0x03F3
    1066:	08 95       	ret

00001068 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
    1068:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
    106a:	0e 94 cf 0a 	call	0x159e	; 0x159e <rf_rx_on>
  val += rf_cca_check ();
    106e:	0e 94 2f 0c 	call	0x185e	; 0x185e <rf_cca_check>
    1072:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
    1074:	0e 94 2f 0c 	call	0x185e	; 0x185e <rf_cca_check>
    1078:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
    107a:	0e 94 2f 0c 	call	0x185e	; 0x185e <rf_cca_check>
    107e:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
    1080:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <rf_rx_off>
    1084:	8c 2f       	mov	r24, r28
    1086:	1c 16       	cp	r1, r28
    1088:	0c f4       	brge	.+2      	; 0x108c <_bmac_channel_check+0x24>
    108a:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
    1090:	0e 94 cf 0a 	call	0x159e	; 0x159e <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
    1094:	10 92 de 03 	sts	0x03DE, r1
    1098:	10 92 df 03 	sts	0x03DF, r1
    109c:	10 92 e0 03 	sts	0x03E0, r1
    10a0:	10 92 e1 03 	sts	0x03E1, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	68 2f       	mov	r22, r24
    10a8:	80 93 e2 03 	sts	0x03E2, r24
    10ac:	8b e4       	ldi	r24, 0x4B	; 75
    10ae:	80 93 e3 03 	sts	0x03E3, r24
    10b2:	8c e4       	ldi	r24, 0x4C	; 76
    10b4:	80 93 e4 03 	sts	0x03E4, r24
    10b8:	10 92 e5 03 	sts	0x03E5, r1
  nrk_wait (dummy_t);
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 91 df 03 	lds	r19, 0x03DF
    10c2:	40 91 e0 03 	lds	r20, 0x03E0
    10c6:	50 91 e1 03 	lds	r21, 0x03E1
    10ca:	7b e4       	ldi	r23, 0x4B	; 75
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <nrk_wait>

  n = rf_rx_packet_nonblock ();
    10d2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	e9 f0       	breq	.+58     	; 0x1114 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
    10da:	80 91 f6 03 	lds	r24, 0x03F6
    10de:	90 91 f7 03 	lds	r25, 0x03F7
    10e2:	a0 91 f8 03 	lds	r26, 0x03F8
    10e6:	b0 91 f9 03 	lds	r27, 0x03F9
    10ea:	8f 3f       	cpi	r24, 0xFF	; 255
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	92 07       	cpc	r25, r18
    10f0:	a1 05       	cpc	r26, r1
    10f2:	b1 05       	cpc	r27, r1
    10f4:	58 f4       	brcc	.+22     	; 0x110c <_bmac_rx+0x7c>
      rx_failure_cnt++;
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	a1 1d       	adc	r26, r1
    10fa:	b1 1d       	adc	r27, r1
    10fc:	80 93 f6 03 	sts	0x03F6, r24
    1100:	90 93 f7 03 	sts	0x03F7, r25
    1104:	a0 93 f8 03 	sts	0x03F8, r26
    1108:	b0 93 f9 03 	sts	0x03F9, r27
    rf_rx_off ();
    110c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <rf_rx_off>
    return 0;
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
    1114:	10 92 f4 03 	sts	0x03F4, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
    1118:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <rf_rx_off>
  return 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
}
    111e:	08 95       	ret

00001120 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
    1120:	80 91 f6 03 	lds	r24, 0x03F6
    1124:	90 91 f7 03 	lds	r25, 0x03F7
    1128:	08 95       	ret

0000112a <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
    112a:	10 92 f6 03 	sts	0x03F6, r1
    112e:	10 92 f7 03 	sts	0x03F7, r1
    1132:	10 92 f8 03 	sts	0x03F8, r1
    1136:	10 92 f9 03 	sts	0x03F9, r1
  return NRK_OK;
}
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	08 95       	ret

0000113e <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	58 f0       	brcs	.+22     	; 0x1158 <_b_pow+0x1a>
    return 1;
  if (in > 7)
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
    1146:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
    1148:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
    114a:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
    114c:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	28 13       	cpse	r18, r24
    1152:	fc cf       	rjmp	.-8      	; 0x114c <_b_pow+0xe>
    result = result * 2;
  return result;
    1154:	89 2f       	mov	r24, r25
    1156:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
    115a:	08 95       	ret

0000115c <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
    1168:	80 91 e7 03 	lds	r24, 0x03E7
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <_bmac_tx+0x16>
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
    1172:	88 ee       	ldi	r24, 0xE8	; 232
    1174:	93 e0       	ldi	r25, 0x03	; 3
    1176:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_nrk_time_to_ticks>
    117a:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
    117c:	0e 94 a8 2c 	call	0x5950	; 0x5950 <rand>
    1180:	6a e0       	ldi	r22, 0x0A	; 10
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__divmodhi4>
    1188:	bc 01       	movw	r22, r24
    118a:	6f 5f       	subi	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 9f 2b 	call	0x573e	; 0x573e <__udivmodhi4>
    1194:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
    1196:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
    119a:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
    119c:	0a e0       	ldi	r16, 0x0A	; 10
    119e:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
    11a0:	0e 94 34 08 	call	0x1068	; 0x1068 <_bmac_channel_check>
    11a4:	d8 2f       	mov	r29, r24
      if (v == 1)
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	39 f1       	breq	.+78     	; 0x11f8 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
    11aa:	0e 94 a8 2c 	call	0x5950	; 0x5950 <rand>
    11ae:	7c 01       	movw	r14, r24
    11b0:	8c 2f       	mov	r24, r28
    11b2:	0e 94 9f 08 	call	0x113e	; 0x113e <_b_pow>
    11b6:	68 2f       	mov	r22, r24
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	c7 01       	movw	r24, r14
    11bc:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
    11c0:	99 27       	eor	r25, r25
    11c2:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <nrk_wait_until_next_n_periods>
      backoff_count++;
    11c6:	cf 5f       	subi	r28, 0xFF	; 255
    11c8:	c7 30       	cpi	r28, 0x07	; 7
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <_bmac_tx+0x72>
    11cc:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
    11ce:	88 ee       	ldi	r24, 0xE8	; 232
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_nrk_time_to_ticks>
    11d6:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
    11d8:	0e 94 a8 2c 	call	0x5950	; 0x5950 <rand>
    11dc:	b8 01       	movw	r22, r16
    11de:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__divmodhi4>
    11e2:	bc 01       	movw	r22, r24
    11e4:	6f 5f       	subi	r22, 0xFF	; 255
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	c7 01       	movw	r24, r14
    11ea:	0e 94 9f 2b 	call	0x573e	; 0x573e <__udivmodhi4>
    11ee:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
    11f0:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    11f4:	dd 23       	and	r29, r29
    11f6:	a1 f2       	breq	.-88     	; 0x11a0 <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    11f8:	10 92 e4 04 	sts	0x04E4, r1
  bmac_rfTxInfo.ackRequest = 0;
    11fc:	10 92 e5 04 	sts	0x04E5, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    1200:	20 91 e8 03 	lds	r18, 0x03E8
    1204:	30 91 e9 03 	lds	r19, 0x03E9
    1208:	88 ee       	ldi	r24, 0xE8	; 232
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	28 9f       	mul	r18, r24
    120e:	e0 01       	movw	r28, r0
    1210:	29 9f       	mul	r18, r25
    1212:	d0 0d       	add	r29, r0
    1214:	38 9f       	mul	r19, r24
    1216:	d0 0d       	add	r29, r0
    1218:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    121a:	60 91 ec 03 	lds	r22, 0x03EC
    121e:	70 91 ed 03 	lds	r23, 0x03ED
    1222:	80 91 ee 03 	lds	r24, 0x03EE
    1226:	90 91 ef 03 	lds	r25, 0x03EF
    122a:	20 e4       	ldi	r18, 0x40	; 64
    122c:	32 e4       	ldi	r19, 0x42	; 66
    122e:	4f e0       	ldi	r20, 0x0F	; 15
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    1236:	c2 0f       	add	r28, r18
    1238:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    123a:	0e 94 cf 0a 	call	0x159e	; 0x159e <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    123e:	be 01       	movw	r22, r28
    1240:	8f ed       	ldi	r24, 0xDF	; 223
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rf_tx_packet_repeat>
    1248:	80 93 f2 03 	sts	0x03F2, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    124c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <rf_rx_off>
  tx_data_ready = 0;
    1250:	10 92 f5 03 	sts	0x03F5, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    1254:	80 91 ec 06 	lds	r24, 0x06EC
    1258:	0e 94 01 1a 	call	0x3402	; 0x3402 <nrk_event_signal>
  return NRK_OK;
}
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	08 95       	ret

0000126c <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    126c:	80 91 f3 03 	lds	r24, 0x03F3
    1270:	81 11       	cpse	r24, r1
    1272:	03 c0       	rjmp	.+6      	; 0x127a <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    1274:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <nrk_wait_until_next_period>
    1278:	f9 cf       	rjmp	.-14     	; 0x126c <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    127a:	80 91 de 04 	lds	r24, 0x04DE
    127e:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
  if (v == NRK_ERROR)
    1282:	8f 3f       	cpi	r24, 0xFF	; 255
    1284:	21 f4       	brne	.+8      	; 0x128e <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1286:	81 eb       	ldi	r24, 0xB1	; 177
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    128e:	c1 2c       	mov	r12, r1
    1290:	d1 2c       	mov	r13, r1
    1292:	76 01       	movw	r14, r12
    1294:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    1296:	0e 94 07 0a 	call	0x140e	; 0x140e <rf_power_up>
    if (is_enabled) {
    129a:	80 91 f0 03 	lds	r24, 0x03F0
    129e:	88 23       	and	r24, r24
    12a0:	69 f1       	breq	.+90     	; 0x12fc <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    12a2:	80 91 f4 03 	lds	r24, 0x03F4
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	41 f4       	brne	.+16     	; 0x12ba <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    12aa:	0e 94 34 08 	call	0x1068	; 0x1068 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    12ae:	81 11       	cpse	r24, r1
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    12b2:	0e 94 48 08 	call	0x1090	; 0x1090 <_bmac_rx>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    12ba:	80 91 fe 04 	lds	r24, 0x04FE
    12be:	0e 94 01 1a 	call	0x3402	; 0x3402 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    12c2:	80 91 f5 03 	lds	r24, 0x03F5
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	11 f4       	brne	.+4      	; 0x12ce <bmac_nw_task+0x62>
        _bmac_tx ();
    12ca:	0e 94 ae 08 	call	0x115c	; 0x115c <_bmac_tx>
      }
      rf_rx_off ();
    12ce:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <rf_rx_off>
      rf_power_down ();
    12d2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    12d6:	20 91 e8 03 	lds	r18, 0x03E8
    12da:	30 91 e9 03 	lds	r19, 0x03E9
    12de:	40 91 ea 03 	lds	r20, 0x03EA
    12e2:	50 91 eb 03 	lds	r21, 0x03EB
    12e6:	60 91 ec 03 	lds	r22, 0x03EC
    12ea:	70 91 ed 03 	lds	r23, 0x03ED
    12ee:	80 91 ee 03 	lds	r24, 0x03EE
    12f2:	90 91 ef 03 	lds	r25, 0x03EF
    12f6:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <nrk_wait>
    12fa:	cd cf       	rjmp	.-102    	; 0x1296 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    12fc:	80 91 de 04 	lds	r24, 0x04DE
    1300:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    1304:	c7 01       	movw	r24, r14
    1306:	b6 01       	movw	r22, r12
    1308:	00 90 de 04 	lds	r0, 0x04DE
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <bmac_nw_task+0xaa>
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	d2 f7       	brpl	.-12     	; 0x130e <bmac_nw_task+0xa2>
    131a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	00 90 de 04 	lds	r0, 0x04DE
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <bmac_nw_task+0xc4>
    1328:	b6 95       	lsr	r27
    132a:	a7 95       	ror	r26
    132c:	97 95       	ror	r25
    132e:	87 95       	ror	r24
    1330:	0a 94       	dec	r0
    1332:	d2 f7       	brpl	.-12     	; 0x1328 <bmac_nw_task+0xbc>
    1334:	80 ff       	sbrs	r24, 0
    1336:	e2 cf       	rjmp	.-60     	; 0x12fc <bmac_nw_task+0x90>
    1338:	ae cf       	rjmp	.-164    	; 0x1296 <bmac_nw_task+0x2a>

0000133a <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    133a:	66 e3       	ldi	r22, 0x36	; 54
    133c:	79 e0       	ldi	r23, 0x09	; 9
    133e:	8a e7       	ldi	r24, 0x7A	; 122
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	6a ef       	ldi	r22, 0xFA	; 250
    134c:	73 e0       	ldi	r23, 0x03	; 3
    134e:	8a e7       	ldi	r24, 0x7A	; 122
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	0e 94 60 29 	call	0x52c0	; 0x52c0 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1356:	ea e7       	ldi	r30, 0x7A	; 122
    1358:	f4 e0       	ldi	r31, 0x04	; 4
    135a:	84 e1       	ldi	r24, 0x14	; 20
    135c:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    1362:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    1364:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    1366:	13 86       	std	Z+11, r1	; 0x0b
    1368:	14 86       	std	Z+12, r1	; 0x0c
    136a:	15 86       	std	Z+13, r1	; 0x0d
    136c:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	9d e2       	ldi	r25, 0x2D	; 45
    1372:	a1 e3       	ldi	r26, 0x31	; 49
    1374:	b1 e0       	ldi	r27, 0x01	; 1
    1376:	87 87       	std	Z+15, r24	; 0x0f
    1378:	90 8b       	std	Z+16, r25	; 0x10
    137a:	a1 8b       	std	Z+17, r26	; 0x11
    137c:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    137e:	13 8a       	std	Z+19, r1	; 0x13
    1380:	14 8a       	std	Z+20, r1	; 0x14
    1382:	15 8a       	std	Z+21, r1	; 0x15
    1384:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    1386:	17 8a       	std	Z+23, r1	; 0x17
    1388:	10 8e       	std	Z+24, r1	; 0x18
    138a:	11 8e       	std	Z+25, r1	; 0x19
    138c:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    138e:	13 8e       	std	Z+27, r1	; 0x1b
    1390:	14 8e       	std	Z+28, r1	; 0x1c
    1392:	15 8e       	std	Z+29, r1	; 0x1d
    1394:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    1396:	17 8e       	std	Z+31, r1	; 0x1f
    1398:	10 a2       	std	Z+32, r1	; 0x20
    139a:	11 a2       	std	Z+33, r1	; 0x21
    139c:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    139e:	cf 01       	movw	r24, r30
    13a0:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <nrk_activate_task>

000013a4 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    13a4:	90 91 41 01 	lds	r25, 0x0141
    13a8:	9f 71       	andi	r25, 0x1F	; 31
    13aa:	9f 31       	cpi	r25, 0x1F	; 31
    13ac:	d9 f3       	breq	.-10     	; 0x13a4 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    13ae:	80 93 42 01 	sts	0x0142, r24
    13b2:	08 95       	ret

000013b4 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 f8 07 	sts	0x07F8, r24
    13ba:	08 95       	ret

000013bc <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    13bc:	10 92 f8 07 	sts	0x07F8, r1
    13c0:	08 95       	ret

000013c2 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    13c2:	80 91 41 01 	lds	r24, 0x0141
    13c6:	8f 71       	andi	r24, 0x1F	; 31
    13c8:	8f 31       	cpi	r24, 0x1F	; 31
    13ca:	d9 f3       	breq	.-10     	; 0x13c2 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    13cc:	80 91 41 01 	lds	r24, 0x0141
    13d0:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    13d2:	e1 f0       	breq	.+56     	; 0x140c <rf_power_down+0x4a>
    13d4:	8f 30       	cpi	r24, 0x0F	; 15
    13d6:	d1 f0       	breq	.+52     	; 0x140c <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    13d8:	80 91 41 01 	lds	r24, 0x0141
    13dc:	8f 71       	andi	r24, 0x1F	; 31
    13de:	88 30       	cpi	r24, 0x08	; 8
    13e0:	31 f4       	brne	.+12     	; 0x13ee <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    13e2:	80 91 39 01 	lds	r24, 0x0139
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	80 93 39 01 	sts	0x0139, r24
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    13ee:	88 e0       	ldi	r24, 0x08	; 8
    13f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    13f4:	80 91 41 01 	lds	r24, 0x0141
    13f8:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    13fa:	88 30       	cpi	r24, 0x08	; 8
    13fc:	d9 f7       	brne	.-10     	; 0x13f4 <rf_power_down+0x32>
    13fe:	f1 cf       	rjmp	.-30     	; 0x13e2 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1400:	8f 30       	cpi	r24, 0x0F	; 15
    1402:	21 f0       	breq	.+8      	; 0x140c <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1404:	80 91 41 01 	lds	r24, 0x0141
    1408:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    140a:	d1 f7       	brne	.-12     	; 0x1400 <rf_power_down+0x3e>
    140c:	08 95       	ret

0000140e <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    140e:	80 91 41 01 	lds	r24, 0x0141
    1412:	8f 71       	andi	r24, 0x1F	; 31
    1414:	8f 31       	cpi	r24, 0x1F	; 31
    1416:	d9 f3       	breq	.-10     	; 0x140e <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1418:	80 91 41 01 	lds	r24, 0x0141
    141c:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    141e:	11 f0       	breq	.+4      	; 0x1424 <rf_power_up+0x16>
    1420:	8f 30       	cpi	r24, 0x0F	; 15
    1422:	51 f4       	brne	.+20     	; 0x1438 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    1424:	80 91 39 01 	lds	r24, 0x0139
    1428:	8d 7f       	andi	r24, 0xFD	; 253
    142a:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    142e:	80 91 41 01 	lds	r24, 0x0141
    1432:	8f 71       	andi	r24, 0x1F	; 31
    1434:	88 30       	cpi	r24, 0x08	; 8
    1436:	d9 f7       	brne	.-10     	; 0x142e <rf_power_up+0x20>
    1438:	08 95       	ret

0000143a <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    143a:	e5 e4       	ldi	r30, 0x45	; 69
    143c:	f1 e0       	ldi	r31, 0x01	; 1
    143e:	90 81       	ld	r25, Z
    1440:	90 7f       	andi	r25, 0xF0	; 240
    1442:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1444:	90 81       	ld	r25, Z
    1446:	8f 70       	andi	r24, 0x0F	; 15
    1448:	98 2b       	or	r25, r24
    144a:	90 83       	st	Z, r25
    144c:	08 95       	ret

0000144e <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    144e:	e7 e5       	ldi	r30, 0x57	; 87
    1450:	f1 e0       	ldi	r31, 0x01	; 1
    1452:	80 81       	ld	r24, Z
    1454:	8d 7f       	andi	r24, 0xFD	; 253
    1456:	80 83       	st	Z, r24
    1458:	08 95       	ret

0000145a <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    145a:	e7 e5       	ldi	r30, 0x57	; 87
    145c:	f1 e0       	ldi	r31, 0x01	; 1
    145e:	80 81       	ld	r24, Z
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	80 83       	st	Z, r24
    1464:	08 95       	ret

00001466 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1466:	ee e6       	ldi	r30, 0x6E	; 110
    1468:	f1 e0       	ldi	r31, 0x01	; 1
    146a:	80 81       	ld	r24, Z
    146c:	8f 7e       	andi	r24, 0xEF	; 239
    146e:	80 83       	st	Z, r24
    1470:	08 95       	ret

00001472 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1472:	ee e6       	ldi	r30, 0x6E	; 110
    1474:	f1 e0       	ldi	r31, 0x01	; 1
    1476:	80 81       	ld	r24, Z
    1478:	80 61       	ori	r24, 0x10	; 16
    147a:	80 83       	st	Z, r24
    147c:	08 95       	ret

0000147e <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    147e:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1482:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1486:	90 93 02 08 	sts	0x0802, r25
    148a:	80 93 01 08 	sts	0x0801, r24
    148e:	08 95       	ret

00001490 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1490:	90 93 fc 07 	sts	0x07FC, r25
    1494:	80 93 fb 07 	sts	0x07FB, r24
	PHY_CC_CCA &= ~(0x1F);
    1498:	e8 e4       	ldi	r30, 0x48	; 72
    149a:	f1 e0       	ldi	r31, 0x01	; 1
    149c:	80 81       	ld	r24, Z
    149e:	80 7e       	andi	r24, 0xE0	; 224
    14a0:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    14a2:	80 81       	ld	r24, Z
    14a4:	68 2b       	or	r22, r24
    14a6:	60 83       	st	Z, r22
    14a8:	08 95       	ret

000014aa <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    14aa:	90 93 a0 04 	sts	0x04A0, r25
    14ae:	80 93 9f 04 	sts	0x049F, r24
    14b2:	08 95       	ret

000014b4 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    14b4:	90 93 9e 04 	sts	0x049E, r25
    14b8:	80 93 9d 04 	sts	0x049D, r24
    14bc:	08 95       	ret

000014be <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	fc 01       	movw	r30, r24
    14c8:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    14ca:	80 e2       	ldi	r24, 0x20	; 32
    14cc:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    14d0:	80 ec       	ldi	r24, 0xC0	; 192
    14d2:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    14d6:	60 62       	ori	r22, 0x20	; 32
    14d8:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    14dc:	85 ec       	ldi	r24, 0xC5	; 197
    14de:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    14e2:	87 ea       	ldi	r24, 0xA7	; 167
    14e4:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    14e8:	80 e8       	ldi	r24, 0x80	; 128
    14ea:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    14ee:	20 93 60 01 	sts	0x0160, r18
    14f2:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    14f6:	40 93 62 01 	sts	0x0162, r20
    14fa:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    14fe:	c6 e4       	ldi	r28, 0x46	; 70
    1500:	d1 e0       	ldi	r29, 0x01	; 1
    1502:	08 81       	ld	r16, Y
    1504:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1506:	98 81       	ld	r25, Y
    1508:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    150a:	30 2f       	mov	r19, r16
    150c:	32 95       	swap	r19
    150e:	36 95       	lsr	r19
    1510:	37 70       	andi	r19, 0x07	; 7
    1512:	60 e4       	ldi	r22, 0x40	; 64
    1514:	36 9f       	mul	r19, r22
    1516:	80 01       	movw	r16, r0
    1518:	11 24       	eor	r1, r1
    151a:	22 95       	swap	r18
    151c:	26 95       	lsr	r18
    151e:	23 70       	andi	r18, 0x03	; 3
    1520:	62 2f       	mov	r22, r18
    1522:	60 2b       	or	r22, r16
    1524:	82 95       	swap	r24
    1526:	86 95       	lsr	r24
    1528:	83 70       	andi	r24, 0x03	; 3
    152a:	70 e1       	ldi	r23, 0x10	; 16
    152c:	87 9f       	mul	r24, r23
    152e:	90 01       	movw	r18, r0
    1530:	11 24       	eor	r1, r1
    1532:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1534:	92 95       	swap	r25
    1536:	96 95       	lsr	r25
    1538:	93 70       	andi	r25, 0x03	; 3
    153a:	84 e0       	ldi	r24, 0x04	; 4
    153c:	98 9f       	mul	r25, r24
    153e:	b0 01       	movw	r22, r0
    1540:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1542:	62 2b       	or	r22, r18
    1544:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1548:	88 81       	ld	r24, Y
    154a:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    154c:	92 95       	swap	r25
    154e:	96 95       	lsr	r25
    1550:	93 70       	andi	r25, 0x03	; 3
    1552:	39 2f       	mov	r19, r25
    1554:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1556:	98 2f       	mov	r25, r24
    1558:	92 95       	swap	r25
    155a:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    155c:	93 2b       	or	r25, r19
    155e:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1562:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    156c:	cb ef       	ldi	r28, 0xFB	; 251
    156e:	d7 e0       	ldi	r29, 0x07	; 7
    1570:	f9 83       	std	Y+1, r31	; 0x01
    1572:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1574:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    1576:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    1578:	5d 83       	std	Y+5, r21	; 0x05
    157a:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    157c:	bf 83       	std	Y+7, r27	; 0x07
    157e:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1580:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 93 1d 08 	sts	0x081D, r24
	rx_ready = 0;
    1588:	10 92 3c 08 	sts	0x083C, r1
	tx_done = 0;
    158c:	10 92 0c 08 	sts	0x080C, r1

	use_glossy = 0;
    1590:	10 92 f8 07 	sts	0x07F8, r1

} // rf_init() 
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    159e:	86 e1       	ldi	r24, 0x16	; 22
    15a0:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <rf_cmd>

000015a4 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    15a4:	86 e1       	ldi	r24, 0x16	; 22
    15a6:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <rf_cmd>

000015aa <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    15aa:	88 e0       	ldi	r24, 0x08	; 8
    15ac:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>
	rx_ready = 0;
    15b0:	10 92 3c 08 	sts	0x083C, r1
    15b4:	08 95       	ret

000015b6 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    15da:	80 91 1d 08 	lds	r24, 0x081D
    15de:	81 11       	cpse	r24, r1
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	26 c1       	rjmp	.+588    	; 0x1832 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    15e6:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    15e8:	80 91 fd 07 	lds	r24, 0x07FD
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	80 93 fd 07 	sts	0x07FD, r24
	machead->fcf = fcf;
    15f2:	90 91 81 01 	lds	r25, 0x0181
    15f6:	90 7e       	andi	r25, 0xE0	; 224
    15f8:	91 60       	ori	r25, 0x01	; 1
    15fa:	20 fb       	bst	r18, 0
    15fc:	95 f9       	bld	r25, 5
    15fe:	9f 73       	andi	r25, 0x3F	; 63
    1600:	90 64       	ori	r25, 0x40	; 64
    1602:	90 93 81 01 	sts	0x0181, r25
    1606:	88 e8       	ldi	r24, 0x88	; 136
    1608:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    160c:	80 91 f8 07 	lds	r24, 0x07F8
    1610:	88 23       	and	r24, r24
    1612:	d1 f0       	breq	.+52     	; 0x1648 <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    161a:	8a ea       	ldi	r24, 0xAA	; 170
    161c:	9a ea       	ldi	r25, 0xAA	; 170
    161e:	90 93 89 01 	sts	0x0189, r25
    1622:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	9f ef       	ldi	r25, 0xFF	; 255
    162a:	90 93 87 01 	sts	0x0187, r25
    162e:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1632:	20 91 63 01 	lds	r18, 0x0163
    1636:	80 91 62 01 	lds	r24, 0x0162
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	92 2b       	or	r25, r18
    163e:	90 93 85 01 	sts	0x0185, r25
    1642:	80 93 84 01 	sts	0x0184, r24
    1646:	1e c0       	rjmp	.+60     	; 0x1684 <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    1648:	80 91 fd 07 	lds	r24, 0x07FD
    164c:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1650:	80 91 61 01 	lds	r24, 0x0161
    1654:	20 91 60 01 	lds	r18, 0x0160
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	38 2b       	or	r19, r24
    165c:	30 93 89 01 	sts	0x0189, r19
    1660:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    1664:	88 81       	ld	r24, Y
    1666:	99 81       	ldd	r25, Y+1	; 0x01
    1668:	90 93 87 01 	sts	0x0187, r25
    166c:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1670:	80 91 63 01 	lds	r24, 0x0163
    1674:	20 91 62 01 	lds	r18, 0x0162
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	38 2b       	or	r19, r24
    167c:	30 93 85 01 	sts	0x0185, r19
    1680:	20 93 84 01 	sts	0x0184, r18
    1684:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1686:	4a 81       	ldd	r20, Y+2	; 0x02
    1688:	55 27       	eor	r21, r21
    168a:	47 fd       	sbrc	r20, 7
    168c:	50 95       	com	r21
    168e:	6b 81       	ldd	r22, Y+3	; 0x03
    1690:	7c 81       	ldd	r23, Y+4	; 0x04
    1692:	8a e8       	ldi	r24, 0x8A	; 138
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	85 5f       	subi	r24, 0xF5	; 245
    169e:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    16a2:	80 91 41 01 	lds	r24, 0x0141
    16a6:	98 2f       	mov	r25, r24
    16a8:	9f 71       	andi	r25, 0x1F	; 31
    16aa:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    16b0:	92 30       	cpi	r25, 0x02	; 2
    16b2:	b8 f3       	brcs	.-18     	; 0x16a2 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    16b4:	91 e1       	ldi	r25, 0x11	; 17
    16b6:	39 16       	cp	r3, r25
    16b8:	a1 f3       	breq	.-24     	; 0x16a2 <rf_tx_packet_repeat+0xec>
    16ba:	92 e1       	ldi	r25, 0x12	; 18
    16bc:	39 16       	cp	r3, r25
    16be:	89 f3       	breq	.-30     	; 0x16a2 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    16c0:	9f e1       	ldi	r25, 0x1F	; 31
    16c2:	39 16       	cp	r3, r25
    16c4:	71 f3       	breq	.-36     	; 0x16a2 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    16c6:	98 ef       	ldi	r25, 0xF8	; 248
    16c8:	93 0d       	add	r25, r3
    16ca:	92 30       	cpi	r25, 0x02	; 2
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <rf_tx_packet_repeat+0x120>
    16ce:	8f 70       	andi	r24, 0x0F	; 15
    16d0:	86 30       	cpi	r24, 0x06	; 6
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <rf_tx_packet_repeat+0x120>
    16d4:	86 cf       	rjmp	.-244    	; 0x15e2 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    16d6:	86 e1       	ldi	r24, 0x16	; 22
    16d8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	81 11       	cpse	r24, r1
    16e0:	0a c0       	rjmp	.+20     	; 0x16f6 <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    16e2:	89 e0       	ldi	r24, 0x09	; 9
    16e4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>
	if(pRTI->ackRequest)
    16e8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ea:	88 23       	and	r24, r24
    16ec:	91 f0       	breq	.+36     	; 0x1712 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    16ee:	89 e1       	ldi	r24, 0x19	; 25
    16f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    16f6:	80 91 48 01 	lds	r24, 0x0148
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1700:	80 91 41 01 	lds	r24, 0x0141
    1704:	87 ff       	sbrs	r24, 7
    1706:	fc cf       	rjmp	.-8      	; 0x1700 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1708:	80 91 41 01 	lds	r24, 0x0141
    170c:	86 ff       	sbrs	r24, 6
    170e:	69 cf       	rjmp	.-302    	; 0x15e2 <rf_tx_packet_repeat+0x2c>
    1710:	e8 cf       	rjmp	.-48     	; 0x16e2 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    1712:	61 14       	cp	r6, r1
    1714:	71 04       	cpc	r7, r1
    1716:	a9 f1       	breq	.+106    	; 0x1782 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	98 e0       	ldi	r25, 0x08	; 8
    171c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
		target_t.secs = curr_t.secs;
    1720:	80 91 04 08 	lds	r24, 0x0804
    1724:	90 91 05 08 	lds	r25, 0x0805
    1728:	a0 91 06 08 	lds	r26, 0x0806
    172c:	b0 91 07 08 	lds	r27, 0x0807
    1730:	80 93 1e 08 	sts	0x081E, r24
    1734:	90 93 1f 08 	sts	0x081F, r25
    1738:	a0 93 20 08 	sts	0x0820, r26
    173c:	b0 93 21 08 	sts	0x0821, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    1740:	d3 01       	movw	r26, r6
    1742:	20 e4       	ldi	r18, 0x40	; 64
    1744:	32 e4       	ldi	r19, 0x42	; 66
    1746:	4f e0       	ldi	r20, 0x0F	; 15
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    174e:	00 91 08 08 	lds	r16, 0x0808
    1752:	10 91 09 08 	lds	r17, 0x0809
    1756:	20 91 0a 08 	lds	r18, 0x080A
    175a:	30 91 0b 08 	lds	r19, 0x080B
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	80 0f       	add	r24, r16
    1764:	91 1f       	adc	r25, r17
    1766:	a2 1f       	adc	r26, r18
    1768:	b3 1f       	adc	r27, r19
    176a:	80 93 22 08 	sts	0x0822, r24
    176e:	90 93 23 08 	sts	0x0823, r25
    1772:	a0 93 24 08 	sts	0x0824, r26
    1776:	b0 93 25 08 	sts	0x0825, r27
		nrk_time_compact_nanos(&target_t);
    177a:	8e e1       	ldi	r24, 0x1E	; 30
    177c:	98 e0       	ldi	r25, 0x08	; 8
    177e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    1782:	10 92 0c 08 	sts	0x080C, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    178c:	41 2c       	mov	r4, r1
    178e:	51 2c       	mov	r5, r1
    1790:	80 91 0c 08 	lds	r24, 0x080C
    1794:	81 11       	cpse	r24, r1
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <rf_tx_packet_repeat+0x1f2>
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	48 1a       	sub	r4, r24
    179c:	58 0a       	sbc	r5, r24
    179e:	98 ee       	ldi	r25, 0xE8	; 232
    17a0:	49 16       	cp	r4, r25
    17a2:	9d ef       	ldi	r25, 0xFD	; 253
    17a4:	59 06       	cpc	r5, r25
    17a6:	a1 f7       	brne	.-24     	; 0x1790 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    17a8:	61 14       	cp	r6, r1
    17aa:	71 04       	cpc	r7, r1
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	81 11       	cpse	r24, r1
    17b2:	2d c0       	rjmp	.+90     	; 0x180e <rf_tx_packet_repeat+0x258>
    17b4:	32 c0       	rjmp	.+100    	; 0x181a <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	98 e0       	ldi	r25, 0x08	; 8
    17ba:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    17be:	80 90 04 08 	lds	r8, 0x0804
    17c2:	90 90 05 08 	lds	r9, 0x0805
    17c6:	a0 90 06 08 	lds	r10, 0x0806
    17ca:	b0 90 07 08 	lds	r11, 0x0807
    17ce:	c0 90 08 08 	lds	r12, 0x0808
    17d2:	d0 90 09 08 	lds	r13, 0x0809
    17d6:	e0 90 0a 08 	lds	r14, 0x080A
    17da:	f0 90 0b 08 	lds	r15, 0x080B
    17de:	00 91 1e 08 	lds	r16, 0x081E
    17e2:	10 91 1f 08 	lds	r17, 0x081F
    17e6:	20 91 20 08 	lds	r18, 0x0820
    17ea:	30 91 21 08 	lds	r19, 0x0821
    17ee:	40 91 22 08 	lds	r20, 0x0822
    17f2:	50 91 23 08 	lds	r21, 0x0823
    17f6:	60 91 24 08 	lds	r22, 0x0824
    17fa:	70 91 25 08 	lds	r23, 0x0825
    17fe:	8d e3       	ldi	r24, 0x3D	; 61
    1800:	98 e0       	ldi	r25, 0x08	; 8
    1802:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <nrk_time_sub>
    1806:	8f 3f       	cpi	r24, 0xFF	; 255
    1808:	09 f0       	breq	.+2      	; 0x180c <rf_tx_packet_repeat+0x256>
    180a:	bb cf       	rjmp	.-138    	; 0x1782 <rf_tx_packet_repeat+0x1cc>
    180c:	d0 cf       	rjmp	.-96     	; 0x17ae <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    180e:	80 91 42 01 	lds	r24, 0x0142
    1812:	82 95       	swap	r24
    1814:	86 95       	lsr	r24
    1816:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1818:	39 f4       	brne	.+14     	; 0x1828 <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    181a:	88 ee       	ldi	r24, 0xE8	; 232
    181c:	48 16       	cp	r4, r24
    181e:	8d ef       	ldi	r24, 0xFD	; 253
    1820:	58 06       	cpc	r5, r24
    1822:	11 f0       	breq	.+4      	; 0x1828 <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1824:	c1 e0       	ldi	r28, 0x01	; 1
    1826:	01 c0       	rjmp	.+2      	; 0x182a <rf_tx_packet_repeat+0x274>
    1828:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    182a:	83 2d       	mov	r24, r3
    182c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1830:	8c 2f       	mov	r24, r28
}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	bf 90       	pop	r11
    1844:	af 90       	pop	r10
    1846:	9f 90       	pop	r9
    1848:	8f 90       	pop	r8
    184a:	7f 90       	pop	r7
    184c:	6f 90       	pop	r6
    184e:	5f 90       	pop	r5
    1850:	4f 90       	pop	r4
    1852:	3f 90       	pop	r3
    1854:	08 95       	ret

00001856 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <rf_tx_packet_repeat>

0000185e <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    1862:	80 91 1d 08 	lds	r24, 0x081D
    1866:	88 23       	and	r24, r24
    1868:	41 f1       	breq	.+80     	; 0x18ba <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    186a:	80 91 41 01 	lds	r24, 0x0141
    186e:	c8 2f       	mov	r28, r24
    1870:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1872:	9f ef       	ldi	r25, 0xFF	; 255
    1874:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1876:	92 30       	cpi	r25, 0x02	; 2
    1878:	c0 f3       	brcs	.-16     	; 0x186a <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    187a:	c1 31       	cpi	r28, 0x11	; 17
    187c:	b1 f3       	breq	.-20     	; 0x186a <rf_cca_check+0xc>
    187e:	c2 31       	cpi	r28, 0x12	; 18
    1880:	a1 f3       	breq	.-24     	; 0x186a <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1882:	cf 31       	cpi	r28, 0x1F	; 31
    1884:	91 f3       	breq	.-28     	; 0x186a <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1886:	c8 30       	cpi	r28, 0x08	; 8
    1888:	19 f0       	breq	.+6      	; 0x1890 <rf_cca_check+0x32>
    188a:	8f 70       	andi	r24, 0x0F	; 15
    188c:	86 30       	cpi	r24, 0x06	; 6
    188e:	a9 f4       	brne	.+42     	; 0x18ba <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1890:	86 e1       	ldi	r24, 0x16	; 22
    1892:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1896:	80 91 48 01 	lds	r24, 0x0148
    189a:	80 68       	ori	r24, 0x80	; 128
    189c:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    18a0:	80 91 41 01 	lds	r24, 0x0141
    18a4:	87 ff       	sbrs	r24, 7
    18a6:	fc cf       	rjmp	.-8      	; 0x18a0 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    18a8:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    18ac:	8c 2f       	mov	r24, r28
    18ae:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    18b2:	d6 fb       	bst	r29, 6
    18b4:	88 27       	eor	r24, r24
    18b6:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    18c2:	80 91 1d 08 	lds	r24, 0x081D
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <rf_rx_packet_nonblock+0xa>
    18ca:	a0 c0       	rjmp	.+320    	; 0x1a0c <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    18cc:	80 91 3c 08 	lds	r24, 0x083C
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <rf_rx_packet_nonblock+0x14>
    18d4:	99 c0       	rjmp	.+306    	; 0x1a08 <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    18d6:	80 91 7b 01 	lds	r24, 0x017B
    18da:	e0 91 fb 07 	lds	r30, 0x07FB
    18de:	f0 91 fc 07 	lds	r31, 0x07FC
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 97       	sbiw	r24, 0x02	; 2
    18e6:	24 81       	ldd	r18, Z+4	; 0x04
    18e8:	33 27       	eor	r19, r19
    18ea:	27 fd       	sbrc	r18, 7
    18ec:	30 95       	com	r19
    18ee:	28 17       	cp	r18, r24
    18f0:	39 07       	cpc	r19, r25
    18f2:	0c f4       	brge	.+2      	; 0x18f6 <rf_rx_packet_nonblock+0x34>
    18f4:	8b c0       	rjmp	.+278    	; 0x1a0c <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    18f6:	e0 91 fb 07 	lds	r30, 0x07FB
    18fa:	f0 91 fc 07 	lds	r31, 0x07FC
    18fe:	80 91 82 01 	lds	r24, 0x0182
    1902:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1904:	e0 91 fb 07 	lds	r30, 0x07FB
    1908:	f0 91 fc 07 	lds	r31, 0x07FC
    190c:	80 91 87 01 	lds	r24, 0x0187
    1910:	90 91 88 01 	lds	r25, 0x0188
    1914:	92 83       	std	Z+2, r25	; 0x02
    1916:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1918:	e0 91 fb 07 	lds	r30, 0x07FB
    191c:	f0 91 fc 07 	lds	r31, 0x07FC
    1920:	80 91 7b 01 	lds	r24, 0x017B
    1924:	8b 50       	subi	r24, 0x0B	; 11
    1926:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1928:	a0 91 fb 07 	lds	r26, 0x07FB
    192c:	b0 91 fc 07 	lds	r27, 0x07FC
    1930:	e0 91 fb 07 	lds	r30, 0x07FB
    1934:	f0 91 fc 07 	lds	r31, 0x07FC
    1938:	13 96       	adiw	r26, 0x03	; 3
    193a:	9c 91       	ld	r25, X
    193c:	84 81       	ldd	r24, Z+4	; 0x04
    193e:	89 17       	cp	r24, r25
    1940:	3c f0       	brlt	.+14     	; 0x1950 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    1942:	e0 91 fb 07 	lds	r30, 0x07FB
    1946:	f0 91 fc 07 	lds	r31, 0x07FC
    194a:	83 81       	ldd	r24, Z+3	; 0x03
    194c:	87 ff       	sbrs	r24, 7
    194e:	0d c0       	rjmp	.+26     	; 0x196a <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    1950:	10 92 3c 08 	sts	0x083C, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1954:	80 91 4c 01 	lds	r24, 0x014C
    1958:	8f 77       	andi	r24, 0x7F	; 127
    195a:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    195e:	80 91 4c 01 	lds	r24, 0x014C
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	80 93 4c 01 	sts	0x014C, r24
    1968:	51 c0       	rjmp	.+162    	; 0x1a0c <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    196a:	a0 91 fb 07 	lds	r26, 0x07FB
    196e:	b0 91 fc 07 	lds	r27, 0x07FC
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1972:	e0 91 fb 07 	lds	r30, 0x07FB
    1976:	f0 91 fc 07 	lds	r31, 0x07FC
    197a:	13 96       	adiw	r26, 0x03	; 3
    197c:	4c 91       	ld	r20, X
    197e:	55 27       	eor	r21, r21
    1980:	47 fd       	sbrc	r20, 7
    1982:	50 95       	com	r21
    1984:	69 e8       	ldi	r22, 0x89	; 137
    1986:	71 e0       	ldi	r23, 0x01	; 1
    1988:	85 81       	ldd	r24, Z+5	; 0x05
    198a:	96 81       	ldd	r25, Z+6	; 0x06
    198c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1990:	e0 91 fb 07 	lds	r30, 0x07FB
    1994:	f0 91 fc 07 	lds	r31, 0x07FC
    1998:	80 91 80 01 	lds	r24, 0x0180
    199c:	85 fb       	bst	r24, 5
    199e:	88 27       	eor	r24, r24
    19a0:	80 f9       	bld	r24, 0
    19a2:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    19a4:	e0 91 fb 07 	lds	r30, 0x07FB
    19a8:	f0 91 fc 07 	lds	r31, 0x07FC
    19ac:	80 91 47 01 	lds	r24, 0x0147
    19b0:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    19b2:	e0 91 fb 07 	lds	r30, 0x07FB
    19b6:	f0 91 fc 07 	lds	r31, 0x07FC
    19ba:	80 91 46 01 	lds	r24, 0x0146
    19be:	86 95       	lsr	r24
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    19c6:	e0 91 fb 07 	lds	r30, 0x07FB
    19ca:	f0 91 fc 07 	lds	r31, 0x07FC
    19ce:	80 91 47 01 	lds	r24, 0x0147
    19d2:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    19d4:	a0 91 fb 07 	lds	r26, 0x07FB
    19d8:	b0 91 fc 07 	lds	r27, 0x07FC
    19dc:	e0 91 7b 01 	lds	r30, 0x017B
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	e0 58       	subi	r30, 0x80	; 128
    19e4:	fe 4f       	sbci	r31, 0xFE	; 254
    19e6:	80 81       	ld	r24, Z
    19e8:	1b 96       	adiw	r26, 0x0b	; 11
    19ea:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    19ec:	10 92 3c 08 	sts	0x083C, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    19f0:	80 91 4c 01 	lds	r24, 0x014C
    19f4:	8f 77       	andi	r24, 0x7F	; 127
    19f6:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    19fa:	80 91 4c 01 	lds	r24, 0x014C
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1a0e:	08 95       	ret

00001a10 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1a10:	1f 92       	push	r1
    1a12:	0f 92       	push	r0
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	0f 92       	push	r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1a1c:	80 e8       	ldi	r24, 0x80	; 128
    1a1e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1a22:	8f 91       	pop	r24
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 0c 08 	sts	0x080C, r24
	IRQ_STATUS = (1 << TX_END);
    1a40:	80 e4       	ldi	r24, 0x40	; 64
    1a42:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1a46:	8f 91       	pop	r24
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1a5e:	80 e2       	ldi	r24, 0x20	; 32
    1a60:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1a64:	8f 91       	pop	r24
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1a7c:	80 e1       	ldi	r24, 0x10	; 16
    1a7e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1a82:	8f 91       	pop	r24
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	0b b6       	in	r0, 0x3b	; 59
    1a9a:	0f 92       	push	r0
    1a9c:	2f 93       	push	r18
    1a9e:	3f 93       	push	r19
    1aa0:	4f 93       	push	r20
    1aa2:	5f 93       	push	r21
    1aa4:	6f 93       	push	r22
    1aa6:	7f 93       	push	r23
    1aa8:	8f 93       	push	r24
    1aaa:	9f 93       	push	r25
    1aac:	af 93       	push	r26
    1aae:	bf 93       	push	r27
    1ab0:	ef 93       	push	r30
    1ab2:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1aba:	e0 91 9f 04 	lds	r30, 0x049F
    1abe:	f0 91 a0 04 	lds	r31, 0x04A0
    1ac2:	30 97       	sbiw	r30, 0x00	; 0
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <__vector_59+0x3a>
		rx_start_func();
    1ac6:	09 95       	icall

	return;
}
    1ac8:	ff 91       	pop	r31
    1aca:	ef 91       	pop	r30
    1acc:	bf 91       	pop	r27
    1ace:	af 91       	pop	r26
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	7f 91       	pop	r23
    1ad6:	6f 91       	pop	r22
    1ad8:	5f 91       	pop	r21
    1ada:	4f 91       	pop	r20
    1adc:	3f 91       	pop	r19
    1ade:	2f 91       	pop	r18
    1ae0:	0f 90       	pop	r0
    1ae2:	0b be       	out	0x3b, r0	; 59
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b00:	8f 91       	pop	r24
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	0f 90       	pop	r0
    1b08:	1f 90       	pop	r1
    1b0a:	18 95       	reti

00001b0c <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1b0c:	1f 92       	push	r1
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1b1e:	8f 91       	pop	r24
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1b2a:	e9 e4       	ldi	r30, 0x49	; 73
    1b2c:	f1 e0       	ldi	r31, 0x01	; 1
    1b2e:	90 81       	ld	r25, Z
    1b30:	90 7f       	andi	r25, 0xF0	; 240
    1b32:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1b34:	90 81       	ld	r25, Z
    1b36:	8f 70       	andi	r24, 0x0F	; 15
    1b38:	98 2b       	or	r25, r24
    1b3a:	90 83       	st	Z, r25
    1b3c:	08 95       	ret

00001b3e <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1b42:	08 95       	ret

00001b44 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1b44:	08 95       	ret

00001b46 <rf_security_disable>:
}



void rf_security_disable()
{
    1b46:	08 95       	ret

00001b48 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	08 95       	ret

00001b4c <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1b4c:	80 91 f6 07 	lds	r24, 0x07F6
    1b50:	90 91 f7 07 	lds	r25, 0x07F7
    1b54:	08 95       	ret

00001b56 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret

00001b5a <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    1b5a:	08 95       	ret

00001b5c <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	08 95       	ret

00001b60 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	08 95       	ret

00001b64 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	08 95       	ret

00001b68 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    1b68:	08 95       	ret

00001b6a <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    1b6a:	08 95       	ret

00001b6c <rf_test_mode>:
}



void rf_test_mode()
{
    1b6c:	08 95       	ret

00001b6e <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    1b6e:	08 95       	ret

00001b70 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    1b70:	08 95       	ret

00001b72 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1b72:	08 95       	ret

00001b74 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1b74:	08 95       	ret

00001b76 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1b76:	08 95       	ret

00001b78 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    1b78:	e7 e3       	ldi	r30, 0x37	; 55
    1b7a:	f1 e0       	ldi	r31, 0x01	; 1
    1b7c:	80 81       	ld	r24, Z
    1b7e:	83 60       	ori	r24, 0x03	; 3
    1b80:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1b82:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    1b84:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1b86:	8d b1       	in	r24, 0x0d	; 13
    1b88:	80 6e       	ori	r24, 0xE0	; 224
    1b8a:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1b8c:	8e b1       	in	r24, 0x0e	; 14
    1b8e:	80 6e       	ori	r24, 0xE0	; 224
    1b90:	8e b9       	out	0x0e, r24	; 14
    1b92:	08 95       	ret

00001b94 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    1b94:	e7 e3       	ldi	r30, 0x37	; 55
    1b96:	f1 e0       	ldi	r31, 0x01	; 1
    1b98:	80 81       	ld	r24, Z
    1b9a:	83 60       	ori	r24, 0x03	; 3
    1b9c:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1b9e:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    1ba0:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1ba2:	8d b1       	in	r24, 0x0d	; 13
    1ba4:	80 6e       	ori	r24, 0xE0	; 224
    1ba6:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1ba8:	8e b1       	in	r24, 0x0e	; 14
    1baa:	80 6e       	ori	r24, 0xE0	; 224
    1bac:	8e b9       	out	0x0e, r24	; 14
    1bae:	08 95       	ret

00001bb0 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	27 97       	sbiw	r28, 0x07	; 7
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1bd0:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1bd4:	e0 91 fb 07 	lds	r30, 0x07FB
    1bd8:	f0 91 fc 07 	lds	r31, 0x07FC
    1bdc:	c0 80       	ld	r12, Z
    1bde:	d3 80       	ldd	r13, Z+3	; 0x03
    1be0:	e5 80       	ldd	r14, Z+5	; 0x05
    1be2:	f6 80       	ldd	r15, Z+6	; 0x06
    1be4:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1be6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <rf_rx_packet_nonblock>
	if (err < 1) {
    1bea:	18 16       	cp	r1, r24
    1bec:	1c f0       	brlt	.+6      	; 0x1bf4 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1bee:	82 e1       	ldi	r24, 0x12	; 18
    1bf0:	93 e0       	ldi	r25, 0x03	; 3
    1bf2:	06 c0       	rjmp	.+12     	; 0x1c00 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	10 81       	ld	r17, Z
	if (ttl == 0) {
    1bf8:	11 11       	cpse	r17, r1
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1bfc:	81 e3       	ldi	r24, 0x31	; 49
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <puts>
#endif
		nrk_int_enable();
    1c04:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
		return;
    1c08:	31 c0       	rjmp	.+98     	; 0x1c6c <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    1c0a:	15 30       	cpi	r17, 0x05	; 5
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    1c0e:	8a e0       	ldi	r24, 0x0A	; 10
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1c16:	c7 01       	movw	r24, r14
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	9f 93       	push	r25
    1c1c:	8f 93       	push	r24
    1c1e:	80 2f       	mov	r24, r16
    1c20:	99 27       	eor	r25, r25
    1c22:	87 fd       	sbrc	r24, 7
    1c24:	90 95       	com	r25
    1c26:	9f 93       	push	r25
    1c28:	0f 93       	push	r16
    1c2a:	1f 92       	push	r1
    1c2c:	1f 93       	push	r17
    1c2e:	1f 92       	push	r1
    1c30:	cf 92       	push	r12
    1c32:	83 e5       	ldi	r24, 0x53	; 83
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	9f 93       	push	r25
    1c38:	8f 93       	push	r24
    1c3a:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1c3e:	fd 82       	std	Y+5, r15	; 0x05
    1c40:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1c42:	11 50       	subi	r17, 0x01	; 1
    1c44:	f7 01       	movw	r30, r14
    1c46:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    1c48:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    1c4a:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1c4c:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1c4e:	8f ef       	ldi	r24, 0xFF	; 255
    1c50:	9f ef       	ldi	r25, 0xFF	; 255
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    1c56:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <rf_tx_packet>
#endif
	return;
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
}
    1c6c:	27 96       	adiw	r28, 0x07	; 7
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	08 95       	ret

00001c8a <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1c8a:	1f 92       	push	r1
    1c8c:	0f 92       	push	r0
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	0f 92       	push	r0
    1c92:	11 24       	eor	r1, r1
    1c94:	0b b6       	in	r0, 0x3b	; 59
    1c96:	0f 92       	push	r0
    1c98:	2f 93       	push	r18
    1c9a:	3f 93       	push	r19
    1c9c:	4f 93       	push	r20
    1c9e:	5f 93       	push	r21
    1ca0:	6f 93       	push	r22
    1ca2:	7f 93       	push	r23
    1ca4:	8f 93       	push	r24
    1ca6:	9f 93       	push	r25
    1ca8:	af 93       	push	r26
    1caa:	bf 93       	push	r27
    1cac:	ef 93       	push	r30
    1cae:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 91 7b 01 	lds	r25, 0x017B
    1cb6:	89 17       	cp	r24, r25
    1cb8:	10 f4       	brcc	.+4      	; 0x1cbe <__vector_60+0x34>
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	fa cf       	rjmp	.-12     	; 0x1cb2 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1cbe:	80 91 46 01 	lds	r24, 0x0146
    1cc2:	87 ff       	sbrs	r24, 7
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <__vector_60+0x44>
		rx_ready = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 3c 08 	sts	0x083C, r24
    1ccc:	04 c0       	rjmp	.+8      	; 0x1cd6 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1cce:	8c e7       	ldi	r24, 0x7C	; 124
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1cd6:	88 e0       	ldi	r24, 0x08	; 8
    1cd8:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1cdc:	80 91 46 01 	lds	r24, 0x0146
    1ce0:	87 ff       	sbrs	r24, 7
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1ce4:	80 91 f8 07 	lds	r24, 0x07F8
    1ce8:	81 11       	cpse	r24, r1
    1cea:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1cee:	e0 91 9d 04 	lds	r30, 0x049D
    1cf2:	f0 91 9e 04 	lds	r31, 0x049E
    1cf6:	30 97       	sbiw	r30, 0x00	; 0
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <__vector_60+0x72>
		rx_end_func();
    1cfa:	09 95       	icall

	return;
}
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	0f 90       	pop	r0
    1d16:	0b be       	out	0x3b, r0	; 59
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1d22:	ad e0       	ldi	r26, 0x0D	; 13
    1d24:	b8 e0       	ldi	r27, 0x08	; 8
    1d26:	fc 01       	movw	r30, r24
    1d28:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1d2a:	20 81       	ld	r18, Z
    1d2c:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    1d2e:	21 91       	ld	r18, Z+
    1d30:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1d34:	e8 17       	cp	r30, r24
    1d36:	f9 07       	cpc	r31, r25
    1d38:	c1 f7       	brne	.-16     	; 0x1d2a <aes_setkey+0x8>
    1d3a:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1d3c:	10 92 3e 01 	sts	0x013E, r1
    1d40:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1d44:	80 e8       	ldi	r24, 0x80	; 128
    1d46:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1d4a:	80 91 3d 01 	lds	r24, 0x013D
    1d4e:	80 ff       	sbrs	r24, 0
    1d50:	fc cf       	rjmp	.-8      	; 0x1d4a <aes_setkey+0x28>
    1d52:	e6 e2       	ldi	r30, 0x26	; 38
    1d54:	f8 e0       	ldi	r31, 0x08	; 8
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1d5a:	90 91 3f 01 	lds	r25, 0x013F
    1d5e:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1d60:	8e 13       	cpse	r24, r30
    1d62:	fb cf       	rjmp	.-10     	; 0x1d5a <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    1d64:	08 95       	ret

00001d66 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1d6c:	66 23       	and	r22, r22
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <aes_encrypt+0xc>
    1d70:	45 c0       	rjmp	.+138    	; 0x1dfc <aes_encrypt+0x96>
    1d72:	86 2f       	mov	r24, r22
    1d74:	8f 70       	andi	r24, 0x0F	; 15
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <aes_encrypt+0x14>
    1d78:	41 c0       	rjmp	.+130    	; 0x1dfc <aes_encrypt+0x96>
    1d7a:	ed e0       	ldi	r30, 0x0D	; 13
    1d7c:	f8 e0       	ldi	r31, 0x08	; 8
    1d7e:	90 e1       	ldi	r25, 0x10	; 16
    1d80:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1d82:	21 91       	ld	r18, Z+
    1d84:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1d88:	9e 13       	cpse	r25, r30
    1d8a:	fb cf       	rjmp	.-10     	; 0x1d82 <aes_encrypt+0x1c>
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1d90:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1d92:	40 e1       	ldi	r20, 0x10	; 16
    1d94:	94 9f       	mul	r25, r20
    1d96:	90 01       	movw	r18, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	26 17       	cp	r18, r22
    1d9c:	37 07       	cpc	r19, r23
    1d9e:	7c f5       	brge	.+94     	; 0x1dfe <aes_encrypt+0x98>
      if(i==0)
    1da0:	91 11       	cpse	r25, r1
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1da4:	10 92 3c 01 	sts	0x013C, r1
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1daa:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	2a 0f       	add	r18, r26
    1db4:	3b 1f       	adc	r19, r27
    1db6:	e9 01       	movw	r28, r18
    1db8:	c4 0f       	add	r28, r20
    1dba:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1dbc:	f8 81       	ld	r31, Y
    1dbe:	f0 93 3e 01 	sts	0x013E, r31
    1dc2:	4f 5f       	subi	r20, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1dc6:	40 31       	cpi	r20, 0x10	; 16
    1dc8:	51 05       	cpc	r21, r1
    1dca:	a9 f7       	brne	.-22     	; 0x1db6 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1dcc:	40 91 3c 01 	lds	r20, 0x013C
    1dd0:	40 68       	ori	r20, 0x80	; 128
    1dd2:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    1dd6:	40 91 3d 01 	lds	r20, 0x013D
    1dda:	40 ff       	sbrs	r20, 0
    1ddc:	fc cf       	rjmp	.-8      	; 0x1dd6 <aes_encrypt+0x70>
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1de2:	f0 91 3e 01 	lds	r31, 0x013E
    1de6:	e9 01       	movw	r28, r18
    1de8:	c4 0f       	add	r28, r20
    1dea:	d5 1f       	adc	r29, r21
    1dec:	f8 83       	st	Y, r31
    1dee:	4f 5f       	subi	r20, 0xFF	; 255
    1df0:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1df2:	40 31       	cpi	r20, 0x10	; 16
    1df4:	51 05       	cpc	r21, r1
    1df6:	a9 f7       	brne	.-22     	; 0x1de2 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1df8:	9f 5f       	subi	r25, 0xFF	; 255
    1dfa:	cb cf       	rjmp	.-106    	; 0x1d92 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1e0e:	61 30       	cpi	r22, 0x01	; 1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <aes_decrypt+0x10>
    1e12:	58 c0       	rjmp	.+176    	; 0x1ec4 <aes_decrypt+0xc0>
    1e14:	86 2f       	mov	r24, r22
    1e16:	8f 70       	andi	r24, 0x0F	; 15
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <aes_decrypt+0x18>
    1e1a:	54 c0       	rjmp	.+168    	; 0x1ec4 <aes_decrypt+0xc0>
    1e1c:	e6 e2       	ldi	r30, 0x26	; 38
    1e1e:	f8 e0       	ldi	r31, 0x08	; 8
    1e20:	90 e1       	ldi	r25, 0x10	; 16
    1e22:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1e24:	21 91       	ld	r18, Z+
    1e26:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1e2a:	9e 13       	cpse	r25, r30
    1e2c:	fb cf       	rjmp	.-10     	; 0x1e24 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1e2e:	62 95       	swap	r22
    1e30:	6f 70       	andi	r22, 0x0F	; 15
    1e32:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1e34:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1e36:	6f 3f       	cpi	r22, 0xFF	; 255
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <aes_decrypt+0x38>
    1e3a:	45 c0       	rjmp	.+138    	; 0x1ec6 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1e3c:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1e40:	46 2f       	mov	r20, r22
    1e42:	55 27       	eor	r21, r21
    1e44:	47 fd       	sbrc	r20, 7
    1e46:	50 95       	com	r21
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	ed 01       	movw	r28, r26
    1e4e:	90 e1       	ldi	r25, 0x10	; 16
    1e50:	69 02       	muls	r22, r25
    1e52:	c0 0d       	add	r28, r0
    1e54:	d1 1d       	adc	r29, r1
    1e56:	11 24       	eor	r1, r1
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	90 81       	ld	r25, Z
    1e60:	90 93 3e 01 	sts	0x013E, r25
    1e64:	2f 5f       	subi	r18, 0xFF	; 255
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1e68:	20 31       	cpi	r18, 0x10	; 16
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	a9 f7       	brne	.-22     	; 0x1e58 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1e6e:	90 91 3c 01 	lds	r25, 0x013C
    1e72:	90 68       	ori	r25, 0x80	; 128
    1e74:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    1e78:	90 91 3d 01 	lds	r25, 0x013D
    1e7c:	90 ff       	sbrs	r25, 0
    1e7e:	fc cf       	rjmp	.-8      	; 0x1e78 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1e80:	41 50       	subi	r20, 0x01	; 1
    1e82:	51 09       	sbc	r21, r1
    1e84:	94 e0       	ldi	r25, 0x04	; 4
    1e86:	44 0f       	add	r20, r20
    1e88:	55 1f       	adc	r21, r21
    1e8a:	9a 95       	dec	r25
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <aes_decrypt+0x82>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1e92:	90 91 3e 01 	lds	r25, 0x013E
    1e96:	8e 01       	movw	r16, r28
    1e98:	02 0f       	add	r16, r18
    1e9a:	13 1f       	adc	r17, r19
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	90 83       	st	Z, r25
         if(i!=0)
    1ea0:	66 23       	and	r22, r22
    1ea2:	49 f0       	breq	.+18     	; 0x1eb6 <aes_decrypt+0xb2>
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	e4 0f       	add	r30, r20
    1ea8:	f5 1f       	adc	r31, r21
    1eaa:	ea 0f       	add	r30, r26
    1eac:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    1eae:	e0 81       	ld	r30, Z
    1eb0:	9e 27       	eor	r25, r30
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	90 83       	st	Z, r25
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1eba:	20 31       	cpi	r18, 0x10	; 16
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	49 f7       	brne	.-46     	; 0x1e92 <aes_decrypt+0x8e>
    1ec0:	61 50       	subi	r22, 0x01	; 1
    1ec2:	b9 cf       	rjmp	.-142    	; 0x1e36 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1ed0:	90 91 c0 00 	lds	r25, 0x00C0
    1ed4:	95 ff       	sbrs	r25, 5
    1ed6:	fc cf       	rjmp	.-8      	; 0x1ed0 <putc0>
    1ed8:	90 91 c0 00 	lds	r25, 0x00C0
    1edc:	9f 7d       	andi	r25, 0xDF	; 223
    1ede:	90 93 c0 00 	sts	0x00C0, r25
    1ee2:	80 93 c6 00 	sts	0x00C6, r24
    1ee6:	08 95       	ret

00001ee8 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    1ee8:	1f 92       	push	r1
    1eea:	0f 92       	push	r0
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	0f 92       	push	r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	0b b6       	in	r0, 0x3b	; 59
    1ef4:	0f 92       	push	r0
    1ef6:	2f 93       	push	r18
    1ef8:	3f 93       	push	r19
    1efa:	4f 93       	push	r20
    1efc:	5f 93       	push	r21
    1efe:	6f 93       	push	r22
    1f00:	7f 93       	push	r23
    1f02:	8f 93       	push	r24
    1f04:	9f 93       	push	r25
    1f06:	af 93       	push	r26
    1f08:	bf 93       	push	r27
    1f0a:	ef 93       	push	r30
    1f0c:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    1f0e:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    1f12:	80 91 c0 00 	lds	r24, 0x00C0
    1f16:	87 ff       	sbrs	r24, 7
    1f18:	fc cf       	rjmp	.-8      	; 0x1f12 <__vector_25+0x2a>
    1f1a:	80 91 c0 00 	lds	r24, 0x00C0
    1f1e:	8f 77       	andi	r24, 0x7F	; 127
    1f20:	80 93 c0 00 	sts	0x00C0, r24
    1f24:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    1f28:	80 91 b2 04 	lds	r24, 0x04B2
    1f2c:	90 91 b3 04 	lds	r25, 0x04B3
    1f30:	fc 01       	movw	r30, r24
    1f32:	ee 55       	subi	r30, 0x5E	; 94
    1f34:	fb 4f       	sbci	r31, 0xFB	; 251
    1f36:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1f38:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    1f3a:	80 31       	cpi	r24, 0x10	; 16
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1f40:	90 93 b3 04 	sts	0x04B3, r25
    1f44:	80 93 b2 04 	sts	0x04B2, r24
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    1f4a:	10 92 b3 04 	sts	0x04B3, r1
    1f4e:	10 92 b2 04 	sts	0x04B2, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    1f52:	80 91 a1 04 	lds	r24, 0x04A1
    1f56:	0e 94 01 1a 	call	0x3402	; 0x3402 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    1f5a:	80 91 c0 00 	lds	r24, 0x00C0
    1f5e:	8f 77       	andi	r24, 0x7F	; 127
    1f60:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    1f64:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
}
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0b be       	out	0x3b, r0	; 59
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1f8e:	81 11       	cpse	r24, r1
    1f90:	0d c0       	rjmp	.+26     	; 0x1fac <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	40 91 b4 04 	lds	r20, 0x04B4
    1f98:	50 91 b5 04 	lds	r21, 0x04B5
    1f9c:	20 91 b2 04 	lds	r18, 0x04B2
    1fa0:	30 91 b3 04 	lds	r19, 0x04B3
    1fa4:	42 17       	cp	r20, r18
    1fa6:	53 07       	cpc	r21, r19
    1fa8:	51 f4       	brne	.+20     	; 0x1fbe <nrk_uart_data_ready+0x30>
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1fb0:	80 91 c8 00 	lds	r24, 0x00C8
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	88 27       	eor	r24, r24
    1fb8:	88 1f       	adc	r24, r24
    1fba:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
}
    1fbe:	08 95       	ret

00001fc0 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1fc0:	80 91 a1 04 	lds	r24, 0x04A1
    1fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc6:	19 f4       	brne	.+6      	; 0x1fce <nrk_uart_rx_signal_get+0xe>
    1fc8:	8e e0       	ldi	r24, 0x0E	; 14
    1fca:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
   return uart_rx_signal;
}
    1fce:	80 91 a1 04 	lds	r24, 0x04A1
    1fd2:	08 95       	ret

00001fd4 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1fd8:	fc 01       	movw	r30, r24
    1fda:	24 91       	lpm	r18, Z
    1fdc:	ec 01       	movw	r28, r24
    1fde:	21 96       	adiw	r28, 0x01	; 1
    1fe0:	22 23       	and	r18, r18
    1fe2:	51 f0       	breq	.+20     	; 0x1ff8 <nrk_kprintf+0x24>
        putchar(c);
    1fe4:	60 91 36 09 	lds	r22, 0x0936
    1fe8:	70 91 37 09 	lds	r23, 0x0937
    1fec:	82 2f       	mov	r24, r18
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	f0 cf       	rjmp	.-32     	; 0x1fd8 <nrk_kprintf+0x4>
}
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    1ffe:	20 91 b4 04 	lds	r18, 0x04B4
    2002:	30 91 b5 04 	lds	r19, 0x04B5
    2006:	80 91 b2 04 	lds	r24, 0x04B2
    200a:	90 91 b3 04 	lds	r25, 0x04B3
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	69 f4       	brne	.+26     	; 0x202e <getc0+0x30>
    2014:	80 91 a1 04 	lds	r24, 0x04A1
    2018:	0e 94 cf 19 	call	0x339e	; 0x339e <nrk_signal_register>
    201c:	60 91 a1 04 	lds	r22, 0x04A1
    2020:	77 27       	eor	r23, r23
    2022:	67 fd       	sbrc	r22, 7
    2024:	70 95       	com	r23
    2026:	87 2f       	mov	r24, r23
    2028:	97 2f       	mov	r25, r23
    202a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    202e:	6f 3f       	cpi	r22, 0xFF	; 255
    2030:	21 f4       	brne	.+8      	; 0x203a <getc0+0x3c>
    2032:	80 e9       	ldi	r24, 0x90	; 144
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    203a:	20 91 b4 04 	lds	r18, 0x04B4
    203e:	30 91 b5 04 	lds	r19, 0x04B5
    2042:	f9 01       	movw	r30, r18
    2044:	ee 55       	subi	r30, 0x5E	; 94
    2046:	fb 4f       	sbci	r31, 0xFB	; 251
    2048:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    204a:	2f 5f       	subi	r18, 0xFF	; 255
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    204e:	20 31       	cpi	r18, 0x10	; 16
    2050:	31 05       	cpc	r19, r1
    2052:	28 f4       	brcc	.+10     	; 0x205e <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    2054:	30 93 b5 04 	sts	0x04B5, r19
    2058:	20 93 b4 04 	sts	0x04B4, r18
    205c:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    205e:	10 92 b5 04 	sts	0x04B5, r1
    2062:	10 92 b4 04 	sts	0x04B4, r1

   return tmp;
}
    2066:	08 95       	ret

00002068 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    2068:	86 e0       	ldi	r24, 0x06	; 6
    206a:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    206c:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    206e:	88 ef       	ldi	r24, 0xF8	; 248
    2070:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2072:	80 ef       	ldi	r24, 0xF0	; 240
    2074:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	8d b9       	out	0x0d, r24	; 13
    207a:	08 95       	ret

0000207c <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    207c:	0c 94 34 10 	jmp	0x2068	; 0x2068 <PORT_INIT>

00002080 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2080:	8f 3f       	cpi	r24, 0xFF	; 255
    2082:	09 f4       	brne	.+2      	; 0x2086 <nrk_gpio_set+0x6>
    2084:	6c c0       	rjmp	.+216    	; 0x215e <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2086:	e8 2f       	mov	r30, r24
    2088:	e7 70       	andi	r30, 0x07	; 7
    208a:	4e 2f       	mov	r20, r30
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	47 30       	cpi	r20, 0x07	; 7
    2090:	51 05       	cpc	r21, r1
    2092:	08 f0       	brcs	.+2      	; 0x2096 <nrk_gpio_set+0x16>
    2094:	64 c0       	rjmp	.+200    	; 0x215e <nrk_gpio_set+0xde>
    2096:	fa 01       	movw	r30, r20
    2098:	e0 57       	subi	r30, 0x70	; 112
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	86 95       	lsr	r24
    209e:	86 95       	lsr	r24
    20a0:	86 95       	lsr	r24
    20a2:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20a6:	42 b1       	in	r20, 0x02	; 2
    20a8:	21 e0       	ldi	r18, 0x01	; 1
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	b9 01       	movw	r22, r18
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <nrk_gpio_set+0x34>
    20b0:	66 0f       	add	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	8a 95       	dec	r24
    20b6:	e2 f7       	brpl	.-8      	; 0x20b0 <nrk_gpio_set+0x30>
    20b8:	cb 01       	movw	r24, r22
    20ba:	84 2b       	or	r24, r20
    20bc:	82 b9       	out	0x02, r24	; 2
    20be:	4d c0       	rjmp	.+154    	; 0x215a <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20c0:	45 b1       	in	r20, 0x05	; 5
    20c2:	21 e0       	ldi	r18, 0x01	; 1
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	b9 01       	movw	r22, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <nrk_gpio_set+0x4e>
    20ca:	66 0f       	add	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	8a 95       	dec	r24
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <nrk_gpio_set+0x4a>
    20d2:	cb 01       	movw	r24, r22
    20d4:	84 2b       	or	r24, r20
    20d6:	85 b9       	out	0x05, r24	; 5
    20d8:	40 c0       	rjmp	.+128    	; 0x215a <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20da:	48 b1       	in	r20, 0x08	; 8
    20dc:	21 e0       	ldi	r18, 0x01	; 1
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	b9 01       	movw	r22, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <nrk_gpio_set+0x68>
    20e4:	66 0f       	add	r22, r22
    20e6:	77 1f       	adc	r23, r23
    20e8:	8a 95       	dec	r24
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <nrk_gpio_set+0x64>
    20ec:	cb 01       	movw	r24, r22
    20ee:	84 2b       	or	r24, r20
    20f0:	88 b9       	out	0x08, r24	; 8
    20f2:	33 c0       	rjmp	.+102    	; 0x215a <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20f4:	4b b1       	in	r20, 0x0b	; 11
    20f6:	21 e0       	ldi	r18, 0x01	; 1
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	b9 01       	movw	r22, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <nrk_gpio_set+0x82>
    20fe:	66 0f       	add	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	8a 95       	dec	r24
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <nrk_gpio_set+0x7e>
    2106:	cb 01       	movw	r24, r22
    2108:	84 2b       	or	r24, r20
    210a:	8b b9       	out	0x0b, r24	; 11
    210c:	26 c0       	rjmp	.+76     	; 0x215a <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    210e:	4e b1       	in	r20, 0x0e	; 14
    2110:	21 e0       	ldi	r18, 0x01	; 1
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	b9 01       	movw	r22, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <nrk_gpio_set+0x9c>
    2118:	66 0f       	add	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	8a 95       	dec	r24
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <nrk_gpio_set+0x98>
    2120:	cb 01       	movw	r24, r22
    2122:	84 2b       	or	r24, r20
    2124:	8e b9       	out	0x0e, r24	; 14
    2126:	19 c0       	rjmp	.+50     	; 0x215a <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2128:	41 b3       	in	r20, 0x11	; 17
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	b9 01       	movw	r22, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <nrk_gpio_set+0xb6>
    2132:	66 0f       	add	r22, r22
    2134:	77 1f       	adc	r23, r23
    2136:	8a 95       	dec	r24
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <nrk_gpio_set+0xb2>
    213a:	cb 01       	movw	r24, r22
    213c:	84 2b       	or	r24, r20
    213e:	81 bb       	out	0x11, r24	; 17
    2140:	0c c0       	rjmp	.+24     	; 0x215a <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2142:	44 b3       	in	r20, 0x14	; 20
    2144:	21 e0       	ldi	r18, 0x01	; 1
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	b9 01       	movw	r22, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <nrk_gpio_set+0xd0>
    214c:	66 0f       	add	r22, r22
    214e:	77 1f       	adc	r23, r23
    2150:	8a 95       	dec	r24
    2152:	e2 f7       	brpl	.-8      	; 0x214c <nrk_gpio_set+0xcc>
    2154:	cb 01       	movw	r24, r22
    2156:	84 2b       	or	r24, r20
    2158:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    215c:	08 95       	ret
                default: return -1;
    215e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2160:	08 95       	ret

00002162 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2162:	8f 3f       	cpi	r24, 0xFF	; 255
    2164:	09 f4       	brne	.+2      	; 0x2168 <nrk_gpio_clr+0x6>
    2166:	65 c0       	rjmp	.+202    	; 0x2232 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    2168:	e8 2f       	mov	r30, r24
    216a:	e7 70       	andi	r30, 0x07	; 7
    216c:	4e 2f       	mov	r20, r30
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	47 30       	cpi	r20, 0x07	; 7
    2172:	51 05       	cpc	r21, r1
    2174:	08 f0       	brcs	.+2      	; 0x2178 <nrk_gpio_clr+0x16>
    2176:	5d c0       	rjmp	.+186    	; 0x2232 <nrk_gpio_clr+0xd0>
    2178:	fa 01       	movw	r30, r20
    217a:	e9 56       	subi	r30, 0x69	; 105
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	86 95       	lsr	r24
    2180:	86 95       	lsr	r24
    2182:	86 95       	lsr	r24
    2184:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2188:	42 b1       	in	r20, 0x02	; 2
    218a:	21 e0       	ldi	r18, 0x01	; 1
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	b9 01       	movw	r22, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <nrk_gpio_clr+0x34>
    2192:	66 0f       	add	r22, r22
    2194:	77 1f       	adc	r23, r23
    2196:	8a 95       	dec	r24
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <nrk_gpio_clr+0x30>
    219a:	cb 01       	movw	r24, r22
    219c:	80 95       	com	r24
    219e:	84 23       	and	r24, r20
    21a0:	82 b9       	out	0x02, r24	; 2
    21a2:	45 c0       	rjmp	.+138    	; 0x222e <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    21a4:	45 b1       	in	r20, 0x05	; 5
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	b9 01       	movw	r22, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <nrk_gpio_clr+0x50>
    21ae:	66 0f       	add	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	8a 95       	dec	r24
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <nrk_gpio_clr+0x4c>
    21b6:	cb 01       	movw	r24, r22
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	85 b9       	out	0x05, r24	; 5
    21be:	37 c0       	rjmp	.+110    	; 0x222e <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21c0:	48 b1       	in	r20, 0x08	; 8
    21c2:	21 e0       	ldi	r18, 0x01	; 1
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	b9 01       	movw	r22, r18
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <nrk_gpio_clr+0x6c>
    21ca:	66 0f       	add	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	8a 95       	dec	r24
    21d0:	e2 f7       	brpl	.-8      	; 0x21ca <nrk_gpio_clr+0x68>
    21d2:	cb 01       	movw	r24, r22
    21d4:	80 95       	com	r24
    21d6:	84 23       	and	r24, r20
    21d8:	88 b9       	out	0x08, r24	; 8
    21da:	29 c0       	rjmp	.+82     	; 0x222e <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21dc:	4b b1       	in	r20, 0x0b	; 11
    21de:	21 e0       	ldi	r18, 0x01	; 1
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	b9 01       	movw	r22, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <nrk_gpio_clr+0x88>
    21e6:	66 0f       	add	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	8a 95       	dec	r24
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <nrk_gpio_clr+0x84>
    21ee:	cb 01       	movw	r24, r22
    21f0:	80 95       	com	r24
    21f2:	84 23       	and	r24, r20
    21f4:	8b b9       	out	0x0b, r24	; 11
    21f6:	1b c0       	rjmp	.+54     	; 0x222e <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21f8:	4e b1       	in	r20, 0x0e	; 14
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	b9 01       	movw	r22, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <nrk_gpio_clr+0xa4>
    2202:	66 0f       	add	r22, r22
    2204:	77 1f       	adc	r23, r23
    2206:	8a 95       	dec	r24
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <nrk_gpio_clr+0xa0>
    220a:	cb 01       	movw	r24, r22
    220c:	80 95       	com	r24
    220e:	84 23       	and	r24, r20
    2210:	8e b9       	out	0x0e, r24	; 14
    2212:	0d c0       	rjmp	.+26     	; 0x222e <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2214:	41 b3       	in	r20, 0x11	; 17
    2216:	21 e0       	ldi	r18, 0x01	; 1
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	b9 01       	movw	r22, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <nrk_gpio_clr+0xc0>
    221e:	66 0f       	add	r22, r22
    2220:	77 1f       	adc	r23, r23
    2222:	8a 95       	dec	r24
    2224:	e2 f7       	brpl	.-8      	; 0x221e <nrk_gpio_clr+0xbc>
    2226:	cb 01       	movw	r24, r22
    2228:	80 95       	com	r24
    222a:	84 23       	and	r24, r20
    222c:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2230:	08 95       	ret
                default: return -1;
    2232:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2234:	08 95       	ret

00002236 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2236:	8f 3f       	cpi	r24, 0xFF	; 255
    2238:	31 f1       	breq	.+76     	; 0x2286 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    223a:	e8 2f       	mov	r30, r24
    223c:	e7 70       	andi	r30, 0x07	; 7
    223e:	4e 2f       	mov	r20, r30
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	47 30       	cpi	r20, 0x07	; 7
    2244:	51 05       	cpc	r21, r1
    2246:	f8 f4       	brcc	.+62     	; 0x2286 <nrk_gpio_get+0x50>
    2248:	fa 01       	movw	r30, r20
    224a:	e2 56       	subi	r30, 0x62	; 98
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	28 2f       	mov	r18, r24
    2250:	26 95       	lsr	r18
    2252:	26 95       	lsr	r18
    2254:	26 95       	lsr	r18
    2256:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    225a:	90 b1       	in	r25, 0x00	; 0
    225c:	0b c0       	rjmp	.+22     	; 0x2274 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    225e:	93 b1       	in	r25, 0x03	; 3
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2262:	96 b1       	in	r25, 0x06	; 6
    2264:	07 c0       	rjmp	.+14     	; 0x2274 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2266:	99 b1       	in	r25, 0x09	; 9
    2268:	05 c0       	rjmp	.+10     	; 0x2274 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    226a:	9c b1       	in	r25, 0x0c	; 12
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    226e:	9f b1       	in	r25, 0x0f	; 15
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2272:	92 b3       	in	r25, 0x12	; 18
    2274:	89 2f       	mov	r24, r25
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <nrk_gpio_get+0x48>
    227a:	95 95       	asr	r25
    227c:	87 95       	ror	r24
    227e:	2a 95       	dec	r18
    2280:	e2 f7       	brpl	.-8      	; 0x227a <nrk_gpio_get+0x44>
    2282:	81 70       	andi	r24, 0x01	; 1
    2284:	08 95       	ret
                default: return -1;
    2286:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2288:	08 95       	ret

0000228a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    228a:	8f 3f       	cpi	r24, 0xFF	; 255
    228c:	09 f4       	brne	.+2      	; 0x2290 <nrk_gpio_toggle+0x6>
    228e:	06 c1       	rjmp	.+524    	; 0x249c <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2290:	e8 2f       	mov	r30, r24
    2292:	e7 70       	andi	r30, 0x07	; 7
    2294:	4e 2f       	mov	r20, r30
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	47 30       	cpi	r20, 0x07	; 7
    229a:	51 05       	cpc	r21, r1
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <nrk_gpio_toggle+0x16>
    229e:	fe c0       	rjmp	.+508    	; 0x249c <nrk_gpio_toggle+0x212>
    22a0:	fa 01       	movw	r30, r20
    22a2:	eb 55       	subi	r30, 0x5B	; 91
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	86 95       	lsr	r24
    22a8:	86 95       	lsr	r24
    22aa:	86 95       	lsr	r24
    22ac:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    22b0:	20 b1       	in	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	08 2e       	mov	r0, r24
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <nrk_gpio_toggle+0x32>
    22b8:	35 95       	asr	r19
    22ba:	27 95       	ror	r18
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22c0:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    22c2:	20 fd       	sbrc	r18, 0
    22c4:	0b c0       	rjmp	.+22     	; 0x22dc <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22c6:	21 e0       	ldi	r18, 0x01	; 1
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	b9 01       	movw	r22, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <nrk_gpio_toggle+0x48>
    22ce:	66 0f       	add	r22, r22
    22d0:	77 1f       	adc	r23, r23
    22d2:	8a 95       	dec	r24
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <nrk_gpio_toggle+0x44>
    22d6:	cb 01       	movw	r24, r22
    22d8:	84 2b       	or	r24, r20
    22da:	0b c0       	rjmp	.+22     	; 0x22f2 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    22dc:	21 e0       	ldi	r18, 0x01	; 1
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	b9 01       	movw	r22, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <nrk_gpio_toggle+0x5e>
    22e4:	66 0f       	add	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <nrk_gpio_toggle+0x5a>
    22ec:	cb 01       	movw	r24, r22
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	82 b9       	out	0x02, r24	; 2
    22f4:	16 c0       	rjmp	.+44     	; 0x2322 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    22f6:	23 b1       	in	r18, 0x03	; 3
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	08 2e       	mov	r0, r24
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <nrk_gpio_toggle+0x78>
    22fe:	35 95       	asr	r19
    2300:	27 95       	ror	r18
    2302:	0a 94       	dec	r0
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2306:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2308:	20 fd       	sbrc	r18, 0
    230a:	0d c0       	rjmp	.+26     	; 0x2326 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	b9 01       	movw	r22, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <nrk_gpio_toggle+0x8e>
    2314:	66 0f       	add	r22, r22
    2316:	77 1f       	adc	r23, r23
    2318:	8a 95       	dec	r24
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <nrk_gpio_toggle+0x8a>
    231c:	cb 01       	movw	r24, r22
    231e:	84 2b       	or	r24, r20
    2320:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2326:	21 e0       	ldi	r18, 0x01	; 1
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	b9 01       	movw	r22, r18
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <nrk_gpio_toggle+0xa8>
    232e:	66 0f       	add	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	8a 95       	dec	r24
    2334:	e2 f7       	brpl	.-8      	; 0x232e <nrk_gpio_toggle+0xa4>
    2336:	cb 01       	movw	r24, r22
    2338:	80 95       	com	r24
    233a:	84 23       	and	r24, r20
    233c:	f1 cf       	rjmp	.-30     	; 0x2320 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    233e:	26 b1       	in	r18, 0x06	; 6
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	08 2e       	mov	r0, r24
    2344:	02 c0       	rjmp	.+4      	; 0x234a <nrk_gpio_toggle+0xc0>
    2346:	35 95       	asr	r19
    2348:	27 95       	ror	r18
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    234e:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2350:	20 fd       	sbrc	r18, 0
    2352:	0b c0       	rjmp	.+22     	; 0x236a <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2354:	21 e0       	ldi	r18, 0x01	; 1
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	b9 01       	movw	r22, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <nrk_gpio_toggle+0xd6>
    235c:	66 0f       	add	r22, r22
    235e:	77 1f       	adc	r23, r23
    2360:	8a 95       	dec	r24
    2362:	e2 f7       	brpl	.-8      	; 0x235c <nrk_gpio_toggle+0xd2>
    2364:	cb 01       	movw	r24, r22
    2366:	84 2b       	or	r24, r20
    2368:	0b c0       	rjmp	.+22     	; 0x2380 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	b9 01       	movw	r22, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <nrk_gpio_toggle+0xec>
    2372:	66 0f       	add	r22, r22
    2374:	77 1f       	adc	r23, r23
    2376:	8a 95       	dec	r24
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <nrk_gpio_toggle+0xe8>
    237a:	cb 01       	movw	r24, r22
    237c:	80 95       	com	r24
    237e:	84 23       	and	r24, r20
    2380:	88 b9       	out	0x08, r24	; 8
    2382:	cf cf       	rjmp	.-98     	; 0x2322 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2384:	29 b1       	in	r18, 0x09	; 9
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	08 2e       	mov	r0, r24
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <nrk_gpio_toggle+0x106>
    238c:	35 95       	asr	r19
    238e:	27 95       	ror	r18
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2394:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2396:	20 fd       	sbrc	r18, 0
    2398:	0b c0       	rjmp	.+22     	; 0x23b0 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    239a:	21 e0       	ldi	r18, 0x01	; 1
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	b9 01       	movw	r22, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <nrk_gpio_toggle+0x11c>
    23a2:	66 0f       	add	r22, r22
    23a4:	77 1f       	adc	r23, r23
    23a6:	8a 95       	dec	r24
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <nrk_gpio_toggle+0x118>
    23aa:	cb 01       	movw	r24, r22
    23ac:	84 2b       	or	r24, r20
    23ae:	0b c0       	rjmp	.+22     	; 0x23c6 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    23b0:	21 e0       	ldi	r18, 0x01	; 1
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	b9 01       	movw	r22, r18
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <nrk_gpio_toggle+0x132>
    23b8:	66 0f       	add	r22, r22
    23ba:	77 1f       	adc	r23, r23
    23bc:	8a 95       	dec	r24
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <nrk_gpio_toggle+0x12e>
    23c0:	cb 01       	movw	r24, r22
    23c2:	80 95       	com	r24
    23c4:	84 23       	and	r24, r20
    23c6:	8b b9       	out	0x0b, r24	; 11
    23c8:	ac cf       	rjmp	.-168    	; 0x2322 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23ca:	2c b1       	in	r18, 0x0c	; 12
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	08 2e       	mov	r0, r24
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <nrk_gpio_toggle+0x14c>
    23d2:	35 95       	asr	r19
    23d4:	27 95       	ror	r18
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    23da:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23dc:	20 fd       	sbrc	r18, 0
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    23e0:	21 e0       	ldi	r18, 0x01	; 1
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	b9 01       	movw	r22, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <nrk_gpio_toggle+0x162>
    23e8:	66 0f       	add	r22, r22
    23ea:	77 1f       	adc	r23, r23
    23ec:	8a 95       	dec	r24
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <nrk_gpio_toggle+0x15e>
    23f0:	cb 01       	movw	r24, r22
    23f2:	84 2b       	or	r24, r20
    23f4:	0b c0       	rjmp	.+22     	; 0x240c <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	b9 01       	movw	r22, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <nrk_gpio_toggle+0x178>
    23fe:	66 0f       	add	r22, r22
    2400:	77 1f       	adc	r23, r23
    2402:	8a 95       	dec	r24
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <nrk_gpio_toggle+0x174>
    2406:	cb 01       	movw	r24, r22
    2408:	80 95       	com	r24
    240a:	84 23       	and	r24, r20
    240c:	8e b9       	out	0x0e, r24	; 14
    240e:	89 cf       	rjmp	.-238    	; 0x2322 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2410:	2f b1       	in	r18, 0x0f	; 15
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	08 2e       	mov	r0, r24
    2416:	02 c0       	rjmp	.+4      	; 0x241c <nrk_gpio_toggle+0x192>
    2418:	35 95       	asr	r19
    241a:	27 95       	ror	r18
    241c:	0a 94       	dec	r0
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2420:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2422:	20 fd       	sbrc	r18, 0
    2424:	0b c0       	rjmp	.+22     	; 0x243c <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2426:	21 e0       	ldi	r18, 0x01	; 1
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	b9 01       	movw	r22, r18
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <nrk_gpio_toggle+0x1a8>
    242e:	66 0f       	add	r22, r22
    2430:	77 1f       	adc	r23, r23
    2432:	8a 95       	dec	r24
    2434:	e2 f7       	brpl	.-8      	; 0x242e <nrk_gpio_toggle+0x1a4>
    2436:	cb 01       	movw	r24, r22
    2438:	84 2b       	or	r24, r20
    243a:	0b c0       	rjmp	.+22     	; 0x2452 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    243c:	21 e0       	ldi	r18, 0x01	; 1
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	b9 01       	movw	r22, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <nrk_gpio_toggle+0x1be>
    2444:	66 0f       	add	r22, r22
    2446:	77 1f       	adc	r23, r23
    2448:	8a 95       	dec	r24
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <nrk_gpio_toggle+0x1ba>
    244c:	cb 01       	movw	r24, r22
    244e:	80 95       	com	r24
    2450:	84 23       	and	r24, r20
    2452:	81 bb       	out	0x11, r24	; 17
    2454:	66 cf       	rjmp	.-308    	; 0x2322 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2456:	22 b3       	in	r18, 0x12	; 18
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	08 2e       	mov	r0, r24
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <nrk_gpio_toggle+0x1d8>
    245e:	35 95       	asr	r19
    2460:	27 95       	ror	r18
    2462:	0a 94       	dec	r0
    2464:	e2 f7       	brpl	.-8      	; 0x245e <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2466:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2468:	20 fd       	sbrc	r18, 0
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    246c:	21 e0       	ldi	r18, 0x01	; 1
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	b9 01       	movw	r22, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <nrk_gpio_toggle+0x1ee>
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	8a 95       	dec	r24
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <nrk_gpio_toggle+0x1ea>
    247c:	cb 01       	movw	r24, r22
    247e:	84 2b       	or	r24, r20
    2480:	0b c0       	rjmp	.+22     	; 0x2498 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2482:	21 e0       	ldi	r18, 0x01	; 1
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	b9 01       	movw	r22, r18
    2488:	02 c0       	rjmp	.+4      	; 0x248e <nrk_gpio_toggle+0x204>
    248a:	66 0f       	add	r22, r22
    248c:	77 1f       	adc	r23, r23
    248e:	8a 95       	dec	r24
    2490:	e2 f7       	brpl	.-8      	; 0x248a <nrk_gpio_toggle+0x200>
    2492:	cb 01       	movw	r24, r22
    2494:	80 95       	com	r24
    2496:	84 23       	and	r24, r20
    2498:	84 bb       	out	0x14, r24	; 20
    249a:	43 cf       	rjmp	.-378    	; 0x2322 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    249c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    249e:	08 95       	ret

000024a0 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    24a0:	8f 3f       	cpi	r24, 0xFF	; 255
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <nrk_gpio_direction+0x6>
    24a4:	d5 c0       	rjmp	.+426    	; 0x2650 <nrk_gpio_direction+0x1b0>
    24a6:	e8 2f       	mov	r30, r24
    24a8:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    24aa:	4e 2f       	mov	r20, r30
    24ac:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    24ae:	61 11       	cpse	r22, r1
    24b0:	67 c0       	rjmp	.+206    	; 0x2580 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    24b2:	47 30       	cpi	r20, 0x07	; 7
    24b4:	51 05       	cpc	r21, r1
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <nrk_gpio_direction+0x1a>
    24b8:	cb c0       	rjmp	.+406    	; 0x2650 <nrk_gpio_direction+0x1b0>
    24ba:	fa 01       	movw	r30, r20
    24bc:	e4 55       	subi	r30, 0x54	; 84
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	86 95       	lsr	r24
    24c2:	86 95       	lsr	r24
    24c4:	86 95       	lsr	r24
    24c6:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    24ca:	41 b1       	in	r20, 0x01	; 1
    24cc:	21 e0       	ldi	r18, 0x01	; 1
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	b9 01       	movw	r22, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <nrk_gpio_direction+0x38>
    24d4:	66 0f       	add	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	8a 95       	dec	r24
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <nrk_gpio_direction+0x34>
    24dc:	cb 01       	movw	r24, r22
    24de:	80 95       	com	r24
    24e0:	84 23       	and	r24, r20
    24e2:	65 c0       	rjmp	.+202    	; 0x25ae <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    24e4:	44 b1       	in	r20, 0x04	; 4
    24e6:	21 e0       	ldi	r18, 0x01	; 1
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	b9 01       	movw	r22, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <nrk_gpio_direction+0x52>
    24ee:	66 0f       	add	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	8a 95       	dec	r24
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <nrk_gpio_direction+0x4e>
    24f6:	cb 01       	movw	r24, r22
    24f8:	80 95       	com	r24
    24fa:	84 23       	and	r24, r20
    24fc:	65 c0       	rjmp	.+202    	; 0x25c8 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    24fe:	47 b1       	in	r20, 0x07	; 7
    2500:	21 e0       	ldi	r18, 0x01	; 1
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	b9 01       	movw	r22, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <nrk_gpio_direction+0x6c>
    2508:	66 0f       	add	r22, r22
    250a:	77 1f       	adc	r23, r23
    250c:	8a 95       	dec	r24
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <nrk_gpio_direction+0x68>
    2510:	cb 01       	movw	r24, r22
    2512:	80 95       	com	r24
    2514:	84 23       	and	r24, r20
    2516:	65 c0       	rjmp	.+202    	; 0x25e2 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2518:	4a b1       	in	r20, 0x0a	; 10
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	b9 01       	movw	r22, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <nrk_gpio_direction+0x86>
    2522:	66 0f       	add	r22, r22
    2524:	77 1f       	adc	r23, r23
    2526:	8a 95       	dec	r24
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <nrk_gpio_direction+0x82>
    252a:	cb 01       	movw	r24, r22
    252c:	80 95       	com	r24
    252e:	84 23       	and	r24, r20
    2530:	65 c0       	rjmp	.+202    	; 0x25fc <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2532:	4d b1       	in	r20, 0x0d	; 13
    2534:	21 e0       	ldi	r18, 0x01	; 1
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	b9 01       	movw	r22, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <nrk_gpio_direction+0xa0>
    253c:	66 0f       	add	r22, r22
    253e:	77 1f       	adc	r23, r23
    2540:	8a 95       	dec	r24
    2542:	e2 f7       	brpl	.-8      	; 0x253c <nrk_gpio_direction+0x9c>
    2544:	cb 01       	movw	r24, r22
    2546:	80 95       	com	r24
    2548:	84 23       	and	r24, r20
    254a:	65 c0       	rjmp	.+202    	; 0x2616 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    254c:	40 b3       	in	r20, 0x10	; 16
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	b9 01       	movw	r22, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <nrk_gpio_direction+0xba>
    2556:	66 0f       	add	r22, r22
    2558:	77 1f       	adc	r23, r23
    255a:	8a 95       	dec	r24
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <nrk_gpio_direction+0xb6>
    255e:	cb 01       	movw	r24, r22
    2560:	80 95       	com	r24
    2562:	84 23       	and	r24, r20
    2564:	65 c0       	rjmp	.+202    	; 0x2630 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2566:	43 b3       	in	r20, 0x13	; 19
    2568:	21 e0       	ldi	r18, 0x01	; 1
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	b9 01       	movw	r22, r18
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <nrk_gpio_direction+0xd4>
    2570:	66 0f       	add	r22, r22
    2572:	77 1f       	adc	r23, r23
    2574:	8a 95       	dec	r24
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <nrk_gpio_direction+0xd0>
    2578:	cb 01       	movw	r24, r22
    257a:	80 95       	com	r24
    257c:	84 23       	and	r24, r20
    257e:	65 c0       	rjmp	.+202    	; 0x264a <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2580:	47 30       	cpi	r20, 0x07	; 7
    2582:	51 05       	cpc	r21, r1
    2584:	08 f0       	brcs	.+2      	; 0x2588 <nrk_gpio_direction+0xe8>
    2586:	64 c0       	rjmp	.+200    	; 0x2650 <nrk_gpio_direction+0x1b0>
    2588:	fa 01       	movw	r30, r20
    258a:	ed 54       	subi	r30, 0x4D	; 77
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	86 95       	lsr	r24
    2590:	86 95       	lsr	r24
    2592:	86 95       	lsr	r24
    2594:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2598:	41 b1       	in	r20, 0x01	; 1
    259a:	21 e0       	ldi	r18, 0x01	; 1
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	b9 01       	movw	r22, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <nrk_gpio_direction+0x106>
    25a2:	66 0f       	add	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	8a 95       	dec	r24
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <nrk_gpio_direction+0x102>
    25aa:	cb 01       	movw	r24, r22
    25ac:	84 2b       	or	r24, r20
    25ae:	81 b9       	out	0x01, r24	; 1
    25b0:	4d c0       	rjmp	.+154    	; 0x264c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    25b2:	44 b1       	in	r20, 0x04	; 4
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	b9 01       	movw	r22, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <nrk_gpio_direction+0x120>
    25bc:	66 0f       	add	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	8a 95       	dec	r24
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <nrk_gpio_direction+0x11c>
    25c4:	cb 01       	movw	r24, r22
    25c6:	84 2b       	or	r24, r20
    25c8:	84 b9       	out	0x04, r24	; 4
    25ca:	40 c0       	rjmp	.+128    	; 0x264c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    25cc:	47 b1       	in	r20, 0x07	; 7
    25ce:	21 e0       	ldi	r18, 0x01	; 1
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	b9 01       	movw	r22, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <nrk_gpio_direction+0x13a>
    25d6:	66 0f       	add	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	8a 95       	dec	r24
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <nrk_gpio_direction+0x136>
    25de:	cb 01       	movw	r24, r22
    25e0:	84 2b       	or	r24, r20
    25e2:	87 b9       	out	0x07, r24	; 7
    25e4:	33 c0       	rjmp	.+102    	; 0x264c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    25e6:	4a b1       	in	r20, 0x0a	; 10
    25e8:	21 e0       	ldi	r18, 0x01	; 1
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	b9 01       	movw	r22, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <nrk_gpio_direction+0x154>
    25f0:	66 0f       	add	r22, r22
    25f2:	77 1f       	adc	r23, r23
    25f4:	8a 95       	dec	r24
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <nrk_gpio_direction+0x150>
    25f8:	cb 01       	movw	r24, r22
    25fa:	84 2b       	or	r24, r20
    25fc:	8a b9       	out	0x0a, r24	; 10
    25fe:	26 c0       	rjmp	.+76     	; 0x264c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2600:	4d b1       	in	r20, 0x0d	; 13
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	b9 01       	movw	r22, r18
    2608:	02 c0       	rjmp	.+4      	; 0x260e <nrk_gpio_direction+0x16e>
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	8a 95       	dec	r24
    2610:	e2 f7       	brpl	.-8      	; 0x260a <nrk_gpio_direction+0x16a>
    2612:	cb 01       	movw	r24, r22
    2614:	84 2b       	or	r24, r20
    2616:	8d b9       	out	0x0d, r24	; 13
    2618:	19 c0       	rjmp	.+50     	; 0x264c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    261a:	40 b3       	in	r20, 0x10	; 16
    261c:	21 e0       	ldi	r18, 0x01	; 1
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	b9 01       	movw	r22, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <nrk_gpio_direction+0x188>
    2624:	66 0f       	add	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	8a 95       	dec	r24
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <nrk_gpio_direction+0x184>
    262c:	cb 01       	movw	r24, r22
    262e:	84 2b       	or	r24, r20
    2630:	80 bb       	out	0x10, r24	; 16
    2632:	0c c0       	rjmp	.+24     	; 0x264c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2634:	43 b3       	in	r20, 0x13	; 19
    2636:	21 e0       	ldi	r18, 0x01	; 1
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	b9 01       	movw	r22, r18
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <nrk_gpio_direction+0x1a2>
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	8a 95       	dec	r24
    2644:	e2 f7       	brpl	.-8      	; 0x263e <nrk_gpio_direction+0x19e>
    2646:	cb 01       	movw	r24, r22
    2648:	84 2b       	or	r24, r20
    264a:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    264e:	08 95       	ret
                        default: return -1;
    2650:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2652:	08 95       	ret

00002654 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2654:	81 11       	cpse	r24, r1
    2656:	06 c0       	rjmp	.+12     	; 0x2664 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    2658:	80 b1       	in	r24, 0x00	; 0
    265a:	86 95       	lsr	r24
    265c:	81 70       	andi	r24, 0x01	; 1
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	89 27       	eor	r24, r25
    2662:	08 95       	ret
	} 
return -1;
    2664:	8f ef       	ldi	r24, 0xFF	; 255
}
    2666:	08 95       	ret

00002668 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	11 f4       	brne	.+4      	; 0x2670 <nrk_led_toggle+0x8>
    266c:	83 e2       	ldi	r24, 0x23	; 35
    266e:	0d c0       	rjmp	.+26     	; 0x268a <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	91 05       	cpc	r25, r1
    2674:	11 f4       	brne	.+4      	; 0x267a <nrk_led_toggle+0x12>
    2676:	8b e2       	ldi	r24, 0x2B	; 43
    2678:	08 c0       	rjmp	.+16     	; 0x268a <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    267a:	82 30       	cpi	r24, 0x02	; 2
    267c:	91 05       	cpc	r25, r1
    267e:	11 f4       	brne	.+4      	; 0x2684 <nrk_led_toggle+0x1c>
    2680:	83 e3       	ldi	r24, 0x33	; 51
    2682:	03 c0       	rjmp	.+6      	; 0x268a <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2684:	03 97       	sbiw	r24, 0x03	; 3
    2686:	29 f4       	brne	.+10     	; 0x2692 <nrk_led_toggle+0x2a>
    2688:	8b e3       	ldi	r24, 0x3B	; 59
    268a:	0e 94 45 11 	call	0x228a	; 0x228a <nrk_gpio_toggle>
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	08 95       	ret
return -1;
    2692:	8f ef       	ldi	r24, 0xFF	; 255
}
    2694:	08 95       	ret

00002696 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	11 f4       	brne	.+4      	; 0x269e <nrk_led_clr+0x8>
    269a:	83 e2       	ldi	r24, 0x23	; 35
    269c:	0d c0       	rjmp	.+26     	; 0x26b8 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	91 05       	cpc	r25, r1
    26a2:	11 f4       	brne	.+4      	; 0x26a8 <nrk_led_clr+0x12>
    26a4:	8b e2       	ldi	r24, 0x2B	; 43
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	91 05       	cpc	r25, r1
    26ac:	11 f4       	brne	.+4      	; 0x26b2 <nrk_led_clr+0x1c>
    26ae:	83 e3       	ldi	r24, 0x33	; 51
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    26b2:	03 97       	sbiw	r24, 0x03	; 3
    26b4:	29 f4       	brne	.+10     	; 0x26c0 <nrk_led_clr+0x2a>
    26b6:	8b e3       	ldi	r24, 0x3B	; 59
    26b8:	0e 94 40 10 	call	0x2080	; 0x2080 <nrk_gpio_set>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	08 95       	ret
return -1;
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
}
    26c2:	08 95       	ret

000026c4 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	11 f4       	brne	.+4      	; 0x26cc <nrk_led_set+0x8>
    26c8:	83 e2       	ldi	r24, 0x23	; 35
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	91 05       	cpc	r25, r1
    26d0:	11 f4       	brne	.+4      	; 0x26d6 <nrk_led_set+0x12>
    26d2:	8b e2       	ldi	r24, 0x2B	; 43
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    26d6:	82 30       	cpi	r24, 0x02	; 2
    26d8:	91 05       	cpc	r25, r1
    26da:	11 f4       	brne	.+4      	; 0x26e0 <nrk_led_set+0x1c>
    26dc:	83 e3       	ldi	r24, 0x33	; 51
    26de:	03 c0       	rjmp	.+6      	; 0x26e6 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    26e0:	03 97       	sbiw	r24, 0x03	; 3
    26e2:	29 f4       	brne	.+10     	; 0x26ee <nrk_led_set+0x2a>
    26e4:	8b e3       	ldi	r24, 0x3B	; 59
    26e6:	0e 94 b1 10 	call	0x2162	; 0x2162 <nrk_gpio_clr>
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	08 95       	ret
return -1;
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
}
    26f0:	08 95       	ret

000026f2 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    26f2:	88 23       	and	r24, r24
    26f4:	19 f0       	breq	.+6      	; 0x26fc <nrk_gpio_pullups+0xa>
    26f6:	85 b7       	in	r24, 0x35	; 53
    26f8:	8f 7e       	andi	r24, 0xEF	; 239
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    26fc:	85 b7       	in	r24, 0x35	; 53
    26fe:	80 61       	ori	r24, 0x10	; 16
    2700:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	08 95       	ret

00002706 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2706:	90 91 c8 00 	lds	r25, 0x00C8
    270a:	95 ff       	sbrs	r25, 5
    270c:	fc cf       	rjmp	.-8      	; 0x2706 <putc1>
    270e:	80 93 ce 00 	sts	0x00CE, r24
    2712:	08 95       	ret

00002714 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2714:	90 93 c5 00 	sts	0x00C5, r25
    2718:	80 93 c4 00 	sts	0x00C4, r24
    271c:	86 e0       	ldi	r24, 0x06	; 6
    271e:	80 93 c2 00 	sts	0x00C2, r24
    2722:	e1 ec       	ldi	r30, 0xC1	; 193
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8b 7f       	andi	r24, 0xFB	; 251
    272a:	80 83       	st	Z, r24
    272c:	a0 ec       	ldi	r26, 0xC0	; 192
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	8c 91       	ld	r24, X
    2732:	82 60       	ori	r24, 0x02	; 2
    2734:	8c 93       	st	X, r24
ENABLE_UART0();
    2736:	80 81       	ld	r24, Z
    2738:	88 61       	ori	r24, 0x18	; 24
    273a:	80 83       	st	Z, r24
    273c:	08 95       	ret

0000273e <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    273e:	90 93 cd 00 	sts	0x00CD, r25
    2742:	80 93 cc 00 	sts	0x00CC, r24
    2746:	86 e0       	ldi	r24, 0x06	; 6
    2748:	80 93 ca 00 	sts	0x00CA, r24
    274c:	e9 ec       	ldi	r30, 0xC9	; 201
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8b 7f       	andi	r24, 0xFB	; 251
    2754:	80 83       	st	Z, r24
    2756:	a8 ec       	ldi	r26, 0xC8	; 200
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	8c 91       	ld	r24, X
    275c:	82 60       	ori	r24, 0x02	; 2
    275e:	8c 93       	st	X, r24
ENABLE_UART1();
    2760:	80 81       	ld	r24, Z
    2762:	88 61       	ori	r24, 0x18	; 24
    2764:	80 83       	st	Z, r24
    2766:	08 95       	ret

00002768 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2768:	0e 94 8a 13 	call	0x2714	; 0x2714 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    276c:	6f ef       	ldi	r22, 0xFF	; 255
    276e:	7f e0       	ldi	r23, 0x0F	; 15
    2770:	88 e6       	ldi	r24, 0x68	; 104
    2772:	9f e0       	ldi	r25, 0x0F	; 15
    2774:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <fdevopen>
    2778:	90 93 37 09 	sts	0x0937, r25
    277c:	80 93 36 09 	sts	0x0936, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2780:	6f ef       	ldi	r22, 0xFF	; 255
    2782:	7f e0       	ldi	r23, 0x0F	; 15
    2784:	88 e6       	ldi	r24, 0x68	; 104
    2786:	9f e0       	ldi	r25, 0x0F	; 15
    2788:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <fdevopen>
    278c:	90 93 35 09 	sts	0x0935, r25
    2790:	80 93 34 09 	sts	0x0934, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    2794:	0e 94 bf 18 	call	0x317e	; 0x317e <nrk_signal_create>
    2798:	80 93 a1 04 	sts	0x04A1, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    279c:	8f 3f       	cpi	r24, 0xFF	; 255
    279e:	19 f4       	brne	.+6      	; 0x27a6 <nrk_setup_uart+0x3e>
    27a0:	8e e0       	ldi	r24, 0x0E	; 14
    27a2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
   uart_rx_buf_start=0;
    27a6:	10 92 b5 04 	sts	0x04B5, r1
    27aa:	10 92 b4 04 	sts	0x04B4, r1
   uart_rx_buf_end=0;
    27ae:	10 92 b3 04 	sts	0x04B3, r1
    27b2:	10 92 b2 04 	sts	0x04B2, r1
   ENABLE_UART0_RX_INT();
    27b6:	80 91 c1 00 	lds	r24, 0x00C1
    27ba:	80 68       	ori	r24, 0x80	; 128
    27bc:	80 93 c1 00 	sts	0x00C1, r24
    27c0:	08 95       	ret

000027c2 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    27c2:	80 91 c8 00 	lds	r24, 0x00C8
    27c6:	87 ff       	sbrs	r24, 7
    27c8:	fc cf       	rjmp	.-8      	; 0x27c2 <getc1>
    27ca:	80 91 c8 00 	lds	r24, 0x00C8
    27ce:	8f 77       	andi	r24, 0x7F	; 127
    27d0:	80 93 c8 00 	sts	0x00C8, r24
    27d4:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    27d8:	08 95       	ret

000027da <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	d1 f7       	brne	.-12     	; 0x27da <halWait>

} // halWait
    27e6:	08 95       	ret

000027e8 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    27e8:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>

000027ec <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    27ec:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__eewr_byte_m128rfa1>
}
    27f0:	08 95       	ret

000027f2 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    2808:	18 2f       	mov	r17, r24
    280a:	f7 01       	movw	r30, r14
    280c:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    2816:	08 2f       	mov	r16, r24
    2818:	f7 01       	movw	r30, r14
    281a:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    2824:	d8 2f       	mov	r29, r24
    2826:	f7 01       	movw	r30, r14
    2828:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    2832:	c8 2f       	mov	r28, r24
    2834:	f7 01       	movw	r30, r14
    2836:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2838:	84 e0       	ldi	r24, 0x04	; 4
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    2840:	10 0f       	add	r17, r16
    2842:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2844:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    2846:	8c 17       	cp	r24, r28
    2848:	11 f0       	breq	.+4      	; 0x284e <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    284a:	8f ef       	ldi	r24, 0xFF	; 255
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    284e:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	08 95       	ret

0000285e <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2864:	85 e0       	ldi	r24, 0x05	; 5
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    286c:	88 83       	st	Y, r24
return NRK_OK;
}
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	08 95       	ret

00002876 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2876:	fc 01       	movw	r30, r24
    2878:	60 81       	ld	r22, Z
    287a:	86 e0       	ldi	r24, 0x06	; 6
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	08 95       	ret

00002886 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    288c:	86 e0       	ldi	r24, 0x06	; 6
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    2894:	88 83       	st	Y, r24
  return NRK_OK;
}
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	8c 01       	movw	r16, r24
    28a8:	c0 e0       	ldi	r28, 0x00	; 0
    28aa:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    28ac:	ce 01       	movw	r24, r28
    28ae:	08 96       	adiw	r24, 0x08	; 8
    28b0:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    28b4:	f8 01       	movw	r30, r16
    28b6:	81 93       	st	Z+, r24
    28b8:	8f 01       	movw	r16, r30
    28ba:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    28bc:	c0 31       	cpi	r28, 0x10	; 16
    28be:	d1 05       	cpc	r29, r1
    28c0:	a9 f7       	brne	.-22     	; 0x28ac <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    28ce:	0f 93       	push	r16
    28d0:	1f 93       	push	r17
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
    28d6:	8c 01       	movw	r16, r24
    28d8:	c0 e0       	ldi	r28, 0x00	; 0
    28da:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    28dc:	f8 01       	movw	r30, r16
    28de:	61 91       	ld	r22, Z+
    28e0:	8f 01       	movw	r16, r30
    28e2:	ce 01       	movw	r24, r28
    28e4:	08 96       	adiw	r24, 0x08	; 8
    28e6:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__eewr_byte_m128rfa1>
    28ea:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    28ec:	c0 31       	cpi	r28, 0x10	; 16
    28ee:	d1 05       	cpc	r29, r1
    28f0:	a9 f7       	brne	.-22     	; 0x28dc <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	08 95       	ret

000028fe <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2904:	87 e0       	ldi	r24, 0x07	; 7
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__eerd_byte_m128rfa1>
    290c:	88 83       	st	Y, r24
  return NRK_OK;
}
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2916:	fc 01       	movw	r30, r24
    2918:	60 81       	ld	r22, Z
    291a:	87 e0       	ldi	r24, 0x07	; 7
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	08 95       	ret

00002926 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2926:	f8 94       	cli
    2928:	08 95       	ret

0000292a <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    292a:	78 94       	sei
    292c:	08 95       	ret

0000292e <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    292e:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
while(1);
    2932:	ff cf       	rjmp	.-2      	; 0x2932 <nrk_halt+0x4>

00002934 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	a3 97       	sbiw	r28, 0x23	; 35
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    294a:	0e 94 bf 18 	call	0x317e	; 0x317e <nrk_signal_create>
    294e:	80 93 f9 08 	sts	0x08F9, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2952:	8f 3f       	cpi	r24, 0xFF	; 255
    2954:	21 f4       	brne	.+8      	; 0x295e <nrk_init+0x2a>
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	8e e0       	ldi	r24, 0x0E	; 14
    295a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    295e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_nrk_startup_error>
    2962:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2964:	80 ff       	sbrs	r24, 0
    2966:	04 c0       	rjmp	.+8      	; 0x2970 <nrk_init+0x3c>
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	86 e0       	ldi	r24, 0x06	; 6
    296c:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    2970:	11 ff       	sbrs	r17, 1
    2972:	04 c0       	rjmp	.+8      	; 0x297c <nrk_init+0x48>
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	84 e1       	ldi	r24, 0x14	; 20
    2978:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    297c:	12 ff       	sbrs	r17, 2
    297e:	04 c0       	rjmp	.+8      	; 0x2988 <nrk_init+0x54>
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	83 e1       	ldi	r24, 0x13	; 19
    2984:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2988:	10 92 fc 08 	sts	0x08FC, r1
    nrk_cur_task_TCB = NULL;
    298c:	10 92 0a 09 	sts	0x090A, r1
    2990:	10 92 09 09 	sts	0x0909, r1
    
    nrk_high_ready_TCB = NULL;
    2994:	10 92 fb 08 	sts	0x08FB, r1
    2998:	10 92 fa 08 	sts	0x08FA, r1
    nrk_high_ready_prio = 0; 
    299c:	10 92 0b 09 	sts	0x090B, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    29a0:	10 92 08 09 	sts	0x0908, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    29a4:	8f ef       	ldi	r24, 0xFF	; 255
    29a6:	80 93 f5 08 	sts	0x08F5, r24
    nrk_sem_list[i].value=-1;
    29aa:	80 93 f7 08 	sts	0x08F7, r24
    nrk_sem_list[i].resource_ceiling=-1;
    29ae:	80 93 f6 08 	sts	0x08F6, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    29b2:	93 e6       	ldi	r25, 0x63	; 99
    29b4:	90 93 51 08 	sts	0x0851, r25
        nrk_task_TCB[i].task_ID = -1; 
    29b8:	80 93 4f 08 	sts	0x084F, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    29bc:	90 93 7c 08 	sts	0x087C, r25
        nrk_task_TCB[i].task_ID = -1; 
    29c0:	80 93 7a 08 	sts	0x087A, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    29c4:	90 93 a7 08 	sts	0x08A7, r25
        nrk_task_TCB[i].task_ID = -1; 
    29c8:	80 93 a5 08 	sts	0x08A5, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    29cc:	90 93 d2 08 	sts	0x08D2, r25
        nrk_task_TCB[i].task_ID = -1; 
    29d0:	80 93 d0 08 	sts	0x08D0, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    29d4:	8c e0       	ldi	r24, 0x0C	; 12
    29d6:	99 e0       	ldi	r25, 0x09	; 9
    29d8:	21 e1       	ldi	r18, 0x11	; 17
    29da:	39 e0       	ldi	r19, 0x09	; 9
    29dc:	30 93 10 09 	sts	0x0910, r19
    29e0:	20 93 0f 09 	sts	0x090F, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    29e4:	90 93 13 09 	sts	0x0913, r25
    29e8:	80 93 12 09 	sts	0x0912, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    29ec:	46 e1       	ldi	r20, 0x16	; 22
    29ee:	59 e0       	ldi	r21, 0x09	; 9
    29f0:	50 93 15 09 	sts	0x0915, r21
    29f4:	40 93 14 09 	sts	0x0914, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    29f8:	30 93 18 09 	sts	0x0918, r19
    29fc:	20 93 17 09 	sts	0x0917, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2a00:	2b e1       	ldi	r18, 0x1B	; 27
    2a02:	39 e0       	ldi	r19, 0x09	; 9
    2a04:	30 93 1a 09 	sts	0x091A, r19
    2a08:	20 93 19 09 	sts	0x0919, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2a0c:	50 93 1d 09 	sts	0x091D, r21
    2a10:	40 93 1c 09 	sts	0x091C, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	59 e0       	ldi	r21, 0x09	; 9
    2a18:	50 93 1f 09 	sts	0x091F, r21
    2a1c:	40 93 1e 09 	sts	0x091E, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2a20:	30 93 22 09 	sts	0x0922, r19
    2a24:	20 93 21 09 	sts	0x0921, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2a28:	10 92 0e 09 	sts	0x090E, r1
    2a2c:	10 92 0d 09 	sts	0x090D, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2a30:	10 92 24 09 	sts	0x0924, r1
    2a34:	10 92 23 09 	sts	0x0923, r1
	_head_node = NULL;
    2a38:	10 92 ff 08 	sts	0x08FF, r1
    2a3c:	10 92 fe 08 	sts	0x08FE, r1
	_free_node = &_nrk_readyQ[0];
    2a40:	90 93 46 08 	sts	0x0846, r25
    2a44:	80 93 45 08 	sts	0x0845, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2a48:	6d e8       	ldi	r22, 0x8D	; 141
    2a4a:	71 e2       	ldi	r23, 0x21	; 33
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	6c e6       	ldi	r22, 0x6C	; 108
    2a5a:	76 e0       	ldi	r23, 0x06	; 6
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	0e 94 60 29 	call	0x52c0	; 0x52c0 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2a64:	85 e5       	ldi	r24, 0x55	; 85
    2a66:	80 93 6c 06 	sts	0x066C, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2a6a:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2a6c:	1c 86       	std	Y+12, r1	; 0x0c
    2a6e:	1d 86       	std	Y+13, r1	; 0x0d
    2a70:	1e 86       	std	Y+14, r1	; 0x0e
    2a72:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2a74:	18 8a       	std	Y+16, r1	; 0x10
    2a76:	19 8a       	std	Y+17, r1	; 0x11
    2a78:	1a 8a       	std	Y+18, r1	; 0x12
    2a7a:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2a7c:	1c 8a       	std	Y+20, r1	; 0x14
    2a7e:	1d 8a       	std	Y+21, r1	; 0x15
    2a80:	1e 8a       	std	Y+22, r1	; 0x16
    2a82:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2a84:	18 8e       	std	Y+24, r1	; 0x18
    2a86:	19 8e       	std	Y+25, r1	; 0x19
    2a88:	1a 8e       	std	Y+26, r1	; 0x1a
    2a8a:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2a8c:	1c 8e       	std	Y+28, r1	; 0x1c
    2a8e:	1d 8e       	std	Y+29, r1	; 0x1d
    2a90:	1e 8e       	std	Y+30, r1	; 0x1e
    2a92:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2a94:	18 a2       	std	Y+32, r1	; 0x20
    2a96:	19 a2       	std	Y+33, r1	; 0x21
    2a98:	1a a2       	std	Y+34, r1	; 0x22
    2a9a:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2aa0:	92 e0       	ldi	r25, 0x02	; 2
    2aa2:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2aa4:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	0e 94 c2 1c 	call	0x3984	; 0x3984 <nrk_activate_task>
	
}
    2aae:	a3 96       	adiw	r28, 0x23	; 35
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	08 95       	ret

00002ac2 <nrk_start>:




void nrk_start (void)
{
    2ac2:	0f e4       	ldi	r16, 0x4F	; 79
    2ac4:	18 e0       	ldi	r17, 0x08	; 8
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2ac6:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2ac8:	f8 01       	movw	r30, r16
    2aca:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    2acc:	ff ef       	ldi	r31, 0xFF	; 255
    2ace:	df 12       	cpse	r13, r31
    2ad0:	22 c0       	rjmp	.+68     	; 0x2b16 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2ad2:	cf 5f       	subi	r28, 0xFF	; 255
    2ad4:	05 5d       	subi	r16, 0xD5	; 213
    2ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad8:	c4 30       	cpi	r28, 0x04	; 4
    2ada:	b1 f7       	brne	.-20     	; 0x2ac8 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2adc:	0e 94 b1 1b 	call	0x3762	; 0x3762 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2ae0:	2b e2       	ldi	r18, 0x2B	; 43
    2ae2:	82 02       	muls	r24, r18
    2ae4:	c0 01       	movw	r24, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e9 5b       	subi	r30, 0xB9	; 185
    2aec:	f7 4f       	sbci	r31, 0xF7	; 247
    2aee:	82 85       	ldd	r24, Z+10	; 0x0a
    2af0:	80 93 0b 09 	sts	0x090B, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2af4:	f0 93 0a 09 	sts	0x090A, r31
    2af8:	e0 93 09 09 	sts	0x0909, r30
    2afc:	f0 93 fb 08 	sts	0x08FB, r31
    2b00:	e0 93 fa 08 	sts	0x08FA, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2b04:	80 93 fc 08 	sts	0x08FC, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2b08:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <nrk_target_start>
    nrk_stack_pointer_init(); 
    2b0c:	0e 94 bc 29 	call	0x5378	; 0x5378 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2b10:	0e 94 d6 29 	call	0x53ac	; 0x53ac <nrk_start_high_ready_task>
    2b14:	16 c0       	rjmp	.+44     	; 0x2b42 <nrk_start+0x80>
    2b16:	8f e4       	ldi	r24, 0x4F	; 79
    2b18:	e8 2e       	mov	r14, r24
    2b1a:	88 e0       	ldi	r24, 0x08	; 8
    2b1c:	f8 2e       	mov	r15, r24
    2b1e:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2b20:	cd 17       	cp	r28, r29
    2b22:	41 f0       	breq	.+16     	; 0x2b34 <nrk_start+0x72>
    2b24:	f7 01       	movw	r30, r14
    2b26:	80 81       	ld	r24, Z
    2b28:	d8 12       	cpse	r13, r24
    2b2a:	04 c0       	rjmp	.+8      	; 0x2b34 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2b2c:	6d 2d       	mov	r22, r13
    2b2e:	85 e0       	ldi	r24, 0x05	; 5
    2b30:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2b34:	df 5f       	subi	r29, 0xFF	; 255
    2b36:	fb e2       	ldi	r31, 0x2B	; 43
    2b38:	ef 0e       	add	r14, r31
    2b3a:	f1 1c       	adc	r15, r1
    2b3c:	d4 30       	cpi	r29, 0x04	; 4
    2b3e:	81 f7       	brne	.-32     	; 0x2b20 <nrk_start+0x5e>
    2b40:	c8 cf       	rjmp	.-112    	; 0x2ad2 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2b42:	ff cf       	rjmp	.-2      	; 0x2b42 <nrk_start+0x80>

00002b44 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	ec 01       	movw	r28, r24
    2b56:	8b 01       	movw	r16, r22
    2b58:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2b5a:	89 85       	ldd	r24, Y+9	; 0x09
    2b5c:	82 30       	cpi	r24, 0x02	; 2
    2b5e:	21 f0       	breq	.+8      	; 0x2b68 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2b60:	80 91 f8 08 	lds	r24, 0x08F8
    2b64:	88 83       	st	Y, r24
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2b68:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2b6a:	80 91 f8 08 	lds	r24, 0x08F8
    2b6e:	84 30       	cpi	r24, 0x04	; 4
    2b70:	20 f0       	brcs	.+8      	; 0x2b7a <nrk_TCB_init+0x36>
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	87 e0       	ldi	r24, 0x07	; 7
    2b76:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	82 30       	cpi	r24, 0x02	; 2
    2b7e:	29 f0       	breq	.+10     	; 0x2b8a <nrk_TCB_init+0x46>
    2b80:	80 91 f8 08 	lds	r24, 0x08F8
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	80 93 f8 08 	sts	0x08F8, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2b8a:	80 91 f8 08 	lds	r24, 0x08F8
    2b8e:	81 11       	cpse	r24, r1
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <nrk_TCB_init+0x54>
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	80 93 f8 08 	sts	0x08F8, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2b98:	38 81       	ld	r19, Y
    2b9a:	2b e2       	ldi	r18, 0x2B	; 43
    2b9c:	32 03       	mulsu	r19, r18
    2b9e:	f0 01       	movw	r30, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	e9 5b       	subi	r30, 0xB9	; 185
    2ba4:	f7 4f       	sbci	r31, 0xF7	; 247
    2ba6:	11 83       	std	Z+1, r17	; 0x01
    2ba8:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2baa:	88 85       	ldd	r24, Y+8	; 0x08
    2bac:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2bae:	38 81       	ld	r19, Y
    2bb0:	32 03       	mulsu	r19, r18
    2bb2:	f0 01       	movw	r30, r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	e9 5b       	subi	r30, 0xB9	; 185
    2bb8:	f7 4f       	sbci	r31, 0xF7	; 247
    2bba:	83 e0       	ldi	r24, 0x03	; 3
    2bbc:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2bbe:	38 81       	ld	r19, Y
    2bc0:	32 03       	mulsu	r19, r18
    2bc2:	f0 01       	movw	r30, r0
    2bc4:	11 24       	eor	r1, r1
    2bc6:	e9 5b       	subi	r30, 0xB9	; 185
    2bc8:	f7 4f       	sbci	r31, 0xF7	; 247
    2bca:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2bcc:	08 81       	ld	r16, Y
    2bce:	02 03       	mulsu	r16, r18
    2bd0:	80 01       	movw	r16, r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	09 5b       	subi	r16, 0xB9	; 185
    2bd6:	17 4f       	sbci	r17, 0xF7	; 247
    2bd8:	f8 01       	movw	r30, r16
    2bda:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2bdc:	ce 01       	movw	r24, r28
    2bde:	0b 96       	adiw	r24, 0x0b	; 11
    2be0:	0e 94 1f 21 	call	0x423e	; 0x423e <_nrk_time_to_ticks_long>
    2be4:	f8 01       	movw	r30, r16
    2be6:	61 a3       	std	Z+33, r22	; 0x21
    2be8:	72 a3       	std	Z+34, r23	; 0x22
    2bea:	83 a3       	std	Z+35, r24	; 0x23
    2bec:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2bee:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bf2:	ad 85       	ldd	r26, Y+13	; 0x0d
    2bf4:	be 85       	ldd	r27, Y+14	; 0x0e
    2bf6:	88 33       	cpi	r24, 0x38	; 56
    2bf8:	99 48       	sbci	r25, 0x89	; 137
    2bfa:	a1 44       	sbci	r26, 0x41	; 65
    2bfc:	b1 05       	cpc	r27, r1
    2bfe:	20 f0       	brcs	.+8      	; 0x2c08 <nrk_TCB_init+0xc4>
    2c00:	68 81       	ld	r22, Y
    2c02:	86 e1       	ldi	r24, 0x16	; 22
    2c04:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2c08:	c8 80       	ld	r12, Y
    2c0a:	dd 24       	eor	r13, r13
    2c0c:	c7 fc       	sbrc	r12, 7
    2c0e:	d0 94       	com	r13
    2c10:	ce 01       	movw	r24, r28
    2c12:	4b 96       	adiw	r24, 0x1b	; 27
    2c14:	0e 94 1f 21 	call	0x423e	; 0x423e <_nrk_time_to_ticks_long>
    2c18:	1b e2       	ldi	r17, 0x2B	; 43
    2c1a:	1c 9d       	mul	r17, r12
    2c1c:	f0 01       	movw	r30, r0
    2c1e:	1d 9d       	mul	r17, r13
    2c20:	f0 0d       	add	r31, r0
    2c22:	11 24       	eor	r1, r1
    2c24:	e9 5b       	subi	r30, 0xB9	; 185
    2c26:	f7 4f       	sbci	r31, 0xF7	; 247
    2c28:	65 8b       	std	Z+21, r22	; 0x15
    2c2a:	76 8b       	std	Z+22, r23	; 0x16
    2c2c:	87 8b       	std	Z+23, r24	; 0x17
    2c2e:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2c30:	28 81       	ld	r18, Y
    2c32:	21 03       	mulsu	r18, r17
    2c34:	c0 01       	movw	r24, r0
    2c36:	11 24       	eor	r1, r1
    2c38:	9c 01       	movw	r18, r24
    2c3a:	29 5b       	subi	r18, 0xB9	; 185
    2c3c:	37 4f       	sbci	r19, 0xF7	; 247
    2c3e:	69 01       	movw	r12, r18
    2c40:	f9 01       	movw	r30, r18
    2c42:	45 89       	ldd	r20, Z+21	; 0x15
    2c44:	56 89       	ldd	r21, Z+22	; 0x16
    2c46:	67 89       	ldd	r22, Z+23	; 0x17
    2c48:	70 8d       	ldd	r23, Z+24	; 0x18
    2c4a:	81 a1       	ldd	r24, Z+33	; 0x21
    2c4c:	92 a1       	ldd	r25, Z+34	; 0x22
    2c4e:	a3 a1       	ldd	r26, Z+35	; 0x23
    2c50:	b4 a1       	ldd	r27, Z+36	; 0x24
    2c52:	84 0f       	add	r24, r20
    2c54:	95 1f       	adc	r25, r21
    2c56:	a6 1f       	adc	r26, r22
    2c58:	b7 1f       	adc	r27, r23
    2c5a:	81 8f       	std	Z+25, r24	; 0x19
    2c5c:	92 8f       	std	Z+26, r25	; 0x1a
    2c5e:	a3 8f       	std	Z+27, r26	; 0x1b
    2c60:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2c62:	ce 01       	movw	r24, r28
    2c64:	43 96       	adiw	r24, 0x13	; 19
    2c66:	0e 94 1f 21 	call	0x423e	; 0x423e <_nrk_time_to_ticks_long>
    2c6a:	f6 01       	movw	r30, r12
    2c6c:	65 a3       	std	Z+37, r22	; 0x25
    2c6e:	76 a3       	std	Z+38, r23	; 0x26
    2c70:	87 a3       	std	Z+39, r24	; 0x27
    2c72:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2c74:	28 81       	ld	r18, Y
    2c76:	21 03       	mulsu	r18, r17
    2c78:	f0 01       	movw	r30, r0
    2c7a:	11 24       	eor	r1, r1
    2c7c:	e9 5b       	subi	r30, 0xB9	; 185
    2c7e:	f7 4f       	sbci	r31, 0xF7	; 247
    2c80:	85 a1       	ldd	r24, Z+37	; 0x25
    2c82:	96 a1       	ldd	r25, Z+38	; 0x26
    2c84:	a7 a1       	ldd	r26, Z+39	; 0x27
    2c86:	b0 a5       	ldd	r27, Z+40	; 0x28
    2c88:	85 8f       	std	Z+29, r24	; 0x1d
    2c8a:	96 8f       	std	Z+30, r25	; 0x1e
    2c8c:	a7 8f       	std	Z+31, r26	; 0x1f
    2c8e:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	92 a7       	std	Z+42, r25	; 0x2a
    2c96:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2c98:	f3 82       	std	Z+3, r15	; 0x03
    2c9a:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2c9c:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	08 95       	ret

00002cb0 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2cb0:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <_nrk_scheduler>

00002cb4 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2cb4:	85 e6       	ldi	r24, 0x65	; 101
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	08 95       	ret

00002cba <_nrk_errno_set>:
    2cba:	e0 91 09 09 	lds	r30, 0x0909
    2cbe:	f0 91 0a 09 	lds	r31, 0x090A
    2cc2:	84 87       	std	Z+12, r24	; 0x0c
    2cc4:	08 95       	ret

00002cc6 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2cc6:	e0 91 09 09 	lds	r30, 0x0909
    2cca:	f0 91 0a 09 	lds	r31, 0x090A
}
    2cce:	84 85       	ldd	r24, Z+12	; 0x0c
    2cd0:	08 95       	ret

00002cd2 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    2cd2:	fc 01       	movw	r30, r24
    if (error_num == 0)
    2cd4:	80 91 f7 05 	lds	r24, 0x05F7
    2cd8:	88 23       	and	r24, r24
    2cda:	31 f0       	breq	.+12     	; 0x2ce8 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    2cdc:	db 01       	movw	r26, r22
    2cde:	8c 93       	st	X, r24
    *task_id = error_task;
    2ce0:	80 91 dd 04 	lds	r24, 0x04DD
    2ce4:	80 83       	st	Z, r24
    return 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
}
    2ce8:	08 95       	ret

00002cea <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    2cea:	80 91 f7 05 	lds	r24, 0x05F7
    2cee:	88 23       	and	r24, r24
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <nrk_error_print+0xa>
    2cf2:	84 c0       	rjmp	.+264    	; 0x2dfc <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2cf4:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2cf8:	81 ed       	ldi	r24, 0xD1	; 209
    2cfa:	95 e0       	ldi	r25, 0x05	; 5
    2cfc:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
        printf ("%d", error_task);
    2d00:	80 91 dd 04 	lds	r24, 0x04DD
    2d04:	1f 92       	push	r1
    2d06:	8f 93       	push	r24
    2d08:	85 e9       	ldi	r24, 0x95	; 149
    2d0a:	93 e0       	ldi	r25, 0x03	; 3
    2d0c:	9f 93       	push	r25
    2d0e:	8f 93       	push	r24
    2d10:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
        nrk_kprintf (PSTR ("): "));
    2d14:	8d ec       	ldi	r24, 0xCD	; 205
    2d16:	95 e0       	ldi	r25, 0x05	; 5
    2d18:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	80 91 f7 05 	lds	r24, 0x05F7
    2d28:	88 31       	cpi	r24, 0x18	; 24
    2d2a:	10 f0       	brcs	.+4      	; 0x2d30 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    2d2c:	10 92 f7 05 	sts	0x05F7, r1
        switch (error_num)
    2d30:	e0 91 f7 05 	lds	r30, 0x05F7
    2d34:	8e 2f       	mov	r24, r30
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	fc 01       	movw	r30, r24
    2d3a:	31 97       	sbiw	r30, 0x01	; 1
    2d3c:	e6 31       	cpi	r30, 0x16	; 22
    2d3e:	f1 05       	cpc	r31, r1
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <nrk_error_print+0x5a>
    2d42:	46 c0       	rjmp	.+140    	; 0x2dd0 <nrk_error_print+0xe6>
    2d44:	e6 54       	subi	r30, 0x46	; 70
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2d4c:	81 e9       	ldi	r24, 0x91	; 145
    2d4e:	95 e0       	ldi	r25, 0x05	; 5
    2d50:	41 c0       	rjmp	.+130    	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2d52:	8a e6       	ldi	r24, 0x6A	; 106
    2d54:	95 e0       	ldi	r25, 0x05	; 5
    2d56:	3e c0       	rjmp	.+124    	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2d58:	86 e5       	ldi	r24, 0x56	; 86
    2d5a:	95 e0       	ldi	r25, 0x05	; 5
    2d5c:	3b c0       	rjmp	.+118    	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2d5e:	80 e4       	ldi	r24, 0x40	; 64
    2d60:	95 e0       	ldi	r25, 0x05	; 5
    2d62:	38 c0       	rjmp	.+112    	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2d64:	85 e2       	ldi	r24, 0x25	; 37
    2d66:	95 e0       	ldi	r25, 0x05	; 5
    2d68:	35 c0       	rjmp	.+106    	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2d6a:	8f e0       	ldi	r24, 0x0F	; 15
    2d6c:	95 e0       	ldi	r25, 0x05	; 5
    2d6e:	32 c0       	rjmp	.+100    	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2d70:	87 ef       	ldi	r24, 0xF7	; 247
    2d72:	94 e0       	ldi	r25, 0x04	; 4
    2d74:	2f c0       	rjmp	.+94     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2d76:	84 ee       	ldi	r24, 0xE4	; 228
    2d78:	94 e0       	ldi	r25, 0x04	; 4
    2d7a:	2c c0       	rjmp	.+88     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2d7c:	81 ed       	ldi	r24, 0xD1	; 209
    2d7e:	94 e0       	ldi	r25, 0x04	; 4
    2d80:	29 c0       	rjmp	.+82     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2d82:	83 eb       	ldi	r24, 0xB3	; 179
    2d84:	94 e0       	ldi	r25, 0x04	; 4
    2d86:	26 c0       	rjmp	.+76     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2d88:	8e e8       	ldi	r24, 0x8E	; 142
    2d8a:	94 e0       	ldi	r25, 0x04	; 4
    2d8c:	23 c0       	rjmp	.+70     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2d8e:	82 e8       	ldi	r24, 0x82	; 130
    2d90:	94 e0       	ldi	r25, 0x04	; 4
    2d92:	20 c0       	rjmp	.+64     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2d94:	87 e6       	ldi	r24, 0x67	; 103
    2d96:	94 e0       	ldi	r25, 0x04	; 4
    2d98:	1d c0       	rjmp	.+58     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2d9a:	88 e5       	ldi	r24, 0x58	; 88
    2d9c:	94 e0       	ldi	r25, 0x04	; 4
    2d9e:	1a c0       	rjmp	.+52     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2da0:	84 e4       	ldi	r24, 0x44	; 68
    2da2:	94 e0       	ldi	r25, 0x04	; 4
    2da4:	17 c0       	rjmp	.+46     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2da6:	83 e3       	ldi	r24, 0x33	; 51
    2da8:	94 e0       	ldi	r25, 0x04	; 4
    2daa:	14 c0       	rjmp	.+40     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2dac:	8f e1       	ldi	r24, 0x1F	; 31
    2dae:	94 e0       	ldi	r25, 0x04	; 4
    2db0:	11 c0       	rjmp	.+34     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2db2:	8f ef       	ldi	r24, 0xFF	; 255
    2db4:	93 e0       	ldi	r25, 0x03	; 3
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2db8:	87 ee       	ldi	r24, 0xE7	; 231
    2dba:	93 e0       	ldi	r25, 0x03	; 3
    2dbc:	0b c0       	rjmp	.+22     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2dbe:	8c ec       	ldi	r24, 0xCC	; 204
    2dc0:	93 e0       	ldi	r25, 0x03	; 3
    2dc2:	08 c0       	rjmp	.+16     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2dc4:	8b eb       	ldi	r24, 0xBB	; 187
    2dc6:	93 e0       	ldi	r25, 0x03	; 3
    2dc8:	05 c0       	rjmp	.+10     	; 0x2dd4 <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2dca:	8c ea       	ldi	r24, 0xAC	; 172
    2dcc:	93 e0       	ldi	r25, 0x03	; 3
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2dd0:	85 ea       	ldi	r24, 0xA5	; 165
    2dd2:	93 e0       	ldi	r25, 0x03	; 3
    2dd4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>
        }
        putchar ('\r');
    2dd8:	60 91 36 09 	lds	r22, 0x0936
    2ddc:	70 91 37 09 	lds	r23, 0x0937
    2de0:	8d e0       	ldi	r24, 0x0D	; 13
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
        putchar ('\n');
    2de8:	60 91 36 09 	lds	r22, 0x0936
    2dec:	70 91 37 09 	lds	r23, 0x0937
    2df0:	8a e0       	ldi	r24, 0x0A	; 10
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2df8:	10 92 f7 05 	sts	0x05F7, r1
    return t;
}
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	08 95       	ret

00002e00 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2e00:	80 93 f7 05 	sts	0x05F7, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2e04:	e0 91 09 09 	lds	r30, 0x0909
    2e08:	f0 91 0a 09 	lds	r31, 0x090A
    2e0c:	80 85       	ldd	r24, Z+8	; 0x08
    2e0e:	80 93 dd 04 	sts	0x04DD, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2e12:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <nrk_error_print>

00002e16 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    2e16:	80 93 f7 05 	sts	0x05F7, r24
    error_task = task;
    2e1a:	60 93 dd 04 	sts	0x04DD, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2e1e:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <nrk_error_print>

00002e22 <pause>:
    }

}

void pause()
{
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	1f 92       	push	r1
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2e2c:	19 82       	std	Y+1, r1	; 0x01
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	84 36       	cpi	r24, 0x64	; 100
    2e32:	40 f4       	brcc	.+16     	; 0x2e44 <pause+0x22>
        nrk_spin_wait_us (2000);
    2e34:	80 ed       	ldi	r24, 0xD0	; 208
    2e36:	97 e0       	ldi	r25, 0x07	; 7
    2e38:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	89 83       	std	Y+1, r24	; 0x01
    2e42:	f5 cf       	rjmp	.-22     	; 0x2e2e <pause+0xc>
        nrk_spin_wait_us (2000);
}
    2e44:	0f 90       	pop	r0
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	08 95       	ret

00002e4c <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
    pause();
    2e54:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
    pause();
    2e58:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
    pause();
    2e5c:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
    nrk_led_clr(GREEN_LED);
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
    pause();
    2e68:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <pause>

00002e6c <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 62 13 	call	0x26c4	; 0x26c4 <nrk_led_set>
    pause();
    2e74:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
    nrk_led_clr(GREEN_LED);
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
    pause();
    2e80:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <pause>

00002e84 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <blink_morse_code_error+0xc>
    2e90:	1f 92       	push	r1
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2e96:	1f 92       	push	r1
    2e98:	8f 93       	push	r24
    2e9a:	85 e9       	ldi	r24, 0x95	; 149
    2e9c:	93 e0       	ldi	r25, 0x03	; 3
    2e9e:	9f 93       	push	r25
    2ea0:	8f 93       	push	r24
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	0f 5f       	subi	r16, 0xFF	; 255
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	1f 93       	push	r17
    2eaa:	0f 93       	push	r16
    2eac:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <sprintf>

    for(i=0; i<strlen(str); i++ )
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	f1 2c       	mov	r15, r1
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	01 90       	ld	r0, Z+
    2ec2:	00 20       	and	r0, r0
    2ec4:	e9 f7       	brne	.-6      	; 0x2ec0 <blink_morse_code_error+0x3c>
    2ec6:	31 97       	sbiw	r30, 0x01	; 1
    2ec8:	e0 1b       	sub	r30, r16
    2eca:	f1 0b       	sbc	r31, r17
    2ecc:	8f 2d       	mov	r24, r15
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	8e 17       	cp	r24, r30
    2ed2:	9f 07       	cpc	r25, r31
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <blink_morse_code_error+0x54>
    2ed6:	5d c0       	rjmp	.+186    	; 0x2f92 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    2ed8:	f8 01       	movw	r30, r16
    2eda:	e8 0f       	add	r30, r24
    2edc:	f9 1f       	adc	r31, r25
    2ede:	e0 81       	ld	r30, Z
    2ee0:	8e 2f       	mov	r24, r30
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	f0 97       	sbiw	r30, 0x30	; 48
    2ee8:	ea 30       	cpi	r30, 0x0A	; 10
    2eea:	f1 05       	cpc	r31, r1
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <blink_morse_code_error+0x6c>
    2eee:	49 c0       	rjmp	.+146    	; 0x2f82 <blink_morse_code_error+0xfe>
    2ef0:	e0 53       	subi	r30, 0x30	; 48
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__tablejump2__>
        {
        case '0':
            blink_dash();
    2ef8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2efe:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dash();
    2f02:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f06:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f0a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f0e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            break;
    2f12:	37 c0       	rjmp	.+110    	; 0x2f82 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    2f14:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dot();
    2f18:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f1c:	f4 cf       	rjmp	.-24     	; 0x2f06 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2f1e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dot();
    2f22:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dot();
    2f26:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f2a:	ef cf       	rjmp	.-34     	; 0x2f0a <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2f2c:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dot();
    2f30:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dot();
    2f34:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            blink_dot();
    2f38:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f3c:	e8 cf       	rjmp	.-48     	; 0x2f0e <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2f3e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2f44:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dot();
    2f48:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2f4e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f52:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dot();
    2f56:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f5a:	06 c0       	rjmp	.+12     	; 0x2f68 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2f5c:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f60:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f64:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dot();
    2f68:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
    2f6c:	08 c0       	rjmp	.+16     	; 0x2f7e <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2f6e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f72:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f76:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dash();
    2f7a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <blink_dash>
            blink_dot();
    2f7e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <blink_dot>
            break;
        }
        pause();
    2f82:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
        pause();
    2f86:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
        pause();
    2f8a:	0e 94 11 17 	call	0x2e22	; 0x2e22 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2f8e:	f3 94       	inc	r15
    2f90:	96 cf       	rjmp	.-212    	; 0x2ebe <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	ff 90       	pop	r15
    2fa2:	08 95       	ret

00002fa4 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2fa4:	6f 92       	push	r6
    2fa6:	7f 92       	push	r7
    2fa8:	8f 92       	push	r8
    2faa:	9f 92       	push	r9
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	cf 92       	push	r12
    2fb2:	df 92       	push	r13
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2fc0:	8d ed       	ldi	r24, 0xDD	; 221
    2fc2:	95 e0       	ldi	r25, 0x05	; 5
    2fc4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2fc8:	e0 91 09 09 	lds	r30, 0x0909
    2fcc:	f0 91 0a 09 	lds	r31, 0x090A
    2fd0:	80 85       	ldd	r24, Z+8	; 0x08
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	33 27       	eor	r19, r19
    2fd6:	27 fd       	sbrc	r18, 7
    2fd8:	30 95       	com	r19
    2fda:	3f 93       	push	r19
    2fdc:	8f 93       	push	r24
    2fde:	88 e9       	ldi	r24, 0x98	; 152
    2fe0:	93 e0       	ldi	r25, 0x03	; 3
    2fe2:	9f 93       	push	r25
    2fe4:	8f 93       	push	r24
    2fe6:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2fea:	e0 91 09 09 	lds	r30, 0x0909
    2fee:	f0 91 0a 09 	lds	r31, 0x090A
    2ff2:	c2 81       	ldd	r28, Z+2	; 0x02
    2ff4:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	8c ec       	ldi	r24, 0xCC	; 204
    2ffc:	93 e0       	ldi	r25, 0x03	; 3
    2ffe:	9f 93       	push	r25
    3000:	8f 93       	push	r24
    3002:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
    printf( "canary = %x ",*stkc );
    3006:	88 81       	ld	r24, Y
    3008:	1f 92       	push	r1
    300a:	8f 93       	push	r24
    300c:	81 ea       	ldi	r24, 0xA1	; 161
    300e:	93 e0       	ldi	r25, 0x03	; 3
    3010:	9f 93       	push	r25
    3012:	8f 93       	push	r24
    3014:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    3018:	e0 91 09 09 	lds	r30, 0x0909
    301c:	f0 91 0a 09 	lds	r31, 0x090A
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3020:	81 81       	ldd	r24, Z+1	; 0x01
    3022:	8f 93       	push	r24
    3024:	80 81       	ld	r24, Z
    3026:	8f 93       	push	r24
    3028:	8e ea       	ldi	r24, 0xAE	; 174
    302a:	93 e0       	ldi	r25, 0x03	; 3
    302c:	9f 93       	push	r25
    302e:	8f 93       	push	r24
    3030:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3034:	80 91 0a 09 	lds	r24, 0x090A
    3038:	8f 93       	push	r24
    303a:	80 91 09 09 	lds	r24, 0x0909
    303e:	8f 93       	push	r24
    3040:	88 eb       	ldi	r24, 0xB8	; 184
    3042:	93 e0       	ldi	r25, 0x03	; 3
    3044:	9f 93       	push	r25
    3046:	8f 93       	push	r24
    3048:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
    304c:	c7 e4       	ldi	r28, 0x47	; 71
    304e:	d8 e0       	ldi	r29, 0x08	; 8
    3050:	ed b7       	in	r30, 0x3d	; 61
    3052:	fe b7       	in	r31, 0x3e	; 62
    3054:	74 96       	adiw	r30, 0x14	; 20
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	fe bf       	out	0x3e, r31	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	ed bf       	out	0x3d, r30	; 61
    3060:	00 e0       	ldi	r16, 0x00	; 0
    3062:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3064:	88 ec       	ldi	r24, 0xC8	; 200
    3066:	68 2e       	mov	r6, r24
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    306c:	91 ea       	ldi	r25, 0xA1	; 161
    306e:	89 2e       	mov	r8, r25
    3070:	93 e0       	ldi	r25, 0x03	; 3
    3072:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3074:	2e ea       	ldi	r18, 0xAE	; 174
    3076:	a2 2e       	mov	r10, r18
    3078:	23 e0       	ldi	r18, 0x03	; 3
    307a:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    307c:	38 eb       	ldi	r19, 0xB8	; 184
    307e:	c3 2e       	mov	r12, r19
    3080:	33 e0       	ldi	r19, 0x03	; 3
    3082:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3084:	ea 80       	ldd	r14, Y+2	; 0x02
    3086:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3088:	ff 92       	push	r15
    308a:	ef 92       	push	r14
    308c:	1f 93       	push	r17
    308e:	0f 93       	push	r16
    3090:	7f 92       	push	r7
    3092:	6f 92       	push	r6
    3094:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
        printf( "canary = %x ",*stkc );
    3098:	f7 01       	movw	r30, r14
    309a:	80 81       	ld	r24, Z
    309c:	1f 92       	push	r1
    309e:	8f 93       	push	r24
    30a0:	9f 92       	push	r9
    30a2:	8f 92       	push	r8
    30a4:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	8f 93       	push	r24
    30ac:	88 81       	ld	r24, Y
    30ae:	8f 93       	push	r24
    30b0:	bf 92       	push	r11
    30b2:	af 92       	push	r10
    30b4:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	df 92       	push	r13
    30be:	cf 92       	push	r12
    30c0:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <printf>
    30c4:	0f 5f       	subi	r16, 0xFF	; 255
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    30ca:	ed b7       	in	r30, 0x3d	; 61
    30cc:	fe b7       	in	r31, 0x3e	; 62
    30ce:	72 96       	adiw	r30, 0x12	; 18
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	fe bf       	out	0x3e, r31	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	ed bf       	out	0x3d, r30	; 61
    30da:	04 30       	cpi	r16, 0x04	; 4
    30dc:	11 05       	cpc	r17, r1
    30de:	91 f6       	brne	.-92     	; 0x3084 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	ff 90       	pop	r15
    30ea:	ef 90       	pop	r14
    30ec:	df 90       	pop	r13
    30ee:	cf 90       	pop	r12
    30f0:	bf 90       	pop	r11
    30f2:	af 90       	pop	r10
    30f4:	9f 90       	pop	r9
    30f6:	8f 90       	pop	r8
    30f8:	7f 90       	pop	r7
    30fa:	6f 90       	pop	r6
    30fc:	08 95       	ret

000030fe <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3102:	e0 91 09 09 	lds	r30, 0x0909
    3106:	f0 91 0a 09 	lds	r31, 0x090A
    310a:	c2 81       	ldd	r28, Z+2	; 0x02
    310c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    310e:	88 81       	ld	r24, Y
    3110:	85 35       	cpi	r24, 0x55	; 85
    3112:	39 f0       	breq	.+14     	; 0x3122 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3114:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    311e:	85 e5       	ldi	r24, 0x55	; 85
    3120:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3122:	e0 91 09 09 	lds	r30, 0x0909
    3126:	f0 91 0a 09 	lds	r31, 0x090A
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	81 15       	cp	r24, r1
    3130:	92 44       	sbci	r25, 0x42	; 66
    3132:	38 f0       	brcs	.+14     	; 0x3142 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3134:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3138:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    313e:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <nrk_error_add>




#endif
}
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	08 95       	ret

00003148 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    3148:	2b e2       	ldi	r18, 0x2B	; 43
    314a:	82 02       	muls	r24, r18
    314c:	c0 01       	movw	r24, r0
    314e:	11 24       	eor	r1, r1
    3150:	fc 01       	movw	r30, r24
    3152:	e9 5b       	subi	r30, 0xB9	; 185
    3154:	f7 4f       	sbci	r31, 0xF7	; 247
    3156:	a2 81       	ldd	r26, Z+2	; 0x02
    3158:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    315a:	8c 91       	ld	r24, X
    315c:	85 35       	cpi	r24, 0x55	; 85
    315e:	19 f0       	breq	.+6      	; 0x3166 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3160:	85 e5       	ldi	r24, 0x55	; 85
    3162:	8c 93       	st	X, r24
    3164:	08 c0       	rjmp	.+16     	; 0x3176 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	81 15       	cp	r24, r1
    316c:	92 44       	sbci	r25, 0x42	; 66
    316e:	28 f0       	brcs	.+10     	; 0x317a <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3170:	82 e1       	ldi	r24, 0x12	; 18
    3172:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
        return NRK_ERROR;
    3176:	8f ef       	ldi	r24, 0xFF	; 255
    3178:	08 95       	ret
    }
#endif
    return NRK_OK;
    317a:	81 e0       	ldi	r24, 0x01	; 1
}
    317c:	08 95       	ret

0000317e <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3182:	40 91 e6 04 	lds	r20, 0x04E6
    3186:	50 91 e7 04 	lds	r21, 0x04E7
    318a:	60 91 e8 04 	lds	r22, 0x04E8
    318e:	70 91 e9 04 	lds	r23, 0x04E9
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	8a 01       	movw	r16, r20
    3198:	9b 01       	movw	r18, r22
    319a:	08 2e       	mov	r0, r24
    319c:	04 c0       	rjmp	.+8      	; 0x31a6 <nrk_signal_create+0x28>
    319e:	36 95       	lsr	r19
    31a0:	27 95       	ror	r18
    31a2:	17 95       	ror	r17
    31a4:	07 95       	ror	r16
    31a6:	0a 94       	dec	r0
    31a8:	d2 f7       	brpl	.-12     	; 0x319e <nrk_signal_create+0x20>
    31aa:	00 fd       	sbrc	r16, 0
    31ac:	19 c0       	rjmp	.+50     	; 0x31e0 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    31ae:	01 e0       	ldi	r16, 0x01	; 1
    31b0:	10 e0       	ldi	r17, 0x00	; 0
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	08 2e       	mov	r0, r24
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <nrk_signal_create+0x44>
    31ba:	00 0f       	add	r16, r16
    31bc:	11 1f       	adc	r17, r17
    31be:	22 1f       	adc	r18, r18
    31c0:	33 1f       	adc	r19, r19
    31c2:	0a 94       	dec	r0
    31c4:	d2 f7       	brpl	.-12     	; 0x31ba <nrk_signal_create+0x3c>
    31c6:	40 2b       	or	r20, r16
    31c8:	51 2b       	or	r21, r17
    31ca:	62 2b       	or	r22, r18
    31cc:	73 2b       	or	r23, r19
    31ce:	40 93 e6 04 	sts	0x04E6, r20
    31d2:	50 93 e7 04 	sts	0x04E7, r21
    31d6:	60 93 e8 04 	sts	0x04E8, r22
    31da:	70 93 e9 04 	sts	0x04E9, r23
			return i;
    31de:	05 c0       	rjmp	.+10     	; 0x31ea <nrk_signal_create+0x6c>
    31e0:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    31e2:	80 32       	cpi	r24, 0x20	; 32
    31e4:	91 05       	cpc	r25, r1
    31e6:	b9 f6       	brne	.-82     	; 0x3196 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    31e8:	8f ef       	ldi	r24, 0xFF	; 255


}
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	08 95       	ret

000031f0 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    31f0:	e0 91 09 09 	lds	r30, 0x0909
    31f4:	f0 91 0a 09 	lds	r31, 0x090A
    31f8:	65 85       	ldd	r22, Z+13	; 0x0d
    31fa:	76 85       	ldd	r23, Z+14	; 0x0e
    31fc:	87 85       	ldd	r24, Z+15	; 0x0f
    31fe:	90 89       	ldd	r25, Z+16	; 0x10
}
    3200:	08 95       	ret

00003202 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3202:	cf 92       	push	r12
    3204:	df 92       	push	r13
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3212:	c1 2c       	mov	r12, r1
    3214:	d1 2c       	mov	r13, r1
    3216:	76 01       	movw	r14, r12
    3218:	c3 94       	inc	r12
    321a:	08 2e       	mov	r0, r24
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <nrk_signal_delete+0x24>
    321e:	cc 0c       	add	r12, r12
    3220:	dd 1c       	adc	r13, r13
    3222:	ee 1c       	adc	r14, r14
    3224:	ff 1c       	adc	r15, r15
    3226:	0a 94       	dec	r0
    3228:	d2 f7       	brpl	.-12     	; 0x321e <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    322a:	40 91 e6 04 	lds	r20, 0x04E6
    322e:	50 91 e7 04 	lds	r21, 0x04E7
    3232:	60 91 e8 04 	lds	r22, 0x04E8
    3236:	70 91 e9 04 	lds	r23, 0x04E9
    323a:	4c 21       	and	r20, r12
    323c:	5d 21       	and	r21, r13
    323e:	6e 21       	and	r22, r14
    3240:	7f 21       	and	r23, r15
    3242:	45 2b       	or	r20, r21
    3244:	46 2b       	or	r20, r22
    3246:	47 2b       	or	r20, r23
    3248:	09 f4       	brne	.+2      	; 0x324c <nrk_signal_delete+0x4a>
    324a:	60 c0       	rjmp	.+192    	; 0x330c <nrk_signal_delete+0x10a>
    324c:	08 2f       	mov	r16, r24

	nrk_int_disable();
    324e:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    3252:	e0 e5       	ldi	r30, 0x50	; 80
    3254:	f8 e0       	ldi	r31, 0x08	; 8
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3256:	b7 01       	movw	r22, r14
    3258:	a6 01       	movw	r20, r12
    325a:	40 95       	com	r20
    325c:	50 95       	com	r21
    325e:	60 95       	com	r22
    3260:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3262:	13 e0       	ldi	r17, 0x03	; 3
    3264:	df 01       	movw	r26, r30
    3266:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3268:	8c 91       	ld	r24, X
    326a:	8f 3f       	cpi	r24, 0xFF	; 255
    326c:	39 f1       	breq	.+78     	; 0x32bc <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    326e:	84 81       	ldd	r24, Z+4	; 0x04
    3270:	95 81       	ldd	r25, Z+5	; 0x05
    3272:	a6 81       	ldd	r26, Z+6	; 0x06
    3274:	b7 81       	ldd	r27, Z+7	; 0x07
    3276:	8c 15       	cp	r24, r12
    3278:	9d 05       	cpc	r25, r13
    327a:	ae 05       	cpc	r26, r14
    327c:	bf 05       	cpc	r27, r15
    327e:	51 f4       	brne	.+20     	; 0x3294 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3280:	10 86       	std	Z+8, r1	; 0x08
    3282:	11 86       	std	Z+9, r1	; 0x09
    3284:	12 86       	std	Z+10, r1	; 0x0a
    3286:	13 86       	std	Z+11, r1	; 0x0b
    3288:	9f 01       	movw	r18, r30
    328a:	22 50       	subi	r18, 0x02	; 2
    328c:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    328e:	e9 01       	movw	r28, r18
    3290:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3292:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3294:	84 23       	and	r24, r20
    3296:	95 23       	and	r25, r21
    3298:	a6 23       	and	r26, r22
    329a:	b7 23       	and	r27, r23
    329c:	84 83       	std	Z+4, r24	; 0x04
    329e:	95 83       	std	Z+5, r25	; 0x05
    32a0:	a6 83       	std	Z+6, r26	; 0x06
    32a2:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    32a4:	80 85       	ldd	r24, Z+8	; 0x08
    32a6:	91 85       	ldd	r25, Z+9	; 0x09
    32a8:	a2 85       	ldd	r26, Z+10	; 0x0a
    32aa:	b3 85       	ldd	r27, Z+11	; 0x0b
    32ac:	84 23       	and	r24, r20
    32ae:	95 23       	and	r25, r21
    32b0:	a6 23       	and	r26, r22
    32b2:	b7 23       	and	r27, r23
    32b4:	80 87       	std	Z+8, r24	; 0x08
    32b6:	91 87       	std	Z+9, r25	; 0x09
    32b8:	a2 87       	std	Z+10, r26	; 0x0a
    32ba:	b3 87       	std	Z+11, r27	; 0x0b
    32bc:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    32be:	d8 e0       	ldi	r29, 0x08	; 8
    32c0:	ec 3f       	cpi	r30, 0xFC	; 252
    32c2:	fd 07       	cpc	r31, r29
    32c4:	79 f6       	brne	.-98     	; 0x3264 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    32c6:	8e ef       	ldi	r24, 0xFE	; 254
    32c8:	9f ef       	ldi	r25, 0xFF	; 255
    32ca:	af ef       	ldi	r26, 0xFF	; 255
    32cc:	bf ef       	ldi	r27, 0xFF	; 255
    32ce:	04 c0       	rjmp	.+8      	; 0x32d8 <nrk_signal_delete+0xd6>
    32d0:	88 0f       	add	r24, r24
    32d2:	99 1f       	adc	r25, r25
    32d4:	aa 1f       	adc	r26, r26
    32d6:	bb 1f       	adc	r27, r27
    32d8:	0a 95       	dec	r16
    32da:	d2 f7       	brpl	.-12     	; 0x32d0 <nrk_signal_delete+0xce>
    32dc:	40 91 e6 04 	lds	r20, 0x04E6
    32e0:	50 91 e7 04 	lds	r21, 0x04E7
    32e4:	60 91 e8 04 	lds	r22, 0x04E8
    32e8:	70 91 e9 04 	lds	r23, 0x04E9
    32ec:	84 23       	and	r24, r20
    32ee:	95 23       	and	r25, r21
    32f0:	a6 23       	and	r26, r22
    32f2:	b7 23       	and	r27, r23
    32f4:	80 93 e6 04 	sts	0x04E6, r24
    32f8:	90 93 e7 04 	sts	0x04E7, r25
    32fc:	a0 93 e8 04 	sts	0x04E8, r26
    3300:	b0 93 e9 04 	sts	0x04E9, r27
	nrk_int_enable();
    3304:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>

	return NRK_OK;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	01 c0       	rjmp	.+2      	; 0x330e <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    330c:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	cf 90       	pop	r12
    331e:	08 95       	ret

00003320 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	70 e0       	ldi	r23, 0x00	; 0
    332c:	8a 01       	movw	r16, r20
    332e:	9b 01       	movw	r18, r22
    3330:	04 c0       	rjmp	.+8      	; 0x333a <nrk_signal_unregister+0x1a>
    3332:	00 0f       	add	r16, r16
    3334:	11 1f       	adc	r17, r17
    3336:	22 1f       	adc	r18, r18
    3338:	33 1f       	adc	r19, r19
    333a:	8a 95       	dec	r24
    333c:	d2 f7       	brpl	.-12     	; 0x3332 <nrk_signal_unregister+0x12>
    333e:	d9 01       	movw	r26, r18
    3340:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3342:	e0 91 09 09 	lds	r30, 0x0909
    3346:	f0 91 0a 09 	lds	r31, 0x090A
    334a:	45 85       	ldd	r20, Z+13	; 0x0d
    334c:	56 85       	ldd	r21, Z+14	; 0x0e
    334e:	67 85       	ldd	r22, Z+15	; 0x0f
    3350:	70 89       	ldd	r23, Z+16	; 0x10
    3352:	04 23       	and	r16, r20
    3354:	15 23       	and	r17, r21
    3356:	26 23       	and	r18, r22
    3358:	37 23       	and	r19, r23
    335a:	01 2b       	or	r16, r17
    335c:	02 2b       	or	r16, r18
    335e:	03 2b       	or	r16, r19
    3360:	d1 f0       	breq	.+52     	; 0x3396 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3362:	80 95       	com	r24
    3364:	90 95       	com	r25
    3366:	a0 95       	com	r26
    3368:	b0 95       	com	r27
    336a:	48 23       	and	r20, r24
    336c:	59 23       	and	r21, r25
    336e:	6a 23       	and	r22, r26
    3370:	7b 23       	and	r23, r27
    3372:	45 87       	std	Z+13, r20	; 0x0d
    3374:	56 87       	std	Z+14, r21	; 0x0e
    3376:	67 87       	std	Z+15, r22	; 0x0f
    3378:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    337a:	41 89       	ldd	r20, Z+17	; 0x11
    337c:	52 89       	ldd	r21, Z+18	; 0x12
    337e:	63 89       	ldd	r22, Z+19	; 0x13
    3380:	74 89       	ldd	r23, Z+20	; 0x14
    3382:	84 23       	and	r24, r20
    3384:	95 23       	and	r25, r21
    3386:	a6 23       	and	r26, r22
    3388:	b7 23       	and	r27, r23
    338a:	81 8b       	std	Z+17, r24	; 0x11
    338c:	92 8b       	std	Z+18, r25	; 0x12
    338e:	a3 8b       	std	Z+19, r26	; 0x13
    3390:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3396:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	08 95       	ret

0000339e <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    339e:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    33a0:	40 91 e6 04 	lds	r20, 0x04E6
    33a4:	50 91 e7 04 	lds	r21, 0x04E7
    33a8:	60 91 e8 04 	lds	r22, 0x04E8
    33ac:	70 91 e9 04 	lds	r23, 0x04E9
    33b0:	08 2e       	mov	r0, r24
    33b2:	04 c0       	rjmp	.+8      	; 0x33bc <nrk_signal_register+0x1e>
    33b4:	76 95       	lsr	r23
    33b6:	67 95       	ror	r22
    33b8:	57 95       	ror	r21
    33ba:	47 95       	ror	r20
    33bc:	0a 94       	dec	r0
    33be:	d2 f7       	brpl	.-12     	; 0x33b4 <nrk_signal_register+0x16>
    33c0:	40 ff       	sbrs	r20, 0
    33c2:	1d c0       	rjmp	.+58     	; 0x33fe <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    33c4:	e0 91 09 09 	lds	r30, 0x0909
    33c8:	f0 91 0a 09 	lds	r31, 0x090A
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	a0 e0       	ldi	r26, 0x00	; 0
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	04 c0       	rjmp	.+8      	; 0x33de <nrk_signal_register+0x40>
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	aa 1f       	adc	r26, r26
    33dc:	bb 1f       	adc	r27, r27
    33de:	2a 95       	dec	r18
    33e0:	d2 f7       	brpl	.-12     	; 0x33d6 <nrk_signal_register+0x38>
    33e2:	45 85       	ldd	r20, Z+13	; 0x0d
    33e4:	56 85       	ldd	r21, Z+14	; 0x0e
    33e6:	67 85       	ldd	r22, Z+15	; 0x0f
    33e8:	70 89       	ldd	r23, Z+16	; 0x10
    33ea:	84 2b       	or	r24, r20
    33ec:	95 2b       	or	r25, r21
    33ee:	a6 2b       	or	r26, r22
    33f0:	b7 2b       	or	r27, r23
    33f2:	85 87       	std	Z+13, r24	; 0x0d
    33f4:	96 87       	std	Z+14, r25	; 0x0e
    33f6:	a7 87       	std	Z+15, r26	; 0x0f
    33f8:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	08 95       	ret
	}
            
	return NRK_ERROR;
    33fe:	8f ef       	ldi	r24, 0xFF	; 255
}
    3400:	08 95       	ret

00003402 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3402:	cf 92       	push	r12
    3404:	df 92       	push	r13
    3406:	ef 92       	push	r14
    3408:	ff 92       	push	r15
    340a:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    340c:	c1 2c       	mov	r12, r1
    340e:	d1 2c       	mov	r13, r1
    3410:	76 01       	movw	r14, r12
    3412:	c3 94       	inc	r12
    3414:	04 c0       	rjmp	.+8      	; 0x341e <nrk_event_signal+0x1c>
    3416:	cc 0c       	add	r12, r12
    3418:	dd 1c       	adc	r13, r13
    341a:	ee 1c       	adc	r14, r14
    341c:	ff 1c       	adc	r15, r15
    341e:	8a 95       	dec	r24
    3420:	d2 f7       	brpl	.-12     	; 0x3416 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3422:	80 91 e6 04 	lds	r24, 0x04E6
    3426:	90 91 e7 04 	lds	r25, 0x04E7
    342a:	a0 91 e8 04 	lds	r26, 0x04E8
    342e:	b0 91 e9 04 	lds	r27, 0x04E9
    3432:	8c 21       	and	r24, r12
    3434:	9d 21       	and	r25, r13
    3436:	ae 21       	and	r26, r14
    3438:	bf 21       	and	r27, r15
    343a:	89 2b       	or	r24, r25
    343c:	8a 2b       	or	r24, r26
    343e:	8b 2b       	or	r24, r27
    3440:	11 f4       	brne	.+4      	; 0x3446 <nrk_event_signal+0x44>
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	44 c0       	rjmp	.+136    	; 0x34ce <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3446:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    344a:	ee e4       	ldi	r30, 0x4E	; 78
    344c:	f8 e0       	ldi	r31, 0x08	; 8
    344e:	a0 e5       	ldi	r26, 0x50	; 80
    3450:	b8 e0       	ldi	r27, 0x08	; 8

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3452:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3454:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3456:	90 81       	ld	r25, Z
    3458:	91 30       	cpi	r25, 0x01	; 1
    345a:	b9 f4       	brne	.+46     	; 0x348a <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    345c:	42 85       	ldd	r20, Z+10	; 0x0a
    345e:	53 85       	ldd	r21, Z+11	; 0x0b
    3460:	64 85       	ldd	r22, Z+12	; 0x0c
    3462:	75 85       	ldd	r23, Z+13	; 0x0d
    3464:	4c 21       	and	r20, r12
    3466:	5d 21       	and	r21, r13
    3468:	6e 21       	and	r22, r14
    346a:	7f 21       	and	r23, r15
    346c:	45 2b       	or	r20, r21
    346e:	46 2b       	or	r20, r22
    3470:	47 2b       	or	r20, r23
    3472:	59 f0       	breq	.+22     	; 0x348a <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3474:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3476:	16 86       	std	Z+14, r1	; 0x0e
    3478:	17 86       	std	Z+15, r1	; 0x0f
    347a:	10 8a       	std	Z+16, r1	; 0x10
    347c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    347e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3480:	c2 86       	std	Z+10, r12	; 0x0a
    3482:	d3 86       	std	Z+11, r13	; 0x0b
    3484:	e4 86       	std	Z+12, r14	; 0x0c
    3486:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3488:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    348a:	90 81       	ld	r25, Z
    348c:	92 30       	cpi	r25, 0x02	; 2
    348e:	a1 f4       	brne	.+40     	; 0x34b8 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3490:	42 85       	ldd	r20, Z+10	; 0x0a
    3492:	53 85       	ldd	r21, Z+11	; 0x0b
    3494:	64 85       	ldd	r22, Z+12	; 0x0c
    3496:	75 85       	ldd	r23, Z+13	; 0x0d
    3498:	4c 15       	cp	r20, r12
    349a:	5d 05       	cpc	r21, r13
    349c:	6e 05       	cpc	r22, r14
    349e:	7f 05       	cpc	r23, r15
    34a0:	59 f4       	brne	.+22     	; 0x34b8 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    34a2:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    34a4:	16 86       	std	Z+14, r1	; 0x0e
    34a6:	17 86       	std	Z+15, r1	; 0x0f
    34a8:	10 8a       	std	Z+16, r1	; 0x10
    34aa:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    34ac:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    34ae:	12 86       	std	Z+10, r1	; 0x0a
    34b0:	13 86       	std	Z+11, r1	; 0x0b
    34b2:	14 86       	std	Z+12, r1	; 0x0c
    34b4:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    34b6:	c1 e0       	ldi	r28, 0x01	; 1
    34b8:	bb 96       	adiw	r30, 0x2b	; 43
    34ba:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    34bc:	98 e0       	ldi	r25, 0x08	; 8
    34be:	ea 3f       	cpi	r30, 0xFA	; 250
    34c0:	f9 07       	cpc	r31, r25
    34c2:	49 f6       	brne	.-110    	; 0x3456 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    34c4:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
	if(event_occured)
    34c8:	c1 11       	cpse	r28, r1
    34ca:	05 c0       	rjmp	.+10     	; 0x34d6 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
	return NRK_ERROR;
    34d2:	8f ef       	ldi	r24, 0xFF	; 255
    34d4:	01 c0       	rjmp	.+2      	; 0x34d8 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    34d8:	cf 91       	pop	r28
    34da:	ff 90       	pop	r15
    34dc:	ef 90       	pop	r14
    34de:	df 90       	pop	r13
    34e0:	cf 90       	pop	r12
    34e2:	08 95       	ret

000034e4 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    34e8:	e0 91 09 09 	lds	r30, 0x0909
    34ec:	f0 91 0a 09 	lds	r31, 0x090A
    34f0:	05 85       	ldd	r16, Z+13	; 0x0d
    34f2:	16 85       	ldd	r17, Z+14	; 0x0e
    34f4:	27 85       	ldd	r18, Z+15	; 0x0f
    34f6:	30 89       	ldd	r19, Z+16	; 0x10
    34f8:	06 23       	and	r16, r22
    34fa:	17 23       	and	r17, r23
    34fc:	28 23       	and	r18, r24
    34fe:	39 23       	and	r19, r25
    3500:	01 15       	cp	r16, r1
    3502:	11 05       	cpc	r17, r1
    3504:	21 05       	cpc	r18, r1
    3506:	31 05       	cpc	r19, r1
    3508:	11 f1       	breq	.+68     	; 0x354e <nrk_event_wait+0x6a>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    350e:	81 8b       	std	Z+17, r24	; 0x11
    3510:	92 8b       	std	Z+18, r25	; 0x12
    3512:	a3 8b       	std	Z+19, r26	; 0x13
    3514:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3516:	21 e0       	ldi	r18, 0x01	; 1
    3518:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    351a:	00 90 f9 08 	lds	r0, 0x08F9
    351e:	04 c0       	rjmp	.+8      	; 0x3528 <nrk_event_wait+0x44>
    3520:	b6 95       	lsr	r27
    3522:	a7 95       	ror	r26
    3524:	97 95       	ror	r25
    3526:	87 95       	ror	r24
    3528:	0a 94       	dec	r0
    352a:	d2 f7       	brpl	.-12     	; 0x3520 <nrk_event_wait+0x3c>
    352c:	80 ff       	sbrs	r24, 0
    352e:	03 c0       	rjmp	.+6      	; 0x3536 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3530:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <nrk_wait_until_nw>
    3534:	04 c0       	rjmp	.+8      	; 0x353e <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    353e:	e0 91 09 09 	lds	r30, 0x0909
    3542:	f0 91 0a 09 	lds	r31, 0x090A
    3546:	01 89       	ldd	r16, Z+17	; 0x11
    3548:	12 89       	ldd	r17, Z+18	; 0x12
    354a:	23 89       	ldd	r18, Z+19	; 0x13
    354c:	34 89       	ldd	r19, Z+20	; 0x14
}
    354e:	c9 01       	movw	r24, r18
    3550:	b8 01       	movw	r22, r16
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	08 95       	ret

0000355e <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    355e:	21 e0       	ldi	r18, 0x01	; 1
    3560:	85 5f       	subi	r24, 0xF5	; 245
    3562:	98 40       	sbci	r25, 0x08	; 8
    3564:	09 f4       	brne	.+2      	; 0x3568 <nrk_get_resource_index+0xa>
    3566:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    3568:	82 2f       	mov	r24, r18
    356a:	81 95       	neg	r24
    356c:	08 95       	ret

0000356e <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    356e:	0e 94 af 1a 	call	0x355e	; 0x355e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3572:	8f 3f       	cpi	r24, 0xFF	; 255
    3574:	11 f4       	brne	.+4      	; 0x357a <nrk_sem_query+0xc>
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    357a:	81 30       	cpi	r24, 0x01	; 1
    357c:	29 f4       	brne	.+10     	; 0x3588 <nrk_sem_query+0x1a>
    357e:	82 e0       	ldi	r24, 0x02	; 2
    3580:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
    3584:	8f ef       	ldi	r24, 0xFF	; 255
    3586:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3588:	99 27       	eor	r25, r25
    358a:	87 fd       	sbrc	r24, 7
    358c:	90 95       	com	r25
    358e:	fc 01       	movw	r30, r24
    3590:	ee 0f       	add	r30, r30
    3592:	ff 1f       	adc	r31, r31
    3594:	8e 0f       	add	r24, r30
    3596:	9f 1f       	adc	r25, r31
    3598:	fc 01       	movw	r30, r24
    359a:	eb 50       	subi	r30, 0x0B	; 11
    359c:	f7 4f       	sbci	r31, 0xF7	; 247
    359e:	82 81       	ldd	r24, Z+2	; 0x02
}
    35a0:	08 95       	ret

000035a2 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	1f 92       	push	r1
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    35b4:	0e 94 af 1a 	call	0x355e	; 0x355e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    35b8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ba:	11 f4       	brne	.+4      	; 0x35c0 <nrk_sem_pend+0x1e>
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	03 c0       	rjmp	.+6      	; 0x35c6 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	29 f4       	brne	.+10     	; 0x35ce <nrk_sem_pend+0x2c>
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
    35ca:	8f ef       	ldi	r24, 0xFF	; 255
    35cc:	41 c0       	rjmp	.+130    	; 0x3650 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    35ce:	89 83       	std	Y+1, r24	; 0x01
    35d0:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	e8 2e       	mov	r14, r24
    35d8:	ff 24       	eor	r15, r15
    35da:	e7 fc       	sbrc	r14, 7
    35dc:	f0 94       	com	r15
    35de:	87 01       	movw	r16, r14
    35e0:	00 0f       	add	r16, r16
    35e2:	11 1f       	adc	r17, r17
    35e4:	f8 01       	movw	r30, r16
    35e6:	ee 0d       	add	r30, r14
    35e8:	ff 1d       	adc	r31, r15
    35ea:	eb 50       	subi	r30, 0x0B	; 11
    35ec:	f7 4f       	sbci	r31, 0xF7	; 247
    35ee:	92 81       	ldd	r25, Z+2	; 0x02
    35f0:	91 11       	cpse	r25, r1
    35f2:	16 c0       	rjmp	.+44     	; 0x3620 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    35f4:	e0 91 09 09 	lds	r30, 0x0909
    35f8:	f0 91 0a 09 	lds	r31, 0x090A
    35fc:	97 81       	ldd	r25, Z+7	; 0x07
    35fe:	92 60       	ori	r25, 0x02	; 2
    3600:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3602:	99 27       	eor	r25, r25
    3604:	87 fd       	sbrc	r24, 7
    3606:	90 95       	com	r25
    3608:	a9 2f       	mov	r26, r25
    360a:	b9 2f       	mov	r27, r25
    360c:	81 8b       	std	Z+17, r24	; 0x11
    360e:	92 8b       	std	Z+18, r25	; 0x12
    3610:	a3 8b       	std	Z+19, r26	; 0x13
    3612:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3614:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3620:	0e 0d       	add	r16, r14
    3622:	1f 1d       	adc	r17, r15
    3624:	d8 01       	movw	r26, r16
    3626:	ab 50       	subi	r26, 0x0B	; 11
    3628:	b7 4f       	sbci	r27, 0xF7	; 247
    362a:	12 96       	adiw	r26, 0x02	; 2
    362c:	8c 91       	ld	r24, X
    362e:	12 97       	sbiw	r26, 0x02	; 2
    3630:	81 50       	subi	r24, 0x01	; 1
    3632:	12 96       	adiw	r26, 0x02	; 2
    3634:	8c 93       	st	X, r24
    3636:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3638:	e0 91 09 09 	lds	r30, 0x0909
    363c:	f0 91 0a 09 	lds	r31, 0x090A
    3640:	11 96       	adiw	r26, 0x01	; 1
    3642:	8c 91       	ld	r24, X
    3644:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    364a:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>

	return NRK_OK;
    364e:	81 e0       	ldi	r24, 0x01	; 1
}
    3650:	0f 90       	pop	r0
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	1f 91       	pop	r17
    3658:	0f 91       	pop	r16
    365a:	ff 90       	pop	r15
    365c:	ef 90       	pop	r14
    365e:	08 95       	ret

00003660 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	1f 92       	push	r1
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    366e:	0e 94 af 1a 	call	0x355e	; 0x355e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3672:	8f 3f       	cpi	r24, 0xFF	; 255
    3674:	11 f4       	brne	.+4      	; 0x367a <nrk_sem_post+0x1a>
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	03 c0       	rjmp	.+6      	; 0x3680 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	29 f4       	brne	.+10     	; 0x3688 <nrk_sem_post+0x28>
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
    3684:	8f ef       	ldi	r24, 0xFF	; 255
    3686:	44 c0       	rjmp	.+136    	; 0x3710 <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3688:	48 2f       	mov	r20, r24
    368a:	55 27       	eor	r21, r21
    368c:	47 fd       	sbrc	r20, 7
    368e:	50 95       	com	r21
    3690:	9a 01       	movw	r18, r20
    3692:	22 0f       	add	r18, r18
    3694:	33 1f       	adc	r19, r19
    3696:	24 0f       	add	r18, r20
    3698:	35 1f       	adc	r19, r21
    369a:	89 01       	movw	r16, r18
    369c:	0b 50       	subi	r16, 0x0B	; 11
    369e:	17 4f       	sbci	r17, 0xF7	; 247
    36a0:	f8 01       	movw	r30, r16
    36a2:	22 81       	ldd	r18, Z+2	; 0x02
    36a4:	90 81       	ld	r25, Z
    36a6:	29 17       	cp	r18, r25
    36a8:	94 f5       	brge	.+100    	; 0x370e <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>

		nrk_sem_list[id].value++;
    36b0:	f8 01       	movw	r30, r16
    36b2:	92 81       	ldd	r25, Z+2	; 0x02
    36b4:	9f 5f       	subi	r25, 0xFF	; 255
    36b6:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    36b8:	e0 91 09 09 	lds	r30, 0x0909
    36bc:	f0 91 0a 09 	lds	r31, 0x090A
    36c0:	14 82       	std	Z+4, r1	; 0x04
    36c2:	ee e4       	ldi	r30, 0x4E	; 78
    36c4:	f8 e0       	ldi	r31, 0x08	; 8

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	99 27       	eor	r25, r25
    36ca:	87 fd       	sbrc	r24, 7
    36cc:	90 95       	com	r25
    36ce:	a9 2f       	mov	r26, r25
    36d0:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    36d2:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    36d4:	30 81       	ld	r19, Z
    36d6:	32 30       	cpi	r19, 0x02	; 2
    36d8:	99 f4       	brne	.+38     	; 0x3700 <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    36da:	42 85       	ldd	r20, Z+10	; 0x0a
    36dc:	53 85       	ldd	r21, Z+11	; 0x0b
    36de:	64 85       	ldd	r22, Z+12	; 0x0c
    36e0:	75 85       	ldd	r23, Z+13	; 0x0d
    36e2:	48 17       	cp	r20, r24
    36e4:	59 07       	cpc	r21, r25
    36e6:	6a 07       	cpc	r22, r26
    36e8:	7b 07       	cpc	r23, r27
    36ea:	51 f4       	brne	.+20     	; 0x3700 <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    36ec:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    36ee:	16 86       	std	Z+14, r1	; 0x0e
    36f0:	17 86       	std	Z+15, r1	; 0x0f
    36f2:	10 8a       	std	Z+16, r1	; 0x10
    36f4:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    36f6:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    36f8:	12 86       	std	Z+10, r1	; 0x0a
    36fa:	13 86       	std	Z+11, r1	; 0x0b
    36fc:	14 86       	std	Z+12, r1	; 0x0c
    36fe:	15 86       	std	Z+13, r1	; 0x0d
    3700:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3702:	38 e0       	ldi	r19, 0x08	; 8
    3704:	ea 3f       	cpi	r30, 0xFA	; 250
    3706:	f3 07       	cpc	r31, r19
    3708:	29 f7       	brne	.-54     	; 0x36d4 <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    370a:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
	}
		
return NRK_OK;
    370e:	81 e0       	ldi	r24, 0x01	; 1
}
    3710:	0f 90       	pop	r0
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	1f 91       	pop	r17
    3718:	0f 91       	pop	r16
    371a:	08 95       	ret

0000371c <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    371c:	0e 94 af 1a 	call	0x355e	; 0x355e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3720:	8f 3f       	cpi	r24, 0xFF	; 255
    3722:	11 f4       	brne	.+4      	; 0x3728 <nrk_sem_delete+0xc>
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	03 c0       	rjmp	.+6      	; 0x372e <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3728:	81 30       	cpi	r24, 0x01	; 1
    372a:	29 f4       	brne	.+10     	; 0x3736 <nrk_sem_delete+0x1a>
    372c:	82 e0       	ldi	r24, 0x02	; 2
    372e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
    3732:	8f ef       	ldi	r24, 0xFF	; 255
    3734:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3736:	99 27       	eor	r25, r25
    3738:	87 fd       	sbrc	r24, 7
    373a:	90 95       	com	r25
    373c:	fc 01       	movw	r30, r24
    373e:	ee 0f       	add	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	8e 0f       	add	r24, r30
    3744:	9f 1f       	adc	r25, r31
    3746:	fc 01       	movw	r30, r24
    3748:	eb 50       	subi	r30, 0x0B	; 11
    374a:	f7 4f       	sbci	r31, 0xF7	; 247
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3750:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3752:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3754:	80 91 08 09 	lds	r24, 0x0908
    3758:	81 50       	subi	r24, 0x01	; 1
    375a:	80 93 08 09 	sts	0x0908, r24
return NRK_OK;
    375e:	81 e0       	ldi	r24, 0x01	; 1
}
    3760:	08 95       	ret

00003762 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3762:	e0 91 fe 08 	lds	r30, 0x08FE
    3766:	f0 91 ff 08 	lds	r31, 0x08FF
}
    376a:	80 81       	ld	r24, Z
    376c:	08 95       	ret

0000376e <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    376e:	e0 91 fe 08 	lds	r30, 0x08FE
    3772:	f0 91 ff 08 	lds	r31, 0x08FF
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3776:	30 97       	sbiw	r30, 0x00	; 0
    3778:	21 f0       	breq	.+8      	; 0x3782 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    377a:	03 80       	ldd	r0, Z+3	; 0x03
    377c:	f4 81       	ldd	r31, Z+4	; 0x04
    377e:	e0 2d       	mov	r30, r0
    3780:	fa cf       	rjmp	.-12     	; 0x3776 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3782:	08 95       	ret

00003784 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3784:	af 92       	push	r10
    3786:	bf 92       	push	r11
    3788:	cf 92       	push	r12
    378a:	df 92       	push	r13
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3798:	e0 91 45 08 	lds	r30, 0x0845
    379c:	f0 91 46 08 	lds	r31, 0x0846
    37a0:	30 97       	sbiw	r30, 0x00	; 0
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <nrk_add_to_readyQ+0x22>
    37a4:	94 c0       	rjmp	.+296    	; 0x38ce <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    37a6:	00 91 fe 08 	lds	r16, 0x08FE
    37aa:	10 91 ff 08 	lds	r17, 0x08FF
    CurNode = _free_node;

    if (_head_node != NULL)
    37ae:	01 15       	cp	r16, r1
    37b0:	11 05       	cpc	r17, r1
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <nrk_add_to_readyQ+0x32>
    37b4:	4c c0       	rjmp	.+152    	; 0x384e <nrk_add_to_readyQ+0xca>
    37b6:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    37b8:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    37ba:	58 2f       	mov	r21, r24
    37bc:	54 03       	mulsu	r21, r20
    37be:	90 01       	movw	r18, r0
    37c0:	11 24       	eor	r1, r1
    37c2:	29 5b       	subi	r18, 0xB9	; 185
    37c4:	37 4f       	sbci	r19, 0xF7	; 247
    37c6:	79 01       	movw	r14, r18
    37c8:	9a e0       	ldi	r25, 0x0A	; 10
    37ca:	e9 0e       	add	r14, r25
    37cc:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    37ce:	69 01       	movw	r12, r18
    37d0:	c4 e0       	ldi	r28, 0x04	; 4
    37d2:	cc 0e       	add	r12, r28
    37d4:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    37d6:	59 01       	movw	r10, r18
    37d8:	db e0       	ldi	r29, 0x0B	; 11
    37da:	ad 0e       	add	r10, r29
    37dc:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    37de:	2c 91       	ld	r18, X
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	42 9f       	mul	r20, r18
    37e4:	b0 01       	movw	r22, r0
    37e6:	43 9f       	mul	r20, r19
    37e8:	70 0d       	add	r23, r0
    37ea:	11 24       	eor	r1, r1
    37ec:	69 5b       	subi	r22, 0xB9	; 185
    37ee:	77 4f       	sbci	r23, 0xF7	; 247
    37f0:	eb 01       	movw	r28, r22
    37f2:	9c 81       	ldd	r25, Y+4	; 0x04
    37f4:	99 23       	and	r25, r25
    37f6:	29 f0       	breq	.+10     	; 0x3802 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    37f8:	5b 85       	ldd	r21, Y+11	; 0x0b
    37fa:	e7 01       	movw	r28, r14
    37fc:	98 81       	ld	r25, Y
    37fe:	59 17       	cp	r21, r25
    3800:	40 f1       	brcs	.+80     	; 0x3852 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3802:	e6 01       	movw	r28, r12
    3804:	98 81       	ld	r25, Y
    3806:	99 23       	and	r25, r25
    3808:	69 f0       	breq	.+26     	; 0x3824 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    380a:	42 9f       	mul	r20, r18
    380c:	b0 01       	movw	r22, r0
    380e:	43 9f       	mul	r20, r19
    3810:	70 0d       	add	r23, r0
    3812:	11 24       	eor	r1, r1
    3814:	69 5b       	subi	r22, 0xB9	; 185
    3816:	77 4f       	sbci	r23, 0xF7	; 247
    3818:	eb 01       	movw	r28, r22
    381a:	5a 85       	ldd	r21, Y+10	; 0x0a
    381c:	e5 01       	movw	r28, r10
    381e:	98 81       	ld	r25, Y
    3820:	59 17       	cp	r21, r25
    3822:	b8 f0       	brcs	.+46     	; 0x3852 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3824:	42 9f       	mul	r20, r18
    3826:	b0 01       	movw	r22, r0
    3828:	43 9f       	mul	r20, r19
    382a:	70 0d       	add	r23, r0
    382c:	11 24       	eor	r1, r1
    382e:	9b 01       	movw	r18, r22
    3830:	29 5b       	subi	r18, 0xB9	; 185
    3832:	37 4f       	sbci	r19, 0xF7	; 247
    3834:	e9 01       	movw	r28, r18
    3836:	2a 85       	ldd	r18, Y+10	; 0x0a
    3838:	e7 01       	movw	r28, r14
    383a:	98 81       	ld	r25, Y
    383c:	29 17       	cp	r18, r25
    383e:	48 f0       	brcs	.+18     	; 0x3852 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3840:	13 96       	adiw	r26, 0x03	; 3
    3842:	0d 90       	ld	r0, X+
    3844:	bc 91       	ld	r27, X
    3846:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3848:	10 97       	sbiw	r26, 0x00	; 0
    384a:	49 f6       	brne	.-110    	; 0x37de <nrk_add_to_readyQ+0x5a>
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <nrk_add_to_readyQ+0xce>
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3852:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3854:	c3 81       	ldd	r28, Z+3	; 0x03
    3856:	d4 81       	ldd	r29, Z+4	; 0x04
    3858:	d0 93 46 08 	sts	0x0846, r29
    385c:	c0 93 45 08 	sts	0x0845, r28

    if (NextNode == _head_node)
    3860:	a0 17       	cp	r26, r16
    3862:	b1 07       	cpc	r27, r17
    3864:	b1 f4       	brne	.+44     	; 0x3892 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    3866:	10 97       	sbiw	r26, 0x00	; 0
    3868:	49 f0       	breq	.+18     	; 0x387c <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    386a:	b4 83       	std	Z+4, r27	; 0x04
    386c:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    386e:	12 82       	std	Z+2, r1	; 0x02
    3870:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3872:	12 96       	adiw	r26, 0x02	; 2
    3874:	fc 93       	st	X, r31
    3876:	ee 93       	st	-X, r30
    3878:	11 97       	sbiw	r26, 0x01	; 1
    387a:	06 c0       	rjmp	.+12     	; 0x3888 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    387c:	14 82       	std	Z+4, r1	; 0x04
    387e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3880:	12 82       	std	Z+2, r1	; 0x02
    3882:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3884:	fa 83       	std	Y+2, r31	; 0x02
    3886:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3888:	f0 93 ff 08 	sts	0x08FF, r31
    388c:	e0 93 fe 08 	sts	0x08FE, r30
    3890:	1e c0       	rjmp	.+60     	; 0x38ce <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    3892:	ac 17       	cp	r26, r28
    3894:	bd 07       	cpc	r27, r29
    3896:	79 f0       	breq	.+30     	; 0x38b6 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3898:	11 96       	adiw	r26, 0x01	; 1
    389a:	8d 91       	ld	r24, X+
    389c:	9c 91       	ld	r25, X
    389e:	12 97       	sbiw	r26, 0x02	; 2
    38a0:	92 83       	std	Z+2, r25	; 0x02
    38a2:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    38a4:	b4 83       	std	Z+4, r27	; 0x04
    38a6:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    38a8:	11 96       	adiw	r26, 0x01	; 1
    38aa:	cd 91       	ld	r28, X+
    38ac:	dc 91       	ld	r29, X
    38ae:	12 97       	sbiw	r26, 0x02	; 2
    38b0:	fc 83       	std	Y+4, r31	; 0x04
    38b2:	eb 83       	std	Y+3, r30	; 0x03
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    38b6:	14 82       	std	Z+4, r1	; 0x04
    38b8:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    38ba:	11 96       	adiw	r26, 0x01	; 1
    38bc:	8d 91       	ld	r24, X+
    38be:	9c 91       	ld	r25, X
    38c0:	12 97       	sbiw	r26, 0x02	; 2
    38c2:	92 83       	std	Z+2, r25	; 0x02
    38c4:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    38c6:	12 96       	adiw	r26, 0x02	; 2
    38c8:	fc 93       	st	X, r31
    38ca:	ee 93       	st	-X, r30
    38cc:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	df 90       	pop	r13
    38dc:	cf 90       	pop	r12
    38de:	bf 90       	pop	r11
    38e0:	af 90       	pop	r10
    38e2:	08 95       	ret

000038e4 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    38e8:	e0 91 fe 08 	lds	r30, 0x08FE
    38ec:	f0 91 ff 08 	lds	r31, 0x08FF
    38f0:	30 97       	sbiw	r30, 0x00	; 0
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <nrk_rem_from_readyQ+0x12>
    38f4:	44 c0       	rjmp	.+136    	; 0x397e <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    38f6:	99 27       	eor	r25, r25
    38f8:	87 fd       	sbrc	r24, 7
    38fa:	90 95       	com	r25
    38fc:	20 81       	ld	r18, Z
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	28 17       	cp	r18, r24
    3902:	39 07       	cpc	r19, r25
    3904:	81 f4       	brne	.+32     	; 0x3926 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3906:	a3 81       	ldd	r26, Z+3	; 0x03
    3908:	b4 81       	ldd	r27, Z+4	; 0x04
    390a:	b0 93 ff 08 	sts	0x08FF, r27
    390e:	a0 93 fe 08 	sts	0x08FE, r26
        _head_node->Prev = NULL;
    3912:	12 96       	adiw	r26, 0x02	; 2
    3914:	1c 92       	st	X, r1
    3916:	1e 92       	st	-X, r1
    3918:	11 97       	sbiw	r26, 0x01	; 1
    391a:	18 c0       	rjmp	.+48     	; 0x394c <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    391c:	03 80       	ldd	r0, Z+3	; 0x03
    391e:	f4 81       	ldd	r31, Z+4	; 0x04
    3920:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3922:	30 97       	sbiw	r30, 0x00	; 0
    3924:	61 f1       	breq	.+88     	; 0x397e <nrk_rem_from_readyQ+0x9a>
    3926:	20 81       	ld	r18, Z
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	28 17       	cp	r18, r24
    392c:	39 07       	cpc	r19, r25
    392e:	b1 f7       	brne	.-20     	; 0x391c <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3930:	c1 81       	ldd	r28, Z+1	; 0x01
    3932:	d2 81       	ldd	r29, Z+2	; 0x02
    3934:	83 81       	ldd	r24, Z+3	; 0x03
    3936:	94 81       	ldd	r25, Z+4	; 0x04
    3938:	9c 83       	std	Y+4, r25	; 0x04
    393a:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    393c:	a3 81       	ldd	r26, Z+3	; 0x03
    393e:	b4 81       	ldd	r27, Z+4	; 0x04
    3940:	10 97       	sbiw	r26, 0x00	; 0
    3942:	21 f0       	breq	.+8      	; 0x394c <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3944:	12 96       	adiw	r26, 0x02	; 2
    3946:	dc 93       	st	X, r29
    3948:	ce 93       	st	-X, r28
    394a:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    394c:	a0 91 45 08 	lds	r26, 0x0845
    3950:	b0 91 46 08 	lds	r27, 0x0846
    3954:	10 97       	sbiw	r26, 0x00	; 0
    3956:	39 f4       	brne	.+14     	; 0x3966 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    3958:	f0 93 46 08 	sts	0x0846, r31
    395c:	e0 93 45 08 	sts	0x0845, r30
        _free_node->Next = NULL;
    3960:	14 82       	std	Z+4, r1	; 0x04
    3962:	13 82       	std	Z+3, r1	; 0x03
    3964:	0a c0       	rjmp	.+20     	; 0x397a <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3966:	b4 83       	std	Z+4, r27	; 0x04
    3968:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    396a:	12 96       	adiw	r26, 0x02	; 2
    396c:	fc 93       	st	X, r31
    396e:	ee 93       	st	-X, r30
    3970:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3972:	f0 93 46 08 	sts	0x0846, r31
    3976:	e0 93 45 08 	sts	0x0845, r30
    }
    _free_node->Prev = NULL;
    397a:	12 82       	std	Z+2, r1	; 0x02
    397c:	11 82       	std	Z+1, r1	; 0x01
}
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	08 95       	ret

00003984 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3984:	ef 92       	push	r14
    3986:	ff 92       	push	r15
    3988:	0f 93       	push	r16
    398a:	1f 93       	push	r17
    398c:	cf 93       	push	r28
    398e:	df 93       	push	r29
    3990:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3992:	4b 81       	ldd	r20, Y+3	; 0x03
    3994:	5c 81       	ldd	r21, Y+4	; 0x04
    3996:	69 81       	ldd	r22, Y+1	; 0x01
    3998:	7a 81       	ldd	r23, Y+2	; 0x02
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	9e 81       	ldd	r25, Y+6	; 0x06
    399e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    39a2:	2f 81       	ldd	r18, Y+7	; 0x07
    39a4:	22 23       	and	r18, r18
    39a6:	71 f0       	breq	.+28     	; 0x39c4 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    39a8:	4b 81       	ldd	r20, Y+3	; 0x03
    39aa:	5c 81       	ldd	r21, Y+4	; 0x04
    39ac:	e1 2c       	mov	r14, r1
    39ae:	f1 2c       	mov	r15, r1
    39b0:	00 e0       	ldi	r16, 0x00	; 0
    39b2:	10 e0       	ldi	r17, 0x00	; 0
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	bc 01       	movw	r22, r24
    39ba:	ce 01       	movw	r24, r28
    39bc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    39c0:	1f 82       	std	Y+7, r1	; 0x07
    39c2:	0c c0       	rjmp	.+24     	; 0x39dc <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    39c4:	e8 81       	ld	r30, Y
    39c6:	2b e2       	ldi	r18, 0x2B	; 43
    39c8:	e2 02       	muls	r30, r18
    39ca:	f0 01       	movw	r30, r0
    39cc:	11 24       	eor	r1, r1
    39ce:	e9 5b       	subi	r30, 0xB9	; 185
    39d0:	f7 4f       	sbci	r31, 0xF7	; 247
    39d2:	21 85       	ldd	r18, Z+9	; 0x09
    39d4:	23 30       	cpi	r18, 0x03	; 3
    39d6:	b9 f4       	brne	.+46     	; 0x3a06 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    39d8:	91 83       	std	Z+1, r25	; 0x01
    39da:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    39dc:	e8 81       	ld	r30, Y
    39de:	8b e2       	ldi	r24, 0x2B	; 43
    39e0:	e8 02       	muls	r30, r24
    39e2:	f0 01       	movw	r30, r0
    39e4:	11 24       	eor	r1, r1
    39e6:	e9 5b       	subi	r30, 0xB9	; 185
    39e8:	f7 4f       	sbci	r31, 0xF7	; 247
    39ea:	85 89       	ldd	r24, Z+21	; 0x15
    39ec:	96 89       	ldd	r25, Z+22	; 0x16
    39ee:	a7 89       	ldd	r26, Z+23	; 0x17
    39f0:	b0 8d       	ldd	r27, Z+24	; 0x18
    39f2:	89 2b       	or	r24, r25
    39f4:	8a 2b       	or	r24, r26
    39f6:	8b 2b       	or	r24, r27
    39f8:	41 f4       	brne	.+16     	; 0x3a0a <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    39fe:	88 81       	ld	r24, Y
    3a00:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_add_to_readyQ>
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    3a06:	8f ef       	ldi	r24, 0xFF	; 255
    3a08:	01 c0       	rjmp	.+2      	; 0x3a0c <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
}
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	08 95       	ret

00003a1a <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	28 97       	sbiw	r28, 0x08	; 8
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	29 83       	std	Y+1, r18	; 0x01
    3a32:	3a 83       	std	Y+2, r19	; 0x02
    3a34:	4b 83       	std	Y+3, r20	; 0x03
    3a36:	5c 83       	std	Y+4, r21	; 0x04
    3a38:	6d 83       	std	Y+5, r22	; 0x05
    3a3a:	7e 83       	std	Y+6, r23	; 0x06
    3a3c:	8f 83       	std	Y+7, r24	; 0x07
    3a3e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3a40:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3a44:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3a48:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	0e 94 1f 21 	call	0x423e	; 0x423e <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    3a52:	63 30       	cpi	r22, 0x03	; 3
    3a54:	71 05       	cpc	r23, r1
    3a56:	98 f0       	brcs	.+38     	; 0x3a7e <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3a58:	e0 91 09 09 	lds	r30, 0x0909
    3a5c:	f0 91 0a 09 	lds	r31, 0x090A
    3a60:	21 2f       	mov	r18, r17
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	62 0f       	add	r22, r18
    3a66:	73 1f       	adc	r23, r19
    3a68:	cb 01       	movw	r24, r22
    3a6a:	a0 e0       	ldi	r26, 0x00	; 0
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	85 8b       	std	Z+21, r24	; 0x15
    3a70:	96 8b       	std	Z+22, r25	; 0x16
    3a72:	a7 8b       	std	Z+23, r26	; 0x17
    3a74:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3a76:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>

    return NRK_OK;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	01 c0       	rjmp	.+2      	; 0x3a80 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3a7e:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3a80:	28 96       	adiw	r28, 0x08	; 8
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	f8 94       	cli
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	cd bf       	out	0x3d, r28	; 61
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	08 95       	ret

00003a94 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3a94:	0e 94 51 29 	call	0x52a2	; 0x52a2 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3a98:	e0 91 09 09 	lds	r30, 0x0909
    3a9c:	f0 91 0a 09 	lds	r31, 0x090A
    3aa0:	85 81       	ldd	r24, Z+5	; 0x05
    3aa2:	81 11       	cpse	r24, r1
    3aa4:	f7 cf       	rjmp	.-18     	; 0x3a94 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3aa6:	08 95       	ret

00003aa8 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3aa8:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    3aaa:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3aae:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3ab2:	e0 91 09 09 	lds	r30, 0x0909
    3ab6:	f0 91 0a 09 	lds	r31, 0x090A
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	92 a7       	std	Z+42, r25	; 0x2a
    3ac0:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3ac2:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3ac4:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3ac8:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3aca:	88 3f       	cpi	r24, 0xF8	; 248
    3acc:	80 f4       	brcc	.+32     	; 0x3aee <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3ace:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    3ad2:	2c 2f       	mov	r18, r28
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	2f 5f       	subi	r18, 0xFF	; 255
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	28 17       	cp	r18, r24
    3ade:	39 07       	cpc	r19, r25
    3ae0:	34 f4       	brge	.+12     	; 0x3aee <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    3ae2:	82 e0       	ldi	r24, 0x02	; 2
    3ae4:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3ae6:	80 93 f1 07 	sts	0x07F1, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3aea:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3aee:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3af2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	cf 91       	pop	r28
    3afa:	08 95       	ret

00003afc <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3afc:	e0 91 09 09 	lds	r30, 0x0909
    3b00:	f0 91 0a 09 	lds	r31, 0x090A
    3b04:	80 85       	ldd	r24, Z+8	; 0x08
    3b06:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3b0a:	e0 91 09 09 	lds	r30, 0x0909
    3b0e:	f0 91 0a 09 	lds	r31, 0x090A
    3b12:	84 e0       	ldi	r24, 0x04	; 4
    3b14:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3b16:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <nrk_wait_until_next_period>
    return NRK_OK;
}
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	08 95       	ret

00003b1e <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3b24:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_stack_check>

    if (p == 0)
    3b28:	20 97       	sbiw	r28, 0x00	; 0
    3b2a:	11 f4       	brne	.+4      	; 0x3b30 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    3b2c:	c1 e0       	ldi	r28, 0x01	; 1
    3b2e:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3b30:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3b34:	e0 91 09 09 	lds	r30, 0x0909
    3b38:	f0 91 0a 09 	lds	r31, 0x090A
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3b40:	d2 a7       	std	Z+42, r29	; 0x2a
    3b42:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    3b44:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3b48:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3b4a:	88 3f       	cpi	r24, 0xF8	; 248
    3b4c:	80 f4       	brcc	.+32     	; 0x3b6e <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3b4e:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    3b52:	2c 2f       	mov	r18, r28
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	2f 5f       	subi	r18, 0xFF	; 255
    3b58:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	28 17       	cp	r18, r24
    3b5e:	39 07       	cpc	r19, r25
    3b60:	34 f4       	brge	.+12     	; 0x3b6e <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3b66:	80 93 f1 07 	sts	0x07F1, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3b6a:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3b6e:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3b72:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	08 95       	ret

00003b7e <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3b7e:	ef 92       	push	r14
    3b80:	ff 92       	push	r15
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3b8a:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3b8e:	e0 91 09 09 	lds	r30, 0x0909
    3b92:	f0 91 0a 09 	lds	r31, 0x090A
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3b9a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3b9e:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3ba0:	e0 91 09 09 	lds	r30, 0x0909
    3ba4:	f0 91 0a 09 	lds	r31, 0x090A
    3ba8:	e8 2e       	mov	r14, r24
    3baa:	f1 2c       	mov	r15, r1
    3bac:	c7 01       	movw	r24, r14
    3bae:	80 0f       	add	r24, r16
    3bb0:	91 1f       	adc	r25, r17
    3bb2:	a0 e0       	ldi	r26, 0x00	; 0
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	85 8b       	std	Z+21, r24	; 0x15
    3bb8:	96 8b       	std	Z+22, r25	; 0x16
    3bba:	a7 8b       	std	Z+23, r26	; 0x17
    3bbc:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3bbe:	c8 3f       	cpi	r28, 0xF8	; 248
    3bc0:	78 f4       	brcc	.+30     	; 0x3be0 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3bc2:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    3bc6:	9f ef       	ldi	r25, 0xFF	; 255
    3bc8:	e9 1a       	sub	r14, r25
    3bca:	f9 0a       	sbc	r15, r25
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	e8 16       	cp	r14, r24
    3bd0:	f9 06       	cpc	r15, r25
    3bd2:	34 f4       	brge	.+12     	; 0x3be0 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    3bd4:	82 e0       	ldi	r24, 0x02	; 2
    3bd6:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3bd8:	80 93 f1 07 	sts	0x07F1, r24
            _nrk_set_next_wakeup (timer);
    3bdc:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3be0:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3be4:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	cf 91       	pop	r28
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ff 90       	pop	r15
    3bf2:	ef 90       	pop	r14
    3bf4:	08 95       	ret

00003bf6 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3bfc:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3c00:	e0 91 09 09 	lds	r30, 0x0909
    3c04:	f0 91 0a 09 	lds	r31, 0x090A
    3c08:	21 e0       	ldi	r18, 0x01	; 1
    3c0a:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	a0 e0       	ldi	r26, 0x00	; 0
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	85 8b       	std	Z+21, r24	; 0x15
    3c14:	96 8b       	std	Z+22, r25	; 0x16
    3c16:	a7 8b       	std	Z+23, r26	; 0x17
    3c18:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    3c1a:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3c1e:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3c20:	88 3f       	cpi	r24, 0xF8	; 248
    3c22:	80 f4       	brcc	.+32     	; 0x3c44 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3c24:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    3c28:	2c 2f       	mov	r18, r28
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	2f 5f       	subi	r18, 0xFF	; 255
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	28 17       	cp	r18, r24
    3c34:	39 07       	cpc	r19, r25
    3c36:	34 f4       	brge	.+12     	; 0x3c44 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    3c38:	82 e0       	ldi	r24, 0x02	; 2
    3c3a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3c3c:	80 93 f1 07 	sts	0x07F1, r24
            _nrk_set_next_wakeup (timer);
    3c40:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3c44:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3c48:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	df 91       	pop	r29
    3c50:	cf 91       	pop	r28
    3c52:	08 95       	ret

00003c54 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3c54:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    3c56:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3c5a:	e0 91 09 09 	lds	r30, 0x0909
    3c5e:	f0 91 0a 09 	lds	r31, 0x090A
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    3c66:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3c68:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3c6c:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3c6e:	88 3f       	cpi	r24, 0xF8	; 248
    3c70:	80 f4       	brcc	.+32     	; 0x3c92 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3c72:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    3c76:	2c 2f       	mov	r18, r28
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	2f 5f       	subi	r18, 0xFF	; 255
    3c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	28 17       	cp	r18, r24
    3c82:	39 07       	cpc	r19, r25
    3c84:	34 f4       	brge	.+12     	; 0x3c92 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    3c86:	82 e0       	ldi	r24, 0x02	; 2
    3c88:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3c8a:	80 93 f1 07 	sts	0x07F1, r24
            _nrk_set_next_wakeup (timer);
    3c8e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3c92:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3c96:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	cf 91       	pop	r28
    3c9e:	08 95       	ret

00003ca0 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	28 97       	sbiw	r28, 0x08	; 8
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	f8 94       	cli
    3cb0:	de bf       	out	0x3e, r29	; 62
    3cb2:	0f be       	out	0x3f, r0	; 63
    3cb4:	cd bf       	out	0x3d, r28	; 61
    3cb6:	29 83       	std	Y+1, r18	; 0x01
    3cb8:	3a 83       	std	Y+2, r19	; 0x02
    3cba:	4b 83       	std	Y+3, r20	; 0x03
    3cbc:	5c 83       	std	Y+4, r21	; 0x04
    3cbe:	6d 83       	std	Y+5, r22	; 0x05
    3cc0:	7e 83       	std	Y+6, r23	; 0x06
    3cc2:	8f 83       	std	Y+7, r24	; 0x07
    3cc4:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    3cc6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_stack_check>

    nrk_int_disable ();
    3cca:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3cce:	e0 91 09 09 	lds	r30, 0x0909
    3cd2:	f0 91 0a 09 	lds	r31, 0x090A
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	92 a7       	std	Z+42, r25	; 0x2a
    3ce0:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    3ce2:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3ce6:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    3ce8:	ce 01       	movw	r24, r28
    3cea:	01 96       	adiw	r24, 0x01	; 1
    3cec:	0e 94 1f 21 	call	0x423e	; 0x423e <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3cf0:	e0 91 09 09 	lds	r30, 0x0909
    3cf4:	f0 91 0a 09 	lds	r31, 0x090A
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	81 0f       	add	r24, r17
    3cfe:	91 1d       	adc	r25, r1
    3d00:	a1 1d       	adc	r26, r1
    3d02:	b1 1d       	adc	r27, r1
    3d04:	85 8b       	std	Z+21, r24	; 0x15
    3d06:	96 8b       	std	Z+22, r25	; 0x16
    3d08:	a7 8b       	std	Z+23, r26	; 0x17
    3d0a:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3d0c:	18 3f       	cpi	r17, 0xF8	; 248
    3d0e:	80 f4       	brcc	.+32     	; 0x3d30 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3d10:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    3d14:	21 2f       	mov	r18, r17
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	2f 5f       	subi	r18, 0xFF	; 255
    3d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	28 17       	cp	r18, r24
    3d20:	39 07       	cpc	r19, r25
    3d22:	34 f4       	brge	.+12     	; 0x3d30 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    3d24:	82 e0       	ldi	r24, 0x02	; 2
    3d26:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    3d28:	80 93 f1 07 	sts	0x07F1, r24
            _nrk_set_next_wakeup (timer);
    3d2c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3d30:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3d34:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	28 96       	adiw	r28, 0x08	; 8
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	de bf       	out	0x3e, r29	; 62
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	cd bf       	out	0x3d, r28	; 61
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	1f 91       	pop	r17
    3d4c:	08 95       	ret

00003d4e <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3d4e:	8f 92       	push	r8
    3d50:	9f 92       	push	r9
    3d52:	af 92       	push	r10
    3d54:	bf 92       	push	r11
    3d56:	cf 92       	push	r12
    3d58:	df 92       	push	r13
    3d5a:	ef 92       	push	r14
    3d5c:	ff 92       	push	r15
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	cf 93       	push	r28
    3d64:	df 93       	push	r29
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	60 97       	sbiw	r28, 0x10	; 16
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	29 87       	std	Y+9, r18	; 0x09
    3d78:	3a 87       	std	Y+10, r19	; 0x0a
    3d7a:	4b 87       	std	Y+11, r20	; 0x0b
    3d7c:	5c 87       	std	Y+12, r21	; 0x0c
    3d7e:	6d 87       	std	Y+13, r22	; 0x0d
    3d80:	7e 87       	std	Y+14, r23	; 0x0e
    3d82:	8f 87       	std	Y+15, r24	; 0x0f
    3d84:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3d86:	ce 01       	movw	r24, r28
    3d88:	01 96       	adiw	r24, 0x01	; 1
    3d8a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3d8e:	89 80       	ldd	r8, Y+1	; 0x01
    3d90:	9a 80       	ldd	r9, Y+2	; 0x02
    3d92:	ab 80       	ldd	r10, Y+3	; 0x03
    3d94:	bc 80       	ldd	r11, Y+4	; 0x04
    3d96:	cd 80       	ldd	r12, Y+5	; 0x05
    3d98:	de 80       	ldd	r13, Y+6	; 0x06
    3d9a:	ef 80       	ldd	r14, Y+7	; 0x07
    3d9c:	f8 84       	ldd	r15, Y+8	; 0x08
    3d9e:	09 85       	ldd	r16, Y+9	; 0x09
    3da0:	1a 85       	ldd	r17, Y+10	; 0x0a
    3da2:	2b 85       	ldd	r18, Y+11	; 0x0b
    3da4:	3c 85       	ldd	r19, Y+12	; 0x0c
    3da6:	4d 85       	ldd	r20, Y+13	; 0x0d
    3da8:	5e 85       	ldd	r21, Y+14	; 0x0e
    3daa:	6f 85       	ldd	r22, Y+15	; 0x0f
    3dac:	78 89       	ldd	r23, Y+16	; 0x10
    3dae:	ce 01       	movw	r24, r28
    3db0:	09 96       	adiw	r24, 0x09	; 9
    3db2:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3db6:	8f 3f       	cpi	r24, 0xFF	; 255
    3db8:	61 f0       	breq	.+24     	; 0x3dd2 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3dba:	29 85       	ldd	r18, Y+9	; 0x09
    3dbc:	3a 85       	ldd	r19, Y+10	; 0x0a
    3dbe:	4b 85       	ldd	r20, Y+11	; 0x0b
    3dc0:	5c 85       	ldd	r21, Y+12	; 0x0c
    3dc2:	6d 85       	ldd	r22, Y+13	; 0x0d
    3dc4:	7e 85       	ldd	r23, Y+14	; 0x0e
    3dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc8:	98 89       	ldd	r25, Y+16	; 0x10
    3dca:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <nrk_wait>

    return NRK_OK;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3dd2:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3dd4:	60 96       	adiw	r28, 0x10	; 16
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	cd bf       	out	0x3d, r28	; 61
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	0f 91       	pop	r16
    3de8:	ff 90       	pop	r15
    3dea:	ef 90       	pop	r14
    3dec:	df 90       	pop	r13
    3dee:	cf 90       	pop	r12
    3df0:	bf 90       	pop	r11
    3df2:	af 90       	pop	r10
    3df4:	9f 90       	pop	r9
    3df6:	8f 90       	pop	r8
    3df8:	08 95       	ret

00003dfa <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3dfa:	e0 91 09 09 	lds	r30, 0x0909
    3dfe:	f0 91 0a 09 	lds	r31, 0x090A
}
    3e02:	80 85       	ldd	r24, Z+8	; 0x08
    3e04:	08 95       	ret

00003e06 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3e10:	1c 82       	std	Y+4, r1	; 0x04
    3e12:	1d 82       	std	Y+5, r1	; 0x05
    3e14:	1e 82       	std	Y+6, r1	; 0x06
    3e16:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3e18:	80 91 00 09 	lds	r24, 0x0900
    3e1c:	90 91 01 09 	lds	r25, 0x0901
    3e20:	a0 91 02 09 	lds	r26, 0x0902
    3e24:	b0 91 03 09 	lds	r27, 0x0903
    3e28:	88 83       	st	Y, r24
    3e2a:	99 83       	std	Y+1, r25	; 0x01
    3e2c:	aa 83       	std	Y+2, r26	; 0x02
    3e2e:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3e30:	80 91 04 09 	lds	r24, 0x0904
    3e34:	90 91 05 09 	lds	r25, 0x0905
    3e38:	a0 91 06 09 	lds	r26, 0x0906
    3e3c:	b0 91 07 09 	lds	r27, 0x0907
    3e40:	8c 83       	std	Y+4, r24	; 0x04
    3e42:	9d 83       	std	Y+5, r25	; 0x05
    3e44:	ae 83       	std	Y+6, r26	; 0x06
    3e46:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3e48:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    3e4c:	a8 2f       	mov	r26, r24
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	23 eb       	ldi	r18, 0xB3	; 179
    3e52:	36 ee       	ldi	r19, 0xE6	; 230
    3e54:	4e e0       	ldi	r20, 0x0E	; 14
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    3e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e5e:	1d 81       	ldd	r17, Y+5	; 0x05
    3e60:	2e 81       	ldd	r18, Y+6	; 0x06
    3e62:	3f 81       	ldd	r19, Y+7	; 0x07
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	80 0f       	add	r24, r16
    3e6a:	91 1f       	adc	r25, r17
    3e6c:	a2 1f       	adc	r26, r18
    3e6e:	b3 1f       	adc	r27, r19
    3e70:	8c 83       	std	Y+4, r24	; 0x04
    3e72:	9d 83       	std	Y+5, r25	; 0x05
    3e74:	ae 83       	std	Y+6, r26	; 0x06
    3e76:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3e78:	8c 81       	ldd	r24, Y+4	; 0x04
    3e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e7c:	ae 81       	ldd	r26, Y+6	; 0x06
    3e7e:	bf 81       	ldd	r27, Y+7	; 0x07
    3e80:	81 15       	cp	r24, r1
    3e82:	2a ec       	ldi	r18, 0xCA	; 202
    3e84:	92 07       	cpc	r25, r18
    3e86:	2a e9       	ldi	r18, 0x9A	; 154
    3e88:	a2 07       	cpc	r26, r18
    3e8a:	2b e3       	ldi	r18, 0x3B	; 59
    3e8c:	b2 07       	cpc	r27, r18
    3e8e:	98 f0       	brcs	.+38     	; 0x3eb6 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3e90:	9a 5c       	subi	r25, 0xCA	; 202
    3e92:	aa 49       	sbci	r26, 0x9A	; 154
    3e94:	bb 43       	sbci	r27, 0x3B	; 59
    3e96:	8c 83       	std	Y+4, r24	; 0x04
    3e98:	9d 83       	std	Y+5, r25	; 0x05
    3e9a:	ae 83       	std	Y+6, r26	; 0x06
    3e9c:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3e9e:	88 81       	ld	r24, Y
    3ea0:	99 81       	ldd	r25, Y+1	; 0x01
    3ea2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ea4:	bb 81       	ldd	r27, Y+3	; 0x03
    3ea6:	01 96       	adiw	r24, 0x01	; 1
    3ea8:	a1 1d       	adc	r26, r1
    3eaa:	b1 1d       	adc	r27, r1
    3eac:	88 83       	st	Y, r24
    3eae:	99 83       	std	Y+1, r25	; 0x01
    3eb0:	aa 83       	std	Y+2, r26	; 0x02
    3eb2:	bb 83       	std	Y+3, r27	; 0x03
    3eb4:	e1 cf       	rjmp	.-62     	; 0x3e78 <nrk_time_get+0x72>
    }

}
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	08 95       	ret

00003ec0 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3ec0:	8f 92       	push	r8
    3ec2:	9f 92       	push	r9
    3ec4:	af 92       	push	r10
    3ec6:	bf 92       	push	r11
    3ec8:	cf 92       	push	r12
    3eca:	df 92       	push	r13
    3ecc:	ef 92       	push	r14
    3ece:	ff 92       	push	r15
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	60 97       	sbiw	r28, 0x10	; 16
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	fc 01       	movw	r30, r24
    3eea:	09 83       	std	Y+1, r16	; 0x01
    3eec:	1a 83       	std	Y+2, r17	; 0x02
    3eee:	2b 83       	std	Y+3, r18	; 0x03
    3ef0:	3c 83       	std	Y+4, r19	; 0x04
    3ef2:	4d 83       	std	Y+5, r20	; 0x05
    3ef4:	5e 83       	std	Y+6, r21	; 0x06
    3ef6:	6f 83       	std	Y+7, r22	; 0x07
    3ef8:	78 87       	std	Y+8, r23	; 0x08
    3efa:	89 86       	std	Y+9, r8	; 0x09
    3efc:	9a 86       	std	Y+10, r9	; 0x0a
    3efe:	ab 86       	std	Y+11, r10	; 0x0b
    3f00:	bc 86       	std	Y+12, r11	; 0x0c
    3f02:	cd 86       	std	Y+13, r12	; 0x0d
    3f04:	de 86       	std	Y+14, r13	; 0x0e
    3f06:	ef 86       	std	Y+15, r14	; 0x0f
    3f08:	f8 8a       	std	Y+16, r15	; 0x10
    3f0a:	09 81       	ldd	r16, Y+1	; 0x01
    3f0c:	1a 81       	ldd	r17, Y+2	; 0x02
    3f0e:	2b 81       	ldd	r18, Y+3	; 0x03
    3f10:	3c 81       	ldd	r19, Y+4	; 0x04
    3f12:	4d 81       	ldd	r20, Y+5	; 0x05
    3f14:	5e 81       	ldd	r21, Y+6	; 0x06
    3f16:	6f 81       	ldd	r22, Y+7	; 0x07
    3f18:	78 85       	ldd	r23, Y+8	; 0x08
    3f1a:	c9 84       	ldd	r12, Y+9	; 0x09
    3f1c:	da 84       	ldd	r13, Y+10	; 0x0a
    3f1e:	eb 84       	ldd	r14, Y+11	; 0x0b
    3f20:	fc 84       	ldd	r15, Y+12	; 0x0c
    3f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f26:	af 85       	ldd	r26, Y+15	; 0x0f
    3f28:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3f2a:	0c 15       	cp	r16, r12
    3f2c:	1d 05       	cpc	r17, r13
    3f2e:	2e 05       	cpc	r18, r14
    3f30:	3f 05       	cpc	r19, r15
    3f32:	f0 f1       	brcs	.+124    	; 0x3fb0 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    3f34:	c0 16       	cp	r12, r16
    3f36:	d1 06       	cpc	r13, r17
    3f38:	e2 06       	cpc	r14, r18
    3f3a:	f3 06       	cpc	r15, r19
    3f3c:	91 f4       	brne	.+36     	; 0x3f62 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3f3e:	48 17       	cp	r20, r24
    3f40:	59 07       	cpc	r21, r25
    3f42:	6a 07       	cpc	r22, r26
    3f44:	7b 07       	cpc	r23, r27
    3f46:	a0 f1       	brcs	.+104    	; 0x3fb0 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3f48:	48 1b       	sub	r20, r24
    3f4a:	59 0b       	sbc	r21, r25
    3f4c:	6a 0b       	sbc	r22, r26
    3f4e:	7b 0b       	sbc	r23, r27
    3f50:	44 83       	std	Z+4, r20	; 0x04
    3f52:	55 83       	std	Z+5, r21	; 0x05
    3f54:	66 83       	std	Z+6, r22	; 0x06
    3f56:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    3f58:	10 82       	st	Z, r1
    3f5a:	11 82       	std	Z+1, r1	; 0x01
    3f5c:	12 82       	std	Z+2, r1	; 0x02
    3f5e:	13 82       	std	Z+3, r1	; 0x03
    3f60:	25 c0       	rjmp	.+74     	; 0x3fac <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3f62:	48 17       	cp	r20, r24
    3f64:	59 07       	cpc	r21, r25
    3f66:	6a 07       	cpc	r22, r26
    3f68:	7b 07       	cpc	r23, r27
    3f6a:	80 f4       	brcc	.+32     	; 0x3f8c <nrk_time_sub+0xcc>
{
	high.secs--;
    3f6c:	01 50       	subi	r16, 0x01	; 1
    3f6e:	11 09       	sbc	r17, r1
    3f70:	21 09       	sbc	r18, r1
    3f72:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3f74:	0c 19       	sub	r16, r12
    3f76:	1d 09       	sbc	r17, r13
    3f78:	2e 09       	sbc	r18, r14
    3f7a:	3f 09       	sbc	r19, r15
    3f7c:	00 83       	st	Z, r16
    3f7e:	11 83       	std	Z+1, r17	; 0x01
    3f80:	22 83       	std	Z+2, r18	; 0x02
    3f82:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3f84:	56 53       	subi	r21, 0x36	; 54
    3f86:	65 46       	sbci	r22, 0x65	; 101
    3f88:	74 4c       	sbci	r23, 0xC4	; 196
    3f8a:	08 c0       	rjmp	.+16     	; 0x3f9c <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3f8c:	0c 19       	sub	r16, r12
    3f8e:	1d 09       	sbc	r17, r13
    3f90:	2e 09       	sbc	r18, r14
    3f92:	3f 09       	sbc	r19, r15
    3f94:	00 83       	st	Z, r16
    3f96:	11 83       	std	Z+1, r17	; 0x01
    3f98:	22 83       	std	Z+2, r18	; 0x02
    3f9a:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3f9c:	48 1b       	sub	r20, r24
    3f9e:	59 0b       	sbc	r21, r25
    3fa0:	6a 0b       	sbc	r22, r26
    3fa2:	7b 0b       	sbc	r23, r27
    3fa4:	44 83       	std	Z+4, r20	; 0x04
    3fa6:	55 83       	std	Z+5, r21	; 0x05
    3fa8:	66 83       	std	Z+6, r22	; 0x06
    3faa:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	01 c0       	rjmp	.+2      	; 0x3fb2 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3fb0:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3fb2:	60 96       	adiw	r28, 0x10	; 16
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	df 90       	pop	r13
    3fcc:	cf 90       	pop	r12
    3fce:	bf 90       	pop	r11
    3fd0:	af 90       	pop	r10
    3fd2:	9f 90       	pop	r9
    3fd4:	8f 90       	pop	r8
    3fd6:	08 95       	ret

00003fd8 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3fd8:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3fda:	44 81       	ldd	r20, Z+4	; 0x04
    3fdc:	55 81       	ldd	r21, Z+5	; 0x05
    3fde:	66 81       	ldd	r22, Z+6	; 0x06
    3fe0:	77 81       	ldd	r23, Z+7	; 0x07
    3fe2:	41 15       	cp	r20, r1
    3fe4:	8a ec       	ldi	r24, 0xCA	; 202
    3fe6:	58 07       	cpc	r21, r24
    3fe8:	8a e9       	ldi	r24, 0x9A	; 154
    3fea:	68 07       	cpc	r22, r24
    3fec:	8b e3       	ldi	r24, 0x3B	; 59
    3fee:	78 07       	cpc	r23, r24
    3ff0:	98 f0       	brcs	.+38     	; 0x4018 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3ff2:	5a 5c       	subi	r21, 0xCA	; 202
    3ff4:	6a 49       	sbci	r22, 0x9A	; 154
    3ff6:	7b 43       	sbci	r23, 0x3B	; 59
    3ff8:	44 83       	std	Z+4, r20	; 0x04
    3ffa:	55 83       	std	Z+5, r21	; 0x05
    3ffc:	66 83       	std	Z+6, r22	; 0x06
    3ffe:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	a2 81       	ldd	r26, Z+2	; 0x02
    4006:	b3 81       	ldd	r27, Z+3	; 0x03
    4008:	01 96       	adiw	r24, 0x01	; 1
    400a:	a1 1d       	adc	r26, r1
    400c:	b1 1d       	adc	r27, r1
    400e:	80 83       	st	Z, r24
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	a2 83       	std	Z+2, r26	; 0x02
    4014:	b3 83       	std	Z+3, r27	; 0x03
    4016:	e1 cf       	rjmp	.-62     	; 0x3fda <nrk_time_compact_nanos+0x2>
    }
}
    4018:	08 95       	ret

0000401a <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    401a:	8f 92       	push	r8
    401c:	9f 92       	push	r9
    401e:	af 92       	push	r10
    4020:	bf 92       	push	r11
    4022:	cf 92       	push	r12
    4024:	df 92       	push	r13
    4026:	ef 92       	push	r14
    4028:	ff 92       	push	r15
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	60 97       	sbiw	r28, 0x10	; 16
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	09 83       	std	Y+1, r16	; 0x01
    4044:	1a 83       	std	Y+2, r17	; 0x02
    4046:	2b 83       	std	Y+3, r18	; 0x03
    4048:	3c 83       	std	Y+4, r19	; 0x04
    404a:	4d 83       	std	Y+5, r20	; 0x05
    404c:	5e 83       	std	Y+6, r21	; 0x06
    404e:	6f 83       	std	Y+7, r22	; 0x07
    4050:	78 87       	std	Y+8, r23	; 0x08
    4052:	89 86       	std	Y+9, r8	; 0x09
    4054:	9a 86       	std	Y+10, r9	; 0x0a
    4056:	ab 86       	std	Y+11, r10	; 0x0b
    4058:	bc 86       	std	Y+12, r11	; 0x0c
    405a:	cd 86       	std	Y+13, r12	; 0x0d
    405c:	de 86       	std	Y+14, r13	; 0x0e
    405e:	ef 86       	std	Y+15, r14	; 0x0f
    4060:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4062:	09 85       	ldd	r16, Y+9	; 0x09
    4064:	1a 85       	ldd	r17, Y+10	; 0x0a
    4066:	2b 85       	ldd	r18, Y+11	; 0x0b
    4068:	3c 85       	ldd	r19, Y+12	; 0x0c
    406a:	49 81       	ldd	r20, Y+1	; 0x01
    406c:	5a 81       	ldd	r21, Y+2	; 0x02
    406e:	6b 81       	ldd	r22, Y+3	; 0x03
    4070:	7c 81       	ldd	r23, Y+4	; 0x04
    4072:	40 0f       	add	r20, r16
    4074:	51 1f       	adc	r21, r17
    4076:	62 1f       	adc	r22, r18
    4078:	73 1f       	adc	r23, r19
    407a:	fc 01       	movw	r30, r24
    407c:	40 83       	st	Z, r20
    407e:	51 83       	std	Z+1, r21	; 0x01
    4080:	62 83       	std	Z+2, r22	; 0x02
    4082:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4084:	0d 85       	ldd	r16, Y+13	; 0x0d
    4086:	1e 85       	ldd	r17, Y+14	; 0x0e
    4088:	2f 85       	ldd	r18, Y+15	; 0x0f
    408a:	38 89       	ldd	r19, Y+16	; 0x10
    408c:	4d 81       	ldd	r20, Y+5	; 0x05
    408e:	5e 81       	ldd	r21, Y+6	; 0x06
    4090:	6f 81       	ldd	r22, Y+7	; 0x07
    4092:	78 85       	ldd	r23, Y+8	; 0x08
    4094:	40 0f       	add	r20, r16
    4096:	51 1f       	adc	r21, r17
    4098:	62 1f       	adc	r22, r18
    409a:	73 1f       	adc	r23, r19
    409c:	44 83       	std	Z+4, r20	; 0x04
    409e:	55 83       	std	Z+5, r21	; 0x05
    40a0:	66 83       	std	Z+6, r22	; 0x06
    40a2:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    40a4:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <nrk_time_compact_nanos>
return NRK_OK;
}
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	60 96       	adiw	r28, 0x10	; 16
    40ac:	0f b6       	in	r0, 0x3f	; 63
    40ae:	f8 94       	cli
    40b0:	de bf       	out	0x3e, r29	; 62
    40b2:	0f be       	out	0x3f, r0	; 63
    40b4:	cd bf       	out	0x3d, r28	; 61
    40b6:	df 91       	pop	r29
    40b8:	cf 91       	pop	r28
    40ba:	1f 91       	pop	r17
    40bc:	0f 91       	pop	r16
    40be:	ff 90       	pop	r15
    40c0:	ef 90       	pop	r14
    40c2:	df 90       	pop	r13
    40c4:	cf 90       	pop	r12
    40c6:	bf 90       	pop	r11
    40c8:	af 90       	pop	r10
    40ca:	9f 90       	pop	r9
    40cc:	8f 90       	pop	r8
    40ce:	08 95       	ret

000040d0 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    40d0:	e0 e0       	ldi	r30, 0x00	; 0
    40d2:	f9 e0       	ldi	r31, 0x09	; 9
    40d4:	60 83       	st	Z, r22
    40d6:	71 83       	std	Z+1, r23	; 0x01
    40d8:	82 83       	std	Z+2, r24	; 0x02
    40da:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    40dc:	24 83       	std	Z+4, r18	; 0x04
    40de:	35 83       	std	Z+5, r19	; 0x05
    40e0:	46 83       	std	Z+6, r20	; 0x06
    40e2:	57 83       	std	Z+7, r21	; 0x07
    40e4:	08 95       	ret

000040e6 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    40e6:	2f 92       	push	r2
    40e8:	3f 92       	push	r3
    40ea:	4f 92       	push	r4
    40ec:	5f 92       	push	r5
    40ee:	6f 92       	push	r6
    40f0:	7f 92       	push	r7
    40f2:	8f 92       	push	r8
    40f4:	9f 92       	push	r9
    40f6:	af 92       	push	r10
    40f8:	bf 92       	push	r11
    40fa:	cf 92       	push	r12
    40fc:	df 92       	push	r13
    40fe:	ef 92       	push	r14
    4100:	ff 92       	push	r15
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4108:	c0 80       	ld	r12, Z
    410a:	d1 80       	ldd	r13, Z+1	; 0x01
    410c:	e2 80       	ldd	r14, Z+2	; 0x02
    410e:	f3 80       	ldd	r15, Z+3	; 0x03
    4110:	c1 14       	cp	r12, r1
    4112:	d1 04       	cpc	r13, r1
    4114:	e1 04       	cpc	r14, r1
    4116:	f1 04       	cpc	r15, r1
    4118:	e1 f1       	breq	.+120    	; 0x4192 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    411a:	84 81       	ldd	r24, Z+4	; 0x04
    411c:	95 81       	ldd	r25, Z+5	; 0x05
    411e:	a6 81       	ldd	r26, Z+6	; 0x06
    4120:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4122:	22 e4       	ldi	r18, 0x42	; 66
    4124:	c2 16       	cp	r12, r18
    4126:	d1 04       	cpc	r13, r1
    4128:	e1 04       	cpc	r14, r1
    412a:	f1 04       	cpc	r15, r1
    412c:	f0 f5       	brcc	.+124    	; 0x41aa <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    412e:	1c 01       	movw	r2, r24
    4130:	2d 01       	movw	r4, r26
    4132:	61 2c       	mov	r6, r1
    4134:	71 2c       	mov	r7, r1
    4136:	43 01       	movw	r8, r6
    4138:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    413a:	8e 2f       	mov	r24, r30
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	a0 e0       	ldi	r26, 0x00	; 0
    4140:	b0 e0       	ldi	r27, 0x00	; 0
    4142:	8c 15       	cp	r24, r12
    4144:	9d 05       	cpc	r25, r13
    4146:	ae 05       	cpc	r26, r14
    4148:	bf 05       	cpc	r27, r15
    414a:	88 f4       	brcc	.+34     	; 0x416e <_nrk_time_to_ticks+0x88>
    414c:	91 01       	movw	r18, r2
    414e:	a2 01       	movw	r20, r4
    4150:	b3 01       	movw	r22, r6
    4152:	c4 01       	movw	r24, r8
    4154:	36 53       	subi	r19, 0x36	; 54
    4156:	45 46       	sbci	r20, 0x65	; 101
    4158:	54 4c       	sbci	r21, 0xC4	; 196
    415a:	6f 4f       	sbci	r22, 0xFF	; 255
    415c:	7f 4f       	sbci	r23, 0xFF	; 255
    415e:	8f 4f       	sbci	r24, 0xFF	; 255
    4160:	9f 4f       	sbci	r25, 0xFF	; 255
    4162:	19 01       	movw	r2, r18
    4164:	2a 01       	movw	r4, r20
    4166:	3b 01       	movw	r6, r22
    4168:	4c 01       	movw	r8, r24
    416a:	ef 5f       	subi	r30, 0xFF	; 255
    416c:	e6 cf       	rjmp	.-52     	; 0x413a <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    416e:	83 eb       	ldi	r24, 0xB3	; 179
    4170:	a8 2e       	mov	r10, r24
    4172:	96 ee       	ldi	r25, 0xE6	; 230
    4174:	b9 2e       	mov	r11, r25
    4176:	2e e0       	ldi	r18, 0x0E	; 14
    4178:	c2 2e       	mov	r12, r18
    417a:	d1 2c       	mov	r13, r1
    417c:	e1 2c       	mov	r14, r1
    417e:	f1 2c       	mov	r15, r1
    4180:	00 e0       	ldi	r16, 0x00	; 0
    4182:	10 e0       	ldi	r17, 0x00	; 0
    4184:	91 01       	movw	r18, r2
    4186:	a2 01       	movw	r20, r4
    4188:	b3 01       	movw	r22, r6
    418a:	c4 01       	movw	r24, r8
    418c:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__udivdi3>
    4190:	0a c0       	rjmp	.+20     	; 0x41a6 <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4192:	64 81       	ldd	r22, Z+4	; 0x04
    4194:	75 81       	ldd	r23, Z+5	; 0x05
    4196:	86 81       	ldd	r24, Z+6	; 0x06
    4198:	97 81       	ldd	r25, Z+7	; 0x07
    419a:	23 eb       	ldi	r18, 0xB3	; 179
    419c:	36 ee       	ldi	r19, 0xE6	; 230
    419e:	4e e0       	ldi	r20, 0x0E	; 14
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    41a6:	c9 01       	movw	r24, r18
    41a8:	02 c0       	rjmp	.+4      	; 0x41ae <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    41ae:	1f 91       	pop	r17
    41b0:	0f 91       	pop	r16
    41b2:	ff 90       	pop	r15
    41b4:	ef 90       	pop	r14
    41b6:	df 90       	pop	r13
    41b8:	cf 90       	pop	r12
    41ba:	bf 90       	pop	r11
    41bc:	af 90       	pop	r10
    41be:	9f 90       	pop	r9
    41c0:	8f 90       	pop	r8
    41c2:	7f 90       	pop	r7
    41c4:	6f 90       	pop	r6
    41c6:	5f 90       	pop	r5
    41c8:	4f 90       	pop	r4
    41ca:	3f 90       	pop	r3
    41cc:	2f 90       	pop	r2
    41ce:	08 95       	ret

000041d0 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    41d0:	cf 92       	push	r12
    41d2:	df 92       	push	r13
    41d4:	ef 92       	push	r14
    41d6:	ff 92       	push	r15
    41d8:	cf 93       	push	r28
    41da:	df 93       	push	r29
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	28 97       	sbiw	r28, 0x08	; 8
    41e2:	0f b6       	in	r0, 0x3f	; 63
    41e4:	f8 94       	cli
    41e6:	de bf       	out	0x3e, r29	; 62
    41e8:	0f be       	out	0x3f, r0	; 63
    41ea:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    41ec:	6b 01       	movw	r12, r22
    41ee:	7c 01       	movw	r14, r24
    41f0:	2a e0       	ldi	r18, 0x0A	; 10
    41f2:	f6 94       	lsr	r15
    41f4:	e7 94       	ror	r14
    41f6:	d7 94       	ror	r13
    41f8:	c7 94       	ror	r12
    41fa:	2a 95       	dec	r18
    41fc:	d1 f7       	brne	.-12     	; 0x41f2 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    41fe:	c9 82       	std	Y+1, r12	; 0x01
    4200:	da 82       	std	Y+2, r13	; 0x02
    4202:	eb 82       	std	Y+3, r14	; 0x03
    4204:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4206:	9b 01       	movw	r18, r22
    4208:	ac 01       	movw	r20, r24
    420a:	33 70       	andi	r19, 0x03	; 3
    420c:	44 27       	eor	r20, r20
    420e:	55 27       	eor	r21, r21
    4210:	63 eb       	ldi	r22, 0xB3	; 179
    4212:	76 ee       	ldi	r23, 0xE6	; 230
    4214:	8e e0       	ldi	r24, 0x0E	; 14
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 8f 2b 	call	0x571e	; 0x571e <__mulsi3>

return t;
    421c:	2c 2d       	mov	r18, r12
    421e:	3a 81       	ldd	r19, Y+2	; 0x02
    4220:	4b 81       	ldd	r20, Y+3	; 0x03
    4222:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4224:	28 96       	adiw	r28, 0x08	; 8
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	ff 90       	pop	r15
    4236:	ef 90       	pop	r14
    4238:	df 90       	pop	r13
    423a:	cf 90       	pop	r12
    423c:	08 95       	ret

0000423e <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    423e:	2f 92       	push	r2
    4240:	3f 92       	push	r3
    4242:	4f 92       	push	r4
    4244:	5f 92       	push	r5
    4246:	6f 92       	push	r6
    4248:	7f 92       	push	r7
    424a:	8f 92       	push	r8
    424c:	9f 92       	push	r9
    424e:	af 92       	push	r10
    4250:	bf 92       	push	r11
    4252:	cf 92       	push	r12
    4254:	df 92       	push	r13
    4256:	ef 92       	push	r14
    4258:	ff 92       	push	r15
    425a:	0f 93       	push	r16
    425c:	1f 93       	push	r17
    425e:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4260:	c0 80       	ld	r12, Z
    4262:	d1 80       	ldd	r13, Z+1	; 0x01
    4264:	e2 80       	ldd	r14, Z+2	; 0x02
    4266:	f3 80       	ldd	r15, Z+3	; 0x03
    4268:	c1 14       	cp	r12, r1
    426a:	d1 04       	cpc	r13, r1
    426c:	e1 04       	cpc	r14, r1
    426e:	f1 04       	cpc	r15, r1
    4270:	b9 f1       	breq	.+110    	; 0x42e0 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4272:	84 81       	ldd	r24, Z+4	; 0x04
    4274:	95 81       	ldd	r25, Z+5	; 0x05
    4276:	a6 81       	ldd	r26, Z+6	; 0x06
    4278:	b7 81       	ldd	r27, Z+7	; 0x07
    427a:	1c 01       	movw	r2, r24
    427c:	2d 01       	movw	r4, r26
    427e:	61 2c       	mov	r6, r1
    4280:	71 2c       	mov	r7, r1
    4282:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4284:	e0 e0       	ldi	r30, 0x00	; 0
    4286:	8e 2f       	mov	r24, r30
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	a0 e0       	ldi	r26, 0x00	; 0
    428c:	b0 e0       	ldi	r27, 0x00	; 0
    428e:	8c 15       	cp	r24, r12
    4290:	9d 05       	cpc	r25, r13
    4292:	ae 05       	cpc	r26, r14
    4294:	bf 05       	cpc	r27, r15
    4296:	88 f4       	brcc	.+34     	; 0x42ba <_nrk_time_to_ticks_long+0x7c>
    4298:	91 01       	movw	r18, r2
    429a:	a2 01       	movw	r20, r4
    429c:	b3 01       	movw	r22, r6
    429e:	c4 01       	movw	r24, r8
    42a0:	36 53       	subi	r19, 0x36	; 54
    42a2:	45 46       	sbci	r20, 0x65	; 101
    42a4:	54 4c       	sbci	r21, 0xC4	; 196
    42a6:	6f 4f       	sbci	r22, 0xFF	; 255
    42a8:	7f 4f       	sbci	r23, 0xFF	; 255
    42aa:	8f 4f       	sbci	r24, 0xFF	; 255
    42ac:	9f 4f       	sbci	r25, 0xFF	; 255
    42ae:	19 01       	movw	r2, r18
    42b0:	2a 01       	movw	r4, r20
    42b2:	3b 01       	movw	r6, r22
    42b4:	4c 01       	movw	r8, r24
    42b6:	ef 5f       	subi	r30, 0xFF	; 255
    42b8:	e6 cf       	rjmp	.-52     	; 0x4286 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    42ba:	83 eb       	ldi	r24, 0xB3	; 179
    42bc:	a8 2e       	mov	r10, r24
    42be:	96 ee       	ldi	r25, 0xE6	; 230
    42c0:	b9 2e       	mov	r11, r25
    42c2:	2e e0       	ldi	r18, 0x0E	; 14
    42c4:	c2 2e       	mov	r12, r18
    42c6:	d1 2c       	mov	r13, r1
    42c8:	e1 2c       	mov	r14, r1
    42ca:	f1 2c       	mov	r15, r1
    42cc:	00 e0       	ldi	r16, 0x00	; 0
    42ce:	10 e0       	ldi	r17, 0x00	; 0
    42d0:	91 01       	movw	r18, r2
    42d2:	a2 01       	movw	r20, r4
    42d4:	b3 01       	movw	r22, r6
    42d6:	c4 01       	movw	r24, r8
    42d8:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__udivdi3>
    42dc:	ca 01       	movw	r24, r20
    42de:	0b c0       	rjmp	.+22     	; 0x42f6 <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    42e0:	64 81       	ldd	r22, Z+4	; 0x04
    42e2:	75 81       	ldd	r23, Z+5	; 0x05
    42e4:	86 81       	ldd	r24, Z+6	; 0x06
    42e6:	97 81       	ldd	r25, Z+7	; 0x07
    42e8:	23 eb       	ldi	r18, 0xB3	; 179
    42ea:	36 ee       	ldi	r19, 0xE6	; 230
    42ec:	4e e0       	ldi	r20, 0x0E	; 14
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    42f4:	ca 01       	movw	r24, r20
}
return ticks;
}
    42f6:	b9 01       	movw	r22, r18
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	ff 90       	pop	r15
    42fe:	ef 90       	pop	r14
    4300:	df 90       	pop	r13
    4302:	cf 90       	pop	r12
    4304:	bf 90       	pop	r11
    4306:	af 90       	pop	r10
    4308:	9f 90       	pop	r9
    430a:	8f 90       	pop	r8
    430c:	7f 90       	pop	r7
    430e:	6f 90       	pop	r6
    4310:	5f 90       	pop	r5
    4312:	4f 90       	pop	r4
    4314:	3f 90       	pop	r3
    4316:	2f 90       	pop	r2
    4318:	08 95       	ret

0000431a <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    431a:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    431c:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    431e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4322:	0e 94 42 26 	call	0x4c84	; 0x4c84 <_nrk_get_next_wakeup>
    4326:	84 30       	cpi	r24, 0x04	; 4
    4328:	28 f4       	brcc	.+10     	; 0x4334 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    432a:	d0 93 fd 08 	sts	0x08FD, r29
	    nrk_idle();
    432e:	0e 94 51 29 	call	0x52a2	; 0x52a2 <nrk_idle>
    4332:	08 c0       	rjmp	.+16     	; 0x4344 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    4334:	8a e0       	ldi	r24, 0x0A	; 10
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    433c:	c0 93 fd 08 	sts	0x08FD, r28
	    nrk_sleep();
    4340:	0e 94 45 29 	call	0x528a	; 0x528a <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4344:	80 91 6c 06 	lds	r24, 0x066C
    4348:	85 35       	cpi	r24, 0x55	; 85
    434a:	19 f0       	breq	.+6      	; 0x4352 <nrk_idle_task+0x38>
    434c:	88 e0       	ldi	r24, 0x08	; 8
    434e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4352:	80 91 7e 41 	lds	r24, 0x417E
    4356:	85 35       	cpi	r24, 0x55	; 85
    4358:	11 f3       	breq	.-60     	; 0x431e <nrk_idle_task+0x4>
    435a:	88 e0       	ldi	r24, 0x08	; 8
    435c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
    4360:	de cf       	rjmp	.-68     	; 0x431e <nrk_idle_task+0x4>

00004362 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4362:	2f 92       	push	r2
    4364:	3f 92       	push	r3
    4366:	4f 92       	push	r4
    4368:	5f 92       	push	r5
    436a:	6f 92       	push	r6
    436c:	7f 92       	push	r7
    436e:	8f 92       	push	r8
    4370:	9f 92       	push	r9
    4372:	af 92       	push	r10
    4374:	bf 92       	push	r11
    4376:	cf 92       	push	r12
    4378:	df 92       	push	r13
    437a:	ef 92       	push	r14
    437c:	ff 92       	push	r15
    437e:	0f 93       	push	r16
    4380:	1f 93       	push	r17
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	00 d0       	rcall	.+0      	; 0x4388 <_nrk_scheduler+0x26>
    4388:	1f 92       	push	r1
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    438e:	0e 94 76 25 	call	0x4aec	; 0x4aec <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4392:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    4396:	0e 94 94 25 	call	0x4b28	; 0x4b28 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    439a:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_nrk_high_speed_timer_get>
    439e:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    43a0:	8a ef       	ldi	r24, 0xFA	; 250
    43a2:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    43a6:	a0 91 f1 07 	lds	r26, 0x07F1
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	23 eb       	ldi	r18, 0xB3	; 179
    43ae:	36 ee       	ldi	r19, 0xE6	; 230
    43b0:	4e e0       	ldi	r20, 0x0E	; 14
    43b2:	50 e0       	ldi	r21, 0x00	; 0
    43b4:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    43b8:	00 91 04 09 	lds	r16, 0x0904
    43bc:	10 91 05 09 	lds	r17, 0x0905
    43c0:	20 91 06 09 	lds	r18, 0x0906
    43c4:	30 91 07 09 	lds	r19, 0x0907
    43c8:	6b 01       	movw	r12, r22
    43ca:	7c 01       	movw	r14, r24
    43cc:	c0 0e       	add	r12, r16
    43ce:	d1 1e       	adc	r13, r17
    43d0:	e2 1e       	adc	r14, r18
    43d2:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    43d4:	c7 01       	movw	r24, r14
    43d6:	b6 01       	movw	r22, r12
    43d8:	23 eb       	ldi	r18, 0xB3	; 179
    43da:	36 ee       	ldi	r19, 0xE6	; 230
    43dc:	4e e0       	ldi	r20, 0x0E	; 14
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    43e4:	26 01       	movw	r4, r12
    43e6:	37 01       	movw	r6, r14
    43e8:	46 1a       	sub	r4, r22
    43ea:	57 0a       	sbc	r5, r23
    43ec:	68 0a       	sbc	r6, r24
    43ee:	79 0a       	sbc	r7, r25
    43f0:	d3 01       	movw	r26, r6
    43f2:	c2 01       	movw	r24, r4
    43f4:	00 91 00 09 	lds	r16, 0x0900
    43f8:	10 91 01 09 	lds	r17, 0x0901
    43fc:	20 91 02 09 	lds	r18, 0x0902
    4400:	30 91 03 09 	lds	r19, 0x0903

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4404:	43 eb       	ldi	r20, 0xB3	; 179
    4406:	84 2e       	mov	r8, r20
    4408:	46 ee       	ldi	r20, 0xE6	; 230
    440a:	94 2e       	mov	r9, r20
    440c:	4e e0       	ldi	r20, 0x0E	; 14
    440e:	a4 2e       	mov	r10, r20
    4410:	b1 2c       	mov	r11, r1
    4412:	68 01       	movw	r12, r16
    4414:	79 01       	movw	r14, r18
    4416:	4f ef       	ldi	r20, 0xFF	; 255
    4418:	c4 1a       	sub	r12, r20
    441a:	d4 0a       	sbc	r13, r20
    441c:	e4 0a       	sbc	r14, r20
    441e:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4420:	81 15       	cp	r24, r1
    4422:	5a ec       	ldi	r21, 0xCA	; 202
    4424:	95 07       	cpc	r25, r21
    4426:	5a e9       	ldi	r21, 0x9A	; 154
    4428:	a5 07       	cpc	r26, r21
    442a:	5b e3       	ldi	r21, 0x3B	; 59
    442c:	b5 07       	cpc	r27, r21
    442e:	c8 f0       	brcs	.+50     	; 0x4462 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4430:	2c 01       	movw	r4, r24
    4432:	3d 01       	movw	r6, r26
    4434:	2a ec       	ldi	r18, 0xCA	; 202
    4436:	52 1a       	sub	r5, r18
    4438:	2a e9       	ldi	r18, 0x9A	; 154
    443a:	62 0a       	sbc	r6, r18
    443c:	2b e3       	ldi	r18, 0x3B	; 59
    443e:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4440:	c3 01       	movw	r24, r6
    4442:	b2 01       	movw	r22, r4
    4444:	a5 01       	movw	r20, r10
    4446:	94 01       	movw	r18, r8
    4448:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    444c:	a3 01       	movw	r20, r6
    444e:	92 01       	movw	r18, r4
    4450:	26 1b       	sub	r18, r22
    4452:	37 0b       	sbc	r19, r23
    4454:	48 0b       	sbc	r20, r24
    4456:	59 0b       	sbc	r21, r25
    4458:	da 01       	movw	r26, r20
    445a:	c9 01       	movw	r24, r18
    445c:	97 01       	movw	r18, r14
    445e:	86 01       	movw	r16, r12
    4460:	d8 cf       	rjmp	.-80     	; 0x4412 <_nrk_scheduler+0xb0>
    4462:	80 93 04 09 	sts	0x0904, r24
    4466:	90 93 05 09 	sts	0x0905, r25
    446a:	a0 93 06 09 	sts	0x0906, r26
    446e:	b0 93 07 09 	sts	0x0907, r27
    4472:	00 93 00 09 	sts	0x0900, r16
    4476:	10 93 01 09 	sts	0x0901, r17
    447a:	20 93 02 09 	sts	0x0902, r18
    447e:	30 93 03 09 	sts	0x0903, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4482:	e0 91 09 09 	lds	r30, 0x0909
    4486:	f0 91 0a 09 	lds	r31, 0x090A
    448a:	85 81       	ldd	r24, Z+5	; 0x05
    448c:	88 23       	and	r24, r24
    448e:	39 f1       	breq	.+78     	; 0x44de <_nrk_scheduler+0x17c>
    4490:	81 85       	ldd	r24, Z+9	; 0x09
    4492:	84 30       	cpi	r24, 0x04	; 4
    4494:	21 f1       	breq	.+72     	; 0x44de <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4496:	87 81       	ldd	r24, Z+7	; 0x07
    4498:	82 30       	cpi	r24, 0x02	; 2
    449a:	29 f0       	breq	.+10     	; 0x44a6 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    449c:	88 23       	and	r24, r24
    449e:	41 f0       	breq	.+16     	; 0x44b0 <_nrk_scheduler+0x14e>
    44a0:	86 81       	ldd	r24, Z+6	; 0x06
    44a2:	81 11       	cpse	r24, r1
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    44a6:	85 e0       	ldi	r24, 0x05	; 5
    44a8:	01 c0       	rjmp	.+2      	; 0x44ac <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	81 87       	std	Z+9, r24	; 0x09
    44ae:	14 c0       	rjmp	.+40     	; 0x44d8 <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    44b0:	83 e0       	ldi	r24, 0x03	; 3
    44b2:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    44b4:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    44b6:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    44b8:	85 89       	ldd	r24, Z+21	; 0x15
    44ba:	96 89       	ldd	r25, Z+22	; 0x16
    44bc:	a7 89       	ldd	r26, Z+23	; 0x17
    44be:	b0 8d       	ldd	r27, Z+24	; 0x18
    44c0:	89 2b       	or	r24, r25
    44c2:	8a 2b       	or	r24, r26
    44c4:	8b 2b       	or	r24, r27
    44c6:	41 f4       	brne	.+16     	; 0x44d8 <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    44c8:	81 8d       	ldd	r24, Z+25	; 0x19
    44ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    44cc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    44ce:	b4 8d       	ldd	r27, Z+28	; 0x1c
    44d0:	85 8b       	std	Z+21, r24	; 0x15
    44d2:	96 8b       	std	Z+22, r25	; 0x16
    44d4:	a7 8b       	std	Z+23, r26	; 0x17
    44d6:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    44d8:	80 85       	ldd	r24, Z+8	; 0x08
    44da:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    44de:	e0 91 09 09 	lds	r30, 0x0909
    44e2:	f0 91 0a 09 	lds	r31, 0x090A
    44e6:	85 a1       	ldd	r24, Z+37	; 0x25
    44e8:	96 a1       	ldd	r25, Z+38	; 0x26
    44ea:	a7 a1       	ldd	r26, Z+39	; 0x27
    44ec:	b0 a5       	ldd	r27, Z+40	; 0x28
    44ee:	89 2b       	or	r24, r25
    44f0:	8a 2b       	or	r24, r26
    44f2:	8b 2b       	or	r24, r27
    44f4:	09 f4       	brne	.+2      	; 0x44f8 <_nrk_scheduler+0x196>
    44f6:	44 c0       	rjmp	.+136    	; 0x4580 <_nrk_scheduler+0x21e>
    44f8:	20 85       	ldd	r18, Z+8	; 0x08
    44fa:	22 23       	and	r18, r18
    44fc:	09 f4       	brne	.+2      	; 0x4500 <_nrk_scheduler+0x19e>
    44fe:	40 c0       	rjmp	.+128    	; 0x4580 <_nrk_scheduler+0x21e>
    4500:	81 85       	ldd	r24, Z+9	; 0x09
    4502:	84 30       	cpi	r24, 0x04	; 4
    4504:	e9 f1       	breq	.+122    	; 0x4580 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4506:	85 8d       	ldd	r24, Z+29	; 0x1d
    4508:	96 8d       	ldd	r25, Z+30	; 0x1e
    450a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    450c:	b0 a1       	ldd	r27, Z+32	; 0x20
    450e:	40 91 f1 07 	lds	r20, 0x07F1
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	60 e0       	ldi	r22, 0x00	; 0
    4516:	70 e0       	ldi	r23, 0x00	; 0
    4518:	84 17       	cp	r24, r20
    451a:	95 07       	cpc	r25, r21
    451c:	a6 07       	cpc	r26, r22
    451e:	b7 07       	cpc	r27, r23
    4520:	68 f4       	brcc	.+26     	; 0x453c <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4522:	62 2f       	mov	r22, r18
    4524:	82 e0       	ldi	r24, 0x02	; 2
    4526:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    452a:	e0 91 09 09 	lds	r30, 0x0909
    452e:	f0 91 0a 09 	lds	r31, 0x090A
    4532:	15 8e       	std	Z+29, r1	; 0x1d
    4534:	16 8e       	std	Z+30, r1	; 0x1e
    4536:	17 8e       	std	Z+31, r1	; 0x1f
    4538:	10 a2       	std	Z+32, r1	; 0x20
    453a:	08 c0       	rjmp	.+16     	; 0x454c <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    453c:	84 1b       	sub	r24, r20
    453e:	95 0b       	sbc	r25, r21
    4540:	a6 0b       	sbc	r26, r22
    4542:	b7 0b       	sbc	r27, r23
    4544:	85 8f       	std	Z+29, r24	; 0x1d
    4546:	96 8f       	std	Z+30, r25	; 0x1e
    4548:	a7 8f       	std	Z+31, r26	; 0x1f
    454a:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    454c:	e0 91 09 09 	lds	r30, 0x0909
    4550:	f0 91 0a 09 	lds	r31, 0x090A
    4554:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4556:	85 8d       	ldd	r24, Z+29	; 0x1d
    4558:	96 8d       	ldd	r25, Z+30	; 0x1e
    455a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    455c:	b0 a1       	ldd	r27, Z+32	; 0x20
    455e:	89 2b       	or	r24, r25
    4560:	8a 2b       	or	r24, r26
    4562:	8b 2b       	or	r24, r27
    4564:	69 f4       	brne	.+26     	; 0x4580 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4566:	61 2f       	mov	r22, r17
    4568:	83 e0       	ldi	r24, 0x03	; 3
    456a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    456e:	e0 91 09 09 	lds	r30, 0x0909
    4572:	f0 91 0a 09 	lds	r31, 0x090A
    4576:	83 e0       	ldi	r24, 0x03	; 3
    4578:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    457a:	81 2f       	mov	r24, r17
    457c:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <nrk_rem_from_readyQ>
    4580:	80 e5       	ldi	r24, 0x50	; 80
    4582:	98 e0       	ldi	r25, 0x08	; 8
    4584:	9b 83       	std	Y+3, r25	; 0x03
    4586:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4588:	00 e6       	ldi	r16, 0x60	; 96
    458a:	1a ee       	ldi	r17, 0xEA	; 234
    458c:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    458e:	2a ef       	ldi	r18, 0xFA	; 250
    4590:	c2 2e       	mov	r12, r18
    4592:	d1 2c       	mov	r13, r1
    4594:	e1 2c       	mov	r14, r1
    4596:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4598:	81 2c       	mov	r8, r1
    459a:	91 2c       	mov	r9, r1
    459c:	54 01       	movw	r10, r8
    459e:	83 94       	inc	r8
    45a0:	ea 81       	ldd	r30, Y+2	; 0x02
    45a2:	fb 81       	ldd	r31, Y+3	; 0x03
    45a4:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    45a6:	80 81       	ld	r24, Z
    45a8:	8f 3f       	cpi	r24, 0xFF	; 255
    45aa:	09 f4       	brne	.+2      	; 0x45ae <_nrk_scheduler+0x24c>
    45ac:	04 c1       	rjmp	.+520    	; 0x47b6 <_nrk_scheduler+0x454>
    45ae:	ea 81       	ldd	r30, Y+2	; 0x02
    45b0:	fb 81       	ldd	r31, Y+3	; 0x03
    45b2:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    45b4:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    45b6:	88 23       	and	r24, r24
    45b8:	09 f4       	brne	.+2      	; 0x45bc <_nrk_scheduler+0x25a>
    45ba:	67 c0       	rjmp	.+206    	; 0x468a <_nrk_scheduler+0x328>
    45bc:	ea 81       	ldd	r30, Y+2	; 0x02
    45be:	fb 81       	ldd	r31, Y+3	; 0x03
    45c0:	80 81       	ld	r24, Z
    45c2:	84 30       	cpi	r24, 0x04	; 4
    45c4:	09 f4       	brne	.+2      	; 0x45c8 <_nrk_scheduler+0x266>
    45c6:	61 c0       	rjmp	.+194    	; 0x468a <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    45c8:	44 84       	ldd	r4, Z+12	; 0x0c
    45ca:	55 84       	ldd	r5, Z+13	; 0x0d
    45cc:	66 84       	ldd	r6, Z+14	; 0x0e
    45ce:	77 84       	ldd	r7, Z+15	; 0x0f
    45d0:	60 91 f1 07 	lds	r22, 0x07F1
    45d4:	70 e0       	ldi	r23, 0x00	; 0
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	46 16       	cp	r4, r22
    45dc:	57 06       	cpc	r5, r23
    45de:	68 06       	cpc	r6, r24
    45e0:	79 06       	cpc	r7, r25
    45e2:	48 f0       	brcs	.+18     	; 0x45f6 <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    45e4:	46 1a       	sub	r4, r22
    45e6:	57 0a       	sbc	r5, r23
    45e8:	68 0a       	sbc	r6, r24
    45ea:	79 0a       	sbc	r7, r25
    45ec:	44 86       	std	Z+12, r4	; 0x0c
    45ee:	55 86       	std	Z+13, r5	; 0x0d
    45f0:	66 86       	std	Z+14, r6	; 0x0e
    45f2:	77 86       	std	Z+15, r7	; 0x0f
    45f4:	06 c0       	rjmp	.+12     	; 0x4602 <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    45f6:	ea 81       	ldd	r30, Y+2	; 0x02
    45f8:	fb 81       	ldd	r31, Y+3	; 0x03
    45fa:	14 86       	std	Z+12, r1	; 0x0c
    45fc:	15 86       	std	Z+13, r1	; 0x0d
    45fe:	16 86       	std	Z+14, r1	; 0x0e
    4600:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4602:	ea 81       	ldd	r30, Y+2	; 0x02
    4604:	fb 81       	ldd	r31, Y+3	; 0x03
    4606:	40 88       	ldd	r4, Z+16	; 0x10
    4608:	51 88       	ldd	r5, Z+17	; 0x11
    460a:	62 88       	ldd	r6, Z+18	; 0x12
    460c:	73 88       	ldd	r7, Z+19	; 0x13
    460e:	46 16       	cp	r4, r22
    4610:	57 06       	cpc	r5, r23
    4612:	68 06       	cpc	r6, r24
    4614:	79 06       	cpc	r7, r25
    4616:	48 f0       	brcs	.+18     	; 0x462a <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4618:	46 1a       	sub	r4, r22
    461a:	57 0a       	sbc	r5, r23
    461c:	68 0a       	sbc	r6, r24
    461e:	79 0a       	sbc	r7, r25
    4620:	40 8a       	std	Z+16, r4	; 0x10
    4622:	51 8a       	std	Z+17, r5	; 0x11
    4624:	62 8a       	std	Z+18, r6	; 0x12
    4626:	73 8a       	std	Z+19, r7	; 0x13
    4628:	1e c0       	rjmp	.+60     	; 0x4666 <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    462a:	ea 81       	ldd	r30, Y+2	; 0x02
    462c:	fb 81       	ldd	r31, Y+3	; 0x03
    462e:	20 8d       	ldd	r18, Z+24	; 0x18
    4630:	31 8d       	ldd	r19, Z+25	; 0x19
    4632:	42 8d       	ldd	r20, Z+26	; 0x1a
    4634:	53 8d       	ldd	r21, Z+27	; 0x1b
    4636:	62 17       	cp	r22, r18
    4638:	73 07       	cpc	r23, r19
    463a:	84 07       	cpc	r24, r20
    463c:	95 07       	cpc	r25, r21
    463e:	58 f4       	brcc	.+22     	; 0x4656 <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4640:	29 01       	movw	r4, r18
    4642:	3a 01       	movw	r6, r20
    4644:	46 1a       	sub	r4, r22
    4646:	57 0a       	sbc	r5, r23
    4648:	68 0a       	sbc	r6, r24
    464a:	79 0a       	sbc	r7, r25
    464c:	40 8a       	std	Z+16, r4	; 0x10
    464e:	51 8a       	std	Z+17, r5	; 0x11
    4650:	62 8a       	std	Z+18, r6	; 0x12
    4652:	73 8a       	std	Z+19, r7	; 0x13
    4654:	08 c0       	rjmp	.+16     	; 0x4666 <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4656:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    465a:	ea 81       	ldd	r30, Y+2	; 0x02
    465c:	fb 81       	ldd	r31, Y+3	; 0x03
    465e:	60 8b       	std	Z+16, r22	; 0x10
    4660:	71 8b       	std	Z+17, r23	; 0x11
    4662:	82 8b       	std	Z+18, r24	; 0x12
    4664:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4666:	ea 81       	ldd	r30, Y+2	; 0x02
    4668:	fb 81       	ldd	r31, Y+3	; 0x03
    466a:	80 89       	ldd	r24, Z+16	; 0x10
    466c:	91 89       	ldd	r25, Z+17	; 0x11
    466e:	a2 89       	ldd	r26, Z+18	; 0x12
    4670:	b3 89       	ldd	r27, Z+19	; 0x13
    4672:	89 2b       	or	r24, r25
    4674:	8a 2b       	or	r24, r26
    4676:	8b 2b       	or	r24, r27
    4678:	41 f4       	brne	.+16     	; 0x468a <_nrk_scheduler+0x328>
    467a:	80 8d       	ldd	r24, Z+24	; 0x18
    467c:	91 8d       	ldd	r25, Z+25	; 0x19
    467e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4680:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4682:	80 8b       	std	Z+16, r24	; 0x10
    4684:	91 8b       	std	Z+17, r25	; 0x11
    4686:	a2 8b       	std	Z+18, r26	; 0x12
    4688:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    468a:	ea 81       	ldd	r30, Y+2	; 0x02
    468c:	fb 81       	ldd	r31, Y+3	; 0x03
    468e:	80 81       	ld	r24, Z
    4690:	83 30       	cpi	r24, 0x03	; 3
    4692:	09 f0       	breq	.+2      	; 0x4696 <_nrk_scheduler+0x334>
    4694:	90 c0       	rjmp	.+288    	; 0x47b6 <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4696:	84 85       	ldd	r24, Z+12	; 0x0c
    4698:	95 85       	ldd	r25, Z+13	; 0x0d
    469a:	a6 85       	ldd	r26, Z+14	; 0x0e
    469c:	b7 85       	ldd	r27, Z+15	; 0x0f
    469e:	89 2b       	or	r24, r25
    46a0:	8a 2b       	or	r24, r26
    46a2:	8b 2b       	or	r24, r27
    46a4:	09 f0       	breq	.+2      	; 0x46a8 <_nrk_scheduler+0x346>
    46a6:	74 c0       	rjmp	.+232    	; 0x4790 <_nrk_scheduler+0x42e>
    46a8:	df 01       	movw	r26, r30
    46aa:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    46ac:	8c 91       	ld	r24, X
    46ae:	9f 01       	movw	r18, r30
    46b0:	23 50       	subi	r18, 0x03	; 3
    46b2:	31 09       	sbc	r19, r1
    46b4:	88 23       	and	r24, r24
    46b6:	a9 f0       	breq	.+42     	; 0x46e2 <_nrk_scheduler+0x380>
    46b8:	f9 01       	movw	r30, r18
    46ba:	80 81       	ld	r24, Z
    46bc:	88 23       	and	r24, r24
    46be:	89 f0       	breq	.+34     	; 0x46e2 <_nrk_scheduler+0x380>
    46c0:	b5 01       	movw	r22, r10
    46c2:	a4 01       	movw	r20, r8
    46c4:	00 90 f9 08 	lds	r0, 0x08F9
    46c8:	04 c0       	rjmp	.+8      	; 0x46d2 <_nrk_scheduler+0x370>
    46ca:	44 0f       	add	r20, r20
    46cc:	55 1f       	adc	r21, r21
    46ce:	66 1f       	adc	r22, r22
    46d0:	77 1f       	adc	r23, r23
    46d2:	0a 94       	dec	r0
    46d4:	d2 f7       	brpl	.-12     	; 0x46ca <_nrk_scheduler+0x368>
    46d6:	ea 81       	ldd	r30, Y+2	; 0x02
    46d8:	fb 81       	ldd	r31, Y+3	; 0x03
    46da:	40 87       	std	Z+8, r20	; 0x08
    46dc:	51 87       	std	Z+9, r21	; 0x09
    46de:	62 87       	std	Z+10, r22	; 0x0a
    46e0:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    46e2:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    46e4:	f9 01       	movw	r30, r18
    46e6:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    46e8:	ea 81       	ldd	r30, Y+2	; 0x02
    46ea:	fb 81       	ldd	r31, Y+3	; 0x03
    46ec:	a0 a1       	ldd	r26, Z+32	; 0x20
    46ee:	b1 a1       	ldd	r27, Z+33	; 0x21
    46f0:	a1 30       	cpi	r26, 0x01	; 1
    46f2:	b1 05       	cpc	r27, r1
    46f4:	19 f5       	brne	.+70     	; 0x473c <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    46f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    46f8:	95 8d       	ldd	r25, Z+29	; 0x1d
    46fa:	a6 8d       	ldd	r26, Z+30	; 0x1e
    46fc:	b7 8d       	ldd	r27, Z+31	; 0x1f
    46fe:	84 8b       	std	Z+20, r24	; 0x14
    4700:	95 8b       	std	Z+21, r25	; 0x15
    4702:	a6 8b       	std	Z+22, r26	; 0x16
    4704:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    4706:	92 e0       	ldi	r25, 0x02	; 2
    4708:	49 2e       	mov	r4, r25
    470a:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    470c:	80 89       	ldd	r24, Z+16	; 0x10
    470e:	91 89       	ldd	r25, Z+17	; 0x11
    4710:	a2 89       	ldd	r26, Z+18	; 0x12
    4712:	b3 89       	ldd	r27, Z+19	; 0x13
    4714:	84 87       	std	Z+12, r24	; 0x0c
    4716:	95 87       	std	Z+13, r25	; 0x0d
    4718:	a6 87       	std	Z+14, r26	; 0x0e
    471a:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    471c:	80 8d       	ldd	r24, Z+24	; 0x18
    471e:	91 8d       	ldd	r25, Z+25	; 0x19
    4720:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4722:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4724:	89 2b       	or	r24, r25
    4726:	8a 2b       	or	r24, r26
    4728:	8b 2b       	or	r24, r27
    472a:	21 f4       	brne	.+8      	; 0x4734 <_nrk_scheduler+0x3d2>
    472c:	c4 86       	std	Z+12, r12	; 0x0c
    472e:	d5 86       	std	Z+13, r13	; 0x0d
    4730:	e6 86       	std	Z+14, r14	; 0x0e
    4732:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	0e 94 c2 1b 	call	0x3784	; 0x3784 <nrk_add_to_readyQ>
    473a:	2a c0       	rjmp	.+84     	; 0x4790 <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    473c:	ea 81       	ldd	r30, Y+2	; 0x02
    473e:	fb 81       	ldd	r31, Y+3	; 0x03
    4740:	44 8d       	ldd	r20, Z+28	; 0x1c
    4742:	55 8d       	ldd	r21, Z+29	; 0x1d
    4744:	66 8d       	ldd	r22, Z+30	; 0x1e
    4746:	77 8d       	ldd	r23, Z+31	; 0x1f
    4748:	44 8b       	std	Z+20, r20	; 0x14
    474a:	55 8b       	std	Z+21, r21	; 0x15
    474c:	66 8b       	std	Z+22, r22	; 0x16
    474e:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4750:	40 8c       	ldd	r4, Z+24	; 0x18
    4752:	51 8c       	ldd	r5, Z+25	; 0x19
    4754:	62 8c       	ldd	r6, Z+26	; 0x1a
    4756:	73 8c       	ldd	r7, Z+27	; 0x1b
    4758:	11 97       	sbiw	r26, 0x01	; 1
    475a:	a3 01       	movw	r20, r6
    475c:	92 01       	movw	r18, r4
    475e:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    4762:	64 87       	std	Z+12, r22	; 0x0c
    4764:	75 87       	std	Z+13, r23	; 0x0d
    4766:	86 87       	std	Z+14, r24	; 0x0e
    4768:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    476a:	60 8b       	std	Z+16, r22	; 0x10
    476c:	71 8b       	std	Z+17, r23	; 0x11
    476e:	82 8b       	std	Z+18, r24	; 0x12
    4770:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4772:	45 28       	or	r4, r5
    4774:	46 28       	or	r4, r6
    4776:	47 28       	or	r4, r7
    4778:	21 f4       	brne	.+8      	; 0x4782 <_nrk_scheduler+0x420>
    477a:	c4 86       	std	Z+12, r12	; 0x0c
    477c:	d5 86       	std	Z+13, r13	; 0x0d
    477e:	e6 86       	std	Z+14, r14	; 0x0e
    4780:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    4782:	44 24       	eor	r4, r4
    4784:	43 94       	inc	r4
    4786:	51 2c       	mov	r5, r1
    4788:	ea 81       	ldd	r30, Y+2	; 0x02
    478a:	fb 81       	ldd	r31, Y+3	; 0x03
    478c:	51 a2       	std	Z+33, r5	; 0x21
    478e:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4790:	ea 81       	ldd	r30, Y+2	; 0x02
    4792:	fb 81       	ldd	r31, Y+3	; 0x03
    4794:	84 85       	ldd	r24, Z+12	; 0x0c
    4796:	95 85       	ldd	r25, Z+13	; 0x0d
    4798:	a6 85       	ldd	r26, Z+14	; 0x0e
    479a:	b7 85       	ldd	r27, Z+15	; 0x0f
    479c:	00 97       	sbiw	r24, 0x00	; 0
    479e:	a1 05       	cpc	r26, r1
    47a0:	b1 05       	cpc	r27, r1
    47a2:	49 f0       	breq	.+18     	; 0x47b6 <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    47a4:	a8 01       	movw	r20, r16
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    47aa:	84 17       	cp	r24, r20
    47ac:	95 07       	cpc	r25, r21
    47ae:	a6 07       	cpc	r26, r22
    47b0:	b7 07       	cpc	r27, r23
    47b2:	08 f4       	brcc	.+2      	; 0x47b6 <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    47b4:	8c 01       	movw	r16, r24
    47b6:	f9 81       	ldd	r31, Y+1	; 0x01
    47b8:	ff 5f       	subi	r31, 0xFF	; 255
    47ba:	f9 83       	std	Y+1, r31	; 0x01
    47bc:	2a 81       	ldd	r18, Y+2	; 0x02
    47be:	3b 81       	ldd	r19, Y+3	; 0x03
    47c0:	25 5d       	subi	r18, 0xD5	; 213
    47c2:	3f 4f       	sbci	r19, 0xFF	; 255
    47c4:	3b 83       	std	Y+3, r19	; 0x03
    47c6:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    47c8:	f4 30       	cpi	r31, 0x04	; 4
    47ca:	09 f0       	breq	.+2      	; 0x47ce <_nrk_scheduler+0x46c>
    47cc:	e9 ce       	rjmp	.-558    	; 0x45a0 <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    47ce:	0e 94 b1 1b 	call	0x3762	; 0x3762 <nrk_get_high_ready_task_ID>
    47d2:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    47d4:	3b e2       	ldi	r19, 0x2B	; 43
    47d6:	83 02       	muls	r24, r19
    47d8:	f0 01       	movw	r30, r0
    47da:	11 24       	eor	r1, r1
    47dc:	e9 5b       	subi	r30, 0xB9	; 185
    47de:	f7 4f       	sbci	r31, 0xF7	; 247
    47e0:	22 85       	ldd	r18, Z+10	; 0x0a
    47e2:	20 93 0b 09 	sts	0x090B, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    47e6:	f0 93 fb 08 	sts	0x08FB, r31
    47ea:	e0 93 fa 08 	sts	0x08FA, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    47ee:	88 23       	and	r24, r24
    47f0:	f9 f0       	breq	.+62     	; 0x4830 <_nrk_scheduler+0x4ce>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    47f2:	85 a1       	ldd	r24, Z+37	; 0x25
    47f4:	96 a1       	ldd	r25, Z+38	; 0x26
    47f6:	a7 a1       	ldd	r26, Z+39	; 0x27
    47f8:	b0 a5       	ldd	r27, Z+40	; 0x28
    47fa:	89 2b       	or	r24, r25
    47fc:	8a 2b       	or	r24, r26
    47fe:	8b 2b       	or	r24, r27
    4800:	99 f0       	breq	.+38     	; 0x4828 <_nrk_scheduler+0x4c6>
    4802:	85 8d       	ldd	r24, Z+29	; 0x1d
    4804:	96 8d       	ldd	r25, Z+30	; 0x1e
    4806:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4808:	b0 a1       	ldd	r27, Z+32	; 0x20
    480a:	8a 3f       	cpi	r24, 0xFA	; 250
    480c:	91 05       	cpc	r25, r1
    480e:	a1 05       	cpc	r26, r1
    4810:	b1 05       	cpc	r27, r1
    4812:	50 f4       	brcc	.+20     	; 0x4828 <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4814:	a8 01       	movw	r20, r16
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	70 e0       	ldi	r23, 0x00	; 0
    481a:	84 17       	cp	r24, r20
    481c:	95 07       	cpc	r25, r21
    481e:	a6 07       	cpc	r26, r22
    4820:	b7 07       	cpc	r27, r23
    4822:	e8 f4       	brcc	.+58     	; 0x485e <_nrk_scheduler+0x4fc>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4824:	8c 01       	movw	r16, r24
    4826:	1b c0       	rjmp	.+54     	; 0x485e <_nrk_scheduler+0x4fc>
    4828:	0b 3f       	cpi	r16, 0xFB	; 251
    482a:	11 05       	cpc	r17, r1
    482c:	c0 f0       	brcs	.+48     	; 0x485e <_nrk_scheduler+0x4fc>
    482e:	12 c0       	rjmp	.+36     	; 0x4854 <_nrk_scheduler+0x4f2>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4830:	04 30       	cpi	r16, 0x04	; 4
    4832:	11 05       	cpc	r17, r1
    4834:	a0 f0       	brcs	.+40     	; 0x485e <_nrk_scheduler+0x4fc>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4836:	c8 01       	movw	r24, r16
    4838:	03 97       	sbiw	r24, 0x03	; 3
    483a:	8a 3f       	cpi	r24, 0xFA	; 250
    483c:	91 05       	cpc	r25, r1
    483e:	38 f4       	brcc	.+14     	; 0x484e <_nrk_scheduler+0x4ec>
    4840:	8c 01       	movw	r16, r24
    4842:	82 30       	cpi	r24, 0x02	; 2
    4844:	91 05       	cpc	r25, r1
    4846:	58 f4       	brcc	.+22     	; 0x485e <_nrk_scheduler+0x4fc>
    4848:	02 e0       	ldi	r16, 0x02	; 2
    484a:	10 e0       	ldi	r17, 0x00	; 0
    484c:	08 c0       	rjmp	.+16     	; 0x485e <_nrk_scheduler+0x4fc>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    484e:	0d 3f       	cpi	r16, 0xFD	; 253
    4850:	11 05       	cpc	r17, r1
    4852:	19 f0       	breq	.+6      	; 0x485a <_nrk_scheduler+0x4f8>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4854:	0a ef       	ldi	r16, 0xFA	; 250
    4856:	10 e0       	ldi	r17, 0x00	; 0
    4858:	02 c0       	rjmp	.+4      	; 0x485e <_nrk_scheduler+0x4fc>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    485a:	07 ef       	ldi	r16, 0xF7	; 247
    485c:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    485e:	20 93 fc 08 	sts	0x08FC, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4862:	f0 93 0a 09 	sts	0x090A, r31
    4866:	e0 93 09 09 	sts	0x0909, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    486a:	00 93 f1 07 	sts	0x07F1, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    486e:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    4872:	28 2f       	mov	r18, r24
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	2f 5f       	subi	r18, 0xFF	; 255
    4878:	3f 4f       	sbci	r19, 0xFF	; 255
    487a:	20 17       	cp	r18, r16
    487c:	31 07       	cpc	r19, r17
    487e:	40 f0       	brcs	.+16     	; 0x4890 <_nrk_scheduler+0x52e>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4880:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <_nrk_os_timer_get>
    4884:	08 2f       	mov	r16, r24
    4886:	10 e0       	ldi	r17, 0x00	; 0
    4888:	0e 5f       	subi	r16, 0xFE	; 254
    488a:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    488c:	00 93 f1 07 	sts	0x07F1, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4890:	f1 10       	cpse	r15, r1
    4892:	10 92 fd 08 	sts	0x08FD, r1

    _nrk_set_next_wakeup(next_wake);
    4896:	80 2f       	mov	r24, r16
    4898:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    489c:	6c ed       	ldi	r22, 0xDC	; 220
    489e:	75 e0       	ldi	r23, 0x05	; 5
    48a0:	c1 01       	movw	r24, r2
    48a2:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    48a6:	0e 94 cb 29 	call	0x5396	; 0x5396 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	ff 90       	pop	r15
    48ba:	ef 90       	pop	r14
    48bc:	df 90       	pop	r13
    48be:	cf 90       	pop	r12
    48c0:	bf 90       	pop	r11
    48c2:	af 90       	pop	r10
    48c4:	9f 90       	pop	r9
    48c6:	8f 90       	pop	r8
    48c8:	7f 90       	pop	r7
    48ca:	6f 90       	pop	r6
    48cc:	5f 90       	pop	r5
    48ce:	4f 90       	pop	r4
    48d0:	3f 90       	pop	r3
    48d2:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    48d4:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <nrk_start_high_ready_task>

000048d8 <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    48d8:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    48da:	90 91 26 09 	lds	r25, 0x0926
    48de:	19 16       	cp	r1, r25
    48e0:	74 f0       	brlt	.+28     	; 0x48fe <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    48e2:	84 e0       	ldi	r24, 0x04	; 4
    48e4:	98 02       	muls	r25, r24
    48e6:	f0 01       	movw	r30, r0
    48e8:	11 24       	eor	r1, r1
    48ea:	e9 5d       	subi	r30, 0xD9	; 217
    48ec:	f6 4f       	sbci	r31, 0xF6	; 246
    48ee:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    48f0:	33 83       	std	Z+3, r19	; 0x03
    48f2:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    48f4:	9f 5f       	subi	r25, 0xFF	; 255
    48f6:	90 93 26 09 	sts	0x0926, r25
        return NRK_OK;
    48fa:	81 e0       	ldi	r24, 0x01	; 1
    48fc:	08 95       	ret
    }
    else
        return NRK_ERROR;
    48fe:	8f ef       	ldi	r24, 0xFF	; 255
}
    4900:	08 95       	ret

00004902 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    490a:	40 91 26 09 	lds	r20, 0x0926
    490e:	55 27       	eor	r21, r21
    4910:	47 fd       	sbrc	r20, 7
    4912:	50 95       	com	r21
    4914:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4916:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4918:	2c 2f       	mov	r18, r28
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	24 17       	cp	r18, r20
    491e:	35 07       	cpc	r19, r21
    4920:	8c f5       	brge	.+98     	; 0x4984 <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4922:	89 01       	movw	r16, r18
    4924:	00 0f       	add	r16, r16
    4926:	11 1f       	adc	r17, r17
    4928:	00 0f       	add	r16, r16
    492a:	11 1f       	adc	r17, r17
    492c:	d8 01       	movw	r26, r16
    492e:	a9 5d       	subi	r26, 0xD9	; 217
    4930:	b6 4f       	sbci	r27, 0xF6	; 246
    4932:	ec 91       	ld	r30, X
    4934:	ff 27       	eor	r31, r31
    4936:	e7 fd       	sbrc	r30, 7
    4938:	f0 95       	com	r31
    493a:	e8 17       	cp	r30, r24
    493c:	f9 07       	cpc	r31, r25
    493e:	01 f5       	brne	.+64     	; 0x4980 <nrk_open+0x7e>
    4940:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    4942:	f9 01       	movw	r30, r18
    4944:	e5 5d       	subi	r30, 0xD5	; 213
    4946:	f6 4f       	sbci	r31, 0xF6	; 246
    4948:	80 81       	ld	r24, Z
    494a:	81 11       	cpse	r24, r1
    494c:	0b c0       	rjmp	.+22     	; 0x4964 <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    4952:	12 96       	adiw	r26, 0x02	; 2
    4954:	ed 91       	ld	r30, X+
    4956:	fc 91       	ld	r31, X
    4958:	13 97       	sbiw	r26, 0x03	; 3
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	80 e0       	ldi	r24, 0x00	; 0
    4962:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    4964:	f8 01       	movw	r30, r16
    4966:	e9 5d       	subi	r30, 0xD9	; 217
    4968:	f6 4f       	sbci	r31, 0xF6	; 246
    496a:	02 80       	ldd	r0, Z+2	; 0x02
    496c:	f3 81       	ldd	r31, Z+3	; 0x03
    496e:	e0 2d       	mov	r30, r0
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	40 e0       	ldi	r20, 0x00	; 0
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	6d 2f       	mov	r22, r29
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	09 95       	icall
            return cnt;
    497c:	8c 2f       	mov	r24, r28
    497e:	03 c0       	rjmp	.+6      	; 0x4986 <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4980:	cf 5f       	subi	r28, 0xFF	; 255
    4982:	ca cf       	rjmp	.-108    	; 0x4918 <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    4984:	8f ef       	ldi	r24, 0xFF	; 255
}
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	1f 91       	pop	r17
    498c:	0f 91       	pop	r16
    498e:	08 95       	ret

00004990 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	20 91 26 09 	lds	r18, 0x0926
    4996:	33 27       	eor	r19, r19
    4998:	27 fd       	sbrc	r18, 7
    499a:	30 95       	com	r19
    499c:	28 17       	cp	r18, r24
    499e:	39 07       	cpc	r19, r25
    49a0:	84 f0       	brlt	.+32     	; 0x49c2 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    49a2:	88 0f       	add	r24, r24
    49a4:	99 1f       	adc	r25, r25
    49a6:	88 0f       	add	r24, r24
    49a8:	99 1f       	adc	r25, r25
    49aa:	fc 01       	movw	r30, r24
    49ac:	e9 5d       	subi	r30, 0xD9	; 217
    49ae:	f6 4f       	sbci	r31, 0xF6	; 246
    49b0:	02 80       	ldd	r0, Z+2	; 0x02
    49b2:	f3 81       	ldd	r31, Z+3	; 0x03
    49b4:	e0 2d       	mov	r30, r0
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	40 e0       	ldi	r20, 0x00	; 0
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	82 e0       	ldi	r24, 0x02	; 2
    49c0:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    49c8:	8f ef       	ldi	r24, 0xFF	; 255
    49ca:	08 95       	ret

000049cc <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    49cc:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	e0 91 26 09 	lds	r30, 0x0926
    49d4:	ff 27       	eor	r31, r31
    49d6:	e7 fd       	sbrc	r30, 7
    49d8:	f0 95       	com	r31
    49da:	e8 17       	cp	r30, r24
    49dc:	f9 07       	cpc	r31, r25
    49de:	74 f0       	brlt	.+28     	; 0x49fc <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    49e0:	88 0f       	add	r24, r24
    49e2:	99 1f       	adc	r25, r25
    49e4:	88 0f       	add	r24, r24
    49e6:	99 1f       	adc	r25, r25
    49e8:	fc 01       	movw	r30, r24
    49ea:	e9 5d       	subi	r30, 0xD9	; 217
    49ec:	f6 4f       	sbci	r31, 0xF6	; 246
    49ee:	02 80       	ldd	r0, Z+2	; 0x02
    49f0:	f3 81       	ldd	r31, Z+3	; 0x03
    49f2:	e0 2d       	mov	r30, r0
    49f4:	ab 01       	movw	r20, r22
    49f6:	60 e0       	ldi	r22, 0x00	; 0
    49f8:	86 e0       	ldi	r24, 0x06	; 6
    49fa:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    4a02:	8f ef       	ldi	r24, 0xFF	; 255
    4a04:	08 95       	ret

00004a06 <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    4a06:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	e0 91 26 09 	lds	r30, 0x0926
    4a0e:	ff 27       	eor	r31, r31
    4a10:	e7 fd       	sbrc	r30, 7
    4a12:	f0 95       	com	r31
    4a14:	e8 17       	cp	r30, r24
    4a16:	f9 07       	cpc	r31, r25
    4a18:	74 f0       	brlt	.+28     	; 0x4a36 <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    4a1a:	88 0f       	add	r24, r24
    4a1c:	99 1f       	adc	r25, r25
    4a1e:	88 0f       	add	r24, r24
    4a20:	99 1f       	adc	r25, r25
    4a22:	fc 01       	movw	r30, r24
    4a24:	e9 5d       	subi	r30, 0xD9	; 217
    4a26:	f6 4f       	sbci	r31, 0xF6	; 246
    4a28:	02 80       	ldd	r0, Z+2	; 0x02
    4a2a:	f3 81       	ldd	r31, Z+3	; 0x03
    4a2c:	e0 2d       	mov	r30, r0
    4a2e:	ab 01       	movw	r20, r22
    4a30:	60 e0       	ldi	r22, 0x00	; 0
    4a32:	85 e0       	ldi	r24, 0x05	; 5
    4a34:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    4a3c:	8f ef       	ldi	r24, 0xFF	; 255
    4a3e:	08 95       	ret

00004a40 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    4a40:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	e0 91 26 09 	lds	r30, 0x0926
    4a48:	ff 27       	eor	r31, r31
    4a4a:	e7 fd       	sbrc	r30, 7
    4a4c:	f0 95       	com	r31
    4a4e:	e8 17       	cp	r30, r24
    4a50:	f9 07       	cpc	r31, r25
    4a52:	74 f0       	brlt	.+28     	; 0x4a70 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    4a54:	88 0f       	add	r24, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	88 0f       	add	r24, r24
    4a5a:	99 1f       	adc	r25, r25
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	e9 5d       	subi	r30, 0xD9	; 217
    4a60:	f6 4f       	sbci	r31, 0xF6	; 246
    4a62:	02 80       	ldd	r0, Z+2	; 0x02
    4a64:	f3 81       	ldd	r31, Z+3	; 0x03
    4a66:	e0 2d       	mov	r30, r0
    4a68:	40 e0       	ldi	r20, 0x00	; 0
    4a6a:	50 e0       	ldi	r21, 0x00	; 0
    4a6c:	84 e0       	ldi	r24, 0x04	; 4
    4a6e:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4a70:	81 e0       	ldi	r24, 0x01	; 1
    4a72:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    4a76:	8f ef       	ldi	r24, 0xFF	; 255
    4a78:	08 95       	ret

00004a7a <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	20 91 26 09 	lds	r18, 0x0926
    4a80:	33 27       	eor	r19, r19
    4a82:	27 fd       	sbrc	r18, 7
    4a84:	30 95       	com	r19
    4a86:	28 17       	cp	r18, r24
    4a88:	39 07       	cpc	r19, r25
    4a8a:	7c f0       	brlt	.+30     	; 0x4aaa <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    4a8c:	88 0f       	add	r24, r24
    4a8e:	99 1f       	adc	r25, r25
    4a90:	88 0f       	add	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	fc 01       	movw	r30, r24
    4a96:	e9 5d       	subi	r30, 0xD9	; 217
    4a98:	f6 4f       	sbci	r31, 0xF6	; 246
    4a9a:	02 80       	ldd	r0, Z+2	; 0x02
    4a9c:	f3 81       	ldd	r31, Z+3	; 0x03
    4a9e:	e0 2d       	mov	r30, r0
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	40 e0       	ldi	r20, 0x00	; 0
    4aa4:	50 e0       	ldi	r21, 0x00	; 0
    4aa6:	83 e0       	ldi	r24, 0x03	; 3
    4aa8:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    4ab0:	8f ef       	ldi	r24, 0xFF	; 255
    4ab2:	08 95       	ret

00004ab4 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	91 f7       	brne	.-28     	; 0x4ab4 <nrk_spin_wait_us>

}
    4ad0:	08 95       	ret

00004ad2 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4ad2:	10 92 21 01 	sts	0x0121, r1
    4ad6:	08 95       	ret

00004ad8 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4ad8:	89 e0       	ldi	r24, 0x09	; 9
    4ada:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4ade:	8d e8       	ldi	r24, 0x8D	; 141
    4ae0:	9c e3       	ldi	r25, 0x3C	; 60
    4ae2:	90 93 29 01 	sts	0x0129, r25
    4ae6:	80 93 28 01 	sts	0x0128, r24
    4aea:	08 95       	ret

00004aec <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4aec:	10 92 25 01 	sts	0x0125, r1
    4af0:	10 92 24 01 	sts	0x0124, r1
    4af4:	08 95       	ret

00004af6 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4af6:	cf 93       	push	r28
    4af8:	df 93       	push	r29
    4afa:	00 d0       	rcall	.+0      	; 0x4afc <_nrk_precision_os_timer_get+0x6>
    4afc:	cd b7       	in	r28, 0x3d	; 61
    4afe:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4b00:	80 91 24 01 	lds	r24, 0x0124
    4b04:	90 91 25 01 	lds	r25, 0x0125
    4b08:	9a 83       	std	Y+2, r25	; 0x02
    4b0a:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	df 91       	pop	r29
    4b16:	cf 91       	pop	r28
    4b18:	08 95       	ret

00004b1a <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4b1a:	10 92 81 00 	sts	0x0081, r1
    4b1e:	08 95       	ret

00004b20 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	80 93 81 00 	sts	0x0081, r24
    4b26:	08 95       	ret

00004b28 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4b28:	83 b5       	in	r24, 0x23	; 35
    4b2a:	81 60       	ori	r24, 0x01	; 1
    4b2c:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4b2e:	10 92 85 00 	sts	0x0085, r1
    4b32:	10 92 84 00 	sts	0x0084, r1
    4b36:	08 95       	ret

00004b38 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    4b38:	cf 93       	push	r28
    4b3a:	df 93       	push	r29
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <_nrk_high_speed_timer_get+0x6>
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4b42:	80 91 84 00 	lds	r24, 0x0084
    4b46:	90 91 85 00 	lds	r25, 0x0085
    4b4a:	9a 83       	std	Y+2, r25	; 0x02
    4b4c:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4b4e:	89 81       	ldd	r24, Y+1	; 0x01
    4b50:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b52:	0f 90       	pop	r0
    4b54:	0f 90       	pop	r0
    4b56:	df 91       	pop	r29
    4b58:	cf 91       	pop	r28
    4b5a:	08 95       	ret

00004b5c <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4b5c:	cf 92       	push	r12
    4b5e:	df 92       	push	r13
    4b60:	ef 92       	push	r14
    4b62:	ff 92       	push	r15
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4b68:	ec 01       	movw	r28, r24
    4b6a:	cc 0f       	add	r28, r28
    4b6c:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4b6e:	c9 37       	cpi	r28, 0x79	; 121
    4b70:	8f ef       	ldi	r24, 0xFF	; 255
    4b72:	d8 07       	cpc	r29, r24
    4b74:	10 f0       	brcs	.+4      	; 0x4b7a <nrk_high_speed_timer_wait+0x1e>
    4b76:	c0 e0       	ldi	r28, 0x00	; 0
    4b78:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4b7a:	6b 01       	movw	r12, r22
    4b7c:	e1 2c       	mov	r14, r1
    4b7e:	f1 2c       	mov	r15, r1
    4b80:	cc 0e       	add	r12, r28
    4b82:	dd 1e       	adc	r13, r29
    4b84:	e1 1c       	adc	r14, r1
    4b86:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    4b88:	81 e0       	ldi	r24, 0x01	; 1
    4b8a:	c8 16       	cp	r12, r24
    4b8c:	d1 04       	cpc	r13, r1
    4b8e:	e8 06       	cpc	r14, r24
    4b90:	f1 04       	cpc	r15, r1
    4b92:	40 f0       	brcs	.+16     	; 0x4ba4 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	e8 1a       	sub	r14, r24
    4b98:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    4b9a:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_nrk_high_speed_timer_get>
    4b9e:	c8 17       	cp	r28, r24
    4ba0:	d9 07       	cpc	r29, r25
    4ba2:	d8 f3       	brcs	.-10     	; 0x4b9a <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4ba4:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_nrk_high_speed_timer_get>
    4ba8:	8c 15       	cp	r24, r12
    4baa:	9d 05       	cpc	r25, r13
    4bac:	d8 f3       	brcs	.-10     	; 0x4ba4 <nrk_high_speed_timer_wait+0x48>
}
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	ff 90       	pop	r15
    4bb4:	ef 90       	pop	r14
    4bb6:	df 90       	pop	r13
    4bb8:	cf 90       	pop	r12
    4bba:	08 95       	ret

00004bbc <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4bbc:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4bc0:	e0 e7       	ldi	r30, 0x70	; 112
    4bc2:	f0 e0       	ldi	r31, 0x00	; 0
    4bc4:	80 81       	ld	r24, Z
    4bc6:	8d 7f       	andi	r24, 0xFD	; 253
    4bc8:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4bca:	80 81       	ld	r24, Z
    4bcc:	8e 7f       	andi	r24, 0xFE	; 254
    4bce:	80 83       	st	Z, r24
    4bd0:	08 95       	ret

00004bd2 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4bd2:	80 93 b2 00 	sts	0x00B2, r24
    4bd6:	08 95       	ret

00004bd8 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4bd8:	e0 e7       	ldi	r30, 0x70	; 112
    4bda:	f0 e0       	ldi	r31, 0x00	; 0
    4bdc:	80 81       	ld	r24, Z
    4bde:	83 60       	ori	r24, 0x03	; 3
    4be0:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4be2:	83 e0       	ldi	r24, 0x03	; 3
    4be4:	80 93 b1 00 	sts	0x00B1, r24
    4be8:	08 95       	ret

00004bea <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4bea:	83 b5       	in	r24, 0x23	; 35
    4bec:	82 60       	ori	r24, 0x02	; 2
    4bee:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4bf0:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4bf4:	10 92 ef 07 	sts	0x07EF, r1
    _nrk_prev_timer_val=0;
    4bf8:	10 92 f1 07 	sts	0x07F1, r1
    4bfc:	08 95       	ret

00004bfe <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    4c02:	8e ef       	ldi	r24, 0xFE	; 254
    4c04:	80 93 f1 07 	sts	0x07F1, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4c08:	80 e2       	ldi	r24, 0x20	; 32
    4c0a:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4c0e:	80 91 f1 07 	lds	r24, 0x07F1
    4c12:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4c16:	83 e0       	ldi	r24, 0x03	; 3
    4c18:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4c1a:	92 e0       	ldi	r25, 0x02	; 2
    4c1c:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4c20:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c24:	93 b5       	in	r25, 0x23	; 35
    4c26:	92 60       	ori	r25, 0x02	; 2
    4c28:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4c2a:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4c2c:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c2e:	83 b5       	in	r24, 0x23	; 35
    4c30:	82 60       	ori	r24, 0x02	; 2
    4c32:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4c34:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4c3e:	10 92 85 00 	sts	0x0085, r1
    4c42:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c46:	83 b5       	in	r24, 0x23	; 35
    4c48:	82 60       	ori	r24, 0x02	; 2
    4c4a:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4c4c:	83 b5       	in	r24, 0x23	; 35
    4c4e:	81 60       	ori	r24, 0x01	; 1
    4c50:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4c52:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4c56:	c4 e2       	ldi	r28, 0x24	; 36
    4c58:	d1 e0       	ldi	r29, 0x01	; 1
    4c5a:	19 82       	std	Y+1, r1	; 0x01
    4c5c:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c5e:	83 b5       	in	r24, 0x23	; 35
    4c60:	82 60       	ori	r24, 0x02	; 2
    4c62:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4c64:	83 b5       	in	r24, 0x23	; 35
    4c66:	81 60       	ori	r24, 0x01	; 1
    4c68:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4c6a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4c6e:	19 82       	std	Y+1, r1	; 0x01
    4c70:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    4c72:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4c76:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4c7a:	10 92 ef 07 	sts	0x07EF, r1
}
    4c7e:	df 91       	pop	r29
    4c80:	cf 91       	pop	r28
    4c82:	08 95       	ret

00004c84 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4c84:	80 91 b3 00 	lds	r24, 0x00B3
}
    4c88:	8f 5f       	subi	r24, 0xFF	; 255
    4c8a:	08 95       	ret

00004c8c <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4c8c:	81 50       	subi	r24, 0x01	; 1
    4c8e:	80 93 b3 00 	sts	0x00B3, r24
    4c92:	08 95       	ret

00004c94 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c94:	81 11       	cpse	r24, r1
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4c98:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4c9c:	8f ef       	ldi	r24, 0xFF	; 255
    4c9e:	08 95       	ret

00004ca0 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4ca0:	81 11       	cpse	r24, r1
    4ca2:	06 c0       	rjmp	.+12     	; 0x4cb0 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4ca4:	10 92 95 00 	sts	0x0095, r1
    4ca8:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	08 95       	ret
	}
return NRK_ERROR;
    4cb0:	8f ef       	ldi	r24, 0xFF	; 255
}
    4cb2:	08 95       	ret

00004cb4 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4cb4:	81 11       	cpse	r24, r1
    4cb6:	05 c0       	rjmp	.+10     	; 0x4cc2 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4cb8:	80 91 94 00 	lds	r24, 0x0094
    4cbc:	90 91 95 00 	lds	r25, 0x0095
    4cc0:	08 95       	ret
	}
return 0;
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	90 e0       	ldi	r25, 0x00	; 0

}
    4cc6:	08 95       	ret

00004cc8 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4cc8:	81 11       	cpse	r24, r1
    4cca:	05 c0       	rjmp	.+10     	; 0x4cd6 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4ccc:	82 e0       	ldi	r24, 0x02	; 2
    4cce:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	08 95       	ret
	}
return NRK_ERROR;
    4cd6:	8f ef       	ldi	r24, 0xFF	; 255
}
    4cd8:	08 95       	ret

00004cda <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4cda:	81 11       	cpse	r24, r1
    4cdc:	35 c0       	rjmp	.+106    	; 0x4d48 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4cde:	cb 01       	movw	r24, r22
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	05 97       	sbiw	r24, 0x05	; 5
    4ce4:	10 f4       	brcc	.+4      	; 0x4cea <nrk_timer_int_configure+0x10>
    4ce6:	60 93 f0 07 	sts	0x07F0, r22
	TCCR3A = 0;  
    4cea:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4cee:	88 e0       	ldi	r24, 0x08	; 8
    4cf0:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    4cf4:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4cf8:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    4cfc:	30 93 ee 07 	sts	0x07EE, r19
    4d00:	20 93 ed 07 	sts	0x07ED, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4d04:	80 91 f0 07 	lds	r24, 0x07F0
    4d08:	81 30       	cpi	r24, 0x01	; 1
    4d0a:	21 f4       	brne	.+8      	; 0x4d14 <nrk_timer_int_configure+0x3a>
    4d0c:	80 91 91 00 	lds	r24, 0x0091
    4d10:	81 60       	ori	r24, 0x01	; 1
    4d12:	11 c0       	rjmp	.+34     	; 0x4d36 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4d14:	82 30       	cpi	r24, 0x02	; 2
    4d16:	21 f4       	brne	.+8      	; 0x4d20 <nrk_timer_int_configure+0x46>
    4d18:	80 91 91 00 	lds	r24, 0x0091
    4d1c:	82 60       	ori	r24, 0x02	; 2
    4d1e:	0b c0       	rjmp	.+22     	; 0x4d36 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4d20:	83 30       	cpi	r24, 0x03	; 3
    4d22:	21 f4       	brne	.+8      	; 0x4d2c <nrk_timer_int_configure+0x52>
    4d24:	80 91 91 00 	lds	r24, 0x0091
    4d28:	83 60       	ori	r24, 0x03	; 3
    4d2a:	05 c0       	rjmp	.+10     	; 0x4d36 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4d2c:	84 30       	cpi	r24, 0x04	; 4
    4d2e:	31 f4       	brne	.+12     	; 0x4d3c <nrk_timer_int_configure+0x62>
    4d30:	80 91 91 00 	lds	r24, 0x0091
    4d34:	84 60       	ori	r24, 0x04	; 4
    4d36:	80 93 91 00 	sts	0x0091, r24
    4d3a:	08 c0       	rjmp	.+16     	; 0x4d4c <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4d3c:	85 30       	cpi	r24, 0x05	; 5
    4d3e:	31 f4       	brne	.+12     	; 0x4d4c <nrk_timer_int_configure+0x72>
    4d40:	80 91 91 00 	lds	r24, 0x0091
    4d44:	85 60       	ori	r24, 0x05	; 5
    4d46:	f7 cf       	rjmp	.-18     	; 0x4d36 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4d48:	8f ef       	ldi	r24, 0xFF	; 255
    4d4a:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4d4e:	08 95       	ret

00004d50 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4d50:	80 91 b2 00 	lds	r24, 0x00B2
}
    4d54:	08 95       	ret

00004d56 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4d56:	1f 92       	push	r1
    4d58:	0f 92       	push	r0
    4d5a:	0f b6       	in	r0, 0x3f	; 63
    4d5c:	0f 92       	push	r0
    4d5e:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4d60:	60 e0       	ldi	r22, 0x00	; 0
    4d62:	8a e0       	ldi	r24, 0x0A	; 10
    4d64:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
	while(1);
    4d68:	ff cf       	rjmp	.-2      	; 0x4d68 <__vector_default+0x12>

00004d6a <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    4d6a:	0f 92       	push	r0
    4d6c:	0f b6       	in	r0, 0x3f	; 63
    4d6e:	0f 92       	push	r0
    4d70:	1f 92       	push	r1
    4d72:	2f 92       	push	r2
    4d74:	3f 92       	push	r3
    4d76:	4f 92       	push	r4
    4d78:	5f 92       	push	r5
    4d7a:	6f 92       	push	r6
    4d7c:	7f 92       	push	r7
    4d7e:	8f 92       	push	r8
    4d80:	9f 92       	push	r9
    4d82:	af 92       	push	r10
    4d84:	bf 92       	push	r11
    4d86:	cf 92       	push	r12
    4d88:	df 92       	push	r13
    4d8a:	ef 92       	push	r14
    4d8c:	ff 92       	push	r15
    4d8e:	0f 93       	push	r16
    4d90:	1f 93       	push	r17
    4d92:	2f 93       	push	r18
    4d94:	3f 93       	push	r19
    4d96:	4f 93       	push	r20
    4d98:	5f 93       	push	r21
    4d9a:	6f 93       	push	r22
    4d9c:	7f 93       	push	r23
    4d9e:	8f 93       	push	r24
    4da0:	9f 93       	push	r25
    4da2:	af 93       	push	r26
    4da4:	bf 93       	push	r27
    4da6:	cf 93       	push	r28
    4da8:	df 93       	push	r29
    4daa:	ef 93       	push	r30
    4dac:	ff 93       	push	r31
    4dae:	a0 91 09 09 	lds	r26, 0x0909
    4db2:	b0 91 0a 09 	lds	r27, 0x090A
    4db6:	0d b6       	in	r0, 0x3d	; 61
    4db8:	0d 92       	st	X+, r0
    4dba:	0e b6       	in	r0, 0x3e	; 62
    4dbc:	0d 92       	st	X+, r0
    4dbe:	1f 92       	push	r1
    4dc0:	a0 91 73 05 	lds	r26, 0x0573
    4dc4:	b0 91 74 05 	lds	r27, 0x0574
    4dc8:	1e 90       	ld	r1, -X
    4dca:	be bf       	out	0x3e, r27	; 62
    4dcc:	ad bf       	out	0x3d, r26	; 61
    4dce:	08 95       	ret

00004dd0 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4dd0:	1f 92       	push	r1
    4dd2:	0f 92       	push	r0
    4dd4:	0f b6       	in	r0, 0x3f	; 63
    4dd6:	0f 92       	push	r0
    4dd8:	11 24       	eor	r1, r1
    4dda:	0b b6       	in	r0, 0x3b	; 59
    4ddc:	0f 92       	push	r0
    4dde:	2f 93       	push	r18
    4de0:	3f 93       	push	r19
    4de2:	4f 93       	push	r20
    4de4:	5f 93       	push	r21
    4de6:	6f 93       	push	r22
    4de8:	7f 93       	push	r23
    4dea:	8f 93       	push	r24
    4dec:	9f 93       	push	r25
    4dee:	af 93       	push	r26
    4df0:	bf 93       	push	r27
    4df2:	ef 93       	push	r30
    4df4:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4df6:	e0 91 ed 07 	lds	r30, 0x07ED
    4dfa:	f0 91 ee 07 	lds	r31, 0x07EE
    4dfe:	30 97       	sbiw	r30, 0x00	; 0
    4e00:	11 f0       	breq	.+4      	; 0x4e06 <__vector_32+0x36>
    4e02:	09 95       	icall
    4e04:	04 c0       	rjmp	.+8      	; 0x4e0e <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4e06:	60 e0       	ldi	r22, 0x00	; 0
    4e08:	8a e0       	ldi	r24, 0x0A	; 10
    4e0a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
	return;  	
}
    4e0e:	ff 91       	pop	r31
    4e10:	ef 91       	pop	r30
    4e12:	bf 91       	pop	r27
    4e14:	af 91       	pop	r26
    4e16:	9f 91       	pop	r25
    4e18:	8f 91       	pop	r24
    4e1a:	7f 91       	pop	r23
    4e1c:	6f 91       	pop	r22
    4e1e:	5f 91       	pop	r21
    4e20:	4f 91       	pop	r20
    4e22:	3f 91       	pop	r19
    4e24:	2f 91       	pop	r18
    4e26:	0f 90       	pop	r0
    4e28:	0b be       	out	0x3b, r0	; 59
    4e2a:	0f 90       	pop	r0
    4e2c:	0f be       	out	0x3f, r0	; 63
    4e2e:	0f 90       	pop	r0
    4e30:	1f 90       	pop	r1
    4e32:	18 95       	reti

00004e34 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4e34:	1f 92       	push	r1
    4e36:	0f 92       	push	r0
    4e38:	0f b6       	in	r0, 0x3f	; 63
    4e3a:	0f 92       	push	r0
    4e3c:	11 24       	eor	r1, r1

	return;  	
} 
    4e3e:	0f 90       	pop	r0
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	0f 90       	pop	r0
    4e44:	1f 90       	pop	r1
    4e46:	18 95       	reti

00004e48 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4e48:	04 b6       	in	r0, 0x34	; 52
    4e4a:	03 fe       	sbrs	r0, 3
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    4e4e:	80 e1       	ldi	r24, 0x10	; 16
    4e50:	01 c0       	rjmp	.+2      	; 0x4e54 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4e52:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4e54:	04 b6       	in	r0, 0x34	; 52
    4e56:	02 fe       	sbrs	r0, 2
    4e58:	06 c0       	rjmp	.+12     	; 0x4e66 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4e5a:	94 b7       	in	r25, 0x34	; 52
    4e5c:	9b 7f       	andi	r25, 0xFB	; 251
    4e5e:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4e60:	04 b6       	in	r0, 0x34	; 52
    4e62:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4e64:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4e66:	04 b6       	in	r0, 0x34	; 52
    4e68:	01 fe       	sbrs	r0, 1
    4e6a:	05 c0       	rjmp	.+10     	; 0x4e76 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4e6c:	94 b7       	in	r25, 0x34	; 52
    4e6e:	9d 7f       	andi	r25, 0xFD	; 253
    4e70:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4e72:	82 60       	ori	r24, 0x02	; 2
    4e74:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4e76:	81 11       	cpse	r24, r1
    4e78:	0c c0       	rjmp	.+24     	; 0x4e92 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4e7a:	04 b6       	in	r0, 0x34	; 52
    4e7c:	00 fe       	sbrs	r0, 0
    4e7e:	04 c0       	rjmp	.+8      	; 0x4e88 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4e80:	94 b7       	in	r25, 0x34	; 52
    4e82:	9e 7f       	andi	r25, 0xFE	; 254
    4e84:	94 bf       	out	0x34, r25	; 52
    4e86:	01 c0       	rjmp	.+2      	; 0x4e8a <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4e88:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4e8a:	90 91 b0 00 	lds	r25, 0x00B0
    4e8e:	91 11       	cpse	r25, r1
    4e90:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    4e92:	08 95       	ret

00004e94 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4e94:	81 11       	cpse	r24, r1
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <nrk_ext_int_enable+0x8>
    4e98:	e8 9a       	sbi	0x1d, 0	; 29
    4e9a:	39 c0       	rjmp	.+114    	; 0x4f0e <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4e9c:	81 30       	cpi	r24, 0x01	; 1
    4e9e:	11 f4       	brne	.+4      	; 0x4ea4 <nrk_ext_int_enable+0x10>
    4ea0:	e9 9a       	sbi	0x1d, 1	; 29
    4ea2:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4ea4:	82 30       	cpi	r24, 0x02	; 2
    4ea6:	11 f4       	brne	.+4      	; 0x4eac <nrk_ext_int_enable+0x18>
    4ea8:	ea 9a       	sbi	0x1d, 2	; 29
    4eaa:	31 c0       	rjmp	.+98     	; 0x4f0e <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4eac:	83 30       	cpi	r24, 0x03	; 3
    4eae:	21 f4       	brne	.+8      	; 0x4eb8 <nrk_ext_int_enable+0x24>
    4eb0:	80 91 6b 00 	lds	r24, 0x006B
    4eb4:	81 60       	ori	r24, 0x01	; 1
    4eb6:	29 c0       	rjmp	.+82     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4eb8:	84 30       	cpi	r24, 0x04	; 4
    4eba:	21 f4       	brne	.+8      	; 0x4ec4 <nrk_ext_int_enable+0x30>
    4ebc:	80 91 6b 00 	lds	r24, 0x006B
    4ec0:	82 60       	ori	r24, 0x02	; 2
    4ec2:	23 c0       	rjmp	.+70     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4ec4:	85 30       	cpi	r24, 0x05	; 5
    4ec6:	21 f4       	brne	.+8      	; 0x4ed0 <nrk_ext_int_enable+0x3c>
    4ec8:	80 91 6b 00 	lds	r24, 0x006B
    4ecc:	84 60       	ori	r24, 0x04	; 4
    4ece:	1d c0       	rjmp	.+58     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4ed0:	86 30       	cpi	r24, 0x06	; 6
    4ed2:	21 f4       	brne	.+8      	; 0x4edc <nrk_ext_int_enable+0x48>
    4ed4:	80 91 6b 00 	lds	r24, 0x006B
    4ed8:	88 60       	ori	r24, 0x08	; 8
    4eda:	17 c0       	rjmp	.+46     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4edc:	87 30       	cpi	r24, 0x07	; 7
    4ede:	21 f4       	brne	.+8      	; 0x4ee8 <nrk_ext_int_enable+0x54>
    4ee0:	80 91 6b 00 	lds	r24, 0x006B
    4ee4:	80 61       	ori	r24, 0x10	; 16
    4ee6:	11 c0       	rjmp	.+34     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4ee8:	88 30       	cpi	r24, 0x08	; 8
    4eea:	21 f4       	brne	.+8      	; 0x4ef4 <nrk_ext_int_enable+0x60>
    4eec:	80 91 6b 00 	lds	r24, 0x006B
    4ef0:	80 62       	ori	r24, 0x20	; 32
    4ef2:	0b c0       	rjmp	.+22     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4ef4:	89 30       	cpi	r24, 0x09	; 9
    4ef6:	21 f4       	brne	.+8      	; 0x4f00 <nrk_ext_int_enable+0x6c>
    4ef8:	80 91 6b 00 	lds	r24, 0x006B
    4efc:	80 64       	ori	r24, 0x40	; 64
    4efe:	05 c0       	rjmp	.+10     	; 0x4f0a <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4f00:	8a 30       	cpi	r24, 0x0A	; 10
    4f02:	39 f4       	brne	.+14     	; 0x4f12 <nrk_ext_int_enable+0x7e>
    4f04:	80 91 6b 00 	lds	r24, 0x006B
    4f08:	80 68       	ori	r24, 0x80	; 128
    4f0a:	80 93 6b 00 	sts	0x006B, r24
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
    4f10:	08 95       	ret
return NRK_ERROR;
    4f12:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f14:	08 95       	ret

00004f16 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4f16:	81 11       	cpse	r24, r1
    4f18:	02 c0       	rjmp	.+4      	; 0x4f1e <nrk_ext_int_disable+0x8>
    4f1a:	e8 98       	cbi	0x1d, 0	; 29
    4f1c:	39 c0       	rjmp	.+114    	; 0x4f90 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4f1e:	81 30       	cpi	r24, 0x01	; 1
    4f20:	11 f4       	brne	.+4      	; 0x4f26 <nrk_ext_int_disable+0x10>
    4f22:	e9 98       	cbi	0x1d, 1	; 29
    4f24:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4f26:	82 30       	cpi	r24, 0x02	; 2
    4f28:	11 f4       	brne	.+4      	; 0x4f2e <nrk_ext_int_disable+0x18>
    4f2a:	e9 98       	cbi	0x1d, 1	; 29
    4f2c:	31 c0       	rjmp	.+98     	; 0x4f90 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4f2e:	83 30       	cpi	r24, 0x03	; 3
    4f30:	21 f4       	brne	.+8      	; 0x4f3a <nrk_ext_int_disable+0x24>
    4f32:	80 91 6b 00 	lds	r24, 0x006B
    4f36:	8e 7f       	andi	r24, 0xFE	; 254
    4f38:	29 c0       	rjmp	.+82     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4f3a:	84 30       	cpi	r24, 0x04	; 4
    4f3c:	21 f4       	brne	.+8      	; 0x4f46 <nrk_ext_int_disable+0x30>
    4f3e:	80 91 6b 00 	lds	r24, 0x006B
    4f42:	8d 7f       	andi	r24, 0xFD	; 253
    4f44:	23 c0       	rjmp	.+70     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4f46:	85 30       	cpi	r24, 0x05	; 5
    4f48:	21 f4       	brne	.+8      	; 0x4f52 <nrk_ext_int_disable+0x3c>
    4f4a:	80 91 6b 00 	lds	r24, 0x006B
    4f4e:	8b 7f       	andi	r24, 0xFB	; 251
    4f50:	1d c0       	rjmp	.+58     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4f52:	86 30       	cpi	r24, 0x06	; 6
    4f54:	21 f4       	brne	.+8      	; 0x4f5e <nrk_ext_int_disable+0x48>
    4f56:	80 91 6b 00 	lds	r24, 0x006B
    4f5a:	87 7f       	andi	r24, 0xF7	; 247
    4f5c:	17 c0       	rjmp	.+46     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4f5e:	87 30       	cpi	r24, 0x07	; 7
    4f60:	21 f4       	brne	.+8      	; 0x4f6a <nrk_ext_int_disable+0x54>
    4f62:	80 91 6b 00 	lds	r24, 0x006B
    4f66:	8f 7e       	andi	r24, 0xEF	; 239
    4f68:	11 c0       	rjmp	.+34     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4f6a:	88 30       	cpi	r24, 0x08	; 8
    4f6c:	21 f4       	brne	.+8      	; 0x4f76 <nrk_ext_int_disable+0x60>
    4f6e:	80 91 6b 00 	lds	r24, 0x006B
    4f72:	8f 7d       	andi	r24, 0xDF	; 223
    4f74:	0b c0       	rjmp	.+22     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4f76:	89 30       	cpi	r24, 0x09	; 9
    4f78:	21 f4       	brne	.+8      	; 0x4f82 <nrk_ext_int_disable+0x6c>
    4f7a:	80 91 6b 00 	lds	r24, 0x006B
    4f7e:	8f 7b       	andi	r24, 0xBF	; 191
    4f80:	05 c0       	rjmp	.+10     	; 0x4f8c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4f82:	8a 30       	cpi	r24, 0x0A	; 10
    4f84:	39 f4       	brne	.+14     	; 0x4f94 <nrk_ext_int_disable+0x7e>
    4f86:	80 91 6b 00 	lds	r24, 0x006B
    4f8a:	8f 77       	andi	r24, 0x7F	; 127
    4f8c:	80 93 6b 00 	sts	0x006B, r24
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	08 95       	ret
return NRK_ERROR;
    4f94:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f96:	08 95       	ret

00004f98 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4f98:	81 11       	cpse	r24, r1
    4f9a:	26 c0       	rjmp	.+76     	; 0x4fe8 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4f9c:	50 93 2f 09 	sts	0x092F, r21
    4fa0:	40 93 2e 09 	sts	0x092E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4fa4:	61 11       	cpse	r22, r1
    4fa6:	04 c0       	rjmp	.+8      	; 0x4fb0 <nrk_ext_int_configure+0x18>
    4fa8:	80 91 69 00 	lds	r24, 0x0069
    4fac:	8c 7f       	andi	r24, 0xFC	; 252
    4fae:	3d c0       	rjmp	.+122    	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4fb0:	61 30       	cpi	r22, 0x01	; 1
    4fb2:	49 f4       	brne	.+18     	; 0x4fc6 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4fb4:	80 91 69 00 	lds	r24, 0x0069
    4fb8:	8d 7f       	andi	r24, 0xFD	; 253
    4fba:	80 93 69 00 	sts	0x0069, r24
    4fbe:	80 91 69 00 	lds	r24, 0x0069
    4fc2:	81 60       	ori	r24, 0x01	; 1
    4fc4:	32 c0       	rjmp	.+100    	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4fc6:	62 30       	cpi	r22, 0x02	; 2
    4fc8:	49 f4       	brne	.+18     	; 0x4fdc <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4fca:	80 91 69 00 	lds	r24, 0x0069
    4fce:	82 60       	ori	r24, 0x02	; 2
    4fd0:	80 93 69 00 	sts	0x0069, r24
    4fd4:	80 91 69 00 	lds	r24, 0x0069
    4fd8:	8e 7f       	andi	r24, 0xFE	; 254
    4fda:	27 c0       	rjmp	.+78     	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4fdc:	63 30       	cpi	r22, 0x03	; 3
    4fde:	39 f5       	brne	.+78     	; 0x502e <nrk_ext_int_configure+0x96>
    4fe0:	80 91 69 00 	lds	r24, 0x0069
    4fe4:	83 60       	ori	r24, 0x03	; 3
    4fe6:	21 c0       	rjmp	.+66     	; 0x502a <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4fe8:	81 30       	cpi	r24, 0x01	; 1
    4fea:	49 f5       	brne	.+82     	; 0x503e <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4fec:	50 93 2d 09 	sts	0x092D, r21
    4ff0:	40 93 2c 09 	sts	0x092C, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4ff4:	61 11       	cpse	r22, r1
    4ff6:	04 c0       	rjmp	.+8      	; 0x5000 <nrk_ext_int_configure+0x68>
    4ff8:	80 91 69 00 	lds	r24, 0x0069
    4ffc:	83 7f       	andi	r24, 0xF3	; 243
    4ffe:	15 c0       	rjmp	.+42     	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5000:	61 30       	cpi	r22, 0x01	; 1
    5002:	49 f4       	brne	.+18     	; 0x5016 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5004:	80 91 69 00 	lds	r24, 0x0069
    5008:	87 7f       	andi	r24, 0xF7	; 247
    500a:	80 93 69 00 	sts	0x0069, r24
    500e:	80 91 69 00 	lds	r24, 0x0069
    5012:	84 60       	ori	r24, 0x04	; 4
    5014:	0a c0       	rjmp	.+20     	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5016:	62 30       	cpi	r22, 0x02	; 2
    5018:	61 f4       	brne	.+24     	; 0x5032 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    501a:	80 91 69 00 	lds	r24, 0x0069
    501e:	88 60       	ori	r24, 0x08	; 8
    5020:	80 93 69 00 	sts	0x0069, r24
    5024:	80 91 69 00 	lds	r24, 0x0069
    5028:	8b 7f       	andi	r24, 0xFB	; 251
    502a:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5032:	63 30       	cpi	r22, 0x03	; 3
    5034:	e1 f7       	brne	.-8      	; 0x502e <nrk_ext_int_configure+0x96>
    5036:	80 91 69 00 	lds	r24, 0x0069
    503a:	8c 60       	ori	r24, 0x0C	; 12
    503c:	f6 cf       	rjmp	.-20     	; 0x502a <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    503e:	82 30       	cpi	r24, 0x02	; 2
    5040:	31 f5       	brne	.+76     	; 0x508e <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5042:	50 93 31 09 	sts	0x0931, r21
    5046:	40 93 30 09 	sts	0x0930, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    504a:	61 11       	cpse	r22, r1
    504c:	04 c0       	rjmp	.+8      	; 0x5056 <nrk_ext_int_configure+0xbe>
    504e:	80 91 69 00 	lds	r24, 0x0069
    5052:	8f 7c       	andi	r24, 0xCF	; 207
    5054:	ea cf       	rjmp	.-44     	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5056:	61 30       	cpi	r22, 0x01	; 1
    5058:	49 f4       	brne	.+18     	; 0x506c <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    505a:	80 91 69 00 	lds	r24, 0x0069
    505e:	8f 7d       	andi	r24, 0xDF	; 223
    5060:	80 93 69 00 	sts	0x0069, r24
    5064:	80 91 69 00 	lds	r24, 0x0069
    5068:	80 61       	ori	r24, 0x10	; 16
    506a:	df cf       	rjmp	.-66     	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    506c:	62 30       	cpi	r22, 0x02	; 2
    506e:	49 f4       	brne	.+18     	; 0x5082 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5070:	80 91 69 00 	lds	r24, 0x0069
    5074:	80 62       	ori	r24, 0x20	; 32
    5076:	80 93 69 00 	sts	0x0069, r24
    507a:	80 91 69 00 	lds	r24, 0x0069
    507e:	8f 7e       	andi	r24, 0xEF	; 239
    5080:	d4 cf       	rjmp	.-88     	; 0x502a <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5082:	63 30       	cpi	r22, 0x03	; 3
    5084:	a1 f6       	brne	.-88     	; 0x502e <nrk_ext_int_configure+0x96>
    5086:	80 91 69 00 	lds	r24, 0x0069
    508a:	80 63       	ori	r24, 0x30	; 48
    508c:	ce cf       	rjmp	.-100    	; 0x502a <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    508e:	83 50       	subi	r24, 0x03	; 3
    5090:	88 30       	cpi	r24, 0x08	; 8
    5092:	50 f4       	brcc	.+20     	; 0x50a8 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5094:	80 91 68 00 	lds	r24, 0x0068
    5098:	81 60       	ori	r24, 0x01	; 1
    509a:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    509e:	50 93 33 09 	sts	0x0933, r21
    50a2:	40 93 32 09 	sts	0x0932, r20
    50a6:	c3 cf       	rjmp	.-122    	; 0x502e <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    50a8:	8f ef       	ldi	r24, 0xFF	; 255
}
    50aa:	08 95       	ret

000050ac <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    50ac:	1f 92       	push	r1
    50ae:	0f 92       	push	r0
    50b0:	0f b6       	in	r0, 0x3f	; 63
    50b2:	0f 92       	push	r0
    50b4:	11 24       	eor	r1, r1
    50b6:	0b b6       	in	r0, 0x3b	; 59
    50b8:	0f 92       	push	r0
    50ba:	2f 93       	push	r18
    50bc:	3f 93       	push	r19
    50be:	4f 93       	push	r20
    50c0:	5f 93       	push	r21
    50c2:	6f 93       	push	r22
    50c4:	7f 93       	push	r23
    50c6:	8f 93       	push	r24
    50c8:	9f 93       	push	r25
    50ca:	af 93       	push	r26
    50cc:	bf 93       	push	r27
    50ce:	ef 93       	push	r30
    50d0:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    50d2:	e0 91 32 09 	lds	r30, 0x0932
    50d6:	f0 91 33 09 	lds	r31, 0x0933
    50da:	30 97       	sbiw	r30, 0x00	; 0
    50dc:	11 f0       	breq	.+4      	; 0x50e2 <__vector_9+0x36>
    50de:	09 95       	icall
    50e0:	04 c0       	rjmp	.+8      	; 0x50ea <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	8a e0       	ldi	r24, 0x0A	; 10
    50e6:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
	return;  	
}
    50ea:	ff 91       	pop	r31
    50ec:	ef 91       	pop	r30
    50ee:	bf 91       	pop	r27
    50f0:	af 91       	pop	r26
    50f2:	9f 91       	pop	r25
    50f4:	8f 91       	pop	r24
    50f6:	7f 91       	pop	r23
    50f8:	6f 91       	pop	r22
    50fa:	5f 91       	pop	r21
    50fc:	4f 91       	pop	r20
    50fe:	3f 91       	pop	r19
    5100:	2f 91       	pop	r18
    5102:	0f 90       	pop	r0
    5104:	0b be       	out	0x3b, r0	; 59
    5106:	0f 90       	pop	r0
    5108:	0f be       	out	0x3f, r0	; 63
    510a:	0f 90       	pop	r0
    510c:	1f 90       	pop	r1
    510e:	18 95       	reti

00005110 <__vector_1>:


SIGNAL(INT0_vect) {
    5110:	1f 92       	push	r1
    5112:	0f 92       	push	r0
    5114:	0f b6       	in	r0, 0x3f	; 63
    5116:	0f 92       	push	r0
    5118:	11 24       	eor	r1, r1
    511a:	0b b6       	in	r0, 0x3b	; 59
    511c:	0f 92       	push	r0
    511e:	2f 93       	push	r18
    5120:	3f 93       	push	r19
    5122:	4f 93       	push	r20
    5124:	5f 93       	push	r21
    5126:	6f 93       	push	r22
    5128:	7f 93       	push	r23
    512a:	8f 93       	push	r24
    512c:	9f 93       	push	r25
    512e:	af 93       	push	r26
    5130:	bf 93       	push	r27
    5132:	ef 93       	push	r30
    5134:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5136:	e0 91 2e 09 	lds	r30, 0x092E
    513a:	f0 91 2f 09 	lds	r31, 0x092F
    513e:	30 97       	sbiw	r30, 0x00	; 0
    5140:	11 f0       	breq	.+4      	; 0x5146 <__vector_1+0x36>
    5142:	09 95       	icall
    5144:	04 c0       	rjmp	.+8      	; 0x514e <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5146:	60 e0       	ldi	r22, 0x00	; 0
    5148:	8a e0       	ldi	r24, 0x0A	; 10
    514a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
	return;  	
}
    514e:	ff 91       	pop	r31
    5150:	ef 91       	pop	r30
    5152:	bf 91       	pop	r27
    5154:	af 91       	pop	r26
    5156:	9f 91       	pop	r25
    5158:	8f 91       	pop	r24
    515a:	7f 91       	pop	r23
    515c:	6f 91       	pop	r22
    515e:	5f 91       	pop	r21
    5160:	4f 91       	pop	r20
    5162:	3f 91       	pop	r19
    5164:	2f 91       	pop	r18
    5166:	0f 90       	pop	r0
    5168:	0b be       	out	0x3b, r0	; 59
    516a:	0f 90       	pop	r0
    516c:	0f be       	out	0x3f, r0	; 63
    516e:	0f 90       	pop	r0
    5170:	1f 90       	pop	r1
    5172:	18 95       	reti

00005174 <__vector_2>:

SIGNAL(INT1_vect) {
    5174:	1f 92       	push	r1
    5176:	0f 92       	push	r0
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	0f 92       	push	r0
    517c:	11 24       	eor	r1, r1
    517e:	0b b6       	in	r0, 0x3b	; 59
    5180:	0f 92       	push	r0
    5182:	2f 93       	push	r18
    5184:	3f 93       	push	r19
    5186:	4f 93       	push	r20
    5188:	5f 93       	push	r21
    518a:	6f 93       	push	r22
    518c:	7f 93       	push	r23
    518e:	8f 93       	push	r24
    5190:	9f 93       	push	r25
    5192:	af 93       	push	r26
    5194:	bf 93       	push	r27
    5196:	ef 93       	push	r30
    5198:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    519a:	e0 91 2c 09 	lds	r30, 0x092C
    519e:	f0 91 2d 09 	lds	r31, 0x092D
    51a2:	30 97       	sbiw	r30, 0x00	; 0
    51a4:	11 f0       	breq	.+4      	; 0x51aa <__vector_2+0x36>
    51a6:	09 95       	icall
    51a8:	04 c0       	rjmp	.+8      	; 0x51b2 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    51aa:	60 e0       	ldi	r22, 0x00	; 0
    51ac:	8a e0       	ldi	r24, 0x0A	; 10
    51ae:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
	return;  	
}
    51b2:	ff 91       	pop	r31
    51b4:	ef 91       	pop	r30
    51b6:	bf 91       	pop	r27
    51b8:	af 91       	pop	r26
    51ba:	9f 91       	pop	r25
    51bc:	8f 91       	pop	r24
    51be:	7f 91       	pop	r23
    51c0:	6f 91       	pop	r22
    51c2:	5f 91       	pop	r21
    51c4:	4f 91       	pop	r20
    51c6:	3f 91       	pop	r19
    51c8:	2f 91       	pop	r18
    51ca:	0f 90       	pop	r0
    51cc:	0b be       	out	0x3b, r0	; 59
    51ce:	0f 90       	pop	r0
    51d0:	0f be       	out	0x3f, r0	; 63
    51d2:	0f 90       	pop	r0
    51d4:	1f 90       	pop	r1
    51d6:	18 95       	reti

000051d8 <__vector_3>:

SIGNAL(INT2_vect) {
    51d8:	1f 92       	push	r1
    51da:	0f 92       	push	r0
    51dc:	0f b6       	in	r0, 0x3f	; 63
    51de:	0f 92       	push	r0
    51e0:	11 24       	eor	r1, r1
    51e2:	0b b6       	in	r0, 0x3b	; 59
    51e4:	0f 92       	push	r0
    51e6:	2f 93       	push	r18
    51e8:	3f 93       	push	r19
    51ea:	4f 93       	push	r20
    51ec:	5f 93       	push	r21
    51ee:	6f 93       	push	r22
    51f0:	7f 93       	push	r23
    51f2:	8f 93       	push	r24
    51f4:	9f 93       	push	r25
    51f6:	af 93       	push	r26
    51f8:	bf 93       	push	r27
    51fa:	ef 93       	push	r30
    51fc:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    51fe:	e0 91 30 09 	lds	r30, 0x0930
    5202:	f0 91 31 09 	lds	r31, 0x0931
    5206:	30 97       	sbiw	r30, 0x00	; 0
    5208:	11 f0       	breq	.+4      	; 0x520e <__vector_3+0x36>
    520a:	09 95       	icall
    520c:	04 c0       	rjmp	.+8      	; 0x5216 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    520e:	60 e0       	ldi	r22, 0x00	; 0
    5210:	8a e0       	ldi	r24, 0x0A	; 10
    5212:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <nrk_kernel_error_add>
	return;  	
}
    5216:	ff 91       	pop	r31
    5218:	ef 91       	pop	r30
    521a:	bf 91       	pop	r27
    521c:	af 91       	pop	r26
    521e:	9f 91       	pop	r25
    5220:	8f 91       	pop	r24
    5222:	7f 91       	pop	r23
    5224:	6f 91       	pop	r22
    5226:	5f 91       	pop	r21
    5228:	4f 91       	pop	r20
    522a:	3f 91       	pop	r19
    522c:	2f 91       	pop	r18
    522e:	0f 90       	pop	r0
    5230:	0b be       	out	0x3b, r0	; 59
    5232:	0f 90       	pop	r0
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	0f 90       	pop	r0
    5238:	1f 90       	pop	r1
    523a:	18 95       	reti

0000523c <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    523c:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5240:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5242:	84 b7       	in	r24, 0x34	; 52
    5244:	87 7f       	andi	r24, 0xF7	; 247
    5246:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5248:	e0 e6       	ldi	r30, 0x60	; 96
    524a:	f0 e0       	ldi	r31, 0x00	; 0
    524c:	80 81       	ld	r24, Z
    524e:	88 61       	ori	r24, 0x18	; 24
    5250:	80 83       	st	Z, r24
WDTCSR = 0;
    5252:	10 82       	st	Z, r1
nrk_int_enable();
    5254:	0c 94 95 14 	jmp	0x292a	; 0x292a <nrk_int_enable>

00005258 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    5258:	0e 94 93 14 	call	0x2926	; 0x2926 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    525c:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    525e:	84 b7       	in	r24, 0x34	; 52
    5260:	87 7f       	andi	r24, 0xF7	; 247
    5262:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5264:	e0 e6       	ldi	r30, 0x60	; 96
    5266:	f0 e0       	ldi	r31, 0x00	; 0
    5268:	80 81       	ld	r24, Z
    526a:	88 61       	ori	r24, 0x18	; 24
    526c:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    526e:	8d e0       	ldi	r24, 0x0D	; 13
    5270:	80 83       	st	Z, r24
nrk_int_enable();
    5272:	0c 94 95 14 	jmp	0x292a	; 0x292a <nrk_int_enable>

00005276 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5276:	04 b6       	in	r0, 0x34	; 52
    5278:	03 fe       	sbrs	r0, 3
    527a:	02 c0       	rjmp	.+4      	; 0x5280 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    527c:	8f ef       	ldi	r24, 0xFF	; 255
    527e:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5280:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5282:	08 95       	ret

00005284 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5284:	a8 95       	wdr
    5286:	08 95       	ret

00005288 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5288:	08 95       	ret

0000528a <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    528a:	83 b7       	in	r24, 0x33	; 51
    528c:	81 7f       	andi	r24, 0xF1	; 241
    528e:	86 60       	ori	r24, 0x06	; 6
    5290:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5292:	83 b7       	in	r24, 0x33	; 51
    5294:	81 60       	ori	r24, 0x01	; 1
    5296:	83 bf       	out	0x33, r24	; 51
    5298:	88 95       	sleep
    529a:	83 b7       	in	r24, 0x33	; 51
    529c:	8e 7f       	andi	r24, 0xFE	; 254
    529e:	83 bf       	out	0x33, r24	; 51
    52a0:	08 95       	ret

000052a2 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    52a2:	83 b7       	in	r24, 0x33	; 51
    52a4:	81 7f       	andi	r24, 0xF1	; 241
    52a6:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    52a8:	83 b7       	in	r24, 0x33	; 51
    52aa:	81 60       	ori	r24, 0x01	; 1
    52ac:	83 bf       	out	0x33, r24	; 51
    52ae:	88 95       	sleep
    52b0:	83 b7       	in	r24, 0x33	; 51
    52b2:	8e 7f       	andi	r24, 0xFE	; 254
    52b4:	83 bf       	out	0x33, r24	; 51
    52b6:	08 95       	ret

000052b8 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    52b8:	fc 01       	movw	r30, r24
    52ba:	76 83       	std	Z+6, r23	; 0x06
    52bc:	65 83       	std	Z+5, r22	; 0x05
    52be:	08 95       	ret

000052c0 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    52c0:	ef 92       	push	r14
    52c2:	ff 92       	push	r15
    52c4:	0f 93       	push	r16
    52c6:	1f 93       	push	r17
    52c8:	cf 93       	push	r28
    52ca:	df 93       	push	r29
    52cc:	8c 01       	movw	r16, r24
    52ce:	7b 01       	movw	r14, r22
    52d0:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    52d2:	40 32       	cpi	r20, 0x20	; 32
    52d4:	51 05       	cpc	r21, r1
    52d6:	18 f4       	brcc	.+6      	; 0x52de <nrk_task_set_stk+0x1e>
    52d8:	81 e1       	ldi	r24, 0x11	; 17
    52da:	0e 94 00 17 	call	0x2e00	; 0x2e00 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    52de:	21 97       	sbiw	r28, 0x01	; 1
    52e0:	ce 0d       	add	r28, r14
    52e2:	df 1d       	adc	r29, r15
    52e4:	f8 01       	movw	r30, r16
    52e6:	d2 83       	std	Z+2, r29	; 0x02
    52e8:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    52ea:	f4 82       	std	Z+4, r15	; 0x04
    52ec:	e3 82       	std	Z+3, r14	; 0x03

}
    52ee:	df 91       	pop	r29
    52f0:	cf 91       	pop	r28
    52f2:	1f 91       	pop	r17
    52f4:	0f 91       	pop	r16
    52f6:	ff 90       	pop	r15
    52f8:	ef 90       	pop	r14
    52fa:	08 95       	ret

000052fc <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    52fc:	25 e5       	ldi	r18, 0x55	; 85
    52fe:	fa 01       	movw	r30, r20
    5300:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5302:	fb 01       	movw	r30, r22
    5304:	32 97       	sbiw	r30, 0x02	; 2
    5306:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5308:	31 96       	adiw	r30, 0x01	; 1
    530a:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    530c:	33 97       	sbiw	r30, 0x03	; 3
    530e:	11 82       	std	Z+1, r1	; 0x01
    5310:	10 82       	st	Z, r1
    *(--stk) = 0;       
    5312:	32 97       	sbiw	r30, 0x02	; 2
    5314:	11 82       	std	Z+1, r1	; 0x01
    5316:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5318:	32 97       	sbiw	r30, 0x02	; 2
    531a:	11 82       	std	Z+1, r1	; 0x01
    531c:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    531e:	32 97       	sbiw	r30, 0x02	; 2
    5320:	11 82       	std	Z+1, r1	; 0x01
    5322:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5324:	32 97       	sbiw	r30, 0x02	; 2
    5326:	11 82       	std	Z+1, r1	; 0x01
    5328:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    532a:	32 97       	sbiw	r30, 0x02	; 2
    532c:	11 82       	std	Z+1, r1	; 0x01
    532e:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5330:	32 97       	sbiw	r30, 0x02	; 2
    5332:	11 82       	std	Z+1, r1	; 0x01
    5334:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5336:	32 97       	sbiw	r30, 0x02	; 2
    5338:	11 82       	std	Z+1, r1	; 0x01
    533a:	10 82       	st	Z, r1

    *(--stk) = 0; 
    533c:	32 97       	sbiw	r30, 0x02	; 2
    533e:	11 82       	std	Z+1, r1	; 0x01
    5340:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5342:	32 97       	sbiw	r30, 0x02	; 2
    5344:	11 82       	std	Z+1, r1	; 0x01
    5346:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5348:	32 97       	sbiw	r30, 0x02	; 2
    534a:	11 82       	std	Z+1, r1	; 0x01
    534c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    534e:	32 97       	sbiw	r30, 0x02	; 2
    5350:	11 82       	std	Z+1, r1	; 0x01
    5352:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5354:	32 97       	sbiw	r30, 0x02	; 2
    5356:	11 82       	std	Z+1, r1	; 0x01
    5358:	10 82       	st	Z, r1
    *(--stk) = 0; 
    535a:	32 97       	sbiw	r30, 0x02	; 2
    535c:	11 82       	std	Z+1, r1	; 0x01
    535e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5360:	32 97       	sbiw	r30, 0x02	; 2
    5362:	11 82       	std	Z+1, r1	; 0x01
    5364:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5366:	32 97       	sbiw	r30, 0x02	; 2
    5368:	11 82       	std	Z+1, r1	; 0x01
    536a:	10 82       	st	Z, r1
    *(--stk) = 0;
    536c:	cb 01       	movw	r24, r22
    536e:	84 97       	sbiw	r24, 0x24	; 36
    5370:	fc 01       	movw	r30, r24
    5372:	11 82       	std	Z+1, r1	; 0x01
    5374:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5376:	08 95       	ret

00005378 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5378:	85 e5       	ldi	r24, 0x55	; 85
    537a:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    537e:	ee ef       	ldi	r30, 0xFE	; 254
    5380:	f1 e4       	ldi	r31, 0x41	; 65
    5382:	f0 93 74 05 	sts	0x0574, r31
    5386:	e0 93 73 05 	sts	0x0573, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    538a:	88 e5       	ldi	r24, 0x58	; 88
    538c:	96 e1       	ldi	r25, 0x16	; 22
    538e:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5390:	80 93 ff 41 	sts	0x41FF, r24
    5394:	08 95       	ret

00005396 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5396:	88 e5       	ldi	r24, 0x58	; 88
    5398:	96 e1       	ldi	r25, 0x16	; 22
    539a:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    539e:	80 93 ff 41 	sts	0x41FF, r24
    53a2:	08 95       	ret

000053a4 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    53a4:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_nrk_setup_timer>
  nrk_int_enable();  
    53a8:	0c 94 95 14 	jmp	0x292a	; 0x292a <nrk_int_enable>

000053ac <nrk_start_high_ready_task>:
    53ac:	a0 91 fa 08 	lds	r26, 0x08FA
    53b0:	b0 91 fb 08 	lds	r27, 0x08FB
    53b4:	cd 91       	ld	r28, X+
    53b6:	cd bf       	out	0x3d, r28	; 61
    53b8:	dd 91       	ld	r29, X+
    53ba:	de bf       	out	0x3e, r29	; 62
    53bc:	ff 91       	pop	r31
    53be:	ef 91       	pop	r30
    53c0:	df 91       	pop	r29
    53c2:	cf 91       	pop	r28
    53c4:	bf 91       	pop	r27
    53c6:	af 91       	pop	r26
    53c8:	9f 91       	pop	r25
    53ca:	8f 91       	pop	r24
    53cc:	7f 91       	pop	r23
    53ce:	6f 91       	pop	r22
    53d0:	5f 91       	pop	r21
    53d2:	4f 91       	pop	r20
    53d4:	3f 91       	pop	r19
    53d6:	2f 91       	pop	r18
    53d8:	1f 91       	pop	r17
    53da:	0f 91       	pop	r16
    53dc:	ff 90       	pop	r15
    53de:	ef 90       	pop	r14
    53e0:	df 90       	pop	r13
    53e2:	cf 90       	pop	r12
    53e4:	bf 90       	pop	r11
    53e6:	af 90       	pop	r10
    53e8:	9f 90       	pop	r9
    53ea:	8f 90       	pop	r8
    53ec:	7f 90       	pop	r7
    53ee:	6f 90       	pop	r6
    53f0:	5f 90       	pop	r5
    53f2:	4f 90       	pop	r4
    53f4:	3f 90       	pop	r3
    53f6:	2f 90       	pop	r2
    53f8:	1f 90       	pop	r1
    53fa:	0f 90       	pop	r0
    53fc:	0f be       	out	0x3f, r0	; 63
    53fe:	0f 90       	pop	r0
    5400:	18 95       	reti

00005402 <time>:
    5402:	fc 01       	movw	r30, r24
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	60 91 3e 09 	lds	r22, 0x093E
    540c:	70 91 3f 09 	lds	r23, 0x093F
    5410:	80 91 40 09 	lds	r24, 0x0940
    5414:	90 91 41 09 	lds	r25, 0x0941
    5418:	0f be       	out	0x3f, r0	; 63
    541a:	30 97       	sbiw	r30, 0x00	; 0
    541c:	21 f0       	breq	.+8      	; 0x5426 <time+0x24>
    541e:	60 83       	st	Z, r22
    5420:	71 83       	std	Z+1, r23	; 0x01
    5422:	82 83       	std	Z+2, r24	; 0x02
    5424:	93 83       	std	Z+3, r25	; 0x03
    5426:	08 95       	ret

00005428 <main>:

void nrk_register_drivers();

int main ()
{
    nrk_setup_ports ();
    5428:	0e 94 3e 10 	call	0x207c	; 0x207c <nrk_setup_ports>
    nrk_setup_uart (UART_BAUDRATE_115K2);
    542c:	80 e1       	ldi	r24, 0x10	; 16
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	0e 94 b4 13 	call	0x2768	; 0x2768 <nrk_setup_uart>
    
    nrk_init ();
    5434:	0e 94 9a 14 	call	0x2934	; 0x2934 <nrk_init>
    
    nrk_led_clr (0);
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
    nrk_led_clr (1);
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
    nrk_led_clr (2);
    5448:	82 e0       	ldi	r24, 0x02	; 2
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
    nrk_led_clr (3);
    5450:	83 e0       	ldi	r24, 0x03	; 3
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	0e 94 4b 13 	call	0x2696	; 0x2696 <nrk_led_clr>
    
    nrk_time_set (0, 0);
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	a9 01       	movw	r20, r18
    545e:	60 e0       	ldi	r22, 0x00	; 0
    5460:	70 e0       	ldi	r23, 0x00	; 0
    5462:	cb 01       	movw	r24, r22
    5464:	0e 94 68 20 	call	0x40d0	; 0x40d0 <nrk_time_set>
    
    bmac_task_config ();
    5468:	0e 94 9d 09 	call	0x133a	; 0x133a <bmac_task_config>
    
    nrk_create_taskset ();
    546c:	0e 94 02 06 	call	0xc04	; 0xc04 <nrk_create_taskset>
    nrk_start ();
    5470:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_start>
    
    return 0;
}
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	08 95       	ret

0000547a <vfprintf>:
    547a:	6f 92       	push	r6
    547c:	7f 92       	push	r7
    547e:	8f 92       	push	r8
    5480:	9f 92       	push	r9
    5482:	af 92       	push	r10
    5484:	bf 92       	push	r11
    5486:	cf 92       	push	r12
    5488:	df 92       	push	r13
    548a:	ef 92       	push	r14
    548c:	ff 92       	push	r15
    548e:	0f 93       	push	r16
    5490:	1f 93       	push	r17
    5492:	cf 93       	push	r28
    5494:	df 93       	push	r29
    5496:	cd b7       	in	r28, 0x3d	; 61
    5498:	de b7       	in	r29, 0x3e	; 62
    549a:	2c 97       	sbiw	r28, 0x0c	; 12
    549c:	0f b6       	in	r0, 0x3f	; 63
    549e:	f8 94       	cli
    54a0:	de bf       	out	0x3e, r29	; 62
    54a2:	0f be       	out	0x3f, r0	; 63
    54a4:	cd bf       	out	0x3d, r28	; 61
    54a6:	6c 01       	movw	r12, r24
    54a8:	5b 01       	movw	r10, r22
    54aa:	7a 01       	movw	r14, r20
    54ac:	fc 01       	movw	r30, r24
    54ae:	17 82       	std	Z+7, r1	; 0x07
    54b0:	16 82       	std	Z+6, r1	; 0x06
    54b2:	83 81       	ldd	r24, Z+3	; 0x03
    54b4:	81 ff       	sbrs	r24, 1
    54b6:	0e c1       	rjmp	.+540    	; 0x56d4 <vfprintf+0x25a>
    54b8:	ce 01       	movw	r24, r28
    54ba:	01 96       	adiw	r24, 0x01	; 1
    54bc:	4c 01       	movw	r8, r24
    54be:	f6 01       	movw	r30, r12
    54c0:	03 81       	ldd	r16, Z+3	; 0x03
    54c2:	f5 01       	movw	r30, r10
    54c4:	03 fd       	sbrc	r16, 3
    54c6:	15 91       	lpm	r17, Z+
    54c8:	03 ff       	sbrs	r16, 3
    54ca:	11 91       	ld	r17, Z+
    54cc:	5f 01       	movw	r10, r30
    54ce:	11 23       	and	r17, r17
    54d0:	09 f4       	brne	.+2      	; 0x54d4 <vfprintf+0x5a>
    54d2:	fc c0       	rjmp	.+504    	; 0x56cc <vfprintf+0x252>
    54d4:	15 32       	cpi	r17, 0x25	; 37
    54d6:	49 f4       	brne	.+18     	; 0x54ea <vfprintf+0x70>
    54d8:	03 fd       	sbrc	r16, 3
    54da:	15 91       	lpm	r17, Z+
    54dc:	03 ff       	sbrs	r16, 3
    54de:	11 91       	ld	r17, Z+
    54e0:	5f 01       	movw	r10, r30
    54e2:	15 32       	cpi	r17, 0x25	; 37
    54e4:	11 f0       	breq	.+4      	; 0x54ea <vfprintf+0x70>
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	1b c0       	rjmp	.+54     	; 0x5520 <vfprintf+0xa6>
    54ea:	b6 01       	movw	r22, r12
    54ec:	81 2f       	mov	r24, r17
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    54f4:	37 01       	movw	r6, r14
    54f6:	73 01       	movw	r14, r6
    54f8:	e2 cf       	rjmp	.-60     	; 0x54be <vfprintf+0x44>
    54fa:	11 23       	and	r17, r17
    54fc:	09 f4       	brne	.+2      	; 0x5500 <vfprintf+0x86>
    54fe:	e6 c0       	rjmp	.+460    	; 0x56cc <vfprintf+0x252>
    5500:	61 2f       	mov	r22, r17
    5502:	70 e0       	ldi	r23, 0x00	; 0
    5504:	83 ef       	ldi	r24, 0xF3	; 243
    5506:	95 e0       	ldi	r25, 0x05	; 5
    5508:	2c 87       	std	Y+12, r18	; 0x0c
    550a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strchr_P>
    550e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5510:	89 2b       	or	r24, r25
    5512:	49 f0       	breq	.+18     	; 0x5526 <vfprintf+0xac>
    5514:	f5 01       	movw	r30, r10
    5516:	03 fd       	sbrc	r16, 3
    5518:	15 91       	lpm	r17, Z+
    551a:	03 ff       	sbrs	r16, 3
    551c:	11 91       	ld	r17, Z+
    551e:	5f 01       	movw	r10, r30
    5520:	27 ff       	sbrs	r18, 7
    5522:	eb cf       	rjmp	.-42     	; 0x54fa <vfprintf+0x80>
    5524:	09 c0       	rjmp	.+18     	; 0x5538 <vfprintf+0xbe>
    5526:	13 32       	cpi	r17, 0x23	; 35
    5528:	29 f0       	breq	.+10     	; 0x5534 <vfprintf+0xba>
    552a:	1c 36       	cpi	r17, 0x6C	; 108
    552c:	09 f0       	breq	.+2      	; 0x5530 <vfprintf+0xb6>
    552e:	d5 c0       	rjmp	.+426    	; 0x56da <vfprintf+0x260>
    5530:	20 68       	ori	r18, 0x80	; 128
    5532:	f0 cf       	rjmp	.-32     	; 0x5514 <vfprintf+0x9a>
    5534:	20 e1       	ldi	r18, 0x10	; 16
    5536:	ee cf       	rjmp	.-36     	; 0x5514 <vfprintf+0x9a>
    5538:	02 2f       	mov	r16, r18
    553a:	11 23       	and	r17, r17
    553c:	09 f4       	brne	.+2      	; 0x5540 <vfprintf+0xc6>
    553e:	c6 c0       	rjmp	.+396    	; 0x56cc <vfprintf+0x252>
    5540:	61 2f       	mov	r22, r17
    5542:	70 e0       	ldi	r23, 0x00	; 0
    5544:	8c ee       	ldi	r24, 0xEC	; 236
    5546:	95 e0       	ldi	r25, 0x05	; 5
    5548:	2c 87       	std	Y+12, r18	; 0x0c
    554a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <strchr_P>
    554e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5550:	89 2b       	or	r24, r25
    5552:	41 f0       	breq	.+16     	; 0x5564 <vfprintf+0xea>
    5554:	37 01       	movw	r6, r14
    5556:	f4 e0       	ldi	r31, 0x04	; 4
    5558:	6f 0e       	add	r6, r31
    555a:	71 1c       	adc	r7, r1
    555c:	b6 01       	movw	r22, r12
    555e:	8f e3       	ldi	r24, 0x3F	; 63
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	11 c0       	rjmp	.+34     	; 0x5586 <vfprintf+0x10c>
    5564:	13 36       	cpi	r17, 0x63	; 99
    5566:	39 f0       	breq	.+14     	; 0x5576 <vfprintf+0xfc>
    5568:	13 37       	cpi	r17, 0x73	; 115
    556a:	81 f0       	breq	.+32     	; 0x558c <vfprintf+0x112>
    556c:	13 35       	cpi	r17, 0x53	; 83
    556e:	19 f5       	brne	.+70     	; 0x55b6 <vfprintf+0x13c>
    5570:	02 2f       	mov	r16, r18
    5572:	01 60       	ori	r16, 0x01	; 1
    5574:	0b c0       	rjmp	.+22     	; 0x558c <vfprintf+0x112>
    5576:	37 01       	movw	r6, r14
    5578:	82 e0       	ldi	r24, 0x02	; 2
    557a:	68 0e       	add	r6, r24
    557c:	71 1c       	adc	r7, r1
    557e:	b6 01       	movw	r22, r12
    5580:	f7 01       	movw	r30, r14
    5582:	80 81       	ld	r24, Z
    5584:	91 81       	ldd	r25, Z+1	; 0x01
    5586:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    558a:	b5 cf       	rjmp	.-150    	; 0x54f6 <vfprintf+0x7c>
    558c:	37 01       	movw	r6, r14
    558e:	f2 e0       	ldi	r31, 0x02	; 2
    5590:	6f 0e       	add	r6, r31
    5592:	71 1c       	adc	r7, r1
    5594:	f7 01       	movw	r30, r14
    5596:	e0 80       	ld	r14, Z
    5598:	f1 80       	ldd	r15, Z+1	; 0x01
    559a:	f7 01       	movw	r30, r14
    559c:	00 fd       	sbrc	r16, 0
    559e:	85 91       	lpm	r24, Z+
    55a0:	00 ff       	sbrs	r16, 0
    55a2:	81 91       	ld	r24, Z+
    55a4:	7f 01       	movw	r14, r30
    55a6:	88 23       	and	r24, r24
    55a8:	09 f4       	brne	.+2      	; 0x55ac <vfprintf+0x132>
    55aa:	a5 cf       	rjmp	.-182    	; 0x54f6 <vfprintf+0x7c>
    55ac:	b6 01       	movw	r22, r12
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    55b4:	f2 cf       	rjmp	.-28     	; 0x559a <vfprintf+0x120>
    55b6:	14 36       	cpi	r17, 0x64	; 100
    55b8:	11 f0       	breq	.+4      	; 0x55be <vfprintf+0x144>
    55ba:	19 36       	cpi	r17, 0x69	; 105
    55bc:	29 f5       	brne	.+74     	; 0x5608 <vfprintf+0x18e>
    55be:	37 01       	movw	r6, r14
    55c0:	27 ff       	sbrs	r18, 7
    55c2:	09 c0       	rjmp	.+18     	; 0x55d6 <vfprintf+0x15c>
    55c4:	f4 e0       	ldi	r31, 0x04	; 4
    55c6:	6f 0e       	add	r6, r31
    55c8:	71 1c       	adc	r7, r1
    55ca:	f7 01       	movw	r30, r14
    55cc:	60 81       	ld	r22, Z
    55ce:	71 81       	ldd	r23, Z+1	; 0x01
    55d0:	82 81       	ldd	r24, Z+2	; 0x02
    55d2:	93 81       	ldd	r25, Z+3	; 0x03
    55d4:	0a c0       	rjmp	.+20     	; 0x55ea <vfprintf+0x170>
    55d6:	f2 e0       	ldi	r31, 0x02	; 2
    55d8:	6f 0e       	add	r6, r31
    55da:	71 1c       	adc	r7, r1
    55dc:	f7 01       	movw	r30, r14
    55de:	60 81       	ld	r22, Z
    55e0:	71 81       	ldd	r23, Z+1	; 0x01
    55e2:	88 27       	eor	r24, r24
    55e4:	77 fd       	sbrc	r23, 7
    55e6:	80 95       	com	r24
    55e8:	98 2f       	mov	r25, r24
    55ea:	02 2f       	mov	r16, r18
    55ec:	0f 7e       	andi	r16, 0xEF	; 239
    55ee:	97 ff       	sbrs	r25, 7
    55f0:	08 c0       	rjmp	.+16     	; 0x5602 <vfprintf+0x188>
    55f2:	90 95       	com	r25
    55f4:	80 95       	com	r24
    55f6:	70 95       	com	r23
    55f8:	61 95       	neg	r22
    55fa:	7f 4f       	sbci	r23, 0xFF	; 255
    55fc:	8f 4f       	sbci	r24, 0xFF	; 255
    55fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5600:	00 64       	ori	r16, 0x40	; 64
    5602:	2a e0       	ldi	r18, 0x0A	; 10
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	33 c0       	rjmp	.+102    	; 0x566e <vfprintf+0x1f4>
    5608:	10 37       	cpi	r17, 0x70	; 112
    560a:	99 f0       	breq	.+38     	; 0x5632 <vfprintf+0x1b8>
    560c:	40 f4       	brcc	.+16     	; 0x561e <vfprintf+0x1a4>
    560e:	18 35       	cpi	r17, 0x58	; 88
    5610:	b1 f0       	breq	.+44     	; 0x563e <vfprintf+0x1c4>
    5612:	1f 36       	cpi	r17, 0x6F	; 111
    5614:	09 f0       	breq	.+2      	; 0x5618 <vfprintf+0x19e>
    5616:	5a c0       	rjmp	.+180    	; 0x56cc <vfprintf+0x252>
    5618:	28 e0       	ldi	r18, 0x08	; 8
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	14 c0       	rjmp	.+40     	; 0x5646 <vfprintf+0x1cc>
    561e:	15 37       	cpi	r17, 0x75	; 117
    5620:	19 f0       	breq	.+6      	; 0x5628 <vfprintf+0x1ae>
    5622:	18 37       	cpi	r17, 0x78	; 120
    5624:	41 f0       	breq	.+16     	; 0x5636 <vfprintf+0x1bc>
    5626:	52 c0       	rjmp	.+164    	; 0x56cc <vfprintf+0x252>
    5628:	02 2f       	mov	r16, r18
    562a:	0f 7e       	andi	r16, 0xEF	; 239
    562c:	2a e0       	ldi	r18, 0x0A	; 10
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	0a c0       	rjmp	.+20     	; 0x5646 <vfprintf+0x1cc>
    5632:	02 2f       	mov	r16, r18
    5634:	00 61       	ori	r16, 0x10	; 16
    5636:	04 62       	ori	r16, 0x24	; 36
    5638:	20 e1       	ldi	r18, 0x10	; 16
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	04 c0       	rjmp	.+8      	; 0x5646 <vfprintf+0x1cc>
    563e:	02 2f       	mov	r16, r18
    5640:	04 60       	ori	r16, 0x04	; 4
    5642:	20 e1       	ldi	r18, 0x10	; 16
    5644:	32 e0       	ldi	r19, 0x02	; 2
    5646:	37 01       	movw	r6, r14
    5648:	07 ff       	sbrs	r16, 7
    564a:	09 c0       	rjmp	.+18     	; 0x565e <vfprintf+0x1e4>
    564c:	f4 e0       	ldi	r31, 0x04	; 4
    564e:	6f 0e       	add	r6, r31
    5650:	71 1c       	adc	r7, r1
    5652:	f7 01       	movw	r30, r14
    5654:	60 81       	ld	r22, Z
    5656:	71 81       	ldd	r23, Z+1	; 0x01
    5658:	82 81       	ldd	r24, Z+2	; 0x02
    565a:	93 81       	ldd	r25, Z+3	; 0x03
    565c:	08 c0       	rjmp	.+16     	; 0x566e <vfprintf+0x1f4>
    565e:	f2 e0       	ldi	r31, 0x02	; 2
    5660:	6f 0e       	add	r6, r31
    5662:	71 1c       	adc	r7, r1
    5664:	f7 01       	movw	r30, r14
    5666:	60 81       	ld	r22, Z
    5668:	71 81       	ldd	r23, Z+1	; 0x01
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	a4 01       	movw	r20, r8
    5670:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <__ultoa_invert>
    5674:	18 2f       	mov	r17, r24
    5676:	18 19       	sub	r17, r8
    5678:	06 ff       	sbrs	r16, 6
    567a:	05 c0       	rjmp	.+10     	; 0x5686 <vfprintf+0x20c>
    567c:	b6 01       	movw	r22, r12
    567e:	8d e2       	ldi	r24, 0x2D	; 45
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    5686:	04 ff       	sbrs	r16, 4
    5688:	15 c0       	rjmp	.+42     	; 0x56b4 <vfprintf+0x23a>
    568a:	fe 01       	movw	r30, r28
    568c:	e1 0f       	add	r30, r17
    568e:	f1 1d       	adc	r31, r1
    5690:	80 81       	ld	r24, Z
    5692:	80 33       	cpi	r24, 0x30	; 48
    5694:	79 f0       	breq	.+30     	; 0x56b4 <vfprintf+0x23a>
    5696:	b6 01       	movw	r22, r12
    5698:	80 e3       	ldi	r24, 0x30	; 48
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    56a0:	02 ff       	sbrs	r16, 2
    56a2:	08 c0       	rjmp	.+16     	; 0x56b4 <vfprintf+0x23a>
    56a4:	00 72       	andi	r16, 0x20	; 32
    56a6:	80 2f       	mov	r24, r16
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	b6 01       	movw	r22, r12
    56ac:	88 5a       	subi	r24, 0xA8	; 168
    56ae:	9f 4f       	sbci	r25, 0xFF	; 255
    56b0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    56b4:	11 50       	subi	r17, 0x01	; 1
    56b6:	f4 01       	movw	r30, r8
    56b8:	e1 0f       	add	r30, r17
    56ba:	f1 1d       	adc	r31, r1
    56bc:	80 81       	ld	r24, Z
    56be:	b6 01       	movw	r22, r12
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <fputc>
    56c6:	11 11       	cpse	r17, r1
    56c8:	f5 cf       	rjmp	.-22     	; 0x56b4 <vfprintf+0x23a>
    56ca:	15 cf       	rjmp	.-470    	; 0x54f6 <vfprintf+0x7c>
    56cc:	f6 01       	movw	r30, r12
    56ce:	86 81       	ldd	r24, Z+6	; 0x06
    56d0:	97 81       	ldd	r25, Z+7	; 0x07
    56d2:	05 c0       	rjmp	.+10     	; 0x56de <vfprintf+0x264>
    56d4:	8f ef       	ldi	r24, 0xFF	; 255
    56d6:	9f ef       	ldi	r25, 0xFF	; 255
    56d8:	02 c0       	rjmp	.+4      	; 0x56de <vfprintf+0x264>
    56da:	02 2f       	mov	r16, r18
    56dc:	31 cf       	rjmp	.-414    	; 0x5540 <vfprintf+0xc6>
    56de:	2c 96       	adiw	r28, 0x0c	; 12
    56e0:	0f b6       	in	r0, 0x3f	; 63
    56e2:	f8 94       	cli
    56e4:	de bf       	out	0x3e, r29	; 62
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	cd bf       	out	0x3d, r28	; 61
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	1f 91       	pop	r17
    56f0:	0f 91       	pop	r16
    56f2:	ff 90       	pop	r15
    56f4:	ef 90       	pop	r14
    56f6:	df 90       	pop	r13
    56f8:	cf 90       	pop	r12
    56fa:	bf 90       	pop	r11
    56fc:	af 90       	pop	r10
    56fe:	9f 90       	pop	r9
    5700:	8f 90       	pop	r8
    5702:	7f 90       	pop	r7
    5704:	6f 90       	pop	r6
    5706:	08 95       	ret

00005708 <__muluhisi3>:
    5708:	0e 94 4e 2c 	call	0x589c	; 0x589c <__umulhisi3>
    570c:	a5 9f       	mul	r26, r21
    570e:	90 0d       	add	r25, r0
    5710:	b4 9f       	mul	r27, r20
    5712:	90 0d       	add	r25, r0
    5714:	a4 9f       	mul	r26, r20
    5716:	80 0d       	add	r24, r0
    5718:	91 1d       	adc	r25, r1
    571a:	11 24       	eor	r1, r1
    571c:	08 95       	ret

0000571e <__mulsi3>:
    571e:	db 01       	movw	r26, r22
    5720:	8f 93       	push	r24
    5722:	9f 93       	push	r25
    5724:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    5728:	bf 91       	pop	r27
    572a:	af 91       	pop	r26
    572c:	a2 9f       	mul	r26, r18
    572e:	80 0d       	add	r24, r0
    5730:	91 1d       	adc	r25, r1
    5732:	a3 9f       	mul	r26, r19
    5734:	90 0d       	add	r25, r0
    5736:	b2 9f       	mul	r27, r18
    5738:	90 0d       	add	r25, r0
    573a:	11 24       	eor	r1, r1
    573c:	08 95       	ret

0000573e <__udivmodhi4>:
    573e:	aa 1b       	sub	r26, r26
    5740:	bb 1b       	sub	r27, r27
    5742:	51 e1       	ldi	r21, 0x11	; 17
    5744:	07 c0       	rjmp	.+14     	; 0x5754 <__udivmodhi4_ep>

00005746 <__udivmodhi4_loop>:
    5746:	aa 1f       	adc	r26, r26
    5748:	bb 1f       	adc	r27, r27
    574a:	a6 17       	cp	r26, r22
    574c:	b7 07       	cpc	r27, r23
    574e:	10 f0       	brcs	.+4      	; 0x5754 <__udivmodhi4_ep>
    5750:	a6 1b       	sub	r26, r22
    5752:	b7 0b       	sbc	r27, r23

00005754 <__udivmodhi4_ep>:
    5754:	88 1f       	adc	r24, r24
    5756:	99 1f       	adc	r25, r25
    5758:	5a 95       	dec	r21
    575a:	a9 f7       	brne	.-22     	; 0x5746 <__udivmodhi4_loop>
    575c:	80 95       	com	r24
    575e:	90 95       	com	r25
    5760:	bc 01       	movw	r22, r24
    5762:	cd 01       	movw	r24, r26
    5764:	08 95       	ret

00005766 <__divmodhi4>:
    5766:	97 fb       	bst	r25, 7
    5768:	07 2e       	mov	r0, r23
    576a:	16 f4       	brtc	.+4      	; 0x5770 <__divmodhi4+0xa>
    576c:	00 94       	com	r0
    576e:	07 d0       	rcall	.+14     	; 0x577e <__divmodhi4_neg1>
    5770:	77 fd       	sbrc	r23, 7
    5772:	09 d0       	rcall	.+18     	; 0x5786 <__divmodhi4_neg2>
    5774:	0e 94 9f 2b 	call	0x573e	; 0x573e <__udivmodhi4>
    5778:	07 fc       	sbrc	r0, 7
    577a:	05 d0       	rcall	.+10     	; 0x5786 <__divmodhi4_neg2>
    577c:	3e f4       	brtc	.+14     	; 0x578c <__divmodhi4_exit>

0000577e <__divmodhi4_neg1>:
    577e:	90 95       	com	r25
    5780:	81 95       	neg	r24
    5782:	9f 4f       	sbci	r25, 0xFF	; 255
    5784:	08 95       	ret

00005786 <__divmodhi4_neg2>:
    5786:	70 95       	com	r23
    5788:	61 95       	neg	r22
    578a:	7f 4f       	sbci	r23, 0xFF	; 255

0000578c <__divmodhi4_exit>:
    578c:	08 95       	ret

0000578e <__udivmodsi4>:
    578e:	a1 e2       	ldi	r26, 0x21	; 33
    5790:	1a 2e       	mov	r1, r26
    5792:	aa 1b       	sub	r26, r26
    5794:	bb 1b       	sub	r27, r27
    5796:	fd 01       	movw	r30, r26
    5798:	0d c0       	rjmp	.+26     	; 0x57b4 <__udivmodsi4_ep>

0000579a <__udivmodsi4_loop>:
    579a:	aa 1f       	adc	r26, r26
    579c:	bb 1f       	adc	r27, r27
    579e:	ee 1f       	adc	r30, r30
    57a0:	ff 1f       	adc	r31, r31
    57a2:	a2 17       	cp	r26, r18
    57a4:	b3 07       	cpc	r27, r19
    57a6:	e4 07       	cpc	r30, r20
    57a8:	f5 07       	cpc	r31, r21
    57aa:	20 f0       	brcs	.+8      	; 0x57b4 <__udivmodsi4_ep>
    57ac:	a2 1b       	sub	r26, r18
    57ae:	b3 0b       	sbc	r27, r19
    57b0:	e4 0b       	sbc	r30, r20
    57b2:	f5 0b       	sbc	r31, r21

000057b4 <__udivmodsi4_ep>:
    57b4:	66 1f       	adc	r22, r22
    57b6:	77 1f       	adc	r23, r23
    57b8:	88 1f       	adc	r24, r24
    57ba:	99 1f       	adc	r25, r25
    57bc:	1a 94       	dec	r1
    57be:	69 f7       	brne	.-38     	; 0x579a <__udivmodsi4_loop>
    57c0:	60 95       	com	r22
    57c2:	70 95       	com	r23
    57c4:	80 95       	com	r24
    57c6:	90 95       	com	r25
    57c8:	9b 01       	movw	r18, r22
    57ca:	ac 01       	movw	r20, r24
    57cc:	bd 01       	movw	r22, r26
    57ce:	cf 01       	movw	r24, r30
    57d0:	08 95       	ret

000057d2 <__umoddi3>:
    57d2:	68 94       	set
    57d4:	01 c0       	rjmp	.+2      	; 0x57d8 <__udivdi3_umoddi3>

000057d6 <__udivdi3>:
    57d6:	e8 94       	clt

000057d8 <__udivdi3_umoddi3>:
    57d8:	8f 92       	push	r8
    57da:	9f 92       	push	r9
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__udivmod64>
    57e4:	df 91       	pop	r29
    57e6:	cf 91       	pop	r28
    57e8:	9f 90       	pop	r9
    57ea:	8f 90       	pop	r8
    57ec:	08 95       	ret

000057ee <__udivmod64>:
    57ee:	88 24       	eor	r8, r8
    57f0:	99 24       	eor	r9, r9
    57f2:	f4 01       	movw	r30, r8
    57f4:	e4 01       	movw	r28, r8
    57f6:	b0 e4       	ldi	r27, 0x40	; 64
    57f8:	9f 93       	push	r25
    57fa:	aa 27       	eor	r26, r26
    57fc:	9a 15       	cp	r25, r10
    57fe:	8b 04       	cpc	r8, r11
    5800:	9c 04       	cpc	r9, r12
    5802:	ed 05       	cpc	r30, r13
    5804:	fe 05       	cpc	r31, r14
    5806:	cf 05       	cpc	r28, r15
    5808:	d0 07       	cpc	r29, r16
    580a:	a1 07       	cpc	r26, r17
    580c:	98 f4       	brcc	.+38     	; 0x5834 <__udivmod64+0x46>
    580e:	ad 2f       	mov	r26, r29
    5810:	dc 2f       	mov	r29, r28
    5812:	cf 2f       	mov	r28, r31
    5814:	fe 2f       	mov	r31, r30
    5816:	e9 2d       	mov	r30, r9
    5818:	98 2c       	mov	r9, r8
    581a:	89 2e       	mov	r8, r25
    581c:	98 2f       	mov	r25, r24
    581e:	87 2f       	mov	r24, r23
    5820:	76 2f       	mov	r23, r22
    5822:	65 2f       	mov	r22, r21
    5824:	54 2f       	mov	r21, r20
    5826:	43 2f       	mov	r20, r19
    5828:	32 2f       	mov	r19, r18
    582a:	22 27       	eor	r18, r18
    582c:	b8 50       	subi	r27, 0x08	; 8
    582e:	31 f7       	brne	.-52     	; 0x57fc <__udivmod64+0xe>
    5830:	bf 91       	pop	r27
    5832:	27 c0       	rjmp	.+78     	; 0x5882 <__udivmod64+0x94>
    5834:	1b 2e       	mov	r1, r27
    5836:	bf 91       	pop	r27
    5838:	bb 27       	eor	r27, r27
    583a:	22 0f       	add	r18, r18
    583c:	33 1f       	adc	r19, r19
    583e:	44 1f       	adc	r20, r20
    5840:	55 1f       	adc	r21, r21
    5842:	66 1f       	adc	r22, r22
    5844:	77 1f       	adc	r23, r23
    5846:	88 1f       	adc	r24, r24
    5848:	99 1f       	adc	r25, r25
    584a:	88 1c       	adc	r8, r8
    584c:	99 1c       	adc	r9, r9
    584e:	ee 1f       	adc	r30, r30
    5850:	ff 1f       	adc	r31, r31
    5852:	cc 1f       	adc	r28, r28
    5854:	dd 1f       	adc	r29, r29
    5856:	aa 1f       	adc	r26, r26
    5858:	bb 1f       	adc	r27, r27
    585a:	8a 14       	cp	r8, r10
    585c:	9b 04       	cpc	r9, r11
    585e:	ec 05       	cpc	r30, r12
    5860:	fd 05       	cpc	r31, r13
    5862:	ce 05       	cpc	r28, r14
    5864:	df 05       	cpc	r29, r15
    5866:	a0 07       	cpc	r26, r16
    5868:	b1 07       	cpc	r27, r17
    586a:	48 f0       	brcs	.+18     	; 0x587e <__udivmod64+0x90>
    586c:	8a 18       	sub	r8, r10
    586e:	9b 08       	sbc	r9, r11
    5870:	ec 09       	sbc	r30, r12
    5872:	fd 09       	sbc	r31, r13
    5874:	ce 09       	sbc	r28, r14
    5876:	df 09       	sbc	r29, r15
    5878:	a0 0b       	sbc	r26, r16
    587a:	b1 0b       	sbc	r27, r17
    587c:	21 60       	ori	r18, 0x01	; 1
    587e:	1a 94       	dec	r1
    5880:	e1 f6       	brne	.-72     	; 0x583a <__udivmod64+0x4c>
    5882:	2e f4       	brtc	.+10     	; 0x588e <__udivmod64+0xa0>
    5884:	94 01       	movw	r18, r8
    5886:	af 01       	movw	r20, r30
    5888:	be 01       	movw	r22, r28
    588a:	cd 01       	movw	r24, r26
    588c:	00 0c       	add	r0, r0
    588e:	08 95       	ret

00005890 <__tablejump2__>:
    5890:	ee 0f       	add	r30, r30
    5892:	ff 1f       	adc	r31, r31

00005894 <__tablejump__>:
    5894:	05 90       	lpm	r0, Z+
    5896:	f4 91       	lpm	r31, Z
    5898:	e0 2d       	mov	r30, r0
    589a:	09 94       	ijmp

0000589c <__umulhisi3>:
    589c:	a2 9f       	mul	r26, r18
    589e:	b0 01       	movw	r22, r0
    58a0:	b3 9f       	mul	r27, r19
    58a2:	c0 01       	movw	r24, r0
    58a4:	a3 9f       	mul	r26, r19
    58a6:	70 0d       	add	r23, r0
    58a8:	81 1d       	adc	r24, r1
    58aa:	11 24       	eor	r1, r1
    58ac:	91 1d       	adc	r25, r1
    58ae:	b2 9f       	mul	r27, r18
    58b0:	70 0d       	add	r23, r0
    58b2:	81 1d       	adc	r24, r1
    58b4:	11 24       	eor	r1, r1
    58b6:	91 1d       	adc	r25, r1
    58b8:	08 95       	ret

000058ba <do_rand>:
    58ba:	8f 92       	push	r8
    58bc:	9f 92       	push	r9
    58be:	af 92       	push	r10
    58c0:	bf 92       	push	r11
    58c2:	cf 92       	push	r12
    58c4:	df 92       	push	r13
    58c6:	ef 92       	push	r14
    58c8:	ff 92       	push	r15
    58ca:	cf 93       	push	r28
    58cc:	df 93       	push	r29
    58ce:	ec 01       	movw	r28, r24
    58d0:	68 81       	ld	r22, Y
    58d2:	79 81       	ldd	r23, Y+1	; 0x01
    58d4:	8a 81       	ldd	r24, Y+2	; 0x02
    58d6:	9b 81       	ldd	r25, Y+3	; 0x03
    58d8:	61 15       	cp	r22, r1
    58da:	71 05       	cpc	r23, r1
    58dc:	81 05       	cpc	r24, r1
    58de:	91 05       	cpc	r25, r1
    58e0:	21 f4       	brne	.+8      	; 0x58ea <do_rand+0x30>
    58e2:	64 e2       	ldi	r22, 0x24	; 36
    58e4:	79 ed       	ldi	r23, 0xD9	; 217
    58e6:	8b e5       	ldi	r24, 0x5B	; 91
    58e8:	97 e0       	ldi	r25, 0x07	; 7
    58ea:	2d e1       	ldi	r18, 0x1D	; 29
    58ec:	33 ef       	ldi	r19, 0xF3	; 243
    58ee:	41 e0       	ldi	r20, 0x01	; 1
    58f0:	50 e0       	ldi	r21, 0x00	; 0
    58f2:	0e 94 2c 30 	call	0x6058	; 0x6058 <__divmodsi4>
    58f6:	49 01       	movw	r8, r18
    58f8:	5a 01       	movw	r10, r20
    58fa:	9b 01       	movw	r18, r22
    58fc:	ac 01       	movw	r20, r24
    58fe:	a7 ea       	ldi	r26, 0xA7	; 167
    5900:	b1 e4       	ldi	r27, 0x41	; 65
    5902:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    5906:	6b 01       	movw	r12, r22
    5908:	7c 01       	movw	r14, r24
    590a:	ac ee       	ldi	r26, 0xEC	; 236
    590c:	b4 ef       	ldi	r27, 0xF4	; 244
    590e:	a5 01       	movw	r20, r10
    5910:	94 01       	movw	r18, r8
    5912:	0e 94 27 30 	call	0x604e	; 0x604e <__mulohisi3>
    5916:	dc 01       	movw	r26, r24
    5918:	cb 01       	movw	r24, r22
    591a:	8c 0d       	add	r24, r12
    591c:	9d 1d       	adc	r25, r13
    591e:	ae 1d       	adc	r26, r14
    5920:	bf 1d       	adc	r27, r15
    5922:	b7 ff       	sbrs	r27, 7
    5924:	03 c0       	rjmp	.+6      	; 0x592c <do_rand+0x72>
    5926:	01 97       	sbiw	r24, 0x01	; 1
    5928:	a1 09       	sbc	r26, r1
    592a:	b0 48       	sbci	r27, 0x80	; 128
    592c:	88 83       	st	Y, r24
    592e:	99 83       	std	Y+1, r25	; 0x01
    5930:	aa 83       	std	Y+2, r26	; 0x02
    5932:	bb 83       	std	Y+3, r27	; 0x03
    5934:	9f 77       	andi	r25, 0x7F	; 127
    5936:	df 91       	pop	r29
    5938:	cf 91       	pop	r28
    593a:	ff 90       	pop	r15
    593c:	ef 90       	pop	r14
    593e:	df 90       	pop	r13
    5940:	cf 90       	pop	r12
    5942:	bf 90       	pop	r11
    5944:	af 90       	pop	r10
    5946:	9f 90       	pop	r9
    5948:	8f 90       	pop	r8
    594a:	08 95       	ret

0000594c <rand_r>:
    594c:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <do_rand>

00005950 <rand>:
    5950:	80 e0       	ldi	r24, 0x00	; 0
    5952:	92 e0       	ldi	r25, 0x02	; 2
    5954:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <do_rand>

00005958 <srand>:
    5958:	a0 e0       	ldi	r26, 0x00	; 0
    595a:	b0 e0       	ldi	r27, 0x00	; 0
    595c:	80 93 00 02 	sts	0x0200, r24
    5960:	90 93 01 02 	sts	0x0201, r25
    5964:	a0 93 02 02 	sts	0x0202, r26
    5968:	b0 93 03 02 	sts	0x0203, r27
    596c:	08 95       	ret

0000596e <atoi>:
    596e:	fc 01       	movw	r30, r24
    5970:	88 27       	eor	r24, r24
    5972:	99 27       	eor	r25, r25
    5974:	e8 94       	clt
    5976:	21 91       	ld	r18, Z+
    5978:	20 32       	cpi	r18, 0x20	; 32
    597a:	e9 f3       	breq	.-6      	; 0x5976 <atoi+0x8>
    597c:	29 30       	cpi	r18, 0x09	; 9
    597e:	10 f0       	brcs	.+4      	; 0x5984 <atoi+0x16>
    5980:	2e 30       	cpi	r18, 0x0E	; 14
    5982:	c8 f3       	brcs	.-14     	; 0x5976 <atoi+0x8>
    5984:	2b 32       	cpi	r18, 0x2B	; 43
    5986:	41 f0       	breq	.+16     	; 0x5998 <atoi+0x2a>
    5988:	2d 32       	cpi	r18, 0x2D	; 45
    598a:	39 f4       	brne	.+14     	; 0x599a <atoi+0x2c>
    598c:	68 94       	set
    598e:	04 c0       	rjmp	.+8      	; 0x5998 <atoi+0x2a>
    5990:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__mulhi_const_10>
    5994:	82 0f       	add	r24, r18
    5996:	91 1d       	adc	r25, r1
    5998:	21 91       	ld	r18, Z+
    599a:	20 53       	subi	r18, 0x30	; 48
    599c:	2a 30       	cpi	r18, 0x0A	; 10
    599e:	c0 f3       	brcs	.-16     	; 0x5990 <atoi+0x22>
    59a0:	1e f4       	brtc	.+6      	; 0x59a8 <atoi+0x3a>
    59a2:	90 95       	com	r25
    59a4:	81 95       	neg	r24
    59a6:	9f 4f       	sbci	r25, 0xFF	; 255
    59a8:	08 95       	ret

000059aa <strchr_P>:
    59aa:	fc 01       	movw	r30, r24
    59ac:	05 90       	lpm	r0, Z+
    59ae:	06 16       	cp	r0, r22
    59b0:	21 f0       	breq	.+8      	; 0x59ba <strchr_P+0x10>
    59b2:	00 20       	and	r0, r0
    59b4:	d9 f7       	brne	.-10     	; 0x59ac <strchr_P+0x2>
    59b6:	c0 01       	movw	r24, r0
    59b8:	08 95       	ret
    59ba:	31 97       	sbiw	r30, 0x01	; 1
    59bc:	cf 01       	movw	r24, r30
    59be:	08 95       	ret

000059c0 <strtok>:
    59c0:	46 eb       	ldi	r20, 0xB6	; 182
    59c2:	54 e0       	ldi	r21, 0x04	; 4
    59c4:	0c 94 f6 2c 	jmp	0x59ec	; 0x59ec <strtok_r>

000059c8 <memcpy>:
    59c8:	fb 01       	movw	r30, r22
    59ca:	dc 01       	movw	r26, r24
    59cc:	02 c0       	rjmp	.+4      	; 0x59d2 <memcpy+0xa>
    59ce:	01 90       	ld	r0, Z+
    59d0:	0d 92       	st	X+, r0
    59d2:	41 50       	subi	r20, 0x01	; 1
    59d4:	50 40       	sbci	r21, 0x00	; 0
    59d6:	d8 f7       	brcc	.-10     	; 0x59ce <memcpy+0x6>
    59d8:	08 95       	ret

000059da <strcmp>:
    59da:	fb 01       	movw	r30, r22
    59dc:	dc 01       	movw	r26, r24
    59de:	8d 91       	ld	r24, X+
    59e0:	01 90       	ld	r0, Z+
    59e2:	80 19       	sub	r24, r0
    59e4:	01 10       	cpse	r0, r1
    59e6:	d9 f3       	breq	.-10     	; 0x59de <strcmp+0x4>
    59e8:	99 0b       	sbc	r25, r25
    59ea:	08 95       	ret

000059ec <strtok_r>:
    59ec:	fa 01       	movw	r30, r20
    59ee:	a1 91       	ld	r26, Z+
    59f0:	b0 81       	ld	r27, Z
    59f2:	00 97       	sbiw	r24, 0x00	; 0
    59f4:	19 f4       	brne	.+6      	; 0x59fc <strtok_r+0x10>
    59f6:	10 97       	sbiw	r26, 0x00	; 0
    59f8:	e1 f0       	breq	.+56     	; 0x5a32 <strtok_r+0x46>
    59fa:	cd 01       	movw	r24, r26
    59fc:	dc 01       	movw	r26, r24
    59fe:	cd 01       	movw	r24, r26
    5a00:	0d 90       	ld	r0, X+
    5a02:	00 20       	and	r0, r0
    5a04:	11 f4       	brne	.+4      	; 0x5a0a <strtok_r+0x1e>
    5a06:	c0 01       	movw	r24, r0
    5a08:	13 c0       	rjmp	.+38     	; 0x5a30 <strtok_r+0x44>
    5a0a:	fb 01       	movw	r30, r22
    5a0c:	21 91       	ld	r18, Z+
    5a0e:	22 23       	and	r18, r18
    5a10:	19 f0       	breq	.+6      	; 0x5a18 <strtok_r+0x2c>
    5a12:	20 15       	cp	r18, r0
    5a14:	d9 f7       	brne	.-10     	; 0x5a0c <strtok_r+0x20>
    5a16:	f3 cf       	rjmp	.-26     	; 0x59fe <strtok_r+0x12>
    5a18:	fb 01       	movw	r30, r22
    5a1a:	21 91       	ld	r18, Z+
    5a1c:	20 15       	cp	r18, r0
    5a1e:	19 f4       	brne	.+6      	; 0x5a26 <strtok_r+0x3a>
    5a20:	1e 92       	st	-X, r1
    5a22:	11 96       	adiw	r26, 0x01	; 1
    5a24:	06 c0       	rjmp	.+12     	; 0x5a32 <strtok_r+0x46>
    5a26:	22 23       	and	r18, r18
    5a28:	c1 f7       	brne	.-16     	; 0x5a1a <strtok_r+0x2e>
    5a2a:	0d 90       	ld	r0, X+
    5a2c:	00 20       	and	r0, r0
    5a2e:	a1 f7       	brne	.-24     	; 0x5a18 <strtok_r+0x2c>
    5a30:	d0 01       	movw	r26, r0
    5a32:	fa 01       	movw	r30, r20
    5a34:	a1 93       	st	Z+, r26
    5a36:	b0 83       	st	Z, r27
    5a38:	08 95       	ret

00005a3a <__mulhi_const_10>:
    5a3a:	7a e0       	ldi	r23, 0x0A	; 10
    5a3c:	97 9f       	mul	r25, r23
    5a3e:	90 2d       	mov	r25, r0
    5a40:	87 9f       	mul	r24, r23
    5a42:	80 2d       	mov	r24, r0
    5a44:	91 0d       	add	r25, r1
    5a46:	11 24       	eor	r1, r1
    5a48:	08 95       	ret

00005a4a <fdevopen>:
    5a4a:	0f 93       	push	r16
    5a4c:	1f 93       	push	r17
    5a4e:	cf 93       	push	r28
    5a50:	df 93       	push	r29
    5a52:	00 97       	sbiw	r24, 0x00	; 0
    5a54:	31 f4       	brne	.+12     	; 0x5a62 <fdevopen+0x18>
    5a56:	61 15       	cp	r22, r1
    5a58:	71 05       	cpc	r23, r1
    5a5a:	19 f4       	brne	.+6      	; 0x5a62 <fdevopen+0x18>
    5a5c:	80 e0       	ldi	r24, 0x00	; 0
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	3a c0       	rjmp	.+116    	; 0x5ad6 <fdevopen+0x8c>
    5a62:	8b 01       	movw	r16, r22
    5a64:	ec 01       	movw	r28, r24
    5a66:	6e e0       	ldi	r22, 0x0E	; 14
    5a68:	70 e0       	ldi	r23, 0x00	; 0
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <calloc>
    5a72:	fc 01       	movw	r30, r24
    5a74:	00 97       	sbiw	r24, 0x00	; 0
    5a76:	91 f3       	breq	.-28     	; 0x5a5c <fdevopen+0x12>
    5a78:	80 e8       	ldi	r24, 0x80	; 128
    5a7a:	83 83       	std	Z+3, r24	; 0x03
    5a7c:	01 15       	cp	r16, r1
    5a7e:	11 05       	cpc	r17, r1
    5a80:	71 f0       	breq	.+28     	; 0x5a9e <fdevopen+0x54>
    5a82:	13 87       	std	Z+11, r17	; 0x0b
    5a84:	02 87       	std	Z+10, r16	; 0x0a
    5a86:	81 e8       	ldi	r24, 0x81	; 129
    5a88:	83 83       	std	Z+3, r24	; 0x03
    5a8a:	80 91 34 09 	lds	r24, 0x0934
    5a8e:	90 91 35 09 	lds	r25, 0x0935
    5a92:	89 2b       	or	r24, r25
    5a94:	21 f4       	brne	.+8      	; 0x5a9e <fdevopen+0x54>
    5a96:	f0 93 35 09 	sts	0x0935, r31
    5a9a:	e0 93 34 09 	sts	0x0934, r30
    5a9e:	20 97       	sbiw	r28, 0x00	; 0
    5aa0:	c9 f0       	breq	.+50     	; 0x5ad4 <fdevopen+0x8a>
    5aa2:	d1 87       	std	Z+9, r29	; 0x09
    5aa4:	c0 87       	std	Z+8, r28	; 0x08
    5aa6:	83 81       	ldd	r24, Z+3	; 0x03
    5aa8:	82 60       	ori	r24, 0x02	; 2
    5aaa:	83 83       	std	Z+3, r24	; 0x03
    5aac:	80 91 36 09 	lds	r24, 0x0936
    5ab0:	90 91 37 09 	lds	r25, 0x0937
    5ab4:	89 2b       	or	r24, r25
    5ab6:	71 f4       	brne	.+28     	; 0x5ad4 <fdevopen+0x8a>
    5ab8:	f0 93 37 09 	sts	0x0937, r31
    5abc:	e0 93 36 09 	sts	0x0936, r30
    5ac0:	80 91 38 09 	lds	r24, 0x0938
    5ac4:	90 91 39 09 	lds	r25, 0x0939
    5ac8:	89 2b       	or	r24, r25
    5aca:	21 f4       	brne	.+8      	; 0x5ad4 <fdevopen+0x8a>
    5acc:	f0 93 39 09 	sts	0x0939, r31
    5ad0:	e0 93 38 09 	sts	0x0938, r30
    5ad4:	cf 01       	movw	r24, r30
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	08 95       	ret

00005ae0 <fgetc>:
    5ae0:	cf 93       	push	r28
    5ae2:	df 93       	push	r29
    5ae4:	ec 01       	movw	r28, r24
    5ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    5ae8:	20 ff       	sbrs	r18, 0
    5aea:	33 c0       	rjmp	.+102    	; 0x5b52 <fgetc+0x72>
    5aec:	26 ff       	sbrs	r18, 6
    5aee:	0a c0       	rjmp	.+20     	; 0x5b04 <fgetc+0x24>
    5af0:	2f 7b       	andi	r18, 0xBF	; 191
    5af2:	2b 83       	std	Y+3, r18	; 0x03
    5af4:	8e 81       	ldd	r24, Y+6	; 0x06
    5af6:	9f 81       	ldd	r25, Y+7	; 0x07
    5af8:	01 96       	adiw	r24, 0x01	; 1
    5afa:	9f 83       	std	Y+7, r25	; 0x07
    5afc:	8e 83       	std	Y+6, r24	; 0x06
    5afe:	8a 81       	ldd	r24, Y+2	; 0x02
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	29 c0       	rjmp	.+82     	; 0x5b56 <fgetc+0x76>
    5b04:	22 ff       	sbrs	r18, 2
    5b06:	0f c0       	rjmp	.+30     	; 0x5b26 <fgetc+0x46>
    5b08:	e8 81       	ld	r30, Y
    5b0a:	f9 81       	ldd	r31, Y+1	; 0x01
    5b0c:	80 81       	ld	r24, Z
    5b0e:	99 27       	eor	r25, r25
    5b10:	87 fd       	sbrc	r24, 7
    5b12:	90 95       	com	r25
    5b14:	00 97       	sbiw	r24, 0x00	; 0
    5b16:	19 f4       	brne	.+6      	; 0x5b1e <fgetc+0x3e>
    5b18:	20 62       	ori	r18, 0x20	; 32
    5b1a:	2b 83       	std	Y+3, r18	; 0x03
    5b1c:	1a c0       	rjmp	.+52     	; 0x5b52 <fgetc+0x72>
    5b1e:	31 96       	adiw	r30, 0x01	; 1
    5b20:	f9 83       	std	Y+1, r31	; 0x01
    5b22:	e8 83       	st	Y, r30
    5b24:	0e c0       	rjmp	.+28     	; 0x5b42 <fgetc+0x62>
    5b26:	ea 85       	ldd	r30, Y+10	; 0x0a
    5b28:	fb 85       	ldd	r31, Y+11	; 0x0b
    5b2a:	09 95       	icall
    5b2c:	97 ff       	sbrs	r25, 7
    5b2e:	09 c0       	rjmp	.+18     	; 0x5b42 <fgetc+0x62>
    5b30:	2b 81       	ldd	r18, Y+3	; 0x03
    5b32:	01 96       	adiw	r24, 0x01	; 1
    5b34:	11 f0       	breq	.+4      	; 0x5b3a <fgetc+0x5a>
    5b36:	80 e2       	ldi	r24, 0x20	; 32
    5b38:	01 c0       	rjmp	.+2      	; 0x5b3c <fgetc+0x5c>
    5b3a:	80 e1       	ldi	r24, 0x10	; 16
    5b3c:	82 2b       	or	r24, r18
    5b3e:	8b 83       	std	Y+3, r24	; 0x03
    5b40:	08 c0       	rjmp	.+16     	; 0x5b52 <fgetc+0x72>
    5b42:	2e 81       	ldd	r18, Y+6	; 0x06
    5b44:	3f 81       	ldd	r19, Y+7	; 0x07
    5b46:	2f 5f       	subi	r18, 0xFF	; 255
    5b48:	3f 4f       	sbci	r19, 0xFF	; 255
    5b4a:	3f 83       	std	Y+7, r19	; 0x07
    5b4c:	2e 83       	std	Y+6, r18	; 0x06
    5b4e:	99 27       	eor	r25, r25
    5b50:	02 c0       	rjmp	.+4      	; 0x5b56 <fgetc+0x76>
    5b52:	8f ef       	ldi	r24, 0xFF	; 255
    5b54:	9f ef       	ldi	r25, 0xFF	; 255
    5b56:	df 91       	pop	r29
    5b58:	cf 91       	pop	r28
    5b5a:	08 95       	ret

00005b5c <fputc>:
    5b5c:	0f 93       	push	r16
    5b5e:	1f 93       	push	r17
    5b60:	cf 93       	push	r28
    5b62:	df 93       	push	r29
    5b64:	fb 01       	movw	r30, r22
    5b66:	23 81       	ldd	r18, Z+3	; 0x03
    5b68:	21 fd       	sbrc	r18, 1
    5b6a:	03 c0       	rjmp	.+6      	; 0x5b72 <fputc+0x16>
    5b6c:	8f ef       	ldi	r24, 0xFF	; 255
    5b6e:	9f ef       	ldi	r25, 0xFF	; 255
    5b70:	28 c0       	rjmp	.+80     	; 0x5bc2 <fputc+0x66>
    5b72:	22 ff       	sbrs	r18, 2
    5b74:	16 c0       	rjmp	.+44     	; 0x5ba2 <fputc+0x46>
    5b76:	46 81       	ldd	r20, Z+6	; 0x06
    5b78:	57 81       	ldd	r21, Z+7	; 0x07
    5b7a:	24 81       	ldd	r18, Z+4	; 0x04
    5b7c:	35 81       	ldd	r19, Z+5	; 0x05
    5b7e:	42 17       	cp	r20, r18
    5b80:	53 07       	cpc	r21, r19
    5b82:	44 f4       	brge	.+16     	; 0x5b94 <fputc+0x38>
    5b84:	a0 81       	ld	r26, Z
    5b86:	b1 81       	ldd	r27, Z+1	; 0x01
    5b88:	9d 01       	movw	r18, r26
    5b8a:	2f 5f       	subi	r18, 0xFF	; 255
    5b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b8e:	31 83       	std	Z+1, r19	; 0x01
    5b90:	20 83       	st	Z, r18
    5b92:	8c 93       	st	X, r24
    5b94:	26 81       	ldd	r18, Z+6	; 0x06
    5b96:	37 81       	ldd	r19, Z+7	; 0x07
    5b98:	2f 5f       	subi	r18, 0xFF	; 255
    5b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9c:	37 83       	std	Z+7, r19	; 0x07
    5b9e:	26 83       	std	Z+6, r18	; 0x06
    5ba0:	10 c0       	rjmp	.+32     	; 0x5bc2 <fputc+0x66>
    5ba2:	eb 01       	movw	r28, r22
    5ba4:	09 2f       	mov	r16, r25
    5ba6:	18 2f       	mov	r17, r24
    5ba8:	00 84       	ldd	r0, Z+8	; 0x08
    5baa:	f1 85       	ldd	r31, Z+9	; 0x09
    5bac:	e0 2d       	mov	r30, r0
    5bae:	09 95       	icall
    5bb0:	89 2b       	or	r24, r25
    5bb2:	e1 f6       	brne	.-72     	; 0x5b6c <fputc+0x10>
    5bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    5bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    5bb8:	01 96       	adiw	r24, 0x01	; 1
    5bba:	9f 83       	std	Y+7, r25	; 0x07
    5bbc:	8e 83       	std	Y+6, r24	; 0x06
    5bbe:	81 2f       	mov	r24, r17
    5bc0:	90 2f       	mov	r25, r16
    5bc2:	df 91       	pop	r29
    5bc4:	cf 91       	pop	r28
    5bc6:	1f 91       	pop	r17
    5bc8:	0f 91       	pop	r16
    5bca:	08 95       	ret

00005bcc <printf>:
    5bcc:	cf 93       	push	r28
    5bce:	df 93       	push	r29
    5bd0:	cd b7       	in	r28, 0x3d	; 61
    5bd2:	de b7       	in	r29, 0x3e	; 62
    5bd4:	ae 01       	movw	r20, r28
    5bd6:	4b 5f       	subi	r20, 0xFB	; 251
    5bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bda:	fa 01       	movw	r30, r20
    5bdc:	61 91       	ld	r22, Z+
    5bde:	71 91       	ld	r23, Z+
    5be0:	af 01       	movw	r20, r30
    5be2:	80 91 36 09 	lds	r24, 0x0936
    5be6:	90 91 37 09 	lds	r25, 0x0937
    5bea:	0e 94 3d 2a 	call	0x547a	; 0x547a <vfprintf>
    5bee:	df 91       	pop	r29
    5bf0:	cf 91       	pop	r28
    5bf2:	08 95       	ret

00005bf4 <putchar>:
    5bf4:	60 91 36 09 	lds	r22, 0x0936
    5bf8:	70 91 37 09 	lds	r23, 0x0937
    5bfc:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <fputc>

00005c00 <puts>:
    5c00:	0f 93       	push	r16
    5c02:	1f 93       	push	r17
    5c04:	cf 93       	push	r28
    5c06:	df 93       	push	r29
    5c08:	e0 91 36 09 	lds	r30, 0x0936
    5c0c:	f0 91 37 09 	lds	r31, 0x0937
    5c10:	23 81       	ldd	r18, Z+3	; 0x03
    5c12:	21 ff       	sbrs	r18, 1
    5c14:	1b c0       	rjmp	.+54     	; 0x5c4c <puts+0x4c>
    5c16:	8c 01       	movw	r16, r24
    5c18:	d0 e0       	ldi	r29, 0x00	; 0
    5c1a:	c0 e0       	ldi	r28, 0x00	; 0
    5c1c:	f8 01       	movw	r30, r16
    5c1e:	81 91       	ld	r24, Z+
    5c20:	8f 01       	movw	r16, r30
    5c22:	60 91 36 09 	lds	r22, 0x0936
    5c26:	70 91 37 09 	lds	r23, 0x0937
    5c2a:	db 01       	movw	r26, r22
    5c2c:	18 96       	adiw	r26, 0x08	; 8
    5c2e:	ed 91       	ld	r30, X+
    5c30:	fc 91       	ld	r31, X
    5c32:	19 97       	sbiw	r26, 0x09	; 9
    5c34:	88 23       	and	r24, r24
    5c36:	31 f0       	breq	.+12     	; 0x5c44 <puts+0x44>
    5c38:	09 95       	icall
    5c3a:	89 2b       	or	r24, r25
    5c3c:	79 f3       	breq	.-34     	; 0x5c1c <puts+0x1c>
    5c3e:	df ef       	ldi	r29, 0xFF	; 255
    5c40:	cf ef       	ldi	r28, 0xFF	; 255
    5c42:	ec cf       	rjmp	.-40     	; 0x5c1c <puts+0x1c>
    5c44:	8a e0       	ldi	r24, 0x0A	; 10
    5c46:	09 95       	icall
    5c48:	89 2b       	or	r24, r25
    5c4a:	19 f0       	breq	.+6      	; 0x5c52 <puts+0x52>
    5c4c:	8f ef       	ldi	r24, 0xFF	; 255
    5c4e:	9f ef       	ldi	r25, 0xFF	; 255
    5c50:	02 c0       	rjmp	.+4      	; 0x5c56 <puts+0x56>
    5c52:	8d 2f       	mov	r24, r29
    5c54:	9c 2f       	mov	r25, r28
    5c56:	df 91       	pop	r29
    5c58:	cf 91       	pop	r28
    5c5a:	1f 91       	pop	r17
    5c5c:	0f 91       	pop	r16
    5c5e:	08 95       	ret

00005c60 <sprintf>:
    5c60:	0f 93       	push	r16
    5c62:	1f 93       	push	r17
    5c64:	cf 93       	push	r28
    5c66:	df 93       	push	r29
    5c68:	cd b7       	in	r28, 0x3d	; 61
    5c6a:	de b7       	in	r29, 0x3e	; 62
    5c6c:	2e 97       	sbiw	r28, 0x0e	; 14
    5c6e:	0f b6       	in	r0, 0x3f	; 63
    5c70:	f8 94       	cli
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	cd bf       	out	0x3d, r28	; 61
    5c78:	0d 89       	ldd	r16, Y+21	; 0x15
    5c7a:	1e 89       	ldd	r17, Y+22	; 0x16
    5c7c:	86 e0       	ldi	r24, 0x06	; 6
    5c7e:	8c 83       	std	Y+4, r24	; 0x04
    5c80:	1a 83       	std	Y+2, r17	; 0x02
    5c82:	09 83       	std	Y+1, r16	; 0x01
    5c84:	8f ef       	ldi	r24, 0xFF	; 255
    5c86:	9f e7       	ldi	r25, 0x7F	; 127
    5c88:	9e 83       	std	Y+6, r25	; 0x06
    5c8a:	8d 83       	std	Y+5, r24	; 0x05
    5c8c:	ae 01       	movw	r20, r28
    5c8e:	47 5e       	subi	r20, 0xE7	; 231
    5c90:	5f 4f       	sbci	r21, 0xFF	; 255
    5c92:	6f 89       	ldd	r22, Y+23	; 0x17
    5c94:	78 8d       	ldd	r23, Y+24	; 0x18
    5c96:	ce 01       	movw	r24, r28
    5c98:	01 96       	adiw	r24, 0x01	; 1
    5c9a:	0e 94 3d 2a 	call	0x547a	; 0x547a <vfprintf>
    5c9e:	2f 81       	ldd	r18, Y+7	; 0x07
    5ca0:	38 85       	ldd	r19, Y+8	; 0x08
    5ca2:	f8 01       	movw	r30, r16
    5ca4:	e2 0f       	add	r30, r18
    5ca6:	f3 1f       	adc	r31, r19
    5ca8:	10 82       	st	Z, r1
    5caa:	2e 96       	adiw	r28, 0x0e	; 14
    5cac:	0f b6       	in	r0, 0x3f	; 63
    5cae:	f8 94       	cli
    5cb0:	de bf       	out	0x3e, r29	; 62
    5cb2:	0f be       	out	0x3f, r0	; 63
    5cb4:	cd bf       	out	0x3d, r28	; 61
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	1f 91       	pop	r17
    5cbc:	0f 91       	pop	r16
    5cbe:	08 95       	ret

00005cc0 <__ultoa_invert>:
    5cc0:	fa 01       	movw	r30, r20
    5cc2:	aa 27       	eor	r26, r26
    5cc4:	28 30       	cpi	r18, 0x08	; 8
    5cc6:	51 f1       	breq	.+84     	; 0x5d1c <__ultoa_invert+0x5c>
    5cc8:	20 31       	cpi	r18, 0x10	; 16
    5cca:	81 f1       	breq	.+96     	; 0x5d2c <__ultoa_invert+0x6c>
    5ccc:	e8 94       	clt
    5cce:	6f 93       	push	r22
    5cd0:	6e 7f       	andi	r22, 0xFE	; 254
    5cd2:	6e 5f       	subi	r22, 0xFE	; 254
    5cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    5cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cda:	af 4f       	sbci	r26, 0xFF	; 255
    5cdc:	b1 e0       	ldi	r27, 0x01	; 1
    5cde:	3e d0       	rcall	.+124    	; 0x5d5c <__ultoa_invert+0x9c>
    5ce0:	b4 e0       	ldi	r27, 0x04	; 4
    5ce2:	3c d0       	rcall	.+120    	; 0x5d5c <__ultoa_invert+0x9c>
    5ce4:	67 0f       	add	r22, r23
    5ce6:	78 1f       	adc	r23, r24
    5ce8:	89 1f       	adc	r24, r25
    5cea:	9a 1f       	adc	r25, r26
    5cec:	a1 1d       	adc	r26, r1
    5cee:	68 0f       	add	r22, r24
    5cf0:	79 1f       	adc	r23, r25
    5cf2:	8a 1f       	adc	r24, r26
    5cf4:	91 1d       	adc	r25, r1
    5cf6:	a1 1d       	adc	r26, r1
    5cf8:	6a 0f       	add	r22, r26
    5cfa:	71 1d       	adc	r23, r1
    5cfc:	81 1d       	adc	r24, r1
    5cfe:	91 1d       	adc	r25, r1
    5d00:	a1 1d       	adc	r26, r1
    5d02:	20 d0       	rcall	.+64     	; 0x5d44 <__ultoa_invert+0x84>
    5d04:	09 f4       	brne	.+2      	; 0x5d08 <__ultoa_invert+0x48>
    5d06:	68 94       	set
    5d08:	3f 91       	pop	r19
    5d0a:	2a e0       	ldi	r18, 0x0A	; 10
    5d0c:	26 9f       	mul	r18, r22
    5d0e:	11 24       	eor	r1, r1
    5d10:	30 19       	sub	r19, r0
    5d12:	30 5d       	subi	r19, 0xD0	; 208
    5d14:	31 93       	st	Z+, r19
    5d16:	de f6       	brtc	.-74     	; 0x5cce <__ultoa_invert+0xe>
    5d18:	cf 01       	movw	r24, r30
    5d1a:	08 95       	ret
    5d1c:	46 2f       	mov	r20, r22
    5d1e:	47 70       	andi	r20, 0x07	; 7
    5d20:	40 5d       	subi	r20, 0xD0	; 208
    5d22:	41 93       	st	Z+, r20
    5d24:	b3 e0       	ldi	r27, 0x03	; 3
    5d26:	0f d0       	rcall	.+30     	; 0x5d46 <__ultoa_invert+0x86>
    5d28:	c9 f7       	brne	.-14     	; 0x5d1c <__ultoa_invert+0x5c>
    5d2a:	f6 cf       	rjmp	.-20     	; 0x5d18 <__ultoa_invert+0x58>
    5d2c:	46 2f       	mov	r20, r22
    5d2e:	4f 70       	andi	r20, 0x0F	; 15
    5d30:	40 5d       	subi	r20, 0xD0	; 208
    5d32:	4a 33       	cpi	r20, 0x3A	; 58
    5d34:	18 f0       	brcs	.+6      	; 0x5d3c <__ultoa_invert+0x7c>
    5d36:	49 5d       	subi	r20, 0xD9	; 217
    5d38:	31 fd       	sbrc	r19, 1
    5d3a:	40 52       	subi	r20, 0x20	; 32
    5d3c:	41 93       	st	Z+, r20
    5d3e:	02 d0       	rcall	.+4      	; 0x5d44 <__ultoa_invert+0x84>
    5d40:	a9 f7       	brne	.-22     	; 0x5d2c <__ultoa_invert+0x6c>
    5d42:	ea cf       	rjmp	.-44     	; 0x5d18 <__ultoa_invert+0x58>
    5d44:	b4 e0       	ldi	r27, 0x04	; 4
    5d46:	a6 95       	lsr	r26
    5d48:	97 95       	ror	r25
    5d4a:	87 95       	ror	r24
    5d4c:	77 95       	ror	r23
    5d4e:	67 95       	ror	r22
    5d50:	ba 95       	dec	r27
    5d52:	c9 f7       	brne	.-14     	; 0x5d46 <__ultoa_invert+0x86>
    5d54:	00 97       	sbiw	r24, 0x00	; 0
    5d56:	61 05       	cpc	r22, r1
    5d58:	71 05       	cpc	r23, r1
    5d5a:	08 95       	ret
    5d5c:	9b 01       	movw	r18, r22
    5d5e:	ac 01       	movw	r20, r24
    5d60:	0a 2e       	mov	r0, r26
    5d62:	06 94       	lsr	r0
    5d64:	57 95       	ror	r21
    5d66:	47 95       	ror	r20
    5d68:	37 95       	ror	r19
    5d6a:	27 95       	ror	r18
    5d6c:	ba 95       	dec	r27
    5d6e:	c9 f7       	brne	.-14     	; 0x5d62 <__ultoa_invert+0xa2>
    5d70:	62 0f       	add	r22, r18
    5d72:	73 1f       	adc	r23, r19
    5d74:	84 1f       	adc	r24, r20
    5d76:	95 1f       	adc	r25, r21
    5d78:	a0 1d       	adc	r26, r0
    5d7a:	08 95       	ret

00005d7c <__eerd_byte_m128rfa1>:
    5d7c:	f9 99       	sbic	0x1f, 1	; 31
    5d7e:	fe cf       	rjmp	.-4      	; 0x5d7c <__eerd_byte_m128rfa1>
    5d80:	92 bd       	out	0x22, r25	; 34
    5d82:	81 bd       	out	0x21, r24	; 33
    5d84:	f8 9a       	sbi	0x1f, 0	; 31
    5d86:	99 27       	eor	r25, r25
    5d88:	80 b5       	in	r24, 0x20	; 32
    5d8a:	08 95       	ret

00005d8c <__eewr_byte_m128rfa1>:
    5d8c:	26 2f       	mov	r18, r22

00005d8e <__eewr_r18_m128rfa1>:
    5d8e:	f9 99       	sbic	0x1f, 1	; 31
    5d90:	fe cf       	rjmp	.-4      	; 0x5d8e <__eewr_r18_m128rfa1>
    5d92:	1f ba       	out	0x1f, r1	; 31
    5d94:	92 bd       	out	0x22, r25	; 34
    5d96:	81 bd       	out	0x21, r24	; 33
    5d98:	20 bd       	out	0x20, r18	; 32
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	f8 94       	cli
    5d9e:	fa 9a       	sbi	0x1f, 2	; 31
    5da0:	f9 9a       	sbi	0x1f, 1	; 31
    5da2:	0f be       	out	0x3f, r0	; 63
    5da4:	01 96       	adiw	r24, 0x01	; 1
    5da6:	08 95       	ret

00005da8 <calloc>:
    5da8:	0f 93       	push	r16
    5daa:	1f 93       	push	r17
    5dac:	cf 93       	push	r28
    5dae:	df 93       	push	r29
    5db0:	86 9f       	mul	r24, r22
    5db2:	80 01       	movw	r16, r0
    5db4:	87 9f       	mul	r24, r23
    5db6:	10 0d       	add	r17, r0
    5db8:	96 9f       	mul	r25, r22
    5dba:	10 0d       	add	r17, r0
    5dbc:	11 24       	eor	r1, r1
    5dbe:	c8 01       	movw	r24, r16
    5dc0:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <malloc>
    5dc4:	ec 01       	movw	r28, r24
    5dc6:	00 97       	sbiw	r24, 0x00	; 0
    5dc8:	29 f0       	breq	.+10     	; 0x5dd4 <calloc+0x2c>
    5dca:	a8 01       	movw	r20, r16
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	0e 94 1d 30 	call	0x603a	; 0x603a <memset>
    5dd4:	ce 01       	movw	r24, r28
    5dd6:	df 91       	pop	r29
    5dd8:	cf 91       	pop	r28
    5dda:	1f 91       	pop	r17
    5ddc:	0f 91       	pop	r16
    5dde:	08 95       	ret

00005de0 <malloc>:
    5de0:	cf 93       	push	r28
    5de2:	df 93       	push	r29
    5de4:	82 30       	cpi	r24, 0x02	; 2
    5de6:	91 05       	cpc	r25, r1
    5de8:	10 f4       	brcc	.+4      	; 0x5dee <malloc+0xe>
    5dea:	82 e0       	ldi	r24, 0x02	; 2
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	e0 91 3c 09 	lds	r30, 0x093C
    5df2:	f0 91 3d 09 	lds	r31, 0x093D
    5df6:	20 e0       	ldi	r18, 0x00	; 0
    5df8:	30 e0       	ldi	r19, 0x00	; 0
    5dfa:	c0 e0       	ldi	r28, 0x00	; 0
    5dfc:	d0 e0       	ldi	r29, 0x00	; 0
    5dfe:	30 97       	sbiw	r30, 0x00	; 0
    5e00:	11 f1       	breq	.+68     	; 0x5e46 <malloc+0x66>
    5e02:	40 81       	ld	r20, Z
    5e04:	51 81       	ldd	r21, Z+1	; 0x01
    5e06:	48 17       	cp	r20, r24
    5e08:	59 07       	cpc	r21, r25
    5e0a:	c0 f0       	brcs	.+48     	; 0x5e3c <malloc+0x5c>
    5e0c:	48 17       	cp	r20, r24
    5e0e:	59 07       	cpc	r21, r25
    5e10:	61 f4       	brne	.+24     	; 0x5e2a <malloc+0x4a>
    5e12:	82 81       	ldd	r24, Z+2	; 0x02
    5e14:	93 81       	ldd	r25, Z+3	; 0x03
    5e16:	20 97       	sbiw	r28, 0x00	; 0
    5e18:	19 f0       	breq	.+6      	; 0x5e20 <malloc+0x40>
    5e1a:	9b 83       	std	Y+3, r25	; 0x03
    5e1c:	8a 83       	std	Y+2, r24	; 0x02
    5e1e:	2b c0       	rjmp	.+86     	; 0x5e76 <malloc+0x96>
    5e20:	90 93 3d 09 	sts	0x093D, r25
    5e24:	80 93 3c 09 	sts	0x093C, r24
    5e28:	26 c0       	rjmp	.+76     	; 0x5e76 <malloc+0x96>
    5e2a:	21 15       	cp	r18, r1
    5e2c:	31 05       	cpc	r19, r1
    5e2e:	19 f0       	breq	.+6      	; 0x5e36 <malloc+0x56>
    5e30:	42 17       	cp	r20, r18
    5e32:	53 07       	cpc	r21, r19
    5e34:	18 f4       	brcc	.+6      	; 0x5e3c <malloc+0x5c>
    5e36:	9a 01       	movw	r18, r20
    5e38:	be 01       	movw	r22, r28
    5e3a:	df 01       	movw	r26, r30
    5e3c:	ef 01       	movw	r28, r30
    5e3e:	02 80       	ldd	r0, Z+2	; 0x02
    5e40:	f3 81       	ldd	r31, Z+3	; 0x03
    5e42:	e0 2d       	mov	r30, r0
    5e44:	dc cf       	rjmp	.-72     	; 0x5dfe <malloc+0x1e>
    5e46:	21 15       	cp	r18, r1
    5e48:	31 05       	cpc	r19, r1
    5e4a:	09 f1       	breq	.+66     	; 0x5e8e <malloc+0xae>
    5e4c:	28 1b       	sub	r18, r24
    5e4e:	39 0b       	sbc	r19, r25
    5e50:	24 30       	cpi	r18, 0x04	; 4
    5e52:	31 05       	cpc	r19, r1
    5e54:	90 f4       	brcc	.+36     	; 0x5e7a <malloc+0x9a>
    5e56:	12 96       	adiw	r26, 0x02	; 2
    5e58:	8d 91       	ld	r24, X+
    5e5a:	9c 91       	ld	r25, X
    5e5c:	13 97       	sbiw	r26, 0x03	; 3
    5e5e:	61 15       	cp	r22, r1
    5e60:	71 05       	cpc	r23, r1
    5e62:	21 f0       	breq	.+8      	; 0x5e6c <malloc+0x8c>
    5e64:	fb 01       	movw	r30, r22
    5e66:	93 83       	std	Z+3, r25	; 0x03
    5e68:	82 83       	std	Z+2, r24	; 0x02
    5e6a:	04 c0       	rjmp	.+8      	; 0x5e74 <malloc+0x94>
    5e6c:	90 93 3d 09 	sts	0x093D, r25
    5e70:	80 93 3c 09 	sts	0x093C, r24
    5e74:	fd 01       	movw	r30, r26
    5e76:	32 96       	adiw	r30, 0x02	; 2
    5e78:	44 c0       	rjmp	.+136    	; 0x5f02 <malloc+0x122>
    5e7a:	fd 01       	movw	r30, r26
    5e7c:	e2 0f       	add	r30, r18
    5e7e:	f3 1f       	adc	r31, r19
    5e80:	81 93       	st	Z+, r24
    5e82:	91 93       	st	Z+, r25
    5e84:	22 50       	subi	r18, 0x02	; 2
    5e86:	31 09       	sbc	r19, r1
    5e88:	2d 93       	st	X+, r18
    5e8a:	3c 93       	st	X, r19
    5e8c:	3a c0       	rjmp	.+116    	; 0x5f02 <malloc+0x122>
    5e8e:	20 91 3a 09 	lds	r18, 0x093A
    5e92:	30 91 3b 09 	lds	r19, 0x093B
    5e96:	23 2b       	or	r18, r19
    5e98:	41 f4       	brne	.+16     	; 0x5eaa <malloc+0xca>
    5e9a:	20 91 06 02 	lds	r18, 0x0206
    5e9e:	30 91 07 02 	lds	r19, 0x0207
    5ea2:	30 93 3b 09 	sts	0x093B, r19
    5ea6:	20 93 3a 09 	sts	0x093A, r18
    5eaa:	20 91 04 02 	lds	r18, 0x0204
    5eae:	30 91 05 02 	lds	r19, 0x0205
    5eb2:	21 15       	cp	r18, r1
    5eb4:	31 05       	cpc	r19, r1
    5eb6:	41 f4       	brne	.+16     	; 0x5ec8 <malloc+0xe8>
    5eb8:	2d b7       	in	r18, 0x3d	; 61
    5eba:	3e b7       	in	r19, 0x3e	; 62
    5ebc:	40 91 08 02 	lds	r20, 0x0208
    5ec0:	50 91 09 02 	lds	r21, 0x0209
    5ec4:	24 1b       	sub	r18, r20
    5ec6:	35 0b       	sbc	r19, r21
    5ec8:	e0 91 3a 09 	lds	r30, 0x093A
    5ecc:	f0 91 3b 09 	lds	r31, 0x093B
    5ed0:	e2 17       	cp	r30, r18
    5ed2:	f3 07       	cpc	r31, r19
    5ed4:	a0 f4       	brcc	.+40     	; 0x5efe <malloc+0x11e>
    5ed6:	2e 1b       	sub	r18, r30
    5ed8:	3f 0b       	sbc	r19, r31
    5eda:	28 17       	cp	r18, r24
    5edc:	39 07       	cpc	r19, r25
    5ede:	78 f0       	brcs	.+30     	; 0x5efe <malloc+0x11e>
    5ee0:	ac 01       	movw	r20, r24
    5ee2:	4e 5f       	subi	r20, 0xFE	; 254
    5ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee6:	24 17       	cp	r18, r20
    5ee8:	35 07       	cpc	r19, r21
    5eea:	48 f0       	brcs	.+18     	; 0x5efe <malloc+0x11e>
    5eec:	4e 0f       	add	r20, r30
    5eee:	5f 1f       	adc	r21, r31
    5ef0:	50 93 3b 09 	sts	0x093B, r21
    5ef4:	40 93 3a 09 	sts	0x093A, r20
    5ef8:	81 93       	st	Z+, r24
    5efa:	91 93       	st	Z+, r25
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <malloc+0x122>
    5efe:	e0 e0       	ldi	r30, 0x00	; 0
    5f00:	f0 e0       	ldi	r31, 0x00	; 0
    5f02:	cf 01       	movw	r24, r30
    5f04:	df 91       	pop	r29
    5f06:	cf 91       	pop	r28
    5f08:	08 95       	ret

00005f0a <free>:
    5f0a:	0f 93       	push	r16
    5f0c:	1f 93       	push	r17
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	00 97       	sbiw	r24, 0x00	; 0
    5f14:	09 f4       	brne	.+2      	; 0x5f18 <free+0xe>
    5f16:	8c c0       	rjmp	.+280    	; 0x6030 <free+0x126>
    5f18:	fc 01       	movw	r30, r24
    5f1a:	32 97       	sbiw	r30, 0x02	; 2
    5f1c:	13 82       	std	Z+3, r1	; 0x03
    5f1e:	12 82       	std	Z+2, r1	; 0x02
    5f20:	00 91 3c 09 	lds	r16, 0x093C
    5f24:	10 91 3d 09 	lds	r17, 0x093D
    5f28:	01 15       	cp	r16, r1
    5f2a:	11 05       	cpc	r17, r1
    5f2c:	81 f4       	brne	.+32     	; 0x5f4e <free+0x44>
    5f2e:	20 81       	ld	r18, Z
    5f30:	31 81       	ldd	r19, Z+1	; 0x01
    5f32:	82 0f       	add	r24, r18
    5f34:	93 1f       	adc	r25, r19
    5f36:	20 91 3a 09 	lds	r18, 0x093A
    5f3a:	30 91 3b 09 	lds	r19, 0x093B
    5f3e:	28 17       	cp	r18, r24
    5f40:	39 07       	cpc	r19, r25
    5f42:	79 f5       	brne	.+94     	; 0x5fa2 <free+0x98>
    5f44:	f0 93 3b 09 	sts	0x093B, r31
    5f48:	e0 93 3a 09 	sts	0x093A, r30
    5f4c:	71 c0       	rjmp	.+226    	; 0x6030 <free+0x126>
    5f4e:	d8 01       	movw	r26, r16
    5f50:	40 e0       	ldi	r20, 0x00	; 0
    5f52:	50 e0       	ldi	r21, 0x00	; 0
    5f54:	ae 17       	cp	r26, r30
    5f56:	bf 07       	cpc	r27, r31
    5f58:	50 f4       	brcc	.+20     	; 0x5f6e <free+0x64>
    5f5a:	12 96       	adiw	r26, 0x02	; 2
    5f5c:	2d 91       	ld	r18, X+
    5f5e:	3c 91       	ld	r19, X
    5f60:	13 97       	sbiw	r26, 0x03	; 3
    5f62:	ad 01       	movw	r20, r26
    5f64:	21 15       	cp	r18, r1
    5f66:	31 05       	cpc	r19, r1
    5f68:	09 f1       	breq	.+66     	; 0x5fac <free+0xa2>
    5f6a:	d9 01       	movw	r26, r18
    5f6c:	f3 cf       	rjmp	.-26     	; 0x5f54 <free+0x4a>
    5f6e:	9d 01       	movw	r18, r26
    5f70:	da 01       	movw	r26, r20
    5f72:	33 83       	std	Z+3, r19	; 0x03
    5f74:	22 83       	std	Z+2, r18	; 0x02
    5f76:	60 81       	ld	r22, Z
    5f78:	71 81       	ldd	r23, Z+1	; 0x01
    5f7a:	86 0f       	add	r24, r22
    5f7c:	97 1f       	adc	r25, r23
    5f7e:	82 17       	cp	r24, r18
    5f80:	93 07       	cpc	r25, r19
    5f82:	69 f4       	brne	.+26     	; 0x5f9e <free+0x94>
    5f84:	ec 01       	movw	r28, r24
    5f86:	28 81       	ld	r18, Y
    5f88:	39 81       	ldd	r19, Y+1	; 0x01
    5f8a:	26 0f       	add	r18, r22
    5f8c:	37 1f       	adc	r19, r23
    5f8e:	2e 5f       	subi	r18, 0xFE	; 254
    5f90:	3f 4f       	sbci	r19, 0xFF	; 255
    5f92:	31 83       	std	Z+1, r19	; 0x01
    5f94:	20 83       	st	Z, r18
    5f96:	8a 81       	ldd	r24, Y+2	; 0x02
    5f98:	9b 81       	ldd	r25, Y+3	; 0x03
    5f9a:	93 83       	std	Z+3, r25	; 0x03
    5f9c:	82 83       	std	Z+2, r24	; 0x02
    5f9e:	45 2b       	or	r20, r21
    5fa0:	29 f4       	brne	.+10     	; 0x5fac <free+0xa2>
    5fa2:	f0 93 3d 09 	sts	0x093D, r31
    5fa6:	e0 93 3c 09 	sts	0x093C, r30
    5faa:	42 c0       	rjmp	.+132    	; 0x6030 <free+0x126>
    5fac:	13 96       	adiw	r26, 0x03	; 3
    5fae:	fc 93       	st	X, r31
    5fb0:	ee 93       	st	-X, r30
    5fb2:	12 97       	sbiw	r26, 0x02	; 2
    5fb4:	ed 01       	movw	r28, r26
    5fb6:	49 91       	ld	r20, Y+
    5fb8:	59 91       	ld	r21, Y+
    5fba:	9e 01       	movw	r18, r28
    5fbc:	24 0f       	add	r18, r20
    5fbe:	35 1f       	adc	r19, r21
    5fc0:	e2 17       	cp	r30, r18
    5fc2:	f3 07       	cpc	r31, r19
    5fc4:	71 f4       	brne	.+28     	; 0x5fe2 <free+0xd8>
    5fc6:	80 81       	ld	r24, Z
    5fc8:	91 81       	ldd	r25, Z+1	; 0x01
    5fca:	84 0f       	add	r24, r20
    5fcc:	95 1f       	adc	r25, r21
    5fce:	02 96       	adiw	r24, 0x02	; 2
    5fd0:	11 96       	adiw	r26, 0x01	; 1
    5fd2:	9c 93       	st	X, r25
    5fd4:	8e 93       	st	-X, r24
    5fd6:	82 81       	ldd	r24, Z+2	; 0x02
    5fd8:	93 81       	ldd	r25, Z+3	; 0x03
    5fda:	13 96       	adiw	r26, 0x03	; 3
    5fdc:	9c 93       	st	X, r25
    5fde:	8e 93       	st	-X, r24
    5fe0:	12 97       	sbiw	r26, 0x02	; 2
    5fe2:	e0 e0       	ldi	r30, 0x00	; 0
    5fe4:	f0 e0       	ldi	r31, 0x00	; 0
    5fe6:	d8 01       	movw	r26, r16
    5fe8:	12 96       	adiw	r26, 0x02	; 2
    5fea:	8d 91       	ld	r24, X+
    5fec:	9c 91       	ld	r25, X
    5fee:	13 97       	sbiw	r26, 0x03	; 3
    5ff0:	00 97       	sbiw	r24, 0x00	; 0
    5ff2:	19 f0       	breq	.+6      	; 0x5ffa <free+0xf0>
    5ff4:	f8 01       	movw	r30, r16
    5ff6:	8c 01       	movw	r16, r24
    5ff8:	f6 cf       	rjmp	.-20     	; 0x5fe6 <free+0xdc>
    5ffa:	8d 91       	ld	r24, X+
    5ffc:	9c 91       	ld	r25, X
    5ffe:	98 01       	movw	r18, r16
    6000:	2e 5f       	subi	r18, 0xFE	; 254
    6002:	3f 4f       	sbci	r19, 0xFF	; 255
    6004:	82 0f       	add	r24, r18
    6006:	93 1f       	adc	r25, r19
    6008:	20 91 3a 09 	lds	r18, 0x093A
    600c:	30 91 3b 09 	lds	r19, 0x093B
    6010:	28 17       	cp	r18, r24
    6012:	39 07       	cpc	r19, r25
    6014:	69 f4       	brne	.+26     	; 0x6030 <free+0x126>
    6016:	30 97       	sbiw	r30, 0x00	; 0
    6018:	29 f4       	brne	.+10     	; 0x6024 <free+0x11a>
    601a:	10 92 3d 09 	sts	0x093D, r1
    601e:	10 92 3c 09 	sts	0x093C, r1
    6022:	02 c0       	rjmp	.+4      	; 0x6028 <free+0x11e>
    6024:	13 82       	std	Z+3, r1	; 0x03
    6026:	12 82       	std	Z+2, r1	; 0x02
    6028:	10 93 3b 09 	sts	0x093B, r17
    602c:	00 93 3a 09 	sts	0x093A, r16
    6030:	df 91       	pop	r29
    6032:	cf 91       	pop	r28
    6034:	1f 91       	pop	r17
    6036:	0f 91       	pop	r16
    6038:	08 95       	ret

0000603a <memset>:
    603a:	dc 01       	movw	r26, r24
    603c:	01 c0       	rjmp	.+2      	; 0x6040 <memset+0x6>
    603e:	6d 93       	st	X+, r22
    6040:	41 50       	subi	r20, 0x01	; 1
    6042:	50 40       	sbci	r21, 0x00	; 0
    6044:	e0 f7       	brcc	.-8      	; 0x603e <memset+0x4>
    6046:	08 95       	ret

00006048 <__mulshisi3>:
    6048:	b7 ff       	sbrs	r27, 7
    604a:	0c 94 84 2b 	jmp	0x5708	; 0x5708 <__muluhisi3>

0000604e <__mulohisi3>:
    604e:	0e 94 84 2b 	call	0x5708	; 0x5708 <__muluhisi3>
    6052:	82 1b       	sub	r24, r18
    6054:	93 0b       	sbc	r25, r19
    6056:	08 95       	ret

00006058 <__divmodsi4>:
    6058:	05 2e       	mov	r0, r21
    605a:	97 fb       	bst	r25, 7
    605c:	1e f4       	brtc	.+6      	; 0x6064 <__divmodsi4+0xc>
    605e:	00 94       	com	r0
    6060:	0e 94 43 30 	call	0x6086	; 0x6086 <__negsi2>
    6064:	57 fd       	sbrc	r21, 7
    6066:	07 d0       	rcall	.+14     	; 0x6076 <__divmodsi4_neg2>
    6068:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodsi4>
    606c:	07 fc       	sbrc	r0, 7
    606e:	03 d0       	rcall	.+6      	; 0x6076 <__divmodsi4_neg2>
    6070:	4e f4       	brtc	.+18     	; 0x6084 <__divmodsi4_exit>
    6072:	0c 94 43 30 	jmp	0x6086	; 0x6086 <__negsi2>

00006076 <__divmodsi4_neg2>:
    6076:	50 95       	com	r21
    6078:	40 95       	com	r20
    607a:	30 95       	com	r19
    607c:	21 95       	neg	r18
    607e:	3f 4f       	sbci	r19, 0xFF	; 255
    6080:	4f 4f       	sbci	r20, 0xFF	; 255
    6082:	5f 4f       	sbci	r21, 0xFF	; 255

00006084 <__divmodsi4_exit>:
    6084:	08 95       	ret

00006086 <__negsi2>:
    6086:	90 95       	com	r25
    6088:	80 95       	com	r24
    608a:	70 95       	com	r23
    608c:	61 95       	neg	r22
    608e:	7f 4f       	sbci	r23, 0xFF	; 255
    6090:	8f 4f       	sbci	r24, 0xFF	; 255
    6092:	9f 4f       	sbci	r25, 0xFF	; 255
    6094:	08 95       	ret

00006096 <_exit>:
    6096:	f8 94       	cli

00006098 <__stop_program>:
    6098:	ff cf       	rjmp	.-2      	; 0x6098 <__stop_program>

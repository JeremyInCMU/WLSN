
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001de  00800200  000069ec  00006a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000058d  008003de  008003de  00006c5e  2**0
                  ALLOC
  3 .stab         00013e00  00000000  00000000  00006c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009892  00000000  00000000  0001aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000242f2  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00024303  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00025463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000264d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  000264f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__ctors_end>
       4:	0c 94 da 2d 	jmp	0x5bb4	; 0x5bb4 <__vector_1>
       8:	0c 94 0c 2e 	jmp	0x5c18	; 0x5c18 <__vector_2>
       c:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__vector_3>
      10:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      14:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      18:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      1c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      20:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      24:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__vector_9>
      28:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      2c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      30:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      34:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__vector_13>
      38:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      3c:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__vector_13>
      40:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      44:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      48:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      4c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      50:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      54:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      58:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      5c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      60:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      64:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__vector_25>
      68:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      6c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      70:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      74:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      78:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      7c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      80:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <__vector_32>
      84:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      88:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      8c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      90:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      94:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      98:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      9c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      a0:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      a4:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      a8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      ac:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      b0:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      b4:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      b8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      bc:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      c0:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      c4:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      c8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      cc:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      d0:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      d4:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      d8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      dc:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      e0:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
      e4:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_57>
      e8:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__vector_58>
      ec:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__vector_59>
      f0:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__vector_60>
      f4:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__vector_61>
      f8:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__vector_62>
      fc:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__vector_63>
     100:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__vector_64>
     104:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     108:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     10c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     110:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     114:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     118:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     11c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__bad_interrupt>
     120:	7d 15       	cp	r23, r13
     122:	8a 15       	cp	r24, r10
     124:	97 15       	cp	r25, r7
     126:	a4 15       	cp	r26, r4
     128:	b1 15       	cp	r27, r1
     12a:	be 15       	cp	r27, r14
     12c:	cb 15       	cp	r28, r11
     12e:	ee 15       	cp	r30, r14
     130:	fc 15       	cp	r31, r12
     132:	0a 16       	cp	r0, r26
     134:	18 16       	cp	r1, r24
     136:	26 16       	cp	r2, r22
     138:	34 16       	cp	r3, r20
     13a:	34 16       	cp	r3, r20
     13c:	57 16       	cp	r5, r23
     13e:	59 16       	cp	r5, r25
     140:	5b 16       	cp	r5, r27
     142:	5d 16       	cp	r5, r29
     144:	5f 16       	cp	r5, r31
     146:	61 16       	cp	r6, r17
     148:	63 16       	cp	r6, r19
     14a:	82 16       	cp	r8, r18
     14c:	a5 16       	cp	r10, r21
     14e:	c9 16       	cp	r12, r25
     150:	ec 16       	cp	r14, r28
     152:	0f 17       	cp	r16, r31
     154:	32 17       	cp	r19, r18
     156:	55 17       	cp	r21, r21
     158:	8f 17       	cp	r24, r31
     15a:	9c 17       	cp	r25, r28
     15c:	a9 17       	cp	r26, r25
     15e:	b6 17       	cp	r27, r22
     160:	c3 17       	cp	r28, r19
     162:	d0 17       	cp	r29, r16
     164:	dd 17       	cp	r29, r29
     166:	f6 17       	cp	r31, r22
     168:	03 18       	sub	r0, r3
     16a:	10 18       	sub	r1, r0
     16c:	1d 18       	sub	r1, r13
     16e:	2a 18       	sub	r2, r10
     170:	37 18       	sub	r3, r7
     172:	44 18       	sub	r4, r4
     174:	dc 1b       	sub	r29, r28
     176:	e2 1b       	sub	r30, r18
     178:	e5 1b       	sub	r30, r21
     17a:	e8 1b       	sub	r30, r24
     17c:	eb 1b       	sub	r30, r27
     17e:	ee 1b       	sub	r30, r30
     180:	f4 1b       	sub	r31, r20
     182:	f1 1b       	sub	r31, r17
     184:	f7 1b       	sub	r31, r23
     186:	fa 1b       	sub	r31, r26
     188:	fd 1b       	sub	r31, r29
     18a:	06 1c       	adc	r0, r6
     18c:	09 1c       	adc	r0, r9
     18e:	0c 1c       	adc	r0, r12
     190:	0f 1c       	adc	r0, r15
     192:	03 1c       	adc	r0, r3
     194:	d9 1b       	sub	r29, r25
     196:	df 1b       	sub	r29, r31
     198:	12 1c       	adc	r1, r2
     19a:	15 1c       	adc	r1, r5
     19c:	00 1c       	adc	r0, r0
     19e:	d6 1b       	sub	r29, r22
     1a0:	ac 1c       	adc	r10, r12
     1a2:	af 1c       	adc	r10, r15
     1a4:	ba 1c       	adc	r11, r10
     1a6:	bf 1c       	adc	r11, r15
     1a8:	c6 1c       	adc	r12, r6
     1aa:	cf 1c       	adc	r12, r15
     1ac:	d2 1c       	adc	r13, r2
     1ae:	d7 1c       	adc	r13, r7
     1b0:	de 1c       	adc	r13, r14
     1b2:	e7 1c       	adc	r14, r7

000001b4 <__trampolines_end>:
     1b4:	46 61       	ori	r20, 0x16	; 22
     1b6:	69 6c       	ori	r22, 0xC9	; 201
     1b8:	65 64       	ori	r22, 0x45	; 69
     1ba:	20 74       	andi	r18, 0x40	; 64
     1bc:	6f 20       	and	r6, r15
     1be:	6c 6f       	ori	r22, 0xFC	; 252
     1c0:	61 64       	ori	r22, 0x41	; 65
     1c2:	20 6d       	ori	r18, 0xD0	; 208
     1c4:	79 20       	and	r7, r9
     1c6:	41 44       	sbci	r20, 0x41	; 65
     1c8:	43 20       	and	r4, r3
     1ca:	64 72       	andi	r22, 0x24	; 36
     1cc:	69 76       	andi	r22, 0x69	; 105
     1ce:	65 72       	andi	r22, 0x25	; 37
     1d0:	0d 0a       	sbc	r0, r29
	...

000001d3 <__c.3514>:
     1d3:	54 78 20 74 61 73 6b 20 28 47 4f 54 20 57 48 41     Tx task (GOT WHA
     1e3:	43 4b 45 44 29 20 73 65 6e 74 20 64 61 74 61 21     CKED) sent data!
     1f3:	0d 0a 00                                            ...

000001f6 <__c.3512>:
     1f6:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     206:	69 74 21 0d 0a 00                                   it!...

0000020c <__c.3510>:
     20c:	54 78 20 74 61 73 6b 20 28 47 4f 54 20 4d 4f 4c     Tx task (GOT MOL
     21c:	45 29 20 73 65 6e 74 20 64 61 74 61 21 0d 0a 00     E) sent data!...

0000022c <__c.3508>:
     22c:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     23c:	69 74 21 0d 0a 00                                   it!...

00000242 <__c.3506>:
     242:	54 78 20 74 61 73 6b 20 73 65 6e 74 20 64 61 74     Tx task sent dat
     252:	61 21 0d 0a 00                                      a!...

00000257 <__c.3504>:
     257:	43 6f 75 6c 64 20 6e 6f 74 20 54 72 61 6e 73 6d     Could not Transm
     267:	69 74 21 0d 0a 00                                   it!...

0000026d <__c.3762>:
     26d:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     27d:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

00000289 <__c.3736>:
     289:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     299:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     2a9:	0d 0a 00                                            ...

000002ac <__c.3734>:
     2ac:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     2bc:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     2cc:	74 0d 0a 00                                         t...

000002d0 <__c.3718>:
     2d0:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2e0:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     2f0:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000002fc <__c.3716>:
     2fc:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     30c:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     31c:	61 69 6c 65 64 0d 0a 00                             ailed...

00000324 <__c.3714>:
     324:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     334:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     344:	61 69 6c 65 64 0d 0a 00                             ailed...

0000034c <__c.3125>:
     34c:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     35c:	65 64 0d 0a 00                                      ed...

00000361 <__c.3381>:
     361:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000368 <__c.3378>:
     368:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000377 <__c.3375>:
     377:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000388 <__c.3372>:
     388:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     398:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000003a3 <__c.3369>:
     3a3:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3b3:	20 53 69 67 6e 61 6c 00                              Signal.

000003bb <__c.3366>:
     3bb:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     3cb:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000003db <__c.3363>:
     3db:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     3eb:	72 6f 72 00                                         ror.

000003ef <__c.3360>:
     3ef:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000400 <__c.3357>:
     400:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     410:	61 72 74 00                                         art.

00000414 <__c.3354>:
     414:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000423 <__c.3351>:
     423:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     433:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000043e <__c.3348>:
     43e:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000044a <__c.3345>:
     44a:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     45a:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     46a:	20 6f 6b 3f 00                                       ok?.

0000046f <__c.3342>:
     46f:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     47f:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000048d <__c.3339>:
     48d:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     49d:	72 74 00                                            rt.

000004a0 <__c.3336>:
     4a0:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     4b0:	49 44 00                                            ID.

000004b3 <__c.3333>:
     4b3:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     4c3:	20 57 61 6b 65 75 70 00                              Wakeup.

000004cb <__c.3330>:
     4cb:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     4db:	6c 61 74 65 64 00                                   lated.

000004e1 <__c.3327>:
     4e1:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     4f1:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000004fc <__c.3324>:
     4fc:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     50c:	69 6e 74 65 72 00                                   inter.

00000512 <__c.3321>:
     512:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     522:	6c 6f 77 00                                         low.

00000526 <__c.3318>:
     526:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     536:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     546:	6e 6f 75 67 68 21 00                                nough!.

0000054d <__c.3314>:
     54d:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     55d:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     56d:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     57d:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000589 <__c.3311>:
     589:	29 3a 20 00                                         ): .

0000058d <__c.3309>:
     58d:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000599 <__c.3246>:
     599:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000005a8 <__c.2228>:
     5a8:	45 46 47 65 66 67 00                                EFGefg.

000005af <__c.2222>:
     5af:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000005c0 <__ctors_end>:
     5c0:	11 24       	eor	r1, r1
     5c2:	1f be       	out	0x3f, r1	; 63
     5c4:	cf ef       	ldi	r28, 0xFF	; 255
     5c6:	d1 e4       	ldi	r29, 0x41	; 65
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	cd bf       	out	0x3d, r28	; 61

000005cc <__do_copy_data>:
     5cc:	13 e0       	ldi	r17, 0x03	; 3
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b2 e0       	ldi	r27, 0x02	; 2
     5d2:	ec ee       	ldi	r30, 0xEC	; 236
     5d4:	f9 e6       	ldi	r31, 0x69	; 105
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	0b bf       	out	0x3b, r16	; 59
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__do_copy_data+0x14>
     5dc:	07 90       	elpm	r0, Z+
     5de:	0d 92       	st	X+, r0
     5e0:	ae 3d       	cpi	r26, 0xDE	; 222
     5e2:	b1 07       	cpc	r27, r17
     5e4:	d9 f7       	brne	.-10     	; 0x5dc <__do_copy_data+0x10>

000005e6 <__do_clear_bss>:
     5e6:	19 e0       	ldi	r17, 0x09	; 9
     5e8:	ae ed       	ldi	r26, 0xDE	; 222
     5ea:	b3 e0       	ldi	r27, 0x03	; 3
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <.do_clear_bss_start>

000005ee <.do_clear_bss_loop>:
     5ee:	1d 92       	st	X+, r1

000005f0 <.do_clear_bss_start>:
     5f0:	ab 36       	cpi	r26, 0x6B	; 107
     5f2:	b1 07       	cpc	r27, r17
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <.do_clear_bss_loop>
     5f6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <main>
     5fa:	0c 94 f4 34 	jmp	0x69e8	; 0x69e8 <_exit>

000005fe <__bad_interrupt>:
     5fe:	0c 94 fd 2b 	jmp	0x57fa	; 0x57fa <__vector_default>

00000602 <whacky_task>:

  return 0;
}

void whacky_task ()
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <whacky_task+0x6>
     608:	00 d0       	rcall	.+0      	; 0x60a <whacky_task+0x8>
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
  int8_t rssi, val;
  uint8_t *local_buf;
  uint16_t light, node_id, got_poll;
  uint8_t pos, got_mole, mole_whacked;
 
  printf ("whacky_task PID=%d\r\n", nrk_get_pid ());
     60e:	0e 94 4f 24 	call	0x489e	; 0x489e <nrk_get_pid>
     612:	1f 92       	push	r1
     614:	8f 93       	push	r24
     616:	8b e5       	ldi	r24, 0x5B	; 91
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
  
  // Open ADC device as read 
  fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
     622:	65 e0       	ldi	r22, 0x05	; 5
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <nrk_open>
     62a:	38 2e       	mov	r3, r24
  if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
  
  // init bmac on channel 12 
  bmac_init (12);
     62c:	8c e0       	ldi	r24, 0x0C	; 12
     62e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <bmac_init>
  bmac_set_rf_power(32);
     632:	80 e2       	ldi	r24, 0x20	; 32
     634:	0e 94 7d 05 	call	0xafa	; 0xafa <bmac_set_rf_power>

  // This sets the next RX buffer.
  // This can be called at anytime before releasing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     638:	64 e7       	ldi	r22, 0x74	; 116
     63a:	87 ee       	ldi	r24, 0xE7	; 231
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <bmac_rx_pkt_set_buffer>
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
        // Assume that there is a space after POLL
        pos = 9;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
        {
          node_id *= 10;
     64a:	9a e0       	ldi	r25, 0x0A	; 10
     64c:	29 2e       	mov	r2, r25

      // turn off red led
      nrk_led_clr(RED_LED);

      // send got whacked command
      sprintf (tx_buf, "GOT_WHACKED: %d", MAC_ADDR);
     64e:	2d e5       	ldi	r18, 0x5D	; 93
     650:	c2 2e       	mov	r12, r18
     652:	25 e0       	ldi	r18, 0x05	; 5
     654:	d2 2e       	mov	r13, r18
          nrk_kprintf(PSTR("Could not Transmit!\r\n"));
      }

      // Task gets control again after TX complete
      nrk_kprintf (PSTR ("Tx task (GOT WHACKED) sent data!\r\n"));
      printf("%s\r\n", tx_buf);
     656:	31 ec       	ldi	r19, 0xC1	; 193
     658:	a3 2e       	mov	r10, r19
     65a:	32 e0       	ldi	r19, 0x02	; 2
     65c:	b3 2e       	mov	r11, r19

      // turn on red led
      nrk_led_set(RED_LED);

      // send got mole to master
      sprintf (tx_buf, "GOT_MOLE: %d", MAC_ADDR);
     65e:	4f ec       	ldi	r20, 0xCF	; 207
     660:	84 2e       	mov	r8, r20
     662:	42 e0       	ldi	r20, 0x02	; 2
     664:	94 2e       	mov	r9, r20


    // Got a poll request, read the light sensor and send the value to the master
    if((got_poll == 1) && (node_id == MAC_ADDR))
    {    
      printf("Got poll request");
     666:	5a ea       	ldi	r21, 0xAA	; 170
     668:	65 2e       	mov	r6, r21
     66a:	52 e0       	ldi	r21, 0x02	; 2
     66c:	75 2e       	mov	r7, r21
        printf("Light value: %u\r\n", light);
    }
    
#endif // DEBUG_LIGHT_SENSOR

    printf(PSTR("Waiting for a Packet\r\n"));
     66e:	80 e7       	ldi	r24, 0x70	; 112
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>

    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 8c 18 	call	0x3118	; 0x3118 <nrk_led_set>

    // Wait until an RX packet is received
    if(!bmac_rx_pkt_ready())
     67e:	0e 94 dd 06 	call	0xdba	; 0xdba <bmac_rx_pkt_ready>
     682:	81 11       	cpse	r24, r1
     684:	02 c0       	rjmp	.+4      	; 0x68a <whacky_task+0x88>
    {
      val = bmac_wait_until_rx_pkt ();
     686:	0e 94 ab 05 	call	0xb56	; 0xb56 <bmac_wait_until_rx_pkt>
    }

    local_buf = bmac_rx_pkt_get (&len, &rssi);
     68a:	be 01       	movw	r22, r28
     68c:	6d 5f       	subi	r22, 0xFD	; 253
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	ce 01       	movw	r24, r28
     692:	04 96       	adiw	r24, 0x04	; 4
     694:	0e 94 c5 06 	call	0xd8a	; 0xd8a <bmac_rx_pkt_get>
     698:	8c 01       	movw	r16, r24
    printf ("Got RX packet len=%d RSSI=%d [%s]\r\n", len, rssi, local_buf);
     69a:	1f 93       	push	r17
     69c:	8f 93       	push	r24
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	28 2f       	mov	r18, r24
     6a2:	33 27       	eor	r19, r19
     6a4:	27 fd       	sbrc	r18, 7
     6a6:	30 95       	com	r19
     6a8:	3f 93       	push	r19
     6aa:	8f 93       	push	r24
     6ac:	8c 81       	ldd	r24, Y+4	; 0x04
     6ae:	1f 92       	push	r1
     6b0:	8f 93       	push	r24
     6b2:	a6 e8       	ldi	r26, 0x86	; 134
     6b4:	b2 e0       	ldi	r27, 0x02	; 2
     6b6:	bf 93       	push	r27
     6b8:	af 93       	push	r26
     6ba:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>

    // Check for a poll packet
    if(len>5 && local_buf[0] == 'P' && local_buf[1] == 'O' && local_buf[2] == 'L' &&
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	96 30       	cpi	r25, 0x06	; 6
     6cc:	d8 f1       	brcs	.+118    	; 0x744 <whacky_task+0x142>
     6ce:	d8 01       	movw	r26, r16
     6d0:	8c 91       	ld	r24, X
     6d2:	80 35       	cpi	r24, 0x50	; 80
     6d4:	f1 f5       	brne	.+124    	; 0x752 <whacky_task+0x150>
     6d6:	11 96       	adiw	r26, 0x01	; 1
     6d8:	8c 91       	ld	r24, X
     6da:	11 97       	sbiw	r26, 0x01	; 1
     6dc:	8f 34       	cpi	r24, 0x4F	; 79
     6de:	09 f0       	breq	.+2      	; 0x6e2 <whacky_task+0xe0>
     6e0:	8a c1       	rjmp	.+788    	; 0x9f6 <whacky_task+0x3f4>
     6e2:	12 96       	adiw	r26, 0x02	; 2
     6e4:	8c 91       	ld	r24, X
     6e6:	12 97       	sbiw	r26, 0x02	; 2
     6e8:	8c 34       	cpi	r24, 0x4C	; 76
     6ea:	09 f0       	breq	.+2      	; 0x6ee <whacky_task+0xec>
     6ec:	84 c1       	rjmp	.+776    	; 0x9f6 <whacky_task+0x3f4>
     6ee:	13 96       	adiw	r26, 0x03	; 3
     6f0:	8c 91       	ld	r24, X
     6f2:	13 97       	sbiw	r26, 0x03	; 3
     6f4:	8c 34       	cpi	r24, 0x4C	; 76
     6f6:	09 f0       	breq	.+2      	; 0x6fa <whacky_task+0xf8>
     6f8:	7e c1       	rjmp	.+764    	; 0x9f6 <whacky_task+0x3f4>
       local_buf[3] == 'L' && local_buf[4] == ':')
     6fa:	14 96       	adiw	r26, 0x04	; 4
     6fc:	8c 91       	ld	r24, X
     6fe:	8a 33       	cpi	r24, 0x3A	; 58
     700:	09 f0       	breq	.+2      	; 0x704 <whacky_task+0x102>
     702:	79 c1       	rjmp	.+754    	; 0x9f6 <whacky_task+0x3f4>
     704:	f8 01       	movw	r30, r16
     706:	36 96       	adiw	r30, 0x06	; 6
     708:	86 e0       	ldi	r24, 0x06	; 6
     70a:	e1 2c       	mov	r14, r1
     70c:	f1 2c       	mov	r15, r1
    {
        // Assume that there is a space after POLL
        pos = 6;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
     70e:	89 13       	cpse	r24, r25
     710:	07 c0       	rjmp	.+14     	; 0x720 <whacky_task+0x11e>
          node_id *= 10;
          node_id += (local_buf[pos]-'0');
          pos++;
        }

        if(pos > 6)
     712:	86 30       	cpi	r24, 0x06	; 6
     714:	09 f4       	brne	.+2      	; 0x718 <whacky_task+0x116>
     716:	71 c1       	rjmp	.+738    	; 0x9fa <whacky_task+0x3f8>
        {
          got_poll = 1;
     718:	44 24       	eor	r4, r4
     71a:	43 94       	inc	r4
     71c:	51 2c       	mov	r5, r1
     71e:	24 c0       	rjmp	.+72     	; 0x768 <whacky_task+0x166>
       local_buf[3] == 'L' && local_buf[4] == ':')
    {
        // Assume that there is a space after POLL
        pos = 6;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
     720:	41 91       	ld	r20, Z+
     722:	20 ed       	ldi	r18, 0xD0	; 208
     724:	24 0f       	add	r18, r20
     726:	2a 30       	cpi	r18, 0x0A	; 10
     728:	a0 f7       	brcc	.-24     	; 0x712 <whacky_task+0x110>
        {
          node_id *= 10;
     72a:	2e 9c       	mul	r2, r14
     72c:	90 01       	movw	r18, r0
     72e:	2f 9c       	mul	r2, r15
     730:	30 0d       	add	r19, r0
     732:	11 24       	eor	r1, r1
     734:	79 01       	movw	r14, r18
     736:	b0 e3       	ldi	r27, 0x30	; 48
     738:	eb 1a       	sub	r14, r27
     73a:	f1 08       	sbc	r15, r1
          node_id += (local_buf[pos]-'0');
     73c:	e4 0e       	add	r14, r20
     73e:	f1 1c       	adc	r15, r1
          pos++;
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	e5 cf       	rjmp	.-54     	; 0x70e <whacky_task+0x10c>
     744:	00 e0       	ldi	r16, 0x00	; 0
     746:	41 2c       	mov	r4, r1
     748:	51 2c       	mov	r5, r1
  while (1) 
  {
    node_id = 0;
    got_poll = 0;
    got_mole = 0;
    mole_whacked = 0;
     74a:	10 e0       	ldi	r17, 0x00	; 0
  // This can be called at anytime before releasing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
  while (1) 
  {
    node_id = 0;
     74c:	e1 2c       	mov	r14, r1
     74e:	f1 2c       	mov	r15, r1
     750:	42 c0       	rjmp	.+132    	; 0x7d6 <whacky_task+0x1d4>
          got_poll = 1;
        }
    }

    // Didn't get a poll, let's see if this node received a MOLE packet
    if((got_poll == 0) && (len>5 && local_buf[0] == 'M' && local_buf[1] == 'O' && local_buf[2] == 'L' &&
     752:	8d 34       	cpi	r24, 0x4D	; 77
     754:	29 f4       	brne	.+10     	; 0x760 <whacky_task+0x15e>
     756:	f8 01       	movw	r30, r16
     758:	81 81       	ldd	r24, Z+1	; 0x01
     75a:	8f 34       	cpi	r24, 0x4F	; 79
     75c:	09 f4       	brne	.+2      	; 0x760 <whacky_task+0x15e>
     75e:	0b c1       	rjmp	.+534    	; 0x976 <whacky_task+0x374>
     760:	41 2c       	mov	r4, r1
     762:	51 2c       	mov	r5, r1
  // This can be called at anytime before releasing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
  while (1) 
  {
    node_id = 0;
     764:	e1 2c       	mov	r14, r1
     766:	f1 2c       	mov	r15, r1
          got_mole = 1;
        }
    }

    // Master sends command to mole to let it know it's whacked
    if((got_mole == 0) && (len>5 && local_buf[0] == 'W' && local_buf[1] == 'H' && local_buf[2] == 'A' &&
     768:	d8 01       	movw	r26, r16
     76a:	8c 91       	ld	r24, X
     76c:	87 35       	cpi	r24, 0x57	; 87
     76e:	09 f0       	breq	.+2      	; 0x772 <whacky_task+0x170>
     770:	3f c1       	rjmp	.+638    	; 0x9f0 <whacky_task+0x3ee>
     772:	d8 01       	movw	r26, r16
     774:	11 96       	adiw	r26, 0x01	; 1
     776:	8c 91       	ld	r24, X
     778:	11 97       	sbiw	r26, 0x01	; 1
     77a:	88 34       	cpi	r24, 0x48	; 72
     77c:	09 f0       	breq	.+2      	; 0x780 <whacky_task+0x17e>
     77e:	38 c1       	rjmp	.+624    	; 0x9f0 <whacky_task+0x3ee>
     780:	12 96       	adiw	r26, 0x02	; 2
     782:	8c 91       	ld	r24, X
     784:	12 97       	sbiw	r26, 0x02	; 2
     786:	81 34       	cpi	r24, 0x41	; 65
     788:	09 f0       	breq	.+2      	; 0x78c <whacky_task+0x18a>
     78a:	32 c1       	rjmp	.+612    	; 0x9f0 <whacky_task+0x3ee>
     78c:	13 96       	adiw	r26, 0x03	; 3
     78e:	8c 91       	ld	r24, X
     790:	13 97       	sbiw	r26, 0x03	; 3
     792:	83 34       	cpi	r24, 0x43	; 67
     794:	09 f0       	breq	.+2      	; 0x798 <whacky_task+0x196>
     796:	2c c1       	rjmp	.+600    	; 0x9f0 <whacky_task+0x3ee>
       local_buf[3] == 'C' && local_buf[4] == 'K' && local_buf[5] == 'E' && local_buf[6] == 'D' && local_buf[7] == ':'))
     798:	14 96       	adiw	r26, 0x04	; 4
     79a:	8c 91       	ld	r24, X
     79c:	14 97       	sbiw	r26, 0x04	; 4
     79e:	8b 34       	cpi	r24, 0x4B	; 75
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <whacky_task+0x1a2>
     7a2:	26 c1       	rjmp	.+588    	; 0x9f0 <whacky_task+0x3ee>
     7a4:	15 96       	adiw	r26, 0x05	; 5
     7a6:	8c 91       	ld	r24, X
     7a8:	15 97       	sbiw	r26, 0x05	; 5
     7aa:	85 34       	cpi	r24, 0x45	; 69
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <whacky_task+0x1ae>
     7ae:	20 c1       	rjmp	.+576    	; 0x9f0 <whacky_task+0x3ee>
     7b0:	16 96       	adiw	r26, 0x06	; 6
     7b2:	8c 91       	ld	r24, X
     7b4:	16 97       	sbiw	r26, 0x06	; 6
     7b6:	84 34       	cpi	r24, 0x44	; 68
     7b8:	09 f0       	breq	.+2      	; 0x7bc <whacky_task+0x1ba>
     7ba:	1a c1       	rjmp	.+564    	; 0x9f0 <whacky_task+0x3ee>
     7bc:	17 96       	adiw	r26, 0x07	; 7
     7be:	8c 91       	ld	r24, X
     7c0:	8a 33       	cpi	r24, 0x3A	; 58
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <whacky_task+0x1c4>
     7c4:	15 c1       	rjmp	.+554    	; 0x9f0 <whacky_task+0x3ee>
     7c6:	f8 01       	movw	r30, r16
     7c8:	39 96       	adiw	r30, 0x09	; 9
     7ca:	89 e0       	ldi	r24, 0x09	; 9
    {
        // Assume that there is a space after POLL
        pos = 9;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
     7cc:	89 17       	cp	r24, r25
     7ce:	08 f4       	brcc	.+2      	; 0x7d2 <whacky_task+0x1d0>
     7d0:	fc c0       	rjmp	.+504    	; 0x9ca <whacky_task+0x3c8>
     7d2:	00 e0       	ldi	r16, 0x00	; 0
          pos++;
        }

        if(pos > 8)
        {
          mole_whacked = 1;
     7d4:	11 e0       	ldi	r17, 0x01	; 1
        }

    }

    nrk_led_clr (ORANGE_LED);
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
     7de:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <bmac_rx_pkt_release>


    // Got a poll request, read the light sensor and send the value to the master
    if((got_poll == 1) && (node_id == MAC_ADDR))
     7e2:	4a 94       	dec	r4
     7e4:	45 28       	or	r4, r5
     7e6:	09 f0       	breq	.+2      	; 0x7ea <whacky_task+0x1e8>
     7e8:	4f c0       	rjmp	.+158    	; 0x888 <whacky_task+0x286>
     7ea:	f2 e0       	ldi	r31, 0x02	; 2
     7ec:	ef 16       	cp	r14, r31
     7ee:	f1 04       	cpc	r15, r1
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <whacky_task+0x1f2>
     7f2:	3d cf       	rjmp	.-390    	; 0x66e <whacky_task+0x6c>
    {    
      printf("Got poll request");
     7f4:	7f 92       	push	r7
     7f6:	6f 92       	push	r6
     7f8:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>

      // Read light sensor
      val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	83 2d       	mov	r24, r3
     802:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <nrk_set_status>
      val=nrk_read(fd,&light,2);
     806:	42 e0       	ldi	r20, 0x02	; 2
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	83 2d       	mov	r24, r3
     810:	0e 94 55 2a 	call	0x54aa	; 0x54aa <nrk_read>
    
      sprintf (tx_buf, "%d:%u", MAC_ADDR, light);
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	8f 93       	push	r24
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	8f 93       	push	r24
     81c:	1f 92       	push	r1
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	8f 93       	push	r24
     822:	8b eb       	ldi	r24, 0xBB	; 187
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	df 92       	push	r13
     82c:	cf 92       	push	r12
     82e:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
      nrk_led_set (BLUE_LED);
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 8c 18 	call	0x3118	; 0x3118 <nrk_led_set>
      val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     83a:	f6 01       	movw	r30, r12
     83c:	01 90       	ld	r0, Z+
     83e:	00 20       	and	r0, r0
     840:	e9 f7       	brne	.-6      	; 0x83c <whacky_task+0x23a>
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	ed 55       	subi	r30, 0x5D	; 93
     846:	f5 40       	sbci	r31, 0x05	; 5
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	6e 0f       	add	r22, r30
     84c:	8d e5       	ldi	r24, 0x5D	; 93
     84e:	95 e0       	ldi	r25, 0x05	; 5
     850:	0e 94 77 06 	call	0xcee	; 0xcee <bmac_tx_pkt>

      if(val != NRK_OK) 
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	21 f0       	breq	.+8      	; 0x86a <whacky_task+0x268>
      {
          nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     862:	87 e5       	ldi	r24, 0x57	; 87
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
      }

      // Task gets control again after TX complete
      nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
     86a:	82 e4       	ldi	r24, 0x42	; 66
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
      printf("%s\r\n", tx_buf);
     872:	df 92       	push	r13
     874:	cf 92       	push	r12
     876:	bf 92       	push	r11
     878:	af 92       	push	r10
     87a:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
      nrk_led_clr (BLUE_LED);
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
     886:	72 c0       	rjmp	.+228    	; 0x96c <whacky_task+0x36a>
   }
   // Got a mole request for this node
   else if((got_mole == 1) && (node_id == MAC_ADDR))
     888:	01 30       	cpi	r16, 0x01	; 1
     88a:	91 f5       	brne	.+100    	; 0x8f0 <whacky_task+0x2ee>
     88c:	32 e0       	ldi	r19, 0x02	; 2
     88e:	e3 16       	cp	r14, r19
     890:	f1 04       	cpc	r15, r1
     892:	09 f0       	breq	.+2      	; 0x896 <whacky_task+0x294>
     894:	ec ce       	rjmp	.-552    	; 0x66e <whacky_task+0x6c>
   {
      printf("MOLE ON\r\n");
     896:	86 ec       	ldi	r24, 0xC6	; 198
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>

      // turn on red led
      nrk_led_set(RED_LED);
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 8c 18 	call	0x3118	; 0x3118 <nrk_led_set>

      // send got mole to master
      sprintf (tx_buf, "GOT_MOLE: %d", MAC_ADDR);
     8a6:	1f 92       	push	r1
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	8f 93       	push	r24
     8ac:	9f 92       	push	r9
     8ae:	8f 92       	push	r8
     8b0:	df 92       	push	r13
     8b2:	cf 92       	push	r12
     8b4:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
      val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     8b8:	f6 01       	movw	r30, r12
     8ba:	01 90       	ld	r0, Z+
     8bc:	00 20       	and	r0, r0
     8be:	e9 f7       	brne	.-6      	; 0x8ba <whacky_task+0x2b8>
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	ed 55       	subi	r30, 0x5D	; 93
     8c4:	f5 40       	sbci	r31, 0x05	; 5
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	6e 0f       	add	r22, r30
     8ca:	8d e5       	ldi	r24, 0x5D	; 93
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 77 06 	call	0xcee	; 0xcee <bmac_tx_pkt>

      if(val != NRK_OK) 
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	21 f0       	breq	.+8      	; 0x8ea <whacky_task+0x2e8>
      {
          nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     8e2:	8c e2       	ldi	r24, 0x2C	; 44
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
      }

      // Task gets control again after TX complete
      nrk_kprintf (PSTR ("Tx task (GOT MOLE) sent data!\r\n"));
     8ea:	8c e0       	ldi	r24, 0x0C	; 12
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	36 c0       	rjmp	.+108    	; 0x95c <whacky_task+0x35a>
      printf("%s\r\n", tx_buf);

   }
   // Mole whacked
   else if((mole_whacked == 1) && (node_id == MAC_ADDR))
     8f0:	11 30       	cpi	r17, 0x01	; 1
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <whacky_task+0x2f4>
     8f4:	bc ce       	rjmp	.-648    	; 0x66e <whacky_task+0x6c>
     8f6:	52 e0       	ldi	r21, 0x02	; 2
     8f8:	e5 16       	cp	r14, r21
     8fa:	f1 04       	cpc	r15, r1
     8fc:	09 f0       	breq	.+2      	; 0x900 <whacky_task+0x2fe>
     8fe:	b7 ce       	rjmp	.-658    	; 0x66e <whacky_task+0x6c>
   {
      printf("MOLE OFF\r\n");
     900:	8c ed       	ldi	r24, 0xDC	; 220
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>

      // turn off red led
      nrk_led_clr(RED_LED);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>

      // send got whacked command
      sprintf (tx_buf, "GOT_WHACKED: %d", MAC_ADDR);
     910:	1f 92       	push	r1
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	8f 93       	push	r24
     916:	a6 ee       	ldi	r26, 0xE6	; 230
     918:	b2 e0       	ldi	r27, 0x02	; 2
     91a:	bf 93       	push	r27
     91c:	af 93       	push	r26
     91e:	df 92       	push	r13
     920:	cf 92       	push	r12
     922:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
      val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     926:	f6 01       	movw	r30, r12
     928:	01 90       	ld	r0, Z+
     92a:	00 20       	and	r0, r0
     92c:	e9 f7       	brne	.-6      	; 0x928 <whacky_task+0x326>
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	ed 55       	subi	r30, 0x5D	; 93
     932:	f5 40       	sbci	r31, 0x05	; 5
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	6e 0f       	add	r22, r30
     938:	8d e5       	ldi	r24, 0x5D	; 93
     93a:	95 e0       	ldi	r25, 0x05	; 5
     93c:	0e 94 77 06 	call	0xcee	; 0xcee <bmac_tx_pkt>

      if(val != NRK_OK) 
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	21 f0       	breq	.+8      	; 0x958 <whacky_task+0x356>
      {
          nrk_kprintf(PSTR("Could not Transmit!\r\n"));
     950:	86 ef       	ldi	r24, 0xF6	; 246
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
      }

      // Task gets control again after TX complete
      nrk_kprintf (PSTR ("Tx task (GOT WHACKED) sent data!\r\n"));
     958:	83 ed       	ldi	r24, 0xD3	; 211
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
      printf("%s\r\n", tx_buf);
     960:	df 92       	push	r13
     962:	cf 92       	push	r12
     964:	bf 92       	push	r11
     966:	af 92       	push	r10
     968:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	7c ce       	rjmp	.-776    	; 0x66e <whacky_task+0x6c>
          got_poll = 1;
        }
    }

    // Didn't get a poll, let's see if this node received a MOLE packet
    if((got_poll == 0) && (len>5 && local_buf[0] == 'M' && local_buf[1] == 'O' && local_buf[2] == 'L' &&
     976:	82 81       	ldd	r24, Z+2	; 0x02
     978:	8c 34       	cpi	r24, 0x4C	; 76
     97a:	09 f0       	breq	.+2      	; 0x97e <whacky_task+0x37c>
     97c:	f1 ce       	rjmp	.-542    	; 0x760 <whacky_task+0x15e>
     97e:	83 81       	ldd	r24, Z+3	; 0x03
     980:	85 34       	cpi	r24, 0x45	; 69
     982:	09 f0       	breq	.+2      	; 0x986 <whacky_task+0x384>
     984:	ed ce       	rjmp	.-550    	; 0x760 <whacky_task+0x15e>
       local_buf[3] == 'E' && local_buf[4] == ':'))
     986:	84 81       	ldd	r24, Z+4	; 0x04
     988:	8a 33       	cpi	r24, 0x3A	; 58
     98a:	09 f0       	breq	.+2      	; 0x98e <whacky_task+0x38c>
     98c:	e9 ce       	rjmp	.-558    	; 0x760 <whacky_task+0x15e>
     98e:	36 96       	adiw	r30, 0x06	; 6
     990:	86 e0       	ldi	r24, 0x06	; 6
  // This can be called at anytime before releasing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
  while (1) 
  {
    node_id = 0;
     992:	e1 2c       	mov	r14, r1
     994:	f1 2c       	mov	r15, r1
       local_buf[3] == 'E' && local_buf[4] == ':'))
    {
        // Assume that there is a space after POLL
        pos = 6;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
     996:	89 13       	cpse	r24, r25
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <whacky_task+0x3a4>
          node_id *= 10;
          node_id += (local_buf[pos]-'0');
          pos++;
        }

        if(pos > 6)
     99a:	86 30       	cpi	r24, 0x06	; 6
     99c:	71 f1       	breq	.+92     	; 0x9fa <whacky_task+0x3f8>
        {
          got_mole = 1;
     99e:	01 e0       	ldi	r16, 0x01	; 1
     9a0:	41 2c       	mov	r4, r1
     9a2:	51 2c       	mov	r5, r1
     9a4:	26 c0       	rjmp	.+76     	; 0x9f2 <whacky_task+0x3f0>
       local_buf[3] == 'E' && local_buf[4] == ':'))
    {
        // Assume that there is a space after POLL
        pos = 6;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
     9a6:	41 91       	ld	r20, Z+
     9a8:	20 ed       	ldi	r18, 0xD0	; 208
     9aa:	24 0f       	add	r18, r20
     9ac:	2a 30       	cpi	r18, 0x0A	; 10
     9ae:	a8 f7       	brcc	.-22     	; 0x99a <whacky_task+0x398>
        {
          node_id *= 10;
     9b0:	2e 9c       	mul	r2, r14
     9b2:	90 01       	movw	r18, r0
     9b4:	2f 9c       	mul	r2, r15
     9b6:	30 0d       	add	r19, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	79 01       	movw	r14, r18
     9bc:	50 e3       	ldi	r21, 0x30	; 48
     9be:	e5 1a       	sub	r14, r21
     9c0:	f1 08       	sbc	r15, r1
          node_id += (local_buf[pos]-'0');
     9c2:	e4 0e       	add	r14, r20
     9c4:	f1 1c       	adc	r15, r1
          pos++;
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	e6 cf       	rjmp	.-52     	; 0x996 <whacky_task+0x394>
       local_buf[3] == 'C' && local_buf[4] == 'K' && local_buf[5] == 'E' && local_buf[6] == 'D' && local_buf[7] == ':'))
    {
        // Assume that there is a space after POLL
        pos = 9;

        while(pos < len && local_buf[pos] != '\0' && local_buf[pos] >='0' && local_buf[pos]<='9') 
     9ca:	41 91       	ld	r20, Z+
     9cc:	20 ed       	ldi	r18, 0xD0	; 208
     9ce:	24 0f       	add	r18, r20
     9d0:	2a 30       	cpi	r18, 0x0A	; 10
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <whacky_task+0x3d4>
     9d4:	fe ce       	rjmp	.-516    	; 0x7d2 <whacky_task+0x1d0>
        {
          node_id *= 10;
     9d6:	2e 9c       	mul	r2, r14
     9d8:	90 01       	movw	r18, r0
     9da:	2f 9c       	mul	r2, r15
     9dc:	30 0d       	add	r19, r0
     9de:	11 24       	eor	r1, r1
     9e0:	79 01       	movw	r14, r18
     9e2:	b0 e3       	ldi	r27, 0x30	; 48
     9e4:	eb 1a       	sub	r14, r27
     9e6:	f1 08       	sbc	r15, r1
          node_id += (local_buf[pos]-'0');
     9e8:	e4 0e       	add	r14, r20
     9ea:	f1 1c       	adc	r15, r1
          pos++;
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	ee ce       	rjmp	.-548    	; 0x7cc <whacky_task+0x1ca>
     9f0:	00 e0       	ldi	r16, 0x00	; 0
  while (1) 
  {
    node_id = 0;
    got_poll = 0;
    got_mole = 0;
    mole_whacked = 0;
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	f0 ce       	rjmp	.-544    	; 0x7d6 <whacky_task+0x1d4>
  // This can be called at anytime before releasing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
  while (1) 
  {
    node_id = 0;
     9f6:	e1 2c       	mov	r14, r1
     9f8:	f1 2c       	mov	r15, r1
     9fa:	41 2c       	mov	r4, r1
     9fc:	51 2c       	mov	r5, r1
     9fe:	b4 ce       	rjmp	.-664    	; 0x768 <whacky_task+0x166>

00000a00 <nrk_create_taskset>:

  }
}

void nrk_create_taskset ()
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
    WHACKY_TASK.task = whacky_task;
     a04:	c6 eb       	ldi	r28, 0xB6	; 182
     a06:	d4 e0       	ldi	r29, 0x04	; 4
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	9e 83       	std	Y+6, r25	; 0x06
     a0e:	8d 83       	std	Y+5, r24	; 0x05
    nrk_task_set_stk( &WHACKY_TASK, whacky_task_stack, NRK_APP_STACKSIZE);
     a10:	40 e8       	ldi	r20, 0x80	; 128
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	63 ed       	ldi	r22, 0xD3	; 211
     a16:	76 e0       	ldi	r23, 0x06	; 6
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <nrk_task_set_stk>
    WHACKY_TASK.prio = 2;
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	88 87       	std	Y+8, r24	; 0x08
    WHACKY_TASK.FirstActivation = TRUE;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	8f 83       	std	Y+7, r24	; 0x07
    WHACKY_TASK.Type = BASIC_TASK;
     a26:	89 87       	std	Y+9, r24	; 0x09
    WHACKY_TASK.SchType = PREEMPTIVE;
     a28:	8a 87       	std	Y+10, r24	; 0x0a
    WHACKY_TASK.period.secs = 1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	8b 87       	std	Y+11, r24	; 0x0b
     a34:	9c 87       	std	Y+12, r25	; 0x0c
     a36:	ad 87       	std	Y+13, r26	; 0x0d
     a38:	be 87       	std	Y+14, r27	; 0x0e
    WHACKY_TASK.period.nano_secs = 0;
     a3a:	1f 86       	std	Y+15, r1	; 0x0f
     a3c:	18 8a       	std	Y+16, r1	; 0x10
     a3e:	19 8a       	std	Y+17, r1	; 0x11
     a40:	1a 8a       	std	Y+18, r1	; 0x12
    WHACKY_TASK.cpu_reserve.secs = 0;
     a42:	1b 8a       	std	Y+19, r1	; 0x13
     a44:	1c 8a       	std	Y+20, r1	; 0x14
     a46:	1d 8a       	std	Y+21, r1	; 0x15
     a48:	1e 8a       	std	Y+22, r1	; 0x16
    WHACKY_TASK.cpu_reserve.nano_secs = 0;
     a4a:	1f 8a       	std	Y+23, r1	; 0x17
     a4c:	18 8e       	std	Y+24, r1	; 0x18
     a4e:	19 8e       	std	Y+25, r1	; 0x19
     a50:	1a 8e       	std	Y+26, r1	; 0x1a
    WHACKY_TASK.offset.secs = 0;
     a52:	1b 8e       	std	Y+27, r1	; 0x1b
     a54:	1c 8e       	std	Y+28, r1	; 0x1c
     a56:	1d 8e       	std	Y+29, r1	; 0x1d
     a58:	1e 8e       	std	Y+30, r1	; 0x1e
    WHACKY_TASK.offset.nano_secs = 0;
     a5a:	1f 8e       	std	Y+31, r1	; 0x1f
     a5c:	18 a2       	std	Y+32, r1	; 0x20
     a5e:	19 a2       	std	Y+33, r1	; 0x21
     a60:	1a a2       	std	Y+34, r1	; 0x22
    nrk_activate_task (&WHACKY_TASK);
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 14 22 	call	0x4428	; 0x4428 <nrk_activate_task>

    printf ("Create done\r\n");
     a68:	86 ef       	ldi	r24, 0xF6	; 246
     a6a:	92 e0       	ldi	r25, 0x02	; 2
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
    WHACKY_TASK.cpu_reserve.nano_secs = 0;
    WHACKY_TASK.offset.secs = 0;
    WHACKY_TASK.offset.nano_secs = 0;
    nrk_activate_task (&WHACKY_TASK);

    printf ("Create done\r\n");
     a70:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <puts>

00000a74 <nrk_register_drivers>:
    //     #define NRK_MAX_DRIVER_CNT  
    //     in nrk_cfg.h
    // Make sure to add: 
    //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
    //     in makefile
    val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	81 e6       	ldi	r24, 0x61	; 97
     a78:	9d e0       	ldi	r25, 0x0D	; 13
     a7a:	0e 94 be 29 	call	0x537c	; 0x537c <nrk_register_driver>
    if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     a7e:	8f 3f       	cpi	r24, 0xFF	; 255
     a80:	21 f4       	brne	.+8      	; 0xa8a <nrk_register_drivers+0x16>
     a82:	84 eb       	ldi	r24, 0xB4	; 180
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <nrk_kprintf>
     a8a:	08 95       	ret

00000a8c <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     a8c:	08 95       	ret

00000a8e <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     a8e:	64 30       	cpi	r22, 0x04	; 4
     a90:	21 f4       	brne	.+8      	; 0xa9a <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     a92:	0e 94 cb 12 	call	0x2596	; 0x2596 <rf_security_set_ctr_counter>
  return NRK_OK;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     a9c:	08 95       	ret

00000a9e <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	08 95       	ret

00000aa2 <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	08 95       	ret

00000aa8 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     aa8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <rf_auto_ack_disable>
  return NRK_OK;
}
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	08 95       	ret

00000ab0 <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     ab0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <rf_auto_ack_enable>
  return NRK_OK;
}
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 95       	ret

00000ab8 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     ab8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <rf_addr_decode_disable>
  return NRK_OK;
}
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	08 95       	ret

00000ac0 <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     ac0:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <rf_addr_decode_enable>
  return NRK_OK;
}
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret

00000ac8 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     ac8:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	08 95       	ret

00000ad0 <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     ad0:	90 93 dc 04 	sts	0x04DC, r25
     ad4:	80 93 db 04 	sts	0x04DB, r24
  return NRK_OK;
}
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret

00000adc <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     adc:	0e 94 c9 12 	call	0x2592	; 0x2592 <rf_security_last_pkt_status>
}
     ae0:	08 95       	ret

00000ae2 <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     ae2:	60 31       	cpi	r22, 0x10	; 16
     ae4:	21 f4       	brne	.+8      	; 0xaee <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     ae6:	0e 94 cc 12 	call	0x2598	; 0x2598 <rf_security_set_key>
  return NRK_OK;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     af0:	08 95       	ret

00000af2 <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	08 95       	ret

00000af6 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	08 95       	ret

00000afa <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     afa:	80 32       	cpi	r24, 0x20	; 32
     afc:	20 f4       	brcc	.+8      	; 0xb06 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     afe:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_tx_power>
  return NRK_OK;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     b06:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     b08:	08 95       	ret

00000b0a <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     b0a:	80 93 e7 03 	sts	0x03E7, r24
     b0e:	08 95       	ret

00000b10 <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     b10:	99 27       	eor	r25, r25
     b12:	87 fd       	sbrc	r24, 7
     b14:	90 95       	com	r25
     b16:	0e 94 bf 12 	call	0x257e	; 0x257e <rf_set_cca_thresh>
  return NRK_OK;
}
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	08 95       	ret

00000b1e <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	1f 92       	push	r1
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     b28:	8b 31       	cpi	r24, 0x1B	; 27
     b2a:	80 f4       	brcc	.+32     	; 0xb4c <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     b2c:	80 93 f1 03 	sts	0x03F1, r24
  rf_power_up ();
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	4f ef       	ldi	r20, 0xFF	; 255
     b3c:	5f ef       	ldi	r21, 0xFF	; 255
     b3e:	69 81       	ldd	r22, Y+1	; 0x01
     b40:	81 ed       	ldi	r24, 0xD1	; 209
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <rf_init>
  return NRK_OK;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     b4e:	0f 90       	pop	r0
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     b56:	80 91 f4 03 	lds	r24, 0x03F4
     b5a:	88 23       	and	r24, r24
     b5c:	11 f1       	breq	.+68     	; 0xba2 <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     b5e:	80 91 e6 04 	lds	r24, 0x04E6
     b62:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	00 90 e6 04 	lds	r0, 0x04E6
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <bmac_wait_until_rx_pkt+0x2a>
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	d2 f7       	brpl	.-12     	; 0xb78 <bmac_wait_until_rx_pkt+0x22>
     b84:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	00 90 e6 04 	lds	r0, 0x04E6
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <bmac_wait_until_rx_pkt+0x44>
     b92:	b6 95       	lsr	r27
     b94:	a7 95       	ror	r26
     b96:	97 95       	ror	r25
     b98:	87 95       	ror	r24
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <bmac_wait_until_rx_pkt+0x3c>
     b9e:	80 ff       	sbrs	r24, 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     ba8:	08 95       	ret

00000baa <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	51 f0       	breq	.+20     	; 0xbc2 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     bae:	90 93 d7 05 	sts	0x05D7, r25
     bb2:	80 93 d6 05 	sts	0x05D6, r24
  bmac_rfRxInfo.max_length = size;
     bb6:	60 93 d5 05 	sts	0x05D5, r22
  rx_buf_empty = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 f4 03 	sts	0x03F4, r24
  return NRK_OK;
     bc0:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     bc4:	08 95       	ret

00000bc6 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	18 2f       	mov	r17, r24
  bmac_running = 0;
     bce:	10 92 f3 03 	sts	0x03F3, r1
  tx_reserve = -1;
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	80 93 e6 03 	sts	0x03E6, r24
  cca_active = true;
     bd8:	d1 e0       	ldi	r29, 0x01	; 1
     bda:	d0 93 e7 03 	sts	0x03E7, r29
  rx_failure_cnt = 0;
     bde:	10 92 f6 03 	sts	0x03F6, r1
     be2:	10 92 f7 03 	sts	0x03F7, r1
     be6:	10 92 f8 03 	sts	0x03F8, r1
     bea:	10 92 f9 03 	sts	0x03F9, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     bee:	10 92 e8 03 	sts	0x03E8, r1
     bf2:	10 92 e9 03 	sts	0x03E9, r1
     bf6:	10 92 ea 03 	sts	0x03EA, r1
     bfa:	10 92 eb 03 	sts	0x03EB, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	91 ee       	ldi	r25, 0xE1	; 225
     c02:	a5 ef       	ldi	r26, 0xF5	; 245
     c04:	b5 e0       	ldi	r27, 0x05	; 5
     c06:	80 93 ec 03 	sts	0x03EC, r24
     c0a:	90 93 ed 03 	sts	0x03ED, r25
     c0e:	a0 93 ee 03 	sts	0x03EE, r26
     c12:	b0 93 ef 03 	sts	0x03EF, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
     c16:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_signal_create>
     c1a:	c8 2f       	mov	r28, r24
     c1c:	80 93 e6 04 	sts	0x04E6, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     c20:	8f 3f       	cpi	r24, 0xFF	; 255
     c22:	19 f4       	brne	.+6      	; 0xc2a <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     c24:	84 e2       	ldi	r24, 0x24	; 36
     c26:	93 e0       	ldi	r25, 0x03	; 3
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     c2a:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_signal_create>
     c2e:	c8 2f       	mov	r28, r24
     c30:	80 93 d2 06 	sts	0x06D2, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	69 f4       	brne	.+26     	; 0xc52 <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     c38:	8c ef       	ldi	r24, 0xFC	; 252
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     c40:	e0 91 31 09 	lds	r30, 0x0931
     c44:	f0 91 32 09 	lds	r31, 0x0932
     c48:	60 85       	ldd	r22, Z+8	; 0x08
     c4a:	8e e0       	ldi	r24, 0x0E	; 14
     c4c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
    return NRK_ERROR;
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
     c52:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_signal_create>
     c56:	c8 2f       	mov	r28, r24
     c58:	80 93 da 04 	sts	0x04DA, r24
  if (bmac_enable_signal == NRK_ERROR) {
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	19 f4       	brne	.+6      	; 0xc66 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     c60:	80 ed       	ldi	r24, 0xD0	; 208
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	eb cf       	rjmp	.-42     	; 0xc3c <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     c66:	10 92 f5 03 	sts	0x03F5, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     c6a:	10 92 f4 03 	sts	0x03F4, r1
  bmac_rfRxInfo.pPayload = NULL;
     c6e:	10 92 d7 05 	sts	0x05D7, r1
     c72:	10 92 d6 05 	sts	0x05D6, r1
  bmac_rfRxInfo.max_length = 0;
     c76:	10 92 d5 05 	sts	0x05D5, r1

  // Setup the cc2420 chip
  rf_power_up ();
     c7a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	5f ef       	ldi	r21, 0xFF	; 255
     c86:	61 2f       	mov	r22, r17
     c88:	81 ed       	ldi	r24, 0xD1	; 209
     c8a:	95 e0       	ldi	r25, 0x05	; 5
     c8c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <rf_init>
  g_chan = chan;
     c90:	10 93 f1 03 	sts	0x03F1, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 bf 12 	call	0x257e	; 0x257e <rf_set_cca_thresh>
  bmac_running = 1;
     c9c:	d0 93 f3 03 	sts	0x03F3, r29
  is_enabled = 1;
     ca0:	d0 93 f0 03 	sts	0x03F0, r29
  return NRK_OK;
     ca4:	c1 e0       	ldi	r28, 0x01	; 1
}
     ca6:	8c 2f       	mov	r24, r28
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	08 95       	ret

00000cb0 <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     cb0:	20 91 f5 03 	lds	r18, 0x03F5
     cb4:	21 30       	cpi	r18, 0x01	; 1
     cb6:	59 f0       	breq	.+22     	; 0xcce <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	20 93 f5 03 	sts	0x03F5, r18
  bmac_rfTxInfo.pPayload = buf;
     cbe:	90 93 df 04 	sts	0x04DF, r25
     cc2:	80 93 de 04 	sts	0x04DE, r24
  bmac_rfTxInfo.length = len;
     cc6:	60 93 dd 04 	sts	0x04DD, r22
  return NRK_OK;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     cce:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     cd0:	08 95       	ret

00000cd2 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     cd2:	80 91 e6 04 	lds	r24, 0x04E6
     cd6:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     cda:	80 91 e6 04 	lds	r24, 0x04E6
     cde:	08 95       	ret

00000ce0 <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     ce0:	80 91 d2 06 	lds	r24, 0x06D2
     ce4:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     ce8:	80 91 d2 06 	lds	r24, 0x06D2
     cec:	08 95       	ret

00000cee <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
     cf6:	20 91 f5 03 	lds	r18, 0x03F5
     cfa:	21 30       	cpi	r18, 0x01	; 1
     cfc:	f1 f1       	breq	.+124    	; 0xd7a <bmac_tx_pkt+0x8c>
     cfe:	f6 2e       	mov	r15, r22
     d00:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     d02:	80 91 d2 06 	lds	r24, 0x06D2
     d06:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
  tx_data_ready = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 f5 03 	sts	0x03F5, r24
  bmac_rfTxInfo.pPayload = buf;
     d10:	d0 92 df 04 	sts	0x04DF, r13
     d14:	c0 92 de 04 	sts	0x04DE, r12
  bmac_rfTxInfo.length = len;
     d18:	f0 92 dd 04 	sts	0x04DD, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	00 90 d2 06 	lds	r0, 0x06D2
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <bmac_tx_pkt+0x48>
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	88 1f       	adc	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	d2 f7       	brpl	.-12     	; 0xd2e <bmac_tx_pkt+0x40>
     d3a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <nrk_event_wait>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
  if (mask == 0)
     d42:	61 15       	cp	r22, r1
     d44:	71 05       	cpc	r23, r1
     d46:	81 05       	cpc	r24, r1
     d48:	91 05       	cpc	r25, r1
     d4a:	21 f4       	brne	.+8      	; 0xd54 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     d4c:	8c ea       	ldi	r24, 0xAC	; 172
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     d54:	00 90 d2 06 	lds	r0, 0x06D2
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <bmac_tx_pkt+0x74>
     d5a:	f6 94       	lsr	r15
     d5c:	e7 94       	ror	r14
     d5e:	d7 94       	ror	r13
     d60:	c7 94       	ror	r12
     d62:	0a 94       	dec	r0
     d64:	d2 f7       	brpl	.-12     	; 0xd5a <bmac_tx_pkt+0x6c>
     d66:	c0 fc       	sbrc	r12, 0
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     d6a:	89 e8       	ldi	r24, 0x89	; 137
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
  if (pkt_got_ack)
     d72:	80 91 f2 03 	lds	r24, 0x03F2
     d76:	81 11       	cpse	r24, r1
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	08 95       	ret

00000d8a <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
     d8a:	20 91 f4 03 	lds	r18, 0x03F4
     d8e:	22 23       	and	r18, r18
     d90:	39 f0       	breq	.+14     	; 0xda0 <bmac_rx_pkt_get+0x16>
    *len = 0;
     d92:	fc 01       	movw	r30, r24
     d94:	10 82       	st	Z, r1
    *rssi = 0;
     d96:	fb 01       	movw	r30, r22
     d98:	10 82       	st	Z, r1
    return NULL;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
     da0:	20 91 d4 05 	lds	r18, 0x05D4
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
     da8:	80 91 d9 05 	lds	r24, 0x05D9
     dac:	fb 01       	movw	r30, r22
     dae:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
     db0:	80 91 d6 05 	lds	r24, 0x05D6
     db4:	90 91 d7 05 	lds	r25, 0x05D7
}
     db8:	08 95       	ret

00000dba <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 91 f4 03 	lds	r25, 0x03F4
     dc0:	91 11       	cpse	r25, r1
     dc2:	80 e0       	ldi	r24, 0x00	; 0
}
     dc4:	08 95       	ret

00000dc6 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 f4 03 	sts	0x03F4, r24
  return NRK_OK;
}
     dcc:	08 95       	ret

00000dce <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     dce:	10 92 f0 03 	sts	0x03F0, r1
  rf_power_down ();
     dd2:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <rf_power_down>

00000dd6 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 f0 03 	sts	0x03F0, r24
  rf_power_up ();
     ddc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     de0:	80 91 da 04 	lds	r24, 0x04DA
     de4:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <nrk_event_signal>

00000de8 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	28 97       	sbiw	r28, 0x08	; 8
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	29 83       	std	Y+1, r18	; 0x01
     dfe:	3a 83       	std	Y+2, r19	; 0x02
     e00:	4b 83       	std	Y+3, r20	; 0x03
     e02:	5c 83       	std	Y+4, r21	; 0x04
     e04:	6d 83       	std	Y+5, r22	; 0x05
     e06:	7e 83       	std	Y+6, r23	; 0x06
     e08:	8f 83       	std	Y+7, r24	; 0x07
     e0a:	98 87       	std	Y+8, r25	; 0x08
     e0c:	49 81       	ldd	r20, Y+1	; 0x01
     e0e:	5a 81       	ldd	r21, Y+2	; 0x02
     e10:	6b 81       	ldd	r22, Y+3	; 0x03
     e12:	7c 81       	ldd	r23, Y+4	; 0x04
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	af 81       	ldd	r26, Y+7	; 0x07
     e1a:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
     e1c:	41 15       	cp	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	61 05       	cpc	r22, r1
     e22:	71 05       	cpc	r23, r1
     e24:	41 f4       	brne	.+16     	; 0xe36 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
     e26:	81 15       	cp	r24, r1
     e28:	2d e2       	ldi	r18, 0x2D	; 45
     e2a:	92 07       	cpc	r25, r18
     e2c:	21 e3       	ldi	r18, 0x31	; 49
     e2e:	a2 07       	cpc	r26, r18
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	b2 07       	cpc	r27, r18
     e34:	90 f0       	brcs	.+36     	; 0xe5a <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
     e36:	40 93 e8 03 	sts	0x03E8, r20
     e3a:	50 93 e9 03 	sts	0x03E9, r21
     e3e:	60 93 ea 03 	sts	0x03EA, r22
     e42:	70 93 eb 03 	sts	0x03EB, r23
  _bmac_check_period.nano_secs = period.nano_secs;
     e46:	80 93 ec 03 	sts	0x03EC, r24
     e4a:	90 93 ed 03 	sts	0x03ED, r25
     e4e:	a0 93 ee 03 	sts	0x03EE, r26
     e52:	b0 93 ef 03 	sts	0x03EF, r27
  return NRK_OK;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
     e5c:	28 96       	adiw	r28, 0x08	; 8
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
     e6e:	80 91 f3 03 	lds	r24, 0x03F3
     e72:	08 95       	ret

00000e74 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
     e74:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
     e76:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <rf_rx_on>
  val += rf_cca_check ();
     e7a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <rf_cca_check>
     e7e:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
     e80:	0e 94 59 11 	call	0x22b2	; 0x22b2 <rf_cca_check>
     e84:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
     e86:	0e 94 59 11 	call	0x22b2	; 0x22b2 <rf_cca_check>
     e8a:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
     e8c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <rf_rx_off>
     e90:	8c 2f       	mov	r24, r28
     e92:	1c 16       	cp	r1, r28
     e94:	0c f4       	brge	.+2      	; 0xe98 <_bmac_channel_check+0x24>
     e96:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
     e9c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
     ea0:	10 92 de 03 	sts	0x03DE, r1
     ea4:	10 92 df 03 	sts	0x03DF, r1
     ea8:	10 92 e0 03 	sts	0x03E0, r1
     eac:	10 92 e1 03 	sts	0x03E1, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
     eb0:	80 e4       	ldi	r24, 0x40	; 64
     eb2:	68 2f       	mov	r22, r24
     eb4:	80 93 e2 03 	sts	0x03E2, r24
     eb8:	8b e4       	ldi	r24, 0x4B	; 75
     eba:	80 93 e3 03 	sts	0x03E3, r24
     ebe:	8c e4       	ldi	r24, 0x4C	; 76
     ec0:	80 93 e4 03 	sts	0x03E4, r24
     ec4:	10 92 e5 03 	sts	0x03E5, r1
  nrk_wait (dummy_t);
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 91 df 03 	lds	r19, 0x03DF
     ece:	40 91 e0 03 	lds	r20, 0x03E0
     ed2:	50 91 e1 03 	lds	r21, 0x03E1
     ed6:	7b e4       	ldi	r23, 0x4B	; 75
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_wait>

  n = rf_rx_packet_nonblock ();
     ede:	0e 94 8b 11 	call	0x2316	; 0x2316 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	e9 f0       	breq	.+58     	; 0xf20 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
     ee6:	80 91 f6 03 	lds	r24, 0x03F6
     eea:	90 91 f7 03 	lds	r25, 0x03F7
     eee:	a0 91 f8 03 	lds	r26, 0x03F8
     ef2:	b0 91 f9 03 	lds	r27, 0x03F9
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	2f ef       	ldi	r18, 0xFF	; 255
     efa:	92 07       	cpc	r25, r18
     efc:	a1 05       	cpc	r26, r1
     efe:	b1 05       	cpc	r27, r1
     f00:	58 f4       	brcc	.+22     	; 0xf18 <_bmac_rx+0x7c>
      rx_failure_cnt++;
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	a1 1d       	adc	r26, r1
     f06:	b1 1d       	adc	r27, r1
     f08:	80 93 f6 03 	sts	0x03F6, r24
     f0c:	90 93 f7 03 	sts	0x03F7, r25
     f10:	a0 93 f8 03 	sts	0x03F8, r26
     f14:	b0 93 f9 03 	sts	0x03F9, r27
    rf_rx_off ();
     f18:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <rf_rx_off>
    return 0;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
     f20:	10 92 f4 03 	sts	0x03F4, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
     f24:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <rf_rx_off>
  return 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
}
     f2a:	08 95       	ret

00000f2c <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
     f2c:	80 91 f6 03 	lds	r24, 0x03F6
     f30:	90 91 f7 03 	lds	r25, 0x03F7
     f34:	08 95       	ret

00000f36 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
     f36:	10 92 f6 03 	sts	0x03F6, r1
     f3a:	10 92 f7 03 	sts	0x03F7, r1
     f3e:	10 92 f8 03 	sts	0x03F8, r1
     f42:	10 92 f9 03 	sts	0x03F9, r1
  return NRK_OK;
}
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	08 95       	ret

00000f4a <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	58 f0       	brcs	.+22     	; 0xf64 <_b_pow+0x1a>
    return 1;
  if (in > 7)
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	08 f0       	brcs	.+2      	; 0xf54 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
     f52:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
     f54:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
     f56:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
     f58:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	28 13       	cpse	r18, r24
     f5e:	fc cf       	rjmp	.-8      	; 0xf58 <_b_pow+0xe>
    result = result * 2;
  return result;
     f60:	89 2f       	mov	r24, r25
     f62:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
     f66:	08 95       	ret

00000f68 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
     f74:	80 91 e7 03 	lds	r24, 0x03E7
     f78:	88 23       	and	r24, r24
     f7a:	09 f4       	brne	.+2      	; 0xf7e <_bmac_tx+0x16>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
     f7e:	88 ee       	ldi	r24, 0xE8	; 232
     f80:	93 e0       	ldi	r25, 0x03	; 3
     f82:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <_nrk_time_to_ticks>
     f86:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
     f88:	0e 94 10 32 	call	0x6420	; 0x6420 <rand>
     f8c:	6a e0       	ldi	r22, 0x0A	; 10
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodhi4>
     f94:	bc 01       	movw	r22, r24
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__udivmodhi4>
     fa0:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
     fa2:	0e 94 4d 23 	call	0x469a	; 0x469a <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
     fa6:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
     fa8:	0a e0       	ldi	r16, 0x0A	; 10
     faa:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
     fac:	0e 94 3a 07 	call	0xe74	; 0xe74 <_bmac_channel_check>
     fb0:	d8 2f       	mov	r29, r24
      if (v == 1)
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	39 f1       	breq	.+78     	; 0x1004 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
     fb6:	0e 94 10 32 	call	0x6420	; 0x6420 <rand>
     fba:	7c 01       	movw	r14, r24
     fbc:	8c 2f       	mov	r24, r28
     fbe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_b_pow>
     fc2:	68 2f       	mov	r22, r24
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	c7 01       	movw	r24, r14
     fc8:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
     fcc:	99 27       	eor	r25, r25
     fce:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <nrk_wait_until_next_n_periods>
      backoff_count++;
     fd2:	cf 5f       	subi	r28, 0xFF	; 255
     fd4:	c7 30       	cpi	r28, 0x07	; 7
     fd6:	08 f0       	brcs	.+2      	; 0xfda <_bmac_tx+0x72>
     fd8:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
     fda:	88 ee       	ldi	r24, 0xE8	; 232
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <_nrk_time_to_ticks>
     fe2:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
     fe4:	0e 94 10 32 	call	0x6420	; 0x6420 <rand>
     fe8:	b8 01       	movw	r22, r16
     fea:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <__divmodhi4>
     fee:	bc 01       	movw	r22, r24
     ff0:	6f 5f       	subi	r22, 0xFF	; 255
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	c7 01       	movw	r24, r14
     ff6:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__udivmodhi4>
     ffa:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
     ffc:	0e 94 4d 23 	call	0x469a	; 0x469a <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    1000:	dd 23       	and	r29, r29
    1002:	a1 f2       	breq	.-88     	; 0xfac <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    1004:	10 92 e0 04 	sts	0x04E0, r1
  bmac_rfTxInfo.ackRequest = 0;
    1008:	10 92 e1 04 	sts	0x04E1, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    100c:	20 91 e8 03 	lds	r18, 0x03E8
    1010:	30 91 e9 03 	lds	r19, 0x03E9
    1014:	88 ee       	ldi	r24, 0xE8	; 232
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	28 9f       	mul	r18, r24
    101a:	e0 01       	movw	r28, r0
    101c:	29 9f       	mul	r18, r25
    101e:	d0 0d       	add	r29, r0
    1020:	38 9f       	mul	r19, r24
    1022:	d0 0d       	add	r29, r0
    1024:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    1026:	60 91 ec 03 	lds	r22, 0x03EC
    102a:	70 91 ed 03 	lds	r23, 0x03ED
    102e:	80 91 ee 03 	lds	r24, 0x03EE
    1032:	90 91 ef 03 	lds	r25, 0x03EF
    1036:	20 e4       	ldi	r18, 0x40	; 64
    1038:	32 e4       	ldi	r19, 0x42	; 66
    103a:	4f e0       	ldi	r20, 0x0F	; 15
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    1042:	c2 0f       	add	r28, r18
    1044:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    1046:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    104a:	be 01       	movw	r22, r28
    104c:	8b ed       	ldi	r24, 0xDB	; 219
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 05 10 	call	0x200a	; 0x200a <rf_tx_packet_repeat>
    1054:	80 93 f2 03 	sts	0x03F2, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    1058:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <rf_rx_off>
  tx_data_ready = 0;
    105c:	10 92 f5 03 	sts	0x03F5, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    1060:	80 91 d2 06 	lds	r24, 0x06D2
    1064:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <nrk_event_signal>
  return NRK_OK;
}
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	08 95       	ret

00001078 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    1078:	80 91 f3 03 	lds	r24, 0x03F3
    107c:	81 11       	cpse	r24, r1
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    1080:	0e 94 a6 22 	call	0x454c	; 0x454c <nrk_wait_until_next_period>
    1084:	f9 cf       	rjmp	.-14     	; 0x1078 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    1086:	80 91 da 04 	lds	r24, 0x04DA
    108a:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
  if (v == NRK_ERROR)
    108e:	8f 3f       	cpi	r24, 0xFF	; 255
    1090:	21 f4       	brne	.+8      	; 0x109a <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1092:	8d e6       	ldi	r24, 0x6D	; 109
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    109a:	c1 2c       	mov	r12, r1
    109c:	d1 2c       	mov	r13, r1
    109e:	76 01       	movw	r14, r12
    10a0:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    10a2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <rf_power_up>
    if (is_enabled) {
    10a6:	80 91 f0 03 	lds	r24, 0x03F0
    10aa:	88 23       	and	r24, r24
    10ac:	69 f1       	breq	.+90     	; 0x1108 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    10ae:	80 91 f4 03 	lds	r24, 0x03F4
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	41 f4       	brne	.+16     	; 0x10c6 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    10b6:	0e 94 3a 07 	call	0xe74	; 0xe74 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    10ba:	81 11       	cpse	r24, r1
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    10be:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_bmac_rx>
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	21 f4       	brne	.+8      	; 0x10ce <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    10c6:	80 91 e6 04 	lds	r24, 0x04E6
    10ca:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    10ce:	80 91 f5 03 	lds	r24, 0x03F5
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	11 f4       	brne	.+4      	; 0x10da <bmac_nw_task+0x62>
        _bmac_tx ();
    10d6:	0e 94 b4 07 	call	0xf68	; 0xf68 <_bmac_tx>
      }
      rf_rx_off ();
    10da:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <rf_rx_off>
      rf_power_down ();
    10de:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    10e2:	20 91 e8 03 	lds	r18, 0x03E8
    10e6:	30 91 e9 03 	lds	r19, 0x03E9
    10ea:	40 91 ea 03 	lds	r20, 0x03EA
    10ee:	50 91 eb 03 	lds	r21, 0x03EB
    10f2:	60 91 ec 03 	lds	r22, 0x03EC
    10f6:	70 91 ed 03 	lds	r23, 0x03ED
    10fa:	80 91 ee 03 	lds	r24, 0x03EE
    10fe:	90 91 ef 03 	lds	r25, 0x03EF
    1102:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_wait>
    1106:	cd cf       	rjmp	.-102    	; 0x10a2 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    1108:	80 91 da 04 	lds	r24, 0x04DA
    110c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    1110:	c7 01       	movw	r24, r14
    1112:	b6 01       	movw	r22, r12
    1114:	00 90 da 04 	lds	r0, 0x04DA
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <bmac_nw_task+0xaa>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <bmac_nw_task+0xa2>
    1126:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	00 90 da 04 	lds	r0, 0x04DA
    1132:	04 c0       	rjmp	.+8      	; 0x113c <bmac_nw_task+0xc4>
    1134:	b6 95       	lsr	r27
    1136:	a7 95       	ror	r26
    1138:	97 95       	ror	r25
    113a:	87 95       	ror	r24
    113c:	0a 94       	dec	r0
    113e:	d2 f7       	brpl	.-12     	; 0x1134 <bmac_nw_task+0xbc>
    1140:	80 ff       	sbrs	r24, 0
    1142:	e2 cf       	rjmp	.-60     	; 0x1108 <bmac_nw_task+0x90>
    1144:	ae cf       	rjmp	.-164    	; 0x10a2 <bmac_nw_task+0x2a>

00001146 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1146:	6c e3       	ldi	r22, 0x3C	; 60
    1148:	78 e0       	ldi	r23, 0x08	; 8
    114a:	8a e7       	ldi	r24, 0x7A	; 122
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1152:	40 e8       	ldi	r20, 0x80	; 128
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	6a ef       	ldi	r22, 0xFA	; 250
    1158:	73 e0       	ldi	r23, 0x03	; 3
    115a:	8a e7       	ldi	r24, 0x7A	; 122
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1162:	ea e7       	ldi	r30, 0x7A	; 122
    1164:	f4 e0       	ldi	r31, 0x04	; 4
    1166:	84 e1       	ldi	r24, 0x14	; 20
    1168:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    116e:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    1170:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    1172:	13 86       	std	Z+11, r1	; 0x0b
    1174:	14 86       	std	Z+12, r1	; 0x0c
    1176:	15 86       	std	Z+13, r1	; 0x0d
    1178:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	9d e2       	ldi	r25, 0x2D	; 45
    117e:	a1 e3       	ldi	r26, 0x31	; 49
    1180:	b1 e0       	ldi	r27, 0x01	; 1
    1182:	87 87       	std	Z+15, r24	; 0x0f
    1184:	90 8b       	std	Z+16, r25	; 0x10
    1186:	a1 8b       	std	Z+17, r26	; 0x11
    1188:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    118a:	13 8a       	std	Z+19, r1	; 0x13
    118c:	14 8a       	std	Z+20, r1	; 0x14
    118e:	15 8a       	std	Z+21, r1	; 0x15
    1190:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    1192:	17 8a       	std	Z+23, r1	; 0x17
    1194:	10 8e       	std	Z+24, r1	; 0x18
    1196:	11 8e       	std	Z+25, r1	; 0x19
    1198:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    119a:	13 8e       	std	Z+27, r1	; 0x1b
    119c:	14 8e       	std	Z+28, r1	; 0x1c
    119e:	15 8e       	std	Z+29, r1	; 0x1d
    11a0:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    11a2:	17 8e       	std	Z+31, r1	; 0x1f
    11a4:	10 a2       	std	Z+32, r1	; 0x20
    11a6:	11 a2       	std	Z+33, r1	; 0x21
    11a8:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    11aa:	cf 01       	movw	r24, r30
    11ac:	0c 94 14 22 	jmp	0x4428	; 0x4428 <nrk_activate_task>

000011b0 <open>:
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    // Note that here nothing needs to be done for the I2C. This is the original
    // code for the firefly 2.2 board driver
	if (is_open == 1) return NRK_ERROR;
    11b0:	80 91 f6 07 	lds	r24, 0x07F6
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	11 f4       	brne	.+4      	; 0x11bc <open+0xc>
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	08 95       	ret
    is_open = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 f6 07 	sts	0x07F6, r24
    if (opt & READ_FLAG) {
    11c2:	60 ff       	sbrs	r22, 0
    11c4:	18 c0       	rjmp	.+48     	; 0x11f6 <open+0x46>
        // Turn on Sensor Node Power
        //PORTE &= ~(PWR_CTRL_MASK);
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_set(PWR_CTRL_PIN);
    11c6:	80 91 28 02 	lds	r24, 0x0228
    11ca:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <nrk_gpio_set>
        channel = 0;
    11ce:	10 92 fb 07 	sts	0x07FB, r1
        ADC_SET_CHANNEL(0);
    11d2:	80 91 7c 00 	lds	r24, 0x007C
    11d6:	80 7e       	andi	r24, 0xE0	; 224
    11d8:	80 93 7c 00 	sts	0x007C, r24
    11dc:	80 91 7c 00 	lds	r24, 0x007C
    11e0:	90 91 7c 00 	lds	r25, 0x007C
    11e4:	80 7e       	andi	r24, 0xE0	; 224
    11e6:	89 2b       	or	r24, r25
    11e8:	80 93 7c 00 	sts	0x007C, r24
        nrk_spin_wait_us(ADC_STARTUP_DELAY);
    11ec:	88 ee       	ldi	r24, 0xE8	; 232
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <open+0x50>
    11f6:	86 2f       	mov	r24, r22
    11f8:	86 70       	andi	r24, 0x06	; 6
        return NRK_OK;
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
    11fa:	f1 f6       	brne	.-68     	; 0x11b8 <open+0x8>
        return NRK_ERROR;
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
    11fc:	67 70       	andi	r22, 0x07	; 7
    11fe:	e1 f2       	breq	.-72     	; 0x11b8 <open+0x8>
        return NRK_ERROR;
    else return NRK_OK;
    1200:	81 e0       	ldi	r24, 0x01	; 1

}
    1202:	08 95       	ret

00001204 <close>:

int8_t close(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    // Turn off sensor power
    //PORTE |= PWR_CTRL_MASK;
    nrk_gpio_clr(PWR_CTRL_PIN);
    1204:	80 91 28 02 	lds	r24, 0x0228
    1208:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nrk_gpio_clr>
    //PORTE &= ~(PWR_CTRL_MASK);
    	is_open = 0;
    120c:	10 92 f6 07 	sts	0x07F6, r1
    close_i2c(); // Shut down the I2C
    1210:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <close_i2c>
    ADC_DISABLE();
    1214:	ea e7       	ldi	r30, 0x7A	; 122
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 77       	andi	r24, 0x7F	; 127
    121c:	80 83       	st	Z, r24
    return NRK_OK;
}
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret

00001222 <get_status>:

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    1222:	61 30       	cpi	r22, 0x01	; 1
    1224:	19 f4       	brne	.+6      	; 0x122c <get_status+0xa>
    1226:	80 91 fb 07 	lds	r24, 0x07FB
    122a:	08 95       	ret
    return NRK_ERROR;
    122c:	8f ef       	ldi	r24, 0xFF	; 255
}
    122e:	08 95       	ret

00001230 <set_status>:
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    // use "key" and "value" here
    if (key == SENSOR_SELECT) {
    1230:	61 30       	cpi	r22, 0x01	; 1
    1232:	91 f5       	brne	.+100    	; 0x1298 <set_status+0x68>
        // Set to audio channel if it is an average value
        if (value == AUDIO_P2P) {
    1234:	2c 30       	cpi	r18, 0x0C	; 12
    1236:	81 f4       	brne	.+32     	; 0x1258 <set_status+0x28>
            channel = value;
    1238:	20 93 fb 07 	sts	0x07FB, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(AUDIO);
    123c:	80 91 7c 00 	lds	r24, 0x007C
    1240:	80 7e       	andi	r24, 0xE0	; 224
    1242:	80 93 7c 00 	sts	0x007C, r24
    1246:	90 91 7c 00 	lds	r25, 0x007C
    124a:	20 91 7c 00 	lds	r18, 0x007C
    124e:	89 2f       	mov	r24, r25
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	80 7e       	andi	r24, 0xE0	; 224
    1254:	83 60       	ori	r24, 0x03	; 3
    1256:	17 c0       	rjmp	.+46     	; 0x1286 <set_status+0x56>
            nrk_spin_wait_us(ADC_SETUP_DELAY);
            return NRK_OK;

        } else {
            if (value > 13) { // Update for all of the sensors
    1258:	2e 30       	cpi	r18, 0x0E	; 14
    125a:	20 f0       	brcs	.+8      	; 0x1264 <set_status+0x34>
                _nrk_errno_set(1);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
    1262:	1a c0       	rjmp	.+52     	; 0x1298 <set_status+0x68>
                return NRK_ERROR;
            }
            channel = value;
    1264:	20 93 fb 07 	sts	0x07FB, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(channel);
    1268:	80 91 7c 00 	lds	r24, 0x007C
    126c:	80 7e       	andi	r24, 0xE0	; 224
    126e:	80 93 7c 00 	sts	0x007C, r24
    1272:	90 91 7c 00 	lds	r25, 0x007C
    1276:	20 91 7c 00 	lds	r18, 0x007C
    127a:	89 2f       	mov	r24, r25
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	80 7e       	andi	r24, 0xE0	; 224
    1280:	30 91 fb 07 	lds	r19, 0x07FB
    1284:	83 2b       	or	r24, r19
    1286:	82 2b       	or	r24, r18
    1288:	80 93 7c 00 	sts	0x007C, r24
            nrk_spin_wait_us(ADC_SETUP_DELAY);
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>
            return NRK_OK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	08 95       	ret
        }
    }
    return NRK_ERROR;
    1298:	8f ef       	ldi	r24, 0xFF	; 255
}
    129a:	08 95       	ret

0000129c <get_eeprom_values>:

void get_eeprom_values(){
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	66 97       	sbiw	r28, 0x16	; 22
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
   uint8_t raw_eeprom_data[22]; // Buffer for storing the raw values being returned
   int j = 0;
   int rv;

   // Get the values
  rv = ee24xx_read_bytes(0xAA, 22, raw_eeprom_data);
    12b0:	ae 01       	movw	r20, r28
    12b2:	4f 5f       	subi	r20, 0xFF	; 255
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	66 e1       	ldi	r22, 0x16	; 22
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	8a ea       	ldi	r24, 0xAA	; 170
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <ee24xx_read_bytes>
    12c2:	fe 01       	movw	r30, r28
    12c4:	31 96       	adiw	r30, 0x01	; 1
    12c6:	ac ec       	ldi	r26, 0xCC	; 204
    12c8:	b7 e0       	ldi	r27, 0x07	; 7
    12ca:	9e 01       	movw	r18, r28
    12cc:	29 5e       	subi	r18, 0xE9	; 233
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
      eeprom_values[j] = ((raw_eeprom_data[2*j] | 0x0000) << 8) |
    12d0:	80 81       	ld	r24, Z
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	98 2f       	mov	r25, r24
    12d6:	88 27       	eor	r24, r24
    12d8:	41 81       	ldd	r20, Z+1	; 0x01
    12da:	84 2b       	or	r24, r20
    12dc:	8d 93       	st	X+, r24
    12de:	9d 93       	st	X+, r25
    12e0:	32 96       	adiw	r30, 0x02	; 2
      //  printf("%02x ", raw_eeprom_data[j]);
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
    12e2:	e2 17       	cp	r30, r18
    12e4:	f3 07       	cpc	r31, r19
    12e6:	a1 f7       	brne	.-24     	; 0x12d0 <get_eeprom_values+0x34>
      printf("MC: %i\r\n", MC);
      printf("MD: %i\r\n", MD);
      printf("-------------------------------------------------\r\n");
  }
  */
}
    12e8:	66 96       	adiw	r28, 0x16	; 22
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <init_adc>:
    return val;
}
*/
void init_adc() {
    // Initialize values here
    ADC_INIT();
    12fa:	ea e7       	ldi	r30, 0x7A	; 122
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	80 83       	st	Z, r24
    ADC_ENABLE();
    1302:	80 81       	ld	r24, Z
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	80 83       	st	Z, r24
    channel = 0;
    1308:	10 92 fb 07 	sts	0x07FB, r1
    ADC_SET_CHANNEL(0);
    130c:	ac e7       	ldi	r26, 0x7C	; 124
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	8c 91       	ld	r24, X
    1312:	80 7e       	andi	r24, 0xE0	; 224
    1314:	8c 93       	st	X, r24
    1316:	8c 91       	ld	r24, X
    1318:	9c 91       	ld	r25, X
    131a:	80 7e       	andi	r24, 0xE0	; 224
    131c:	89 2b       	or	r24, r25
    131e:	8c 93       	st	X, r24
    ADC_DISABLE();
    1320:	80 81       	ld	r24, Z
    1322:	8f 77       	andi	r24, 0x7F	; 127
    1324:	80 83       	st	Z, r24
    1326:	08 95       	ret

00001328 <init>:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}

int8_t init(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    1328:	cf 93       	push	r28
        // For handling the ADC
        // Set the pwr ctrl pin as output
	//DDRE = 0;
        //DDRE |= PWR_CTRL_MASK;
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_direction(PWR_CTRL_PIN, NRK_PIN_OUTPUT);
    132a:	c0 91 28 02 	lds	r28, 0x0228
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	8c 2f       	mov	r24, r28
    1332:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_gpio_direction>
        //nrk_gpio_clr(PWR_CTRL_PIN);
        nrk_gpio_set(PWR_CTRL_PIN);
    1336:	8c 2f       	mov	r24, r28
    1338:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <nrk_gpio_set>
	// Input for motion detector
        nrk_gpio_direction(NRK_PORTF_6, NRK_PIN_INPUT );
    133c:	c0 91 13 02 	lds	r28, 0x0213
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	8c 2f       	mov	r24, r28
    1344:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTF_6);
    1348:	8c 2f       	mov	r24, r28
    134a:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
    134e:	c0 91 29 02 	lds	r28, 0x0229
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	8c 2f       	mov	r24, r28
    1356:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
    135a:	8c 2f       	mov	r24, r28
    135c:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nrk_gpio_clr>
	nrk_gpio_pullups(0);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 a3 18 	call	0x3146	; 0x3146 <nrk_gpio_pullups>

        init_adc();
    1366:	0e 94 7d 09 	call	0x12fa	; 0x12fa <init_adc>
        
        // For handling the I2C
         init_i2c();
    136a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_i2c>

	set_i2c_device(BOSCH_EEPROM_ADDRESS);
    136e:	8e ee       	ldi	r24, 0xEE	; 238
    1370:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <set_i2c_device>
        get_eeprom_values();
    1374:	0e 94 4e 09 	call	0x129c	; 0x129c <get_eeprom_values>
        is_open = 0;
    1378:	10 92 f6 07 	sts	0x07F6, r1
        return 1;
    
}
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <delay>:
    ADC_GET_SAMPLE_10(adc_val);
    return adc_val;
}

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0c 94 ac 2a 	jmp	0x5558	; 0x5558 <nrk_spin_wait_us>

0000138a <get_adc_val>:
    ADC_DISABLE();
}

uint16_t get_adc_val() {
    uint16_t adc_val;
    ADC_SAMPLE_SINGLE();
    138a:	80 91 7a 00 	lds	r24, 0x007A
    138e:	80 64       	ori	r24, 0x40	; 64
    1390:	80 93 7a 00 	sts	0x007A, r24
    1394:	80 91 7a 00 	lds	r24, 0x007A
    1398:	84 ff       	sbrs	r24, 4
    139a:	fc cf       	rjmp	.-8      	; 0x1394 <get_adc_val+0xa>
    delay();
    139c:	0e 94 c1 09 	call	0x1382	; 0x1382 <delay>
    ADC_GET_SAMPLE_10(adc_val);
    13a0:	80 91 78 00 	lds	r24, 0x0078
    13a4:	20 91 79 00 	lds	r18, 0x0079
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    return adc_val;
}
    13aa:	92 2b       	or	r25, r18
    13ac:	08 95       	ret

000013ae <calc_true_press>:

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
}

int32_t calc_true_press(uint8_t oss){
    13ae:	4f 92       	push	r4
    13b0:	5f 92       	push	r5
    13b2:	6f 92       	push	r6
    13b4:	7f 92       	push	r7
    13b6:	8f 92       	push	r8
    13b8:	9f 92       	push	r9
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	28 97       	sbiw	r28, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	18 2f       	mov	r17, r24

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
    13de:	c0 90 f2 07 	lds	r12, 0x07F2
    13e2:	d0 90 f3 07 	lds	r13, 0x07F3
    13e6:	e0 90 f4 07 	lds	r14, 0x07F4
    13ea:	f0 90 f5 07 	lds	r15, 0x07F5
    13ee:	20 ea       	ldi	r18, 0xA0	; 160
    13f0:	c2 1a       	sub	r12, r18
    13f2:	2f e0       	ldi	r18, 0x0F	; 15
    13f4:	d2 0a       	sbc	r13, r18
    13f6:	e1 08       	sbc	r14, r1
    13f8:	f1 08       	sbc	r15, r1
    13fa:	c0 92 e2 07 	sts	0x07E2, r12
    13fe:	d0 92 e3 07 	sts	0x07E3, r13
    1402:	e0 92 e4 07 	sts	0x07E4, r14
    1406:	f0 92 e5 07 	sts	0x07E5, r15
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    140a:	a7 01       	movw	r20, r14
    140c:	96 01       	movw	r18, r12
    140e:	c7 01       	movw	r24, r14
    1410:	b6 01       	movw	r22, r12
    1412:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__mulsi3>
    1416:	4b 01       	movw	r8, r22
    1418:	5c 01       	movw	r10, r24
    141a:	5c e0       	ldi	r21, 0x0C	; 12
    141c:	b5 94       	asr	r11
    141e:	a7 94       	ror	r10
    1420:	97 94       	ror	r9
    1422:	87 94       	ror	r8
    1424:	5a 95       	dec	r21
    1426:	d1 f7       	brne	.-12     	; 0x141c <calc_true_press+0x6e>
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
    1428:	40 91 cc 07 	lds	r20, 0x07CC
    142c:	50 91 cd 07 	lds	r21, 0x07CD
    1430:	66 27       	eor	r22, r22
    1432:	57 fd       	sbrc	r21, 7
    1434:	60 95       	com	r22
    1436:	76 2f       	mov	r23, r22
    1438:	db 01       	movw	r26, r22
    143a:	ca 01       	movw	r24, r20
    143c:	62 e0       	ldi	r22, 0x02	; 2
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	aa 1f       	adc	r26, r26
    1444:	bb 1f       	adc	r27, r27
    1446:	6a 95       	dec	r22
    1448:	d1 f7       	brne	.-12     	; 0x143e <calc_true_press+0x90>
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	ab 83       	std	Y+3, r26	; 0x03
    1450:	bc 83       	std	Y+4, r27	; 0x04

int32_t calc_true_press(uint8_t oss){

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    1452:	a0 91 da 07 	lds	r26, 0x07DA
    1456:	b0 91 db 07 	lds	r27, 0x07DB
    145a:	a5 01       	movw	r20, r10
    145c:	94 01       	movw	r18, r8
    145e:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__mulshisi3>
    1462:	41 2c       	mov	r4, r1
    1464:	e8 e0       	ldi	r30, 0x08	; 8
    1466:	5e 2e       	mov	r5, r30
    1468:	61 2c       	mov	r6, r1
    146a:	71 2c       	mov	r7, r1
    146c:	a3 01       	movw	r20, r6
    146e:	92 01       	movw	r18, r4
    1470:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    1474:	2d 83       	std	Y+5, r18	; 0x05
    1476:	3e 83       	std	Y+6, r19	; 0x06
    1478:	4f 83       	std	Y+7, r20	; 0x07
    147a:	58 87       	std	Y+8, r21	; 0x08
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
    147c:	a0 91 ce 07 	lds	r26, 0x07CE
    1480:	b0 91 cf 07 	lds	r27, 0x07CF
    1484:	a7 01       	movw	r20, r14
    1486:	96 01       	movw	r18, r12
    1488:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__mulshisi3>
    148c:	a3 01       	movw	r20, r6
    148e:	92 01       	movw	r18, r4
    1490:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	af 81       	ldd	r26, Y+7	; 0x07
    149a:	b8 85       	ldd	r27, Y+8	; 0x08
    149c:	82 0f       	add	r24, r18
    149e:	93 1f       	adc	r25, r19
    14a0:	a4 1f       	adc	r26, r20
    14a2:	b5 1f       	adc	r27, r21
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
    14a4:	29 81       	ldd	r18, Y+1	; 0x01
    14a6:	3a 81       	ldd	r19, Y+2	; 0x02
    14a8:	4b 81       	ldd	r20, Y+3	; 0x03
    14aa:	5c 81       	ldd	r21, Y+4	; 0x04
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	a4 1f       	adc	r26, r20
    14b2:	b5 1f       	adc	r27, r21
    14b4:	01 2e       	mov	r0, r17
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <calc_true_press+0x112>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	aa 1f       	adc	r26, r26
    14be:	bb 1f       	adc	r27, r27
    14c0:	0a 94       	dec	r0
    14c2:	d2 f7       	brpl	.-12     	; 0x14b8 <calc_true_press+0x10a>
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	6e 5f       	subi	r22, 0xFE	; 254
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	8f 4f       	sbci	r24, 0xFF	; 255
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	f4 e0       	ldi	r31, 0x04	; 4
    14d2:	4f 2e       	mov	r4, r31
    14d4:	51 2c       	mov	r5, r1
    14d6:	61 2c       	mov	r6, r1
    14d8:	71 2c       	mov	r7, r1
    14da:	a3 01       	movw	r20, r6
    14dc:	92 01       	movw	r18, r4
    14de:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    14e2:	29 83       	std	Y+1, r18	; 0x01
    14e4:	3a 83       	std	Y+2, r19	; 0x02
    14e6:	4b 83       	std	Y+3, r20	; 0x03
    14e8:	5c 83       	std	Y+4, r21	; 0x04
    14ea:	20 93 11 08 	sts	0x0811, r18
    14ee:	30 93 12 08 	sts	0x0812, r19
    14f2:	40 93 13 08 	sts	0x0813, r20
    14f6:	50 93 14 08 	sts	0x0814, r21
//    X1 = AC3 * B6 / pow(2,13);                          if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = AC3 * B6 / 8192;                          if(DEBUG) printf("X1 %li\r\n", X1);
    14fa:	a0 91 d0 07 	lds	r26, 0x07D0
    14fe:	b0 91 d1 07 	lds	r27, 0x07D1
    1502:	a7 01       	movw	r20, r14
    1504:	96 01       	movw	r18, r12
    1506:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__mulshisi3>
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e2       	ldi	r19, 0x20	; 32
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    1516:	69 01       	movw	r12, r18
    1518:	7a 01       	movw	r14, r20
//    X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);      if(DEBUG) printf("X2 %li\r\n", X2);
    X2 = (B1 * (B6 * B6 / 4096)) / 65536;      if(DEBUG) printf("X2 %li\r\n", X2);
    151a:	a0 91 d8 07 	lds	r26, 0x07D8
    151e:	b0 91 d9 07 	lds	r27, 0x07D9
    1522:	a5 01       	movw	r20, r10
    1524:	94 01       	movw	r18, r8
    1526:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__mulshisi3>
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
//    X3 = ((X1 + X2) + 2) / pow(2,2);                    if(DEBUG) printf("X3 %li\r\n", X3);
    X3 = ((X1 + X2) + 2) / 4;                    if(DEBUG) printf("X3 %li\r\n", X3);
    1536:	d7 01       	movw	r26, r14
    1538:	c6 01       	movw	r24, r12
    153a:	82 0f       	add	r24, r18
    153c:	93 1f       	adc	r25, r19
    153e:	a4 1f       	adc	r26, r20
    1540:	b5 1f       	adc	r27, r21
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	6e 5f       	subi	r22, 0xFE	; 254
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	a3 01       	movw	r20, r6
    1550:	92 01       	movw	r18, r4
    1552:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    1556:	20 93 fc 07 	sts	0x07FC, r18
    155a:	30 93 fd 07 	sts	0x07FD, r19
    155e:	40 93 fe 07 	sts	0x07FE, r20
    1562:	50 93 ff 07 	sts	0x07FF, r21
//    B4 = AC4 * (X3 + 32768) / pow(2,15);                if(DEBUG) printf("B4 %lu\r\n", B4);
    B4 = AC4 * (X3 + 32768) / 32768;                if(DEBUG) printf("B4 %lu\r\n", B4);
    1566:	a0 91 d2 07 	lds	r26, 0x07D2
    156a:	b0 91 d3 07 	lds	r27, 0x07D3
    156e:	30 58       	subi	r19, 0x80	; 128
    1570:	4f 4f       	sbci	r20, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e8       	ldi	r19, 0x80	; 128
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    1584:	69 01       	movw	r12, r18
    1586:	7a 01       	movw	r14, r20
    1588:	20 93 00 08 	sts	0x0800, r18
    158c:	30 93 01 08 	sts	0x0801, r19
    1590:	40 93 02 08 	sts	0x0802, r20
    1594:	50 93 03 08 	sts	0x0803, r21
    B7 = (UP - B3) * (50000 >> oss);                    if(DEBUG) printf("B7 %lu\r\n", B7);
    1598:	80 91 09 08 	lds	r24, 0x0809
    159c:	90 91 0a 08 	lds	r25, 0x080A
    15a0:	a0 91 0b 08 	lds	r26, 0x080B
    15a4:	b0 91 0c 08 	lds	r27, 0x080C
    15a8:	9c 01       	movw	r18, r24
    15aa:	ad 01       	movw	r20, r26
    15ac:	89 80       	ldd	r8, Y+1	; 0x01
    15ae:	9a 80       	ldd	r9, Y+2	; 0x02
    15b0:	ab 80       	ldd	r10, Y+3	; 0x03
    15b2:	bc 80       	ldd	r11, Y+4	; 0x04
    15b4:	28 19       	sub	r18, r8
    15b6:	39 09       	sbc	r19, r9
    15b8:	4a 09       	sbc	r20, r10
    15ba:	5b 09       	sbc	r21, r11
    15bc:	80 e5       	ldi	r24, 0x50	; 80
    15be:	93 ec       	ldi	r25, 0xC3	; 195
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <calc_true_press+0x224>
    15ca:	95 95       	asr	r25
    15cc:	87 95       	ror	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	1a 95       	dec	r17
    15d4:	d2 f7       	brpl	.-12     	; 0x15ca <calc_true_press+0x21c>
    15d6:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__mulsi3>
    15da:	60 93 05 08 	sts	0x0805, r22
    15de:	70 93 06 08 	sts	0x0806, r23
    15e2:	80 93 07 08 	sts	0x0807, r24
    15e6:	90 93 08 08 	sts	0x0808, r25

    if(B7 < 0x80000000)
    15ea:	97 fd       	sbrc	r25, 7
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <calc_true_press+0x262>
       P = (B7 * 2)/ B4;
    15ee:	66 0f       	add	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	88 1f       	adc	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	a7 01       	movw	r20, r14
    15f8:	96 01       	movw	r18, r12
    15fa:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    15fe:	20 93 0d 08 	sts	0x080D, r18
    1602:	30 93 0e 08 	sts	0x080E, r19
    1606:	40 93 0f 08 	sts	0x080F, r20
    160a:	50 93 10 08 	sts	0x0810, r21
    160e:	12 c0       	rjmp	.+36     	; 0x1634 <calc_true_press+0x286>
    else
        P = (B7 / B4) * 2;
    1610:	a7 01       	movw	r20, r14
    1612:	96 01       	movw	r18, r12
    1614:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    1618:	da 01       	movw	r26, r20
    161a:	c9 01       	movw	r24, r18
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	aa 1f       	adc	r26, r26
    1622:	bb 1f       	adc	r27, r27
    1624:	80 93 0d 08 	sts	0x080D, r24
    1628:	90 93 0e 08 	sts	0x080E, r25
    162c:	a0 93 0f 08 	sts	0x080F, r26
    1630:	b0 93 10 08 	sts	0x0810, r27
                                                        if(DEBUG) printf("P %li\r\n", P);
    X1 = (P / 256) * (P / 256);               if(DEBUG) printf("X1 %li\r\n", X1);
    1634:	c0 90 0d 08 	lds	r12, 0x080D
    1638:	d0 90 0e 08 	lds	r13, 0x080E
    163c:	e0 90 0f 08 	lds	r14, 0x080F
    1640:	f0 90 10 08 	lds	r15, 0x0810
    1644:	c7 01       	movw	r24, r14
    1646:	b6 01       	movw	r22, r12
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	31 e0       	ldi	r19, 0x01	; 1
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    1654:	ca 01       	movw	r24, r20
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__mulsi3>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
//    X1 = (P / pow(2,8)) * (P / pow(2,8));               if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (X1 * 3038) / 65536;                       if(DEBUG) printf("X1 %li\r\n", X1);
    1660:	ae ed       	ldi	r26, 0xDE	; 222
    1662:	bb e0       	ldi	r27, 0x0B	; 11
    1664:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    1668:	4c 01       	movw	r8, r24
    166a:	bb 24       	eor	r11, r11
    166c:	97 fc       	sbrc	r9, 7
    166e:	b0 94       	com	r11
    1670:	ab 2c       	mov	r10, r11
    1672:	80 92 f7 07 	sts	0x07F7, r8
    1676:	90 92 f8 07 	sts	0x07F8, r9
    167a:	a0 92 f9 07 	sts	0x07F9, r10
    167e:	b0 92 fa 07 	sts	0x07FA, r11
//    X1 = (X1 * 3038) / pow(2,16);                       if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (-7357 * P ) / 65536;                      if(DEBUG) printf("X2 %li\r\n", X2);
    1682:	a3 e4       	ldi	r26, 0x43	; 67
    1684:	b3 ee       	ldi	r27, 0xE3	; 227
    1686:	a7 01       	movw	r20, r14
    1688:	96 01       	movw	r18, r12
    168a:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <__mulohisi3>
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    169a:	20 93 ea 07 	sts	0x07EA, r18
    169e:	30 93 eb 07 	sts	0x07EB, r19
    16a2:	40 93 ec 07 	sts	0x07EC, r20
    16a6:	50 93 ed 07 	sts	0x07ED, r21
//	X2 = (-7357 * P ) / pow(2,16);                      if(DEBUG) printf("X2 %li\r\n", X2);
//    P = P + (X1 + X2 + 3791) / pow(2,4);                if(DEBUG) printf("P %li\r\n", P);
    P = P + (X1 + X2 + 3791) / 16;                if(DEBUG) printf("P %li\r\n", P);
    16aa:	d5 01       	movw	r26, r10
    16ac:	c4 01       	movw	r24, r8
    16ae:	82 0f       	add	r24, r18
    16b0:	93 1f       	adc	r25, r19
    16b2:	a4 1f       	adc	r26, r20
    16b4:	b5 1f       	adc	r27, r21
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	61 53       	subi	r22, 0x31	; 49
    16bc:	71 4f       	sbci	r23, 0xF1	; 241
    16be:	8f 4f       	sbci	r24, 0xFF	; 255
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	20 e1       	ldi	r18, 0x10	; 16
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    16ce:	c7 01       	movw	r24, r14
    16d0:	b6 01       	movw	r22, r12
    16d2:	62 0f       	add	r22, r18
    16d4:	73 1f       	adc	r23, r19
    16d6:	84 1f       	adc	r24, r20
    16d8:	95 1f       	adc	r25, r21
    16da:	60 93 0d 08 	sts	0x080D, r22
    16de:	70 93 0e 08 	sts	0x080E, r23
    16e2:	80 93 0f 08 	sts	0x080F, r24
    16e6:	90 93 10 08 	sts	0x0810, r25

    if(DEBUG) printf("Pressure is %li Pascals\r\n", P);

    return P;

}
    16ea:	28 96       	adiw	r28, 0x08	; 8
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	8f 90       	pop	r8
    170c:	7f 90       	pop	r7
    170e:	6f 90       	pop	r6
    1710:	5f 90       	pop	r5
    1712:	4f 90       	pop	r4
    1714:	08 95       	ret

00001716 <calc_true_temp>:


inline int32_t calc_true_temp(){
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29

    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)32768;
    1726:	cc ec       	ldi	r28, 0xCC	; 204
    1728:	d7 e0       	ldi	r29, 0x07	; 7
    172a:	8a 85       	ldd	r24, Y+10	; 0x0a
    172c:	9b 85       	ldd	r25, Y+11	; 0x0b
    172e:	40 91 e6 07 	lds	r20, 0x07E6
    1732:	50 91 e7 07 	lds	r21, 0x07E7
    1736:	60 91 e8 07 	lds	r22, 0x07E8
    173a:	70 91 e9 07 	lds	r23, 0x07E9
    173e:	9a 01       	movw	r18, r20
    1740:	ab 01       	movw	r20, r22
    1742:	28 1b       	sub	r18, r24
    1744:	39 0b       	sbc	r19, r25
    1746:	41 09       	sbc	r20, r1
    1748:	51 09       	sbc	r21, r1
    174a:	a8 85       	ldd	r26, Y+8	; 0x08
    174c:	b9 85       	ldd	r27, Y+9	; 0x09
    174e:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e8       	ldi	r19, 0x80	; 128
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    175e:	69 01       	movw	r12, r18
    1760:	7a 01       	movw	r14, r20
    1762:	20 93 f7 07 	sts	0x07F7, r18
    1766:	30 93 f8 07 	sts	0x07F8, r19
    176a:	40 93 f9 07 	sts	0x07F9, r20
    176e:	50 93 fa 07 	sts	0x07FA, r21
//    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)pow(2,15);
if(DEBUG) printf("X1 %li\r\n", X1);
//    X2 = (int32_t) MC * pow(2,11) / (X1 + MD);
    X2 = (int32_t) MC * 2048 / (X1 + MD);
    1772:	6a 89       	ldd	r22, Y+18	; 0x12
    1774:	7b 89       	ldd	r23, Y+19	; 0x13
    1776:	cb 01       	movw	r24, r22
    1778:	aa 27       	eor	r26, r26
    177a:	97 fd       	sbrc	r25, 7
    177c:	a0 95       	com	r26
    177e:	ba 2f       	mov	r27, r26
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	2b e0       	ldi	r18, 0x0B	; 11
    1786:	66 0f       	add	r22, r22
    1788:	77 1f       	adc	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	2a 95       	dec	r18
    1790:	d1 f7       	brne	.-12     	; 0x1786 <calc_true_temp+0x70>
    1792:	0c 89       	ldd	r16, Y+20	; 0x14
    1794:	1d 89       	ldd	r17, Y+21	; 0x15
    1796:	22 27       	eor	r18, r18
    1798:	17 fd       	sbrc	r17, 7
    179a:	20 95       	com	r18
    179c:	32 2f       	mov	r19, r18
    179e:	a9 01       	movw	r20, r18
    17a0:	98 01       	movw	r18, r16
    17a2:	2c 0d       	add	r18, r12
    17a4:	3d 1d       	adc	r19, r13
    17a6:	4e 1d       	adc	r20, r14
    17a8:	5f 1d       	adc	r21, r15
    17aa:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    17ae:	20 93 ea 07 	sts	0x07EA, r18
    17b2:	30 93 eb 07 	sts	0x07EB, r19
    17b6:	40 93 ec 07 	sts	0x07EC, r20
    17ba:	50 93 ed 07 	sts	0x07ED, r21
if(DEBUG) printf("X2 %li\r\n", X2);
    B5 = X1 + X2;
    17be:	d7 01       	movw	r26, r14
    17c0:	c6 01       	movw	r24, r12
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	a4 1f       	adc	r26, r20
    17c8:	b5 1f       	adc	r27, r21
    17ca:	80 93 f2 07 	sts	0x07F2, r24
    17ce:	90 93 f3 07 	sts	0x07F3, r25
    17d2:	a0 93 f4 07 	sts	0x07F4, r26
    17d6:	b0 93 f5 07 	sts	0x07F5, r27
if(DEBUG) printf("B5 %li\r\n", B5);
//    T = (B5 + 8) / pow(2,4);
    T = (B5 + 8) / 16;
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	68 5f       	subi	r22, 0xF8	; 248
    17e0:	7f 4f       	sbci	r23, 0xFF	; 255
    17e2:	8f 4f       	sbci	r24, 0xFF	; 255
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	20 e1       	ldi	r18, 0x10	; 16
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    17f2:	20 93 ee 07 	sts	0x07EE, r18
    17f6:	30 93 ef 07 	sts	0x07EF, r19
    17fa:	40 93 f0 07 	sts	0x07F0, r20
    17fe:	50 93 f1 07 	sts	0x07F1, r21
if(DEBUG) printf("XT %li\r\n", T);

    if(DEBUG) printf("Temperature is %li /10 degrees Celcius.\r\n", T);

    return T;
}
    1802:	ca 01       	movw	r24, r20
    1804:	b9 01       	movw	r22, r18
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	08 95       	ret

00001818 <read_uncomp_temp>:

void read_uncomp_temp(){
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	00 d0       	rcall	.+0      	; 0x181e <read_uncomp_temp+0x6>
    181e:	1f 92       	push	r1
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62

    uint8_t write_buf[1];
    uint8_t rx_buf[2];
    uint8_t i;

    write_buf[0] = 0x2E;
    1824:	8e e2       	ldi	r24, 0x2E	; 46
    1826:	8b 83       	std	Y+3, r24	; 0x03

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, 1, write_buf);
    1828:	ae 01       	movw	r20, r28
    182a:	4d 5f       	subi	r20, 0xFD	; 253
    182c:	5f 4f       	sbci	r21, 0xFF	; 255
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	84 ef       	ldi	r24, 0xF4	; 244
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
 //   nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
    183a:	84 e9       	ldi	r24, 0x94	; 148
    183c:	91 e1       	ldi	r25, 0x11	; 17
    183e:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7
    ee24xx_read_bytes(0xF6, 2, rx_buf);
    1842:	ae 01       	movw	r20, r28
    1844:	4f 5f       	subi	r20, 0xFF	; 255
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	86 ef       	ldi	r24, 0xF6	; 246
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <ee24xx_read_bytes>
//    if(DEBUG){
  //      for(i = 0; i < 2; i++)
  //          printf("uncomp_temp[%i] is %u\r\n", i, rx_buf[i]);
  //  }

    UT = (((uint16_t)rx_buf[0] | 0x0000) << 8) | ((uint16_t)rx_buf[1]);
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	98 2f       	mov	r25, r24
    185a:	88 27       	eor	r24, r24
    185c:	2a 81       	ldd	r18, Y+2	; 0x02
    185e:	82 2b       	or	r24, r18
    1860:	a0 e0       	ldi	r26, 0x00	; 0
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	80 93 e6 07 	sts	0x07E6, r24
    1868:	90 93 e7 07 	sts	0x07E7, r25
    186c:	a0 93 e8 07 	sts	0x07E8, r26
    1870:	b0 93 e9 07 	sts	0x07E9, r27

//    if(DEBUG)
  //   printf("UT is %i\r\n", UT);

}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <calc_temp>:


int32_t calc_temp(){
    read_uncomp_temp();
    1880:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_uncomp_temp>
    return calc_true_temp();
    1884:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <calc_true_temp>

00001888 <read_uncomp_press>:
int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
}

void read_uncomp_press(uint8_t oss){
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	00 d0       	rcall	.+0      	; 0x1890 <read_uncomp_press+0x8>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <read_uncomp_press+0xa>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	18 2f       	mov	r17, r24

    uint8_t write_buf[1]; // Used to send a value to the Bosch sensor
    uint8_t rx_buf[3]; // Used to store the received values from the sensor
    uint8_t i;

    write_buf[0] = 0x34 + (oss << 6);
    1898:	82 95       	swap	r24
    189a:	88 0f       	add	r24, r24
    189c:	88 0f       	add	r24, r24
    189e:	80 7c       	andi	r24, 0xC0	; 192
    18a0:	8c 5c       	subi	r24, 0xCC	; 204
    18a2:	8c 83       	std	Y+4, r24	; 0x04

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, sizeof(write_buf), write_buf);
    18a4:	ae 01       	movw	r20, r28
    18a6:	4c 5f       	subi	r20, 0xFC	; 252
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	84 ef       	ldi	r24, 0xF4	; 244
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
//    nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
    18b6:	84 e9       	ldi	r24, 0x94	; 148
    18b8:	91 e1       	ldi	r25, 0x11	; 17
    18ba:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7, 0xF8
    ee24xx_read_bytes(PRESS_BASE_REGISTER, sizeof(rx_buf), rx_buf);
    18be:	ae 01       	movw	r20, r28
    18c0:	4f 5f       	subi	r20, 0xFF	; 255
    18c2:	5f 4f       	sbci	r21, 0xFF	; 255
    18c4:	63 e0       	ldi	r22, 0x03	; 3
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	86 ef       	ldi	r24, 0xF6	; 246
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <ee24xx_read_bytes>
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
    18d0:	2a 81       	ldd	r18, Y+2	; 0x02
            printf("uncomp_press[%i] is %u\r\n", i, rx_buf[i]);
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	dc 01       	movw	r26, r24
    18dc:	99 27       	eor	r25, r25
    18de:	88 27       	eor	r24, r24
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
    18e0:	92 2b       	or	r25, r18
     UP = UP  + rx_buf[2];
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	82 0f       	add	r24, r18
    18e6:	91 1d       	adc	r25, r1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	b1 1d       	adc	r27, r1
     UP = UP >> (8-oss);
    18ec:	28 e0       	ldi	r18, 0x08	; 8
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	21 1b       	sub	r18, r17
    18f2:	31 09       	sbc	r19, r1
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <read_uncomp_press+0x76>
    18f6:	b5 95       	asr	r27
    18f8:	a7 95       	ror	r26
    18fa:	97 95       	ror	r25
    18fc:	87 95       	ror	r24
    18fe:	2a 95       	dec	r18
    1900:	d2 f7       	brpl	.-12     	; 0x18f6 <read_uncomp_press+0x6e>
    1902:	80 93 09 08 	sts	0x0809, r24
    1906:	90 93 0a 08 	sts	0x080A, r25
    190a:	a0 93 0b 08 	sts	0x080B, r26
    190e:	b0 93 0c 08 	sts	0x080C, r27

 //    if(DEBUG)
 //    printf("UP is %li\r\n", UP);

}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	08 95       	ret

00001922 <calc_press>:
    read_uncomp_temp();
    return calc_true_temp();
}


int32_t calc_press(uint8_t oss){
    1922:	cf 93       	push	r28
    1924:	c8 2f       	mov	r28, r24
    read_uncomp_press(oss);
    1926:	0e 94 44 0c 	call	0x1888	; 0x1888 <read_uncomp_press>
    return calc_true_press(oss);
    192a:	8c 2f       	mov	r24, r28
}
    192c:	cf 91       	pop	r28
}


int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
    192e:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <calc_true_press>

00001932 <read>:
        return NRK_ERROR;
    else return NRK_OK;

}

int8_t read(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    1932:	af 92       	push	r10
    1934:	bf 92       	push	r11
    1936:	cf 92       	push	r12
    1938:	df 92       	push	r13
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29

    int32_t value_from_sensor;



    ADC_ENABLE();
    1944:	80 91 7a 00 	lds	r24, 0x007A
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	80 93 7a 00 	sts	0x007A, r24
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	82 0f       	add	r24, r18
    1952:	82 30       	cpi	r24, 0x02	; 2
    1954:	18 f0       	brcs	.+6      	; 0x195c <read+0x2a>
    1956:	24 30       	cpi	r18, 0x04	; 4
    1958:	09 f0       	breq	.+2      	; 0x195c <read+0x2a>
    195a:	a8 c0       	rjmp	.+336    	; 0x1aac <read+0x17a>
    195c:	12 2f       	mov	r17, r18
    195e:	ea 01       	movw	r28, r20
    if ((channel != TEMP2) && (channel != PRESS) && channel <= 7) {
    1960:	80 91 fb 07 	lds	r24, 0x07FB
    1964:	88 30       	cpi	r24, 0x08	; 8
    1966:	78 f4       	brcc	.+30     	; 0x1986 <read+0x54>
        /* Conversion to 8-bit value*/
        uint16_t val = get_adc_val();
    1968:	0e 94 c5 09 	call	0x138a	; 0x138a <get_adc_val>

        if (size == 2) {
    196c:	12 30       	cpi	r17, 0x02	; 2
    196e:	19 f4       	brne	.+6      	; 0x1976 <read+0x44>
            buffer[count] = val & 0xFF;
    1970:	88 83       	st	Y, r24
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    1972:	99 83       	std	Y+1, r25	; 0x01
    1974:	1e c0       	rjmp	.+60     	; 0x19b2 <read+0x80>
        }

        if (size == 1) {
    1976:	11 30       	cpi	r17, 0x01	; 1
    1978:	09 f0       	breq	.+2      	; 0x197c <read+0x4a>
    197a:	7a c0       	rjmp	.+244    	; 0x1a70 <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
    197c:	96 95       	lsr	r25
    197e:	87 95       	ror	r24
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	1e c0       	rjmp	.+60     	; 0x19c2 <read+0x90>
        }


    } else if (channel == MOTION ){
    1986:	8d 30       	cpi	r24, 0x0D	; 13
    1988:	f1 f4       	brne	.+60     	; 0x19c6 <read+0x94>

	// Pull the pin low to dissipate charge otherwise it always floats high
	// In the future, we either need a buffer or a tiny pull down 
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_OUTPUT);
    198a:	f0 90 29 02 	lds	r15, 0x0229
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	8f 2d       	mov	r24, r15
    1992:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
    1996:	8f 2d       	mov	r24, r15
    1998:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	8f 2d       	mov	r24, r15
    19a0:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <nrk_gpio_direction>
	if(size==2) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); count++; buffer[count]=0;  }
    19a4:	12 30       	cpi	r17, 0x02	; 2
    19a6:	39 f4       	brne	.+14     	; 0x19b6 <read+0x84>
    19a8:	8f 2d       	mov	r24, r15
    19aa:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <nrk_gpio_get>
    19ae:	88 83       	st	Y, r24
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	74 c0       	rjmp	.+232    	; 0x1a9e <read+0x16c>
	if(size==1) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); }
    19b6:	11 30       	cpi	r17, 0x01	; 1
    19b8:	09 f0       	breq	.+2      	; 0x19bc <read+0x8a>
    19ba:	5a c0       	rjmp	.+180    	; 0x1a70 <read+0x13e>
    19bc:	8f 2d       	mov	r24, r15
    19be:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <nrk_gpio_get>
    19c2:	88 83       	st	Y, r24
    19c4:	55 c0       	rjmp	.+170    	; 0x1a70 <read+0x13e>
     } 
	else if (channel == AUDIO_P2P) {
    19c6:	8c 30       	cpi	r24, 0x0C	; 12
    19c8:	b9 f5       	brne	.+110    	; 0x1a38 <read+0x106>
    19ca:	a1 2c       	mov	r10, r1
    19cc:	bb 24       	eor	r11, r11
    19ce:	b3 94       	inc	r11
    19d0:	e1 2c       	mov	r14, r1
    19d2:	f1 2c       	mov	r15, r1
    19d4:	cc 24       	eor	r12, r12
    19d6:	c3 94       	inc	r12
    19d8:	64 e0       	ldi	r22, 0x04	; 4
    19da:	d6 2e       	mov	r13, r22
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
            // 10ms snapshot at around 11KHz measured on scope
	    ADC_SAMPLE_SINGLE();
    19dc:	80 91 7a 00 	lds	r24, 0x007A
    19e0:	80 64       	ori	r24, 0x40	; 64
    19e2:	80 93 7a 00 	sts	0x007A, r24
    19e6:	80 91 7a 00 	lds	r24, 0x007A
    19ea:	84 ff       	sbrs	r24, 4
    19ec:	fc cf       	rjmp	.-8      	; 0x19e6 <read+0xb4>
            nrk_spin_wait_us(32);
    19ee:	80 e2       	ldi	r24, 0x20	; 32
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>
    	    ADC_GET_SAMPLE_10(val);
    19f6:	80 91 78 00 	lds	r24, 0x0078
    19fa:	20 91 79 00 	lds	r18, 0x0079
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	92 2b       	or	r25, r18
    1a02:	8c 15       	cp	r24, r12
    1a04:	9d 05       	cpc	r25, r13
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <read+0xd8>
    1a08:	6c 01       	movw	r12, r24
    1a0a:	e8 16       	cp	r14, r24
    1a0c:	f9 06       	cpc	r15, r25
    1a0e:	08 f4       	brcc	.+2      	; 0x1a12 <read+0xe0>
    1a10:	7c 01       	movw	r14, r24
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	a8 1a       	sub	r10, r24
    1a16:	b1 08       	sbc	r11, r1
        //uint16_t val=get_adc_val();
        uint16_t val, min, max;
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
    1a18:	09 f7       	brne	.-62     	; 0x19dc <read+0xaa>
            nrk_spin_wait_us(32);
    	    ADC_GET_SAMPLE_10(val);
            if (val < min)min = val;
            if (val > max)max = val;
        }
        val = max - min;
    1a1a:	ec 18       	sub	r14, r12
    1a1c:	fd 08       	sbc	r15, r13
        if (size == 2) {
    1a1e:	12 30       	cpi	r17, 0x02	; 2
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <read+0xf6>
            buffer[count] = val & 0xFF;
    1a22:	e8 82       	st	Y, r14
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    1a24:	f9 82       	std	Y+1, r15	; 0x01
    1a26:	c5 cf       	rjmp	.-118    	; 0x19b2 <read+0x80>
        }

        if (size == 1) {
    1a28:	11 30       	cpi	r17, 0x01	; 1
    1a2a:	11 f5       	brne	.+68     	; 0x1a70 <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
    1a2c:	f6 94       	lsr	r15
    1a2e:	e7 94       	ror	r14
    1a30:	f6 94       	lsr	r15
    1a32:	e7 94       	ror	r14
    1a34:	e8 82       	st	Y, r14
    1a36:	1c c0       	rjmp	.+56     	; 0x1a70 <read+0x13e>
        }
    }
    else if(channel == HUMIDITY)
    1a38:	8b 30       	cpi	r24, 0x0B	; 11
    1a3a:	e1 f4       	brne	.+56     	; 0x1a74 <read+0x142>
    {
	h_cnt=0;
    1a3c:	10 92 04 08 	sts	0x0804, r1
	// Port F.2
	// Wait while pin is high
	do{
	}while((PINF & 0x4) == 0x4 );
    1a40:	7a 99       	sbic	0x0f, 2	; 15
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <read+0x10e>
	// Wait while pin is low
	do{
	}while((PINF & 0x4) == 0 );
    1a44:	7a 9b       	sbis	0x0f, 2	; 15
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <read+0x112>
	//_nrk_high_speed_timer_stop();
	//_nrk_high_speed_timer_reset();
	//_nrk_high_speed_timer_start();
	do{
	// Make h_cnt only 8 bit so it accumulates faster
	h_cnt++;
    1a48:	80 91 04 08 	lds	r24, 0x0804
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	80 93 04 08 	sts	0x0804, r24
	}while((PINF & 0x4) == 0x4 );
    1a52:	7a 99       	sbic	0x0f, 2	; 15
    1a54:	f9 cf       	rjmp	.-14     	; 0x1a48 <read+0x116>
//	h_cnt=_nrk_high_speed_timer_get();
	buffer[0]=h_cnt&0xff;
    1a56:	88 83       	st	Y, r24
	buffer[1]=h_cnt >> 8;
    1a58:	80 91 04 08 	lds	r24, 0x0804
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	19 82       	std	Y+1, r1	; 0x01
	buffer[2]=h_cnt >> 16;
    1a60:	33 0f       	add	r19, r19
    1a62:	22 0b       	sbc	r18, r18
    1a64:	32 2f       	mov	r19, r18
    1a66:	2a 83       	std	Y+2, r18	; 0x02
	buffer[3]=h_cnt >> 24;
    1a68:	99 0f       	add	r25, r25
    1a6a:	88 0b       	sbc	r24, r24
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    int32_t value_from_sensor;



    ADC_ENABLE();
    uint8_t count = 0;
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	15 c0       	rjmp	.+42     	; 0x1a9e <read+0x16c>
	buffer[3]=h_cnt >> 24;

    }
    // Here the special cases of the I2C sensors (pressure and temperature)
    // are dealt with
    else if(channel == TEMP2 || channel == PRESS){
    1a74:	97 ef       	ldi	r25, 0xF7	; 247
    1a76:	98 0f       	add	r25, r24
    1a78:	92 30       	cpi	r25, 0x02	; 2
    1a7a:	d0 f7       	brcc	.-12     	; 0x1a70 <read+0x13e>

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
    1a7c:	24 30       	cpi	r18, 0x04	; 4
    1a7e:	b1 f4       	brne	.+44     	; 0x1aac <read+0x17a>
            return 0;

        if(channel == TEMP2)
    1a80:	8a 30       	cpi	r24, 0x0A	; 10
    1a82:	19 f4       	brne	.+6      	; 0x1a8a <read+0x158>
	{
            value_from_sensor = calc_temp();
    1a84:	0e 94 40 0c 	call	0x1880	; 0x1880 <calc_temp>
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <read+0x162>
	}
	    else{
            calc_temp(); /* Note this is neccessary because the pressure calculations depend upon the
    1a8a:	0e 94 40 0c 	call	0x1880	; 0x1880 <calc_temp>
             raw temperature values*/
            value_from_sensor = calc_press(0); // OSS hard coded to 0 for now, doesn't really matter
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 91 0c 	call	0x1922	; 0x1922 <calc_press>
        }
        // Now break up the value to fit in the buffer
        buffer[count] = value_from_sensor & 0xFF;
    1a94:	68 83       	st	Y, r22
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
    1a96:	79 83       	std	Y+1, r23	; 0x01
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
    1a98:	8a 83       	std	Y+2, r24	; 0x02
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;
    1a9a:	9b 83       	std	Y+3, r25	; 0x03
        buffer[count] = value_from_sensor & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
        count++;
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;

    }

    ADC_DISABLE();
    1a9e:	90 91 7a 00 	lds	r25, 0x007A
    1aa2:	9f 77       	andi	r25, 0x7F	; 127
    1aa4:	90 93 7a 00 	sts	0x007A, r25
    count++;
    1aa8:	8f 5f       	subi	r24, 0xFF	; 255
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <read+0x17c>
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    ADC_DISABLE();
    count++;
    return count;


}
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	08 95       	ret

00001ac2 <dev_manager_ff3_sensors>:



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	99 f0       	breq	.+38     	; 0x1aec <dev_manager_ff3_sensors+0x2a>
    1ac6:	38 f4       	brcc	.+14     	; 0x1ad6 <dev_manager_ff3_sensors+0x14>
    1ac8:	88 23       	and	r24, r24
    1aca:	69 f0       	breq	.+26     	; 0x1ae6 <dev_manager_ff3_sensors+0x24>
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	c9 f4       	brne	.+50     	; 0x1b02 <dev_manager_ff3_sensors+0x40>

        case INIT:
            return init(action, opt, buffer, size);

        case OPEN:
            return open(action, opt, buffer, size);
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <open>



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	89 f0       	breq	.+34     	; 0x1afc <dev_manager_ff3_sensors+0x3a>
    1ada:	58 f0       	brcs	.+22     	; 0x1af2 <dev_manager_ff3_sensors+0x30>
    1adc:	85 30       	cpi	r24, 0x05	; 5
    1ade:	89 f4       	brne	.+34     	; 0x1b02 <dev_manager_ff3_sensors+0x40>

        case OPEN:
            return open(action, opt, buffer, size);

        case READ:
            return read(action, opt, buffer, size);
    1ae0:	85 e0       	ldi	r24, 0x05	; 5
    1ae2:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <read>
         * well as the I2C methods of getting inputs, even though only one of
         * them will be used at any given time.
         */

        case INIT:
            return init(action, opt, buffer, size);
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	0c 94 94 09 	jmp	0x1328	; 0x1328 <init>

        case READ:
            return read(action, opt, buffer, size);

        case CLOSE:
            return close(action, opt, buffer, size);
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	0c 94 02 09 	jmp	0x1204	; 0x1204 <close>

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    1af2:	61 30       	cpi	r22, 0x01	; 1
    1af4:	61 f4       	brne	.+24     	; 0x1b0e <dev_manager_ff3_sensors+0x4c>
    1af6:	80 91 fb 07 	lds	r24, 0x07FB
    1afa:	08 95       	ret

        case GET_STATUS:
            return get_status(action, opt, buffer, size);

        case SET_STATUS:
            return set_status(action, opt, buffer, size);
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	0c 94 18 09 	jmp	0x1230	; 0x1230 <set_status>

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	8c e0       	ldi	r24, 0x0C	; 12
    1b06:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
            return 0;
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	08 95       	ret
    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    return NRK_ERROR;
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}
    1b10:	08 95       	ret

00001b12 <set_i2c_device>:

uint8_t i2c_address; // The address of the slave node to write to

void set_i2c_device(uint8_t address)
{
    i2c_address = address;
    1b12:	80 93 16 08 	sts	0x0816, r24
    1b16:	08 95       	ret

00001b18 <init_i2c>:
{

  // Set up the SCL frequency
  // To operate at a clock frequency of 1 MHz, set TWBR and TWPS to 0
  // TODO: Generalize later
  TWBR = 0x02; // TWI Bit Rate Register
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	80 93 b8 00 	sts	0x00B8, r24
  TWSR = 0x00; // TWPS is the value of the prescaler in the TWI status register (the 2 LSB)
    1b1e:	10 92 b9 00 	sts	0x00B9, r1

  // Enable the SCL/SDA
  PRR0 = PRR0 & 0x7F; // Set the MSB in PRRO to 0 (see page 378)
    1b22:	e4 e6       	ldi	r30, 0x64	; 100
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8f 77       	andi	r24, 0x7F	; 127
    1b2a:	80 83       	st	Z, r24
  TWCR = TWCR | 0x04; // Set the TWEN bit in the TWCR (see page 196)
    1b2c:	ec eb       	ldi	r30, 0xBC	; 188
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	84 60       	ori	r24, 0x04	; 4
    1b34:	80 83       	st	Z, r24
    1b36:	08 95       	ret

00001b38 <close_i2c>:

}

void close_i2c(void)
{
   PRR0 = PRR0 & 0xFF; // Set the MSB in PRRO to 1 (see page 378)
    1b38:	e4 e6       	ldi	r30, 0x64	; 100
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 83       	st	Z, r24
   TWCR = TWCR & 0xFB; // Set the TWEN bit in the TWCR (see page 196)
    1b40:	ec eb       	ldi	r30, 0xBC	; 188
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
    1b48:	80 83       	st	Z, r24
    1b4a:	08 95       	ret

00001b4c <ee24xx_read_bytes>:

  uint8_t sla, twcr, n = 0;
  int rv = 0;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1b4c:	97 70       	andi	r25, 0x07	; 7
    1b4e:	99 0f       	add	r25, r25
    1b50:	20 91 16 08 	lds	r18, 0x0816
    1b54:	92 2b       	or	r25, r18
    1b56:	35 e6       	ldi	r19, 0x65	; 101
  restart:
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1b58:	f4 ea       	ldi	r31, 0xA4	; 164
    1b5a:	a4 ea       	ldi	r26, 0xA4	; 164
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1b5c:	e4 e8       	ldi	r30, 0x84	; 132
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    1b5e:	b9 2f       	mov	r27, r25
    1b60:	b1 60       	ori	r27, 0x01	; 1
    1b62:	31 50       	subi	r19, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
  restart:
  if (n++ >= MAX_ITER)
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <ee24xx_read_bytes+0x1c>
    1b66:	8e c0       	rjmp	.+284    	; 0x1c84 <ee24xx_read_bytes+0x138>
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1b68:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1b6c:	20 91 bc 00 	lds	r18, 0x00BC
    1b70:	27 ff       	sbrs	r18, 7
    1b72:	fc cf       	rjmp	.-8      	; 0x1b6c <ee24xx_read_bytes+0x20>
  switch ((twst = TW_STATUS))
    1b74:	20 91 b9 00 	lds	r18, 0x00B9
    1b78:	28 7f       	andi	r18, 0xF8	; 248
    1b7a:	20 93 15 08 	sts	0x0815, r18
    1b7e:	20 31       	cpi	r18, 0x10	; 16
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <ee24xx_read_bytes+0x40>
    1b82:	28 33       	cpi	r18, 0x38	; 56
    1b84:	89 f3       	breq	.-30     	; 0x1b68 <ee24xx_read_bytes+0x1c>
    1b86:	28 30       	cpi	r18, 0x08	; 8
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <ee24xx_read_bytes+0x40>
    1b8a:	7c c0       	rjmp	.+248    	; 0x1c84 <ee24xx_read_bytes+0x138>
				/* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1b8c:	90 93 bb 00 	sts	0x00BB, r25
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1b90:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1b94:	20 91 bc 00 	lds	r18, 0x00BC
    1b98:	27 ff       	sbrs	r18, 7
    1b9a:	fc cf       	rjmp	.-8      	; 0x1b94 <ee24xx_read_bytes+0x48>
  switch ((twst = TW_STATUS))
    1b9c:	20 91 b9 00 	lds	r18, 0x00B9
    1ba0:	28 7f       	andi	r18, 0xF8	; 248
    1ba2:	20 93 15 08 	sts	0x0815, r18
    1ba6:	20 32       	cpi	r18, 0x20	; 32
    1ba8:	e1 f2       	breq	.-72     	; 0x1b62 <ee24xx_read_bytes+0x16>
    1baa:	28 33       	cpi	r18, 0x38	; 56
    1bac:	e9 f2       	breq	.-70     	; 0x1b68 <ee24xx_read_bytes+0x1c>
    1bae:	28 31       	cpi	r18, 0x18	; 24
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <ee24xx_read_bytes+0x68>
    1bb2:	61 c0       	rjmp	.+194    	; 0x1c76 <ee24xx_read_bytes+0x12a>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1bb4:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1bb8:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1bbc:	20 91 bc 00 	lds	r18, 0x00BC
    1bc0:	27 ff       	sbrs	r18, 7
    1bc2:	fc cf       	rjmp	.-8      	; 0x1bbc <ee24xx_read_bytes+0x70>
  switch ((twst = TW_STATUS))
    1bc4:	20 91 b9 00 	lds	r18, 0x00B9
    1bc8:	28 7f       	andi	r18, 0xF8	; 248
    1bca:	20 93 15 08 	sts	0x0815, r18
    1bce:	20 33       	cpi	r18, 0x30	; 48
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <ee24xx_read_bytes+0x88>
    1bd2:	4e c0       	rjmp	.+156    	; 0x1c70 <ee24xx_read_bytes+0x124>
    1bd4:	28 33       	cpi	r18, 0x38	; 56
    1bd6:	41 f2       	breq	.-112    	; 0x1b68 <ee24xx_read_bytes+0x1c>
    1bd8:	28 32       	cpi	r18, 0x28	; 40
    1bda:	09 f0       	breq	.+2      	; 0x1bde <ee24xx_read_bytes+0x92>
    1bdc:	4c c0       	rjmp	.+152    	; 0x1c76 <ee24xx_read_bytes+0x12a>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
    1bde:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1be2:	20 91 bc 00 	lds	r18, 0x00BC
    1be6:	27 ff       	sbrs	r18, 7
    1be8:	fc cf       	rjmp	.-8      	; 0x1be2 <ee24xx_read_bytes+0x96>
  switch ((twst = TW_STATUS))
    1bea:	20 91 b9 00 	lds	r18, 0x00B9
    1bee:	28 7f       	andi	r18, 0xF8	; 248
    1bf0:	20 93 15 08 	sts	0x0815, r18
    1bf4:	20 31       	cpi	r18, 0x10	; 16
    1bf6:	29 f0       	breq	.+10     	; 0x1c02 <ee24xx_read_bytes+0xb6>
    1bf8:	28 33       	cpi	r18, 0x38	; 56
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <ee24xx_read_bytes+0xb2>
    1bfc:	b5 cf       	rjmp	.-150    	; 0x1b68 <ee24xx_read_bytes+0x1c>
    1bfe:	28 30       	cpi	r18, 0x08	; 8
    1c00:	d1 f5       	brne	.+116    	; 0x1c76 <ee24xx_read_bytes+0x12a>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    1c02:	b0 93 bb 00 	sts	0x00BB, r27
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1c06:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1c0a:	20 91 bc 00 	lds	r18, 0x00BC
    1c0e:	27 ff       	sbrs	r18, 7
    1c10:	fc cf       	rjmp	.-8      	; 0x1c0a <ee24xx_read_bytes+0xbe>
  switch ((twst = TW_STATUS))
    1c12:	20 91 b9 00 	lds	r18, 0x00B9
    1c16:	28 7f       	andi	r18, 0xF8	; 248
    1c18:	20 93 15 08 	sts	0x0815, r18
    1c1c:	20 34       	cpi	r18, 0x40	; 64
    1c1e:	29 f0       	breq	.+10     	; 0x1c2a <ee24xx_read_bytes+0xde>
    1c20:	28 34       	cpi	r18, 0x48	; 72
    1c22:	31 f1       	breq	.+76     	; 0x1c70 <ee24xx_read_bytes+0x124>
    1c24:	28 33       	cpi	r18, 0x38	; 56
    1c26:	39 f5       	brne	.+78     	; 0x1c76 <ee24xx_read_bytes+0x12a>
    1c28:	9f cf       	rjmp	.-194    	; 0x1b68 <ee24xx_read_bytes+0x1c>
    1c2a:	fa 01       	movw	r30, r20
    1c2c:	94 ec       	ldi	r25, 0xC4	; 196
    1c2e:	9f 01       	movw	r18, r30
    1c30:	24 1b       	sub	r18, r20
    1c32:	35 0b       	sbc	r19, r21

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    1c34:	16 16       	cp	r1, r22
    1c36:	17 06       	cpc	r1, r23
    1c38:	04 f5       	brge	.+64     	; 0x1c7a <ee24xx_read_bytes+0x12e>
       len > 0;
       len--)
    {
      if (len == 1)
    1c3a:	61 30       	cpi	r22, 0x01	; 1
    1c3c:	71 05       	cpc	r23, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <ee24xx_read_bytes+0xf6>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    1c40:	94 e8       	ldi	r25, 0x84	; 132
      TWCR = twcr;		/* clear int to start transmission */
    1c42:	90 93 bc 00 	sts	0x00BC, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1c46:	80 91 bc 00 	lds	r24, 0x00BC
    1c4a:	87 ff       	sbrs	r24, 7
    1c4c:	fc cf       	rjmp	.-8      	; 0x1c46 <ee24xx_read_bytes+0xfa>
      switch ((twst = TW_STATUS))
    1c4e:	80 91 b9 00 	lds	r24, 0x00B9
    1c52:	88 7f       	andi	r24, 0xF8	; 248
    1c54:	80 93 15 08 	sts	0x0815, r24
    1c58:	80 35       	cpi	r24, 0x50	; 80
    1c5a:	21 f0       	breq	.+8      	; 0x1c64 <ee24xx_read_bytes+0x118>
    1c5c:	88 35       	cpi	r24, 0x58	; 88
    1c5e:	59 f4       	brne	.+22     	; 0x1c76 <ee24xx_read_bytes+0x12a>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	70 e0       	ldi	r23, 0x00	; 0
	  /* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
    1c64:	80 91 bb 00 	lds	r24, 0x00BB
    1c68:	81 93       	st	Z+, r24
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
    1c6a:	61 50       	subi	r22, 0x01	; 1
    1c6c:	71 09       	sbc	r23, r1
    1c6e:	df cf       	rjmp	.-66     	; 0x1c2e <ee24xx_read_bytes+0xe2>
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
  int rv = 0;
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <ee24xx_read_bytes+0x12e>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    1c76:	2f ef       	ldi	r18, 0xFF	; 255
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
  quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    1c7a:	84 e9       	ldi	r24, 0x94	; 148
    1c7c:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    1c80:	c9 01       	movw	r24, r18
    1c82:	08 95       	ret

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    1c88:	08 95       	ret

00001c8a <ee24xx_write_page>:
 * actual number of data byte written.  It is up to the caller to
 * re-invoke it in order to write further data.
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
    1c8a:	9c 01       	movw	r18, r24
  int rv = 0;
  uint16_t endaddr;



  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    1c8c:	68 0f       	add	r22, r24
    1c8e:	79 1f       	adc	r23, r25
    1c90:	87 60       	ori	r24, 0x07	; 7
    1c92:	68 17       	cp	r22, r24
    1c94:	79 07       	cpc	r23, r25
    1c96:	18 f0       	brcs	.+6      	; 0x1c9e <ee24xx_write_page+0x14>
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
    1c98:	bc 01       	movw	r22, r24
    1c9a:	6f 5f       	subi	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1c9e:	83 2f       	mov	r24, r19
    1ca0:	87 70       	andi	r24, 0x07	; 7
    1ca2:	88 0f       	add	r24, r24
    1ca4:	90 91 16 08 	lds	r25, 0x0816
    1ca8:	89 2b       	or	r24, r25
    1caa:	e5 e6       	ldi	r30, 0x65	; 101
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1cac:	a4 ea       	ldi	r26, 0xA4	; 164
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1cae:	f4 e8       	ldi	r31, 0x84	; 132
    1cb0:	e1 50       	subi	r30, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);

  restart:
  if (n++ >= MAX_ITER)
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <ee24xx_write_page+0x2c>
    1cb4:	61 c0       	rjmp	.+194    	; 0x1d78 <ee24xx_write_page+0xee>
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1cb6:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1cba:	90 91 bc 00 	lds	r25, 0x00BC
    1cbe:	97 ff       	sbrs	r25, 7
    1cc0:	fc cf       	rjmp	.-8      	; 0x1cba <ee24xx_write_page+0x30>
  switch ((twst = TW_STATUS))
    1cc2:	90 91 b9 00 	lds	r25, 0x00B9
    1cc6:	98 7f       	andi	r25, 0xF8	; 248
    1cc8:	90 93 15 08 	sts	0x0815, r25
    1ccc:	90 31       	cpi	r25, 0x10	; 16
    1cce:	29 f0       	breq	.+10     	; 0x1cda <ee24xx_write_page+0x50>
    1cd0:	98 33       	cpi	r25, 0x38	; 56
    1cd2:	89 f3       	breq	.-30     	; 0x1cb6 <ee24xx_write_page+0x2c>
    1cd4:	98 30       	cpi	r25, 0x08	; 8
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <ee24xx_write_page+0x50>
    1cd8:	4f c0       	rjmp	.+158    	; 0x1d78 <ee24xx_write_page+0xee>
        return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1cda:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1cde:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1ce2:	90 91 bc 00 	lds	r25, 0x00BC
    1ce6:	97 ff       	sbrs	r25, 7
    1ce8:	fc cf       	rjmp	.-8      	; 0x1ce2 <ee24xx_write_page+0x58>
  switch ((twst = TW_STATUS))
    1cea:	90 91 b9 00 	lds	r25, 0x00B9
    1cee:	98 7f       	andi	r25, 0xF8	; 248
    1cf0:	90 93 15 08 	sts	0x0815, r25
    1cf4:	90 32       	cpi	r25, 0x20	; 32
    1cf6:	e1 f2       	breq	.-72     	; 0x1cb0 <ee24xx_write_page+0x26>
    1cf8:	98 33       	cpi	r25, 0x38	; 56
    1cfa:	e9 f2       	breq	.-70     	; 0x1cb6 <ee24xx_write_page+0x2c>
    1cfc:	98 31       	cpi	r25, 0x18	; 24
    1cfe:	a9 f5       	brne	.+106    	; 0x1d6a <ee24xx_write_page+0xe0>

    default:
        goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1d00:	20 93 bb 00 	sts	0x00BB, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1d04:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1d08:	90 91 bc 00 	lds	r25, 0x00BC
    1d0c:	97 ff       	sbrs	r25, 7
    1d0e:	fc cf       	rjmp	.-8      	; 0x1d08 <ee24xx_write_page+0x7e>
  switch ((twst = TW_STATUS))
    1d10:	90 91 b9 00 	lds	r25, 0x00B9
    1d14:	98 7f       	andi	r25, 0xF8	; 248
    1d16:	90 93 15 08 	sts	0x0815, r25
    1d1a:	90 33       	cpi	r25, 0x30	; 48
    1d1c:	19 f1       	breq	.+70     	; 0x1d64 <ee24xx_write_page+0xda>
    1d1e:	98 33       	cpi	r25, 0x38	; 56
    1d20:	51 f2       	breq	.-108    	; 0x1cb6 <ee24xx_write_page+0x2c>
    1d22:	98 32       	cpi	r25, 0x28	; 40
    1d24:	11 f5       	brne	.+68     	; 0x1d6a <ee24xx_write_page+0xe0>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
    1d26:	62 1b       	sub	r22, r18
    1d28:	73 0b       	sbc	r23, r19
    1d2a:	fa 01       	movw	r30, r20
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    1d30:	44 e8       	ldi	r20, 0x84	; 132
    1d32:	cb 01       	movw	r24, r22
    1d34:	82 1b       	sub	r24, r18
    1d36:	93 0b       	sbc	r25, r19
    default:

        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    1d38:	18 16       	cp	r1, r24
    1d3a:	19 06       	cpc	r1, r25
    1d3c:	c4 f4       	brge	.+48     	; 0x1d6e <ee24xx_write_page+0xe4>
    {
      TWDR = *buf++;
    1d3e:	81 91       	ld	r24, Z+
    1d40:	80 93 bb 00 	sts	0x00BB, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    1d44:	40 93 bc 00 	sts	0x00BC, r20
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1d48:	80 91 bc 00 	lds	r24, 0x00BC
    1d4c:	87 ff       	sbrs	r24, 7
    1d4e:	fc cf       	rjmp	.-8      	; 0x1d48 <ee24xx_write_page+0xbe>
      switch ((twst = TW_STATUS))
    1d50:	80 91 b9 00 	lds	r24, 0x00B9
    1d54:	88 7f       	andi	r24, 0xF8	; 248
    1d56:	80 93 15 08 	sts	0x0815, r24
    1d5a:	88 32       	cpi	r24, 0x28	; 40
    1d5c:	31 f4       	brne	.+12     	; 0x1d6a <ee24xx_write_page+0xe0>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	e7 cf       	rjmp	.-50     	; 0x1d32 <ee24xx_write_page+0xa8>
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <ee24xx_write_page+0xe4>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    1d6a:	2f ef       	ldi	r18, 0xFF	; 255
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
	default:
            goto error;
	}
    }
  quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    1d6e:	84 e9       	ldi	r24, 0x94	; 148
    1d70:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    1d74:	c9 01       	movw	r24, r18
    1d76:	08 95       	ret

    case TW_MT_ARB_LOST:
      goto begin;

    default:
        return -1;		/* error: not in start condition */
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    1d7c:	08 95       	ret

00001d7e <ee24xx_write_bytes>:
 * function until either an error has been returned, or all bytes
 * have been written.
 */
int
ee24xx_write_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	6c 01       	movw	r12, r24
    1d90:	8b 01       	movw	r16, r22
    1d92:	7a 01       	movw	r14, r20
  int rv, total;



  total = 0;
    1d94:	c0 e0       	ldi	r28, 0x00	; 0
    1d96:	d0 e0       	ldi	r29, 0x00	; 0
    {
#if DEBUG
      printf("Calling ee24xx_write_page(%d, %d, %p)",
	     eeaddr, len, buf);
#endif
      rv = ee24xx_write_page(eeaddr, len, buf);
    1d98:	a7 01       	movw	r20, r14
    1d9a:	b8 01       	movw	r22, r16
    1d9c:	c6 01       	movw	r24, r12
    1d9e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <ee24xx_write_page>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
    1da2:	8f 3f       	cpi	r24, 0xFF	; 255
    1da4:	2f ef       	ldi	r18, 0xFF	; 255
    1da6:	92 07       	cpc	r25, r18
    1da8:	69 f0       	breq	.+26     	; 0x1dc4 <ee24xx_write_bytes+0x46>
	return -1;
      eeaddr += rv;
    1daa:	c8 0e       	add	r12, r24
    1dac:	d9 1e       	adc	r13, r25
      len -= rv;
    1dae:	08 1b       	sub	r16, r24
    1db0:	19 0b       	sbc	r17, r25
      buf += rv;
    1db2:	e8 0e       	add	r14, r24
    1db4:	f9 1e       	adc	r15, r25
      total += rv;
    1db6:	c8 0f       	add	r28, r24
    1db8:	d9 1f       	adc	r29, r25
    }
  while (len > 0);
    1dba:	10 16       	cp	r1, r16
    1dbc:	11 06       	cpc	r1, r17
    1dbe:	64 f3       	brlt	.-40     	; 0x1d98 <ee24xx_write_bytes+0x1a>

  return total;
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <ee24xx_write_bytes+0x4a>
      rv = ee24xx_write_page(eeaddr, len, buf);
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	08 95       	ret

00001dda <error>:

void
error(void)
{

  printf("error: TWI status %#x\n", twst);
    1dda:	80 91 15 08 	lds	r24, 0x0815
    1dde:	1f 92       	push	r1
    1de0:	8f 93       	push	r24
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	9f 93       	push	r25
    1de8:	8f 93       	push	r24
    1dea:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	08 95       	ret

00001df8 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1df8:	90 91 41 01 	lds	r25, 0x0141
    1dfc:	9f 71       	andi	r25, 0x1F	; 31
    1dfe:	9f 31       	cpi	r25, 0x1F	; 31
    1e00:	d9 f3       	breq	.-10     	; 0x1df8 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1e02:	80 93 42 01 	sts	0x0142, r24
    1e06:	08 95       	ret

00001e08 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	80 93 1d 08 	sts	0x081D, r24
    1e0e:	08 95       	ret

00001e10 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    1e10:	10 92 1d 08 	sts	0x081D, r1
    1e14:	08 95       	ret

00001e16 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1e16:	80 91 41 01 	lds	r24, 0x0141
    1e1a:	8f 71       	andi	r24, 0x1F	; 31
    1e1c:	8f 31       	cpi	r24, 0x1F	; 31
    1e1e:	d9 f3       	breq	.-10     	; 0x1e16 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1e20:	80 91 41 01 	lds	r24, 0x0141
    1e24:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1e26:	e1 f0       	breq	.+56     	; 0x1e60 <rf_power_down+0x4a>
    1e28:	8f 30       	cpi	r24, 0x0F	; 15
    1e2a:	d1 f0       	breq	.+52     	; 0x1e60 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1e2c:	80 91 41 01 	lds	r24, 0x0141
    1e30:	8f 71       	andi	r24, 0x1F	; 31
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	31 f4       	brne	.+12     	; 0x1e42 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1e36:	80 91 39 01 	lds	r24, 0x0139
    1e3a:	82 60       	ori	r24, 0x02	; 2
    1e3c:	80 93 39 01 	sts	0x0139, r24
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    1e42:	88 e0       	ldi	r24, 0x08	; 8
    1e44:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1e48:	80 91 41 01 	lds	r24, 0x0141
    1e4c:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1e4e:	88 30       	cpi	r24, 0x08	; 8
    1e50:	d9 f7       	brne	.-10     	; 0x1e48 <rf_power_down+0x32>
    1e52:	f1 cf       	rjmp	.-30     	; 0x1e36 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1e54:	8f 30       	cpi	r24, 0x0F	; 15
    1e56:	21 f0       	breq	.+8      	; 0x1e60 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1e58:	80 91 41 01 	lds	r24, 0x0141
    1e5c:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    1e5e:	d1 f7       	brne	.-12     	; 0x1e54 <rf_power_down+0x3e>
    1e60:	08 95       	ret

00001e62 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1e62:	80 91 41 01 	lds	r24, 0x0141
    1e66:	8f 71       	andi	r24, 0x1F	; 31
    1e68:	8f 31       	cpi	r24, 0x1F	; 31
    1e6a:	d9 f3       	breq	.-10     	; 0x1e62 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1e6c:	80 91 41 01 	lds	r24, 0x0141
    1e70:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1e72:	11 f0       	breq	.+4      	; 0x1e78 <rf_power_up+0x16>
    1e74:	8f 30       	cpi	r24, 0x0F	; 15
    1e76:	51 f4       	brne	.+20     	; 0x1e8c <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    1e78:	80 91 39 01 	lds	r24, 0x0139
    1e7c:	8d 7f       	andi	r24, 0xFD	; 253
    1e7e:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1e82:	80 91 41 01 	lds	r24, 0x0141
    1e86:	8f 71       	andi	r24, 0x1F	; 31
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	d9 f7       	brne	.-10     	; 0x1e82 <rf_power_up+0x20>
    1e8c:	08 95       	ret

00001e8e <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1e8e:	e5 e4       	ldi	r30, 0x45	; 69
    1e90:	f1 e0       	ldi	r31, 0x01	; 1
    1e92:	90 81       	ld	r25, Z
    1e94:	90 7f       	andi	r25, 0xF0	; 240
    1e96:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1e98:	90 81       	ld	r25, Z
    1e9a:	8f 70       	andi	r24, 0x0F	; 15
    1e9c:	98 2b       	or	r25, r24
    1e9e:	90 83       	st	Z, r25
    1ea0:	08 95       	ret

00001ea2 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1ea2:	e7 e5       	ldi	r30, 0x57	; 87
    1ea4:	f1 e0       	ldi	r31, 0x01	; 1
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8d 7f       	andi	r24, 0xFD	; 253
    1eaa:	80 83       	st	Z, r24
    1eac:	08 95       	ret

00001eae <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    1eae:	e7 e5       	ldi	r30, 0x57	; 87
    1eb0:	f1 e0       	ldi	r31, 0x01	; 1
    1eb2:	80 81       	ld	r24, Z
    1eb4:	82 60       	ori	r24, 0x02	; 2
    1eb6:	80 83       	st	Z, r24
    1eb8:	08 95       	ret

00001eba <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1eba:	ee e6       	ldi	r30, 0x6E	; 110
    1ebc:	f1 e0       	ldi	r31, 0x01	; 1
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7e       	andi	r24, 0xEF	; 239
    1ec2:	80 83       	st	Z, r24
    1ec4:	08 95       	ret

00001ec6 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1ec6:	ee e6       	ldi	r30, 0x6E	; 110
    1ec8:	f1 e0       	ldi	r31, 0x01	; 1
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 61       	ori	r24, 0x10	; 16
    1ece:	80 83       	st	Z, r24
    1ed0:	08 95       	ret

00001ed2 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1ed2:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1ed6:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1eda:	90 93 27 08 	sts	0x0827, r25
    1ede:	80 93 26 08 	sts	0x0826, r24
    1ee2:	08 95       	ret

00001ee4 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1ee4:	90 93 21 08 	sts	0x0821, r25
    1ee8:	80 93 20 08 	sts	0x0820, r24
	PHY_CC_CCA &= ~(0x1F);
    1eec:	e8 e4       	ldi	r30, 0x48	; 72
    1eee:	f1 e0       	ldi	r31, 0x01	; 1
    1ef0:	80 81       	ld	r24, Z
    1ef2:	80 7e       	andi	r24, 0xE0	; 224
    1ef4:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1ef6:	80 81       	ld	r24, Z
    1ef8:	68 2b       	or	r22, r24
    1efa:	60 83       	st	Z, r22
    1efc:	08 95       	ret

00001efe <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1efe:	90 93 a0 04 	sts	0x04A0, r25
    1f02:	80 93 9f 04 	sts	0x049F, r24
    1f06:	08 95       	ret

00001f08 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1f08:	90 93 9e 04 	sts	0x049E, r25
    1f0c:	80 93 9d 04 	sts	0x049D, r24
    1f10:	08 95       	ret

00001f12 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1f1e:	80 e2       	ldi	r24, 0x20	; 32
    1f20:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1f24:	80 ec       	ldi	r24, 0xC0	; 192
    1f26:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1f2a:	60 62       	ori	r22, 0x20	; 32
    1f2c:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1f30:	85 ec       	ldi	r24, 0xC5	; 197
    1f32:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1f36:	87 ea       	ldi	r24, 0xA7	; 167
    1f38:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1f3c:	80 e8       	ldi	r24, 0x80	; 128
    1f3e:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1f42:	20 93 60 01 	sts	0x0160, r18
    1f46:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1f4a:	40 93 62 01 	sts	0x0162, r20
    1f4e:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1f52:	c6 e4       	ldi	r28, 0x46	; 70
    1f54:	d1 e0       	ldi	r29, 0x01	; 1
    1f56:	08 81       	ld	r16, Y
    1f58:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1f5a:	98 81       	ld	r25, Y
    1f5c:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1f5e:	30 2f       	mov	r19, r16
    1f60:	32 95       	swap	r19
    1f62:	36 95       	lsr	r19
    1f64:	37 70       	andi	r19, 0x07	; 7
    1f66:	60 e4       	ldi	r22, 0x40	; 64
    1f68:	36 9f       	mul	r19, r22
    1f6a:	80 01       	movw	r16, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	22 95       	swap	r18
    1f70:	26 95       	lsr	r18
    1f72:	23 70       	andi	r18, 0x03	; 3
    1f74:	62 2f       	mov	r22, r18
    1f76:	60 2b       	or	r22, r16
    1f78:	82 95       	swap	r24
    1f7a:	86 95       	lsr	r24
    1f7c:	83 70       	andi	r24, 0x03	; 3
    1f7e:	70 e1       	ldi	r23, 0x10	; 16
    1f80:	87 9f       	mul	r24, r23
    1f82:	90 01       	movw	r18, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1f88:	92 95       	swap	r25
    1f8a:	96 95       	lsr	r25
    1f8c:	93 70       	andi	r25, 0x03	; 3
    1f8e:	84 e0       	ldi	r24, 0x04	; 4
    1f90:	98 9f       	mul	r25, r24
    1f92:	b0 01       	movw	r22, r0
    1f94:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1f96:	62 2b       	or	r22, r18
    1f98:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1f9c:	88 81       	ld	r24, Y
    1f9e:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1fa0:	92 95       	swap	r25
    1fa2:	96 95       	lsr	r25
    1fa4:	93 70       	andi	r25, 0x03	; 3
    1fa6:	39 2f       	mov	r19, r25
    1fa8:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1faa:	98 2f       	mov	r25, r24
    1fac:	92 95       	swap	r25
    1fae:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1fb0:	93 2b       	or	r25, r19
    1fb2:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1fb6:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1fc0:	c0 e2       	ldi	r28, 0x20	; 32
    1fc2:	d8 e0       	ldi	r29, 0x08	; 8
    1fc4:	f9 83       	std	Y+1, r31	; 0x01
    1fc6:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1fc8:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    1fca:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    1fcc:	5d 83       	std	Y+5, r21	; 0x05
    1fce:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    1fd0:	bf 83       	std	Y+7, r27	; 0x07
    1fd2:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1fd4:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	80 93 42 08 	sts	0x0842, r24
	rx_ready = 0;
    1fdc:	10 92 61 08 	sts	0x0861, r1
	tx_done = 0;
    1fe0:	10 92 31 08 	sts	0x0831, r1

	use_glossy = 0;
    1fe4:	10 92 1d 08 	sts	0x081D, r1

} // rf_init() 
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	08 95       	ret

00001ff2 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1ff2:	86 e1       	ldi	r24, 0x16	; 22
    1ff4:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <rf_cmd>

00001ff8 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1ff8:	86 e1       	ldi	r24, 0x16	; 22
    1ffa:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <rf_cmd>

00001ffe <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1ffe:	88 e0       	ldi	r24, 0x08	; 8
    2000:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>
	rx_ready = 0;
    2004:	10 92 61 08 	sts	0x0861, r1
    2008:	08 95       	ret

0000200a <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    200a:	3f 92       	push	r3
    200c:	4f 92       	push	r4
    200e:	5f 92       	push	r5
    2010:	6f 92       	push	r6
    2012:	7f 92       	push	r7
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    202e:	80 91 42 08 	lds	r24, 0x0842
    2032:	81 11       	cpse	r24, r1
    2034:	02 c0       	rjmp	.+4      	; 0x203a <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	26 c1       	rjmp	.+588    	; 0x2286 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    203a:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    203c:	80 91 22 08 	lds	r24, 0x0822
    2040:	8f 5f       	subi	r24, 0xFF	; 255
    2042:	80 93 22 08 	sts	0x0822, r24
	machead->fcf = fcf;
    2046:	90 91 81 01 	lds	r25, 0x0181
    204a:	90 7e       	andi	r25, 0xE0	; 224
    204c:	91 60       	ori	r25, 0x01	; 1
    204e:	20 fb       	bst	r18, 0
    2050:	95 f9       	bld	r25, 5
    2052:	9f 73       	andi	r25, 0x3F	; 63
    2054:	90 64       	ori	r25, 0x40	; 64
    2056:	90 93 81 01 	sts	0x0181, r25
    205a:	88 e8       	ldi	r24, 0x88	; 136
    205c:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    2060:	80 91 1d 08 	lds	r24, 0x081D
    2064:	88 23       	and	r24, r24
    2066:	d1 f0       	breq	.+52     	; 0x209c <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    2068:	8f ef       	ldi	r24, 0xFF	; 255
    206a:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    206e:	8a ea       	ldi	r24, 0xAA	; 170
    2070:	9a ea       	ldi	r25, 0xAA	; 170
    2072:	90 93 89 01 	sts	0x0189, r25
    2076:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	9f ef       	ldi	r25, 0xFF	; 255
    207e:	90 93 87 01 	sts	0x0187, r25
    2082:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    2086:	20 91 63 01 	lds	r18, 0x0163
    208a:	80 91 62 01 	lds	r24, 0x0162
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	92 2b       	or	r25, r18
    2092:	90 93 85 01 	sts	0x0185, r25
    2096:	80 93 84 01 	sts	0x0184, r24
    209a:	1e c0       	rjmp	.+60     	; 0x20d8 <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    209c:	80 91 22 08 	lds	r24, 0x0822
    20a0:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    20a4:	80 91 61 01 	lds	r24, 0x0161
    20a8:	20 91 60 01 	lds	r18, 0x0160
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	38 2b       	or	r19, r24
    20b0:	30 93 89 01 	sts	0x0189, r19
    20b4:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    20b8:	88 81       	ld	r24, Y
    20ba:	99 81       	ldd	r25, Y+1	; 0x01
    20bc:	90 93 87 01 	sts	0x0187, r25
    20c0:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    20c4:	80 91 63 01 	lds	r24, 0x0163
    20c8:	20 91 62 01 	lds	r18, 0x0162
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	38 2b       	or	r19, r24
    20d0:	30 93 85 01 	sts	0x0185, r19
    20d4:	20 93 84 01 	sts	0x0184, r18
    20d8:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    20da:	4a 81       	ldd	r20, Y+2	; 0x02
    20dc:	55 27       	eor	r21, r21
    20de:	47 fd       	sbrc	r20, 7
    20e0:	50 95       	com	r21
    20e2:	6b 81       	ldd	r22, Y+3	; 0x03
    20e4:	7c 81       	ldd	r23, Y+4	; 0x04
    20e6:	8a e8       	ldi	r24, 0x8A	; 138
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	0e 94 2a 32 	call	0x6454	; 0x6454 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	85 5f       	subi	r24, 0xF5	; 245
    20f2:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    20f6:	80 91 41 01 	lds	r24, 0x0141
    20fa:	98 2f       	mov	r25, r24
    20fc:	9f 71       	andi	r25, 0x1F	; 31
    20fe:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    2100:	9f ef       	ldi	r25, 0xFF	; 255
    2102:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    2104:	92 30       	cpi	r25, 0x02	; 2
    2106:	b8 f3       	brcs	.-18     	; 0x20f6 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    2108:	91 e1       	ldi	r25, 0x11	; 17
    210a:	39 16       	cp	r3, r25
    210c:	a1 f3       	breq	.-24     	; 0x20f6 <rf_tx_packet_repeat+0xec>
    210e:	92 e1       	ldi	r25, 0x12	; 18
    2110:	39 16       	cp	r3, r25
    2112:	89 f3       	breq	.-30     	; 0x20f6 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    2114:	9f e1       	ldi	r25, 0x1F	; 31
    2116:	39 16       	cp	r3, r25
    2118:	71 f3       	breq	.-36     	; 0x20f6 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    211a:	98 ef       	ldi	r25, 0xF8	; 248
    211c:	93 0d       	add	r25, r3
    211e:	92 30       	cpi	r25, 0x02	; 2
    2120:	20 f0       	brcs	.+8      	; 0x212a <rf_tx_packet_repeat+0x120>
    2122:	8f 70       	andi	r24, 0x0F	; 15
    2124:	86 30       	cpi	r24, 0x06	; 6
    2126:	09 f0       	breq	.+2      	; 0x212a <rf_tx_packet_repeat+0x120>
    2128:	86 cf       	rjmp	.-244    	; 0x2036 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    212a:	86 e1       	ldi	r24, 0x16	; 22
    212c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	81 11       	cpse	r24, r1
    2134:	0a c0       	rjmp	.+20     	; 0x214a <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    2136:	89 e0       	ldi	r24, 0x09	; 9
    2138:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>
	if(pRTI->ackRequest)
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	88 23       	and	r24, r24
    2140:	91 f0       	breq	.+36     	; 0x2166 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    2142:	89 e1       	ldi	r24, 0x19	; 25
    2144:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>
    2148:	0e c0       	rjmp	.+28     	; 0x2166 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    214a:	80 91 48 01 	lds	r24, 0x0148
    214e:	80 68       	ori	r24, 0x80	; 128
    2150:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    2154:	80 91 41 01 	lds	r24, 0x0141
    2158:	87 ff       	sbrs	r24, 7
    215a:	fc cf       	rjmp	.-8      	; 0x2154 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    215c:	80 91 41 01 	lds	r24, 0x0141
    2160:	86 ff       	sbrs	r24, 6
    2162:	69 cf       	rjmp	.-302    	; 0x2036 <rf_tx_packet_repeat+0x2c>
    2164:	e8 cf       	rjmp	.-48     	; 0x2136 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    2166:	61 14       	cp	r6, r1
    2168:	71 04       	cpc	r7, r1
    216a:	a9 f1       	breq	.+106    	; 0x21d6 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    216c:	89 e2       	ldi	r24, 0x29	; 41
    216e:	98 e0       	ldi	r25, 0x08	; 8
    2170:	0e 94 55 24 	call	0x48aa	; 0x48aa <nrk_time_get>
		target_t.secs = curr_t.secs;
    2174:	80 91 29 08 	lds	r24, 0x0829
    2178:	90 91 2a 08 	lds	r25, 0x082A
    217c:	a0 91 2b 08 	lds	r26, 0x082B
    2180:	b0 91 2c 08 	lds	r27, 0x082C
    2184:	80 93 43 08 	sts	0x0843, r24
    2188:	90 93 44 08 	sts	0x0844, r25
    218c:	a0 93 45 08 	sts	0x0845, r26
    2190:	b0 93 46 08 	sts	0x0846, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    2194:	d3 01       	movw	r26, r6
    2196:	20 e4       	ldi	r18, 0x40	; 64
    2198:	32 e4       	ldi	r19, 0x42	; 66
    219a:	4f e0       	ldi	r20, 0x0F	; 15
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    21a2:	00 91 2d 08 	lds	r16, 0x082D
    21a6:	10 91 2e 08 	lds	r17, 0x082E
    21aa:	20 91 2f 08 	lds	r18, 0x082F
    21ae:	30 91 30 08 	lds	r19, 0x0830
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	80 0f       	add	r24, r16
    21b8:	91 1f       	adc	r25, r17
    21ba:	a2 1f       	adc	r26, r18
    21bc:	b3 1f       	adc	r27, r19
    21be:	80 93 47 08 	sts	0x0847, r24
    21c2:	90 93 48 08 	sts	0x0848, r25
    21c6:	a0 93 49 08 	sts	0x0849, r26
    21ca:	b0 93 4a 08 	sts	0x084A, r27
		nrk_time_compact_nanos(&target_t);
    21ce:	83 e4       	ldi	r24, 0x43	; 67
    21d0:	98 e0       	ldi	r25, 0x08	; 8
    21d2:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    21d6:	10 92 31 08 	sts	0x0831, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    21e0:	41 2c       	mov	r4, r1
    21e2:	51 2c       	mov	r5, r1
    21e4:	80 91 31 08 	lds	r24, 0x0831
    21e8:	81 11       	cpse	r24, r1
    21ea:	08 c0       	rjmp	.+16     	; 0x21fc <rf_tx_packet_repeat+0x1f2>
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	48 1a       	sub	r4, r24
    21f0:	58 0a       	sbc	r5, r24
    21f2:	98 ee       	ldi	r25, 0xE8	; 232
    21f4:	49 16       	cp	r4, r25
    21f6:	9d ef       	ldi	r25, 0xFD	; 253
    21f8:	59 06       	cpc	r5, r25
    21fa:	a1 f7       	brne	.-24     	; 0x21e4 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    21fc:	61 14       	cp	r6, r1
    21fe:	71 04       	cpc	r7, r1
    2200:	21 f4       	brne	.+8      	; 0x220a <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2202:	8e 81       	ldd	r24, Y+6	; 0x06
    2204:	81 11       	cpse	r24, r1
    2206:	2d c0       	rjmp	.+90     	; 0x2262 <rf_tx_packet_repeat+0x258>
    2208:	32 c0       	rjmp	.+100    	; 0x226e <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    220a:	89 e2       	ldi	r24, 0x29	; 41
    220c:	98 e0       	ldi	r25, 0x08	; 8
    220e:	0e 94 55 24 	call	0x48aa	; 0x48aa <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    2212:	80 90 29 08 	lds	r8, 0x0829
    2216:	90 90 2a 08 	lds	r9, 0x082A
    221a:	a0 90 2b 08 	lds	r10, 0x082B
    221e:	b0 90 2c 08 	lds	r11, 0x082C
    2222:	c0 90 2d 08 	lds	r12, 0x082D
    2226:	d0 90 2e 08 	lds	r13, 0x082E
    222a:	e0 90 2f 08 	lds	r14, 0x082F
    222e:	f0 90 30 08 	lds	r15, 0x0830
    2232:	00 91 43 08 	lds	r16, 0x0843
    2236:	10 91 44 08 	lds	r17, 0x0844
    223a:	20 91 45 08 	lds	r18, 0x0845
    223e:	30 91 46 08 	lds	r19, 0x0846
    2242:	40 91 47 08 	lds	r20, 0x0847
    2246:	50 91 48 08 	lds	r21, 0x0848
    224a:	60 91 49 08 	lds	r22, 0x0849
    224e:	70 91 4a 08 	lds	r23, 0x084A
    2252:	82 e6       	ldi	r24, 0x62	; 98
    2254:	98 e0       	ldi	r25, 0x08	; 8
    2256:	0e 94 b2 24 	call	0x4964	; 0x4964 <nrk_time_sub>
    225a:	8f 3f       	cpi	r24, 0xFF	; 255
    225c:	09 f0       	breq	.+2      	; 0x2260 <rf_tx_packet_repeat+0x256>
    225e:	bb cf       	rjmp	.-138    	; 0x21d6 <rf_tx_packet_repeat+0x1cc>
    2260:	d0 cf       	rjmp	.-96     	; 0x2202 <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    2262:	80 91 42 01 	lds	r24, 0x0142
    2266:	82 95       	swap	r24
    2268:	86 95       	lsr	r24
    226a:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    226c:	39 f4       	brne	.+14     	; 0x227c <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    226e:	88 ee       	ldi	r24, 0xE8	; 232
    2270:	48 16       	cp	r4, r24
    2272:	8d ef       	ldi	r24, 0xFD	; 253
    2274:	58 06       	cpc	r5, r24
    2276:	11 f0       	breq	.+4      	; 0x227c <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2278:	c1 e0       	ldi	r28, 0x01	; 1
    227a:	01 c0       	rjmp	.+2      	; 0x227e <rf_tx_packet_repeat+0x274>
    227c:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    227e:	83 2d       	mov	r24, r3
    2280:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    2284:	8c 2f       	mov	r24, r28
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	7f 90       	pop	r7
    22a0:	6f 90       	pop	r6
    22a2:	5f 90       	pop	r5
    22a4:	4f 90       	pop	r4
    22a6:	3f 90       	pop	r3
    22a8:	08 95       	ret

000022aa <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	0c 94 05 10 	jmp	0x200a	; 0x200a <rf_tx_packet_repeat>

000022b2 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    22b6:	80 91 42 08 	lds	r24, 0x0842
    22ba:	88 23       	and	r24, r24
    22bc:	41 f1       	breq	.+80     	; 0x230e <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    22be:	80 91 41 01 	lds	r24, 0x0141
    22c2:	c8 2f       	mov	r28, r24
    22c4:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    22c6:	9f ef       	ldi	r25, 0xFF	; 255
    22c8:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    22ca:	92 30       	cpi	r25, 0x02	; 2
    22cc:	c0 f3       	brcs	.-16     	; 0x22be <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    22ce:	c1 31       	cpi	r28, 0x11	; 17
    22d0:	b1 f3       	breq	.-20     	; 0x22be <rf_cca_check+0xc>
    22d2:	c2 31       	cpi	r28, 0x12	; 18
    22d4:	a1 f3       	breq	.-24     	; 0x22be <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    22d6:	cf 31       	cpi	r28, 0x1F	; 31
    22d8:	91 f3       	breq	.-28     	; 0x22be <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    22da:	c8 30       	cpi	r28, 0x08	; 8
    22dc:	19 f0       	breq	.+6      	; 0x22e4 <rf_cca_check+0x32>
    22de:	8f 70       	andi	r24, 0x0F	; 15
    22e0:	86 30       	cpi	r24, 0x06	; 6
    22e2:	a9 f4       	brne	.+42     	; 0x230e <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    22e4:	86 e1       	ldi	r24, 0x16	; 22
    22e6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    22ea:	80 91 48 01 	lds	r24, 0x0148
    22ee:	80 68       	ori	r24, 0x80	; 128
    22f0:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    22f4:	80 91 41 01 	lds	r24, 0x0141
    22f8:	87 ff       	sbrs	r24, 7
    22fa:	fc cf       	rjmp	.-8      	; 0x22f4 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    22fc:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    2300:	8c 2f       	mov	r24, r28
    2302:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    2306:	d6 fb       	bst	r29, 6
    2308:	88 27       	eor	r24, r24
    230a:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    230c:	01 c0       	rjmp	.+2      	; 0x2310 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    230e:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	08 95       	ret

00002316 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    2316:	80 91 42 08 	lds	r24, 0x0842
    231a:	88 23       	and	r24, r24
    231c:	09 f4       	brne	.+2      	; 0x2320 <rf_rx_packet_nonblock+0xa>
    231e:	a0 c0       	rjmp	.+320    	; 0x2460 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    2320:	80 91 61 08 	lds	r24, 0x0861
    2324:	88 23       	and	r24, r24
    2326:	09 f4       	brne	.+2      	; 0x232a <rf_rx_packet_nonblock+0x14>
    2328:	99 c0       	rjmp	.+306    	; 0x245c <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    232a:	80 91 7b 01 	lds	r24, 0x017B
    232e:	e0 91 20 08 	lds	r30, 0x0820
    2332:	f0 91 21 08 	lds	r31, 0x0821
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 97       	sbiw	r24, 0x02	; 2
    233a:	24 81       	ldd	r18, Z+4	; 0x04
    233c:	33 27       	eor	r19, r19
    233e:	27 fd       	sbrc	r18, 7
    2340:	30 95       	com	r19
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	0c f4       	brge	.+2      	; 0x234a <rf_rx_packet_nonblock+0x34>
    2348:	8b c0       	rjmp	.+278    	; 0x2460 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    234a:	e0 91 20 08 	lds	r30, 0x0820
    234e:	f0 91 21 08 	lds	r31, 0x0821
    2352:	80 91 82 01 	lds	r24, 0x0182
    2356:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    2358:	e0 91 20 08 	lds	r30, 0x0820
    235c:	f0 91 21 08 	lds	r31, 0x0821
    2360:	80 91 87 01 	lds	r24, 0x0187
    2364:	90 91 88 01 	lds	r25, 0x0188
    2368:	92 83       	std	Z+2, r25	; 0x02
    236a:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    236c:	e0 91 20 08 	lds	r30, 0x0820
    2370:	f0 91 21 08 	lds	r31, 0x0821
    2374:	80 91 7b 01 	lds	r24, 0x017B
    2378:	8b 50       	subi	r24, 0x0B	; 11
    237a:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    237c:	a0 91 20 08 	lds	r26, 0x0820
    2380:	b0 91 21 08 	lds	r27, 0x0821
    2384:	e0 91 20 08 	lds	r30, 0x0820
    2388:	f0 91 21 08 	lds	r31, 0x0821
    238c:	13 96       	adiw	r26, 0x03	; 3
    238e:	9c 91       	ld	r25, X
    2390:	84 81       	ldd	r24, Z+4	; 0x04
    2392:	89 17       	cp	r24, r25
    2394:	3c f0       	brlt	.+14     	; 0x23a4 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    2396:	e0 91 20 08 	lds	r30, 0x0820
    239a:	f0 91 21 08 	lds	r31, 0x0821
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	87 ff       	sbrs	r24, 7
    23a2:	0d c0       	rjmp	.+26     	; 0x23be <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    23a4:	10 92 61 08 	sts	0x0861, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    23a8:	80 91 4c 01 	lds	r24, 0x014C
    23ac:	8f 77       	andi	r24, 0x7F	; 127
    23ae:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    23b2:	80 91 4c 01 	lds	r24, 0x014C
    23b6:	80 68       	ori	r24, 0x80	; 128
    23b8:	80 93 4c 01 	sts	0x014C, r24
    23bc:	51 c0       	rjmp	.+162    	; 0x2460 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    23be:	a0 91 20 08 	lds	r26, 0x0820
    23c2:	b0 91 21 08 	lds	r27, 0x0821
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    23c6:	e0 91 20 08 	lds	r30, 0x0820
    23ca:	f0 91 21 08 	lds	r31, 0x0821
    23ce:	13 96       	adiw	r26, 0x03	; 3
    23d0:	4c 91       	ld	r20, X
    23d2:	55 27       	eor	r21, r21
    23d4:	47 fd       	sbrc	r20, 7
    23d6:	50 95       	com	r21
    23d8:	69 e8       	ldi	r22, 0x89	; 137
    23da:	71 e0       	ldi	r23, 0x01	; 1
    23dc:	85 81       	ldd	r24, Z+5	; 0x05
    23de:	96 81       	ldd	r25, Z+6	; 0x06
    23e0:	0e 94 2a 32 	call	0x6454	; 0x6454 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    23e4:	e0 91 20 08 	lds	r30, 0x0820
    23e8:	f0 91 21 08 	lds	r31, 0x0821
    23ec:	80 91 80 01 	lds	r24, 0x0180
    23f0:	85 fb       	bst	r24, 5
    23f2:	88 27       	eor	r24, r24
    23f4:	80 f9       	bld	r24, 0
    23f6:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    23f8:	e0 91 20 08 	lds	r30, 0x0820
    23fc:	f0 91 21 08 	lds	r31, 0x0821
    2400:	80 91 47 01 	lds	r24, 0x0147
    2404:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    2406:	e0 91 20 08 	lds	r30, 0x0820
    240a:	f0 91 21 08 	lds	r31, 0x0821
    240e:	80 91 46 01 	lds	r24, 0x0146
    2412:	86 95       	lsr	r24
    2414:	86 95       	lsr	r24
    2416:	86 95       	lsr	r24
    2418:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    241a:	e0 91 20 08 	lds	r30, 0x0820
    241e:	f0 91 21 08 	lds	r31, 0x0821
    2422:	80 91 47 01 	lds	r24, 0x0147
    2426:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    2428:	a0 91 20 08 	lds	r26, 0x0820
    242c:	b0 91 21 08 	lds	r27, 0x0821
    2430:	e0 91 7b 01 	lds	r30, 0x017B
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	e0 58       	subi	r30, 0x80	; 128
    2438:	fe 4f       	sbci	r31, 0xFE	; 254
    243a:	80 81       	ld	r24, Z
    243c:	1b 96       	adiw	r26, 0x0b	; 11
    243e:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    2440:	10 92 61 08 	sts	0x0861, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    2444:	80 91 4c 01 	lds	r24, 0x014C
    2448:	8f 77       	andi	r24, 0x7F	; 127
    244a:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    244e:	80 91 4c 01 	lds	r24, 0x014C
    2452:	80 68       	ori	r24, 0x80	; 128
    2454:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    2460:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    2462:	08 95       	ret

00002464 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    2464:	1f 92       	push	r1
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	0f 92       	push	r0
    246c:	11 24       	eor	r1, r1
    246e:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    2470:	80 e8       	ldi	r24, 0x80	; 128
    2472:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2476:	8f 91       	pop	r24
    2478:	0f 90       	pop	r0
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	0f 90       	pop	r0
    247e:	1f 90       	pop	r1
    2480:	18 95       	reti

00002482 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    2482:	1f 92       	push	r1
    2484:	0f 92       	push	r0
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	0f 92       	push	r0
    248a:	11 24       	eor	r1, r1
    248c:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	80 93 31 08 	sts	0x0831, r24
	IRQ_STATUS = (1 << TX_END);
    2494:	80 e4       	ldi	r24, 0x40	; 64
    2496:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    249a:	8f 91       	pop	r24
    249c:	0f 90       	pop	r0
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	0f 90       	pop	r0
    24a2:	1f 90       	pop	r1
    24a4:	18 95       	reti

000024a6 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    24a6:	1f 92       	push	r1
    24a8:	0f 92       	push	r0
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	0f 92       	push	r0
    24ae:	11 24       	eor	r1, r1
    24b0:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    24b2:	80 e2       	ldi	r24, 0x20	; 32
    24b4:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    24b8:	8f 91       	pop	r24
    24ba:	0f 90       	pop	r0
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	0f 90       	pop	r0
    24c0:	1f 90       	pop	r1
    24c2:	18 95       	reti

000024c4 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    24c4:	1f 92       	push	r1
    24c6:	0f 92       	push	r0
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    24d0:	80 e1       	ldi	r24, 0x10	; 16
    24d2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    24d6:	8f 91       	pop	r24
    24d8:	0f 90       	pop	r0
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    24e2:	1f 92       	push	r1
    24e4:	0f 92       	push	r0
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	0f 92       	push	r0
    24ea:	11 24       	eor	r1, r1
    24ec:	0b b6       	in	r0, 0x3b	; 59
    24ee:	0f 92       	push	r0
    24f0:	2f 93       	push	r18
    24f2:	3f 93       	push	r19
    24f4:	4f 93       	push	r20
    24f6:	5f 93       	push	r21
    24f8:	6f 93       	push	r22
    24fa:	7f 93       	push	r23
    24fc:	8f 93       	push	r24
    24fe:	9f 93       	push	r25
    2500:	af 93       	push	r26
    2502:	bf 93       	push	r27
    2504:	ef 93       	push	r30
    2506:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    2508:	84 e0       	ldi	r24, 0x04	; 4
    250a:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    250e:	e0 91 9f 04 	lds	r30, 0x049F
    2512:	f0 91 a0 04 	lds	r31, 0x04A0
    2516:	30 97       	sbiw	r30, 0x00	; 0
    2518:	09 f0       	breq	.+2      	; 0x251c <__vector_59+0x3a>
		rx_start_func();
    251a:	09 95       	icall

	return;
}
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0b be       	out	0x3b, r0	; 59
    2538:	0f 90       	pop	r0
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	0f 90       	pop	r0
    253e:	1f 90       	pop	r1
    2540:	18 95       	reti

00002542 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    2542:	1f 92       	push	r1
    2544:	0f 92       	push	r0
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	0f 92       	push	r0
    254a:	11 24       	eor	r1, r1
    254c:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2554:	8f 91       	pop	r24
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2572:	8f 91       	pop	r24
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    257e:	e9 e4       	ldi	r30, 0x49	; 73
    2580:	f1 e0       	ldi	r31, 0x01	; 1
    2582:	90 81       	ld	r25, Z
    2584:	90 7f       	andi	r25, 0xF0	; 240
    2586:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    2588:	90 81       	ld	r25, Z
    258a:	8f 70       	andi	r24, 0x0F	; 15
    258c:	98 2b       	or	r25, r24
    258e:	90 83       	st	Z, r25
    2590:	08 95       	ret

00002592 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	08 95       	ret

00002596 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    2596:	08 95       	ret

00002598 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    2598:	08 95       	ret

0000259a <rf_security_disable>:
}



void rf_security_disable()
{
    259a:	08 95       	ret

0000259c <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	08 95       	ret

000025a0 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    25a0:	80 91 1b 08 	lds	r24, 0x081B
    25a4:	90 91 1c 08 	lds	r25, 0x081C
    25a8:	08 95       	ret

000025aa <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	08 95       	ret

000025ae <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    25ae:	08 95       	ret

000025b0 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	08 95       	ret

000025b4 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	08 95       	ret

000025b8 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	08 95       	ret

000025bc <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    25bc:	08 95       	ret

000025be <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    25be:	08 95       	ret

000025c0 <rf_test_mode>:
}



void rf_test_mode()
{
    25c0:	08 95       	ret

000025c2 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    25c2:	08 95       	ret

000025c4 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    25c4:	08 95       	ret

000025c6 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    25c6:	08 95       	ret

000025c8 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    25c8:	08 95       	ret

000025ca <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    25ca:	08 95       	ret

000025cc <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    25cc:	e7 e3       	ldi	r30, 0x37	; 55
    25ce:	f1 e0       	ldi	r31, 0x01	; 1
    25d0:	80 81       	ld	r24, Z
    25d2:	83 60       	ori	r24, 0x03	; 3
    25d4:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    25d6:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    25d8:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    25da:	8d b1       	in	r24, 0x0d	; 13
    25dc:	80 6e       	ori	r24, 0xE0	; 224
    25de:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    25e0:	8e b1       	in	r24, 0x0e	; 14
    25e2:	80 6e       	ori	r24, 0xE0	; 224
    25e4:	8e b9       	out	0x0e, r24	; 14
    25e6:	08 95       	ret

000025e8 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    25e8:	e7 e3       	ldi	r30, 0x37	; 55
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	80 81       	ld	r24, Z
    25ee:	83 60       	ori	r24, 0x03	; 3
    25f0:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    25f2:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    25f4:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    25f6:	8d b1       	in	r24, 0x0d	; 13
    25f8:	80 6e       	ori	r24, 0xE0	; 224
    25fa:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    25fc:	8e b1       	in	r24, 0x0e	; 14
    25fe:	80 6e       	ori	r24, 0xE0	; 224
    2600:	8e b9       	out	0x0e, r24	; 14
    2602:	08 95       	ret

00002604 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    2604:	cf 92       	push	r12
    2606:	df 92       	push	r13
    2608:	ef 92       	push	r14
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	27 97       	sbiw	r28, 0x07	; 7
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    2624:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    2628:	e0 91 20 08 	lds	r30, 0x0820
    262c:	f0 91 21 08 	lds	r31, 0x0821
    2630:	c0 80       	ld	r12, Z
    2632:	d3 80       	ldd	r13, Z+3	; 0x03
    2634:	e5 80       	ldd	r14, Z+5	; 0x05
    2636:	f6 80       	ldd	r15, Z+6	; 0x06
    2638:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    263a:	0e 94 8b 11 	call	0x2316	; 0x2316 <rf_rx_packet_nonblock>
	if (err < 1) {
    263e:	18 16       	cp	r1, r24
    2640:	1c f0       	brlt	.+6      	; 0x2648 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    2642:	8a e1       	ldi	r24, 0x1A	; 26
    2644:	93 e0       	ldi	r25, 0x03	; 3
    2646:	06 c0       	rjmp	.+12     	; 0x2654 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    2648:	f7 01       	movw	r30, r14
    264a:	10 81       	ld	r17, Z
	if (ttl == 0) {
    264c:	11 11       	cpse	r17, r1
    264e:	07 c0       	rjmp	.+14     	; 0x265e <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    2650:	89 e3       	ldi	r24, 0x39	; 57
    2652:	93 e0       	ldi	r25, 0x03	; 3
    2654:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>
#endif
		nrk_int_enable();
    2658:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
		return;
    265c:	31 c0       	rjmp	.+98     	; 0x26c0 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    265e:	15 30       	cpi	r17, 0x05	; 5
    2660:	21 f4       	brne	.+8      	; 0x266a <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    2662:	8a e0       	ldi	r24, 0x0A	; 10
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 ca 32 	call	0x6594	; 0x6594 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    266a:	c7 01       	movw	r24, r14
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	9f 93       	push	r25
    2670:	8f 93       	push	r24
    2672:	80 2f       	mov	r24, r16
    2674:	99 27       	eor	r25, r25
    2676:	87 fd       	sbrc	r24, 7
    2678:	90 95       	com	r25
    267a:	9f 93       	push	r25
    267c:	0f 93       	push	r16
    267e:	1f 92       	push	r1
    2680:	1f 93       	push	r17
    2682:	1f 92       	push	r1
    2684:	cf 92       	push	r12
    2686:	8b e5       	ldi	r24, 0x5B	; 91
    2688:	93 e0       	ldi	r25, 0x03	; 3
    268a:	9f 93       	push	r25
    268c:	8f 93       	push	r24
    268e:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    2692:	fd 82       	std	Y+5, r15	; 0x05
    2694:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    2696:	11 50       	subi	r17, 0x01	; 1
    2698:	f7 01       	movw	r30, r14
    269a:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    269c:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    269e:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    26a0:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	9f ef       	ldi	r25, 0xFF	; 255
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    26aa:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	0e 94 55 11 	call	0x22aa	; 0x22aa <rf_tx_packet>
#endif
	return;
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
}
    26c0:	27 96       	adiw	r28, 0x07	; 7
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	08 95       	ret

000026de <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    26de:	1f 92       	push	r1
    26e0:	0f 92       	push	r0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	0f 92       	push	r0
    26e6:	11 24       	eor	r1, r1
    26e8:	0b b6       	in	r0, 0x3b	; 59
    26ea:	0f 92       	push	r0
    26ec:	2f 93       	push	r18
    26ee:	3f 93       	push	r19
    26f0:	4f 93       	push	r20
    26f2:	5f 93       	push	r21
    26f4:	6f 93       	push	r22
    26f6:	7f 93       	push	r23
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	af 93       	push	r26
    26fe:	bf 93       	push	r27
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 91 7b 01 	lds	r25, 0x017B
    270a:	89 17       	cp	r24, r25
    270c:	10 f4       	brcc	.+4      	; 0x2712 <__vector_60+0x34>
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	fa cf       	rjmp	.-12     	; 0x2706 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    2712:	80 91 46 01 	lds	r24, 0x0146
    2716:	87 ff       	sbrs	r24, 7
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <__vector_60+0x44>
		rx_ready = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 93 61 08 	sts	0x0861, r24
    2720:	04 c0       	rjmp	.+8      	; 0x272a <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    2722:	84 e8       	ldi	r24, 0x84	; 132
    2724:	93 e0       	ldi	r25, 0x03	; 3
    2726:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    272a:	88 e0       	ldi	r24, 0x08	; 8
    272c:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    2730:	80 91 46 01 	lds	r24, 0x0146
    2734:	87 ff       	sbrs	r24, 7
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    2738:	80 91 1d 08 	lds	r24, 0x081D
    273c:	81 11       	cpse	r24, r1
    273e:	0e 94 02 13 	call	0x2604	; 0x2604 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    2742:	e0 91 9d 04 	lds	r30, 0x049D
    2746:	f0 91 9e 04 	lds	r31, 0x049E
    274a:	30 97       	sbiw	r30, 0x00	; 0
    274c:	09 f0       	breq	.+2      	; 0x2750 <__vector_60+0x72>
		rx_end_func();
    274e:	09 95       	icall

	return;
}
    2750:	ff 91       	pop	r31
    2752:	ef 91       	pop	r30
    2754:	bf 91       	pop	r27
    2756:	af 91       	pop	r26
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	7f 91       	pop	r23
    275e:	6f 91       	pop	r22
    2760:	5f 91       	pop	r21
    2762:	4f 91       	pop	r20
    2764:	3f 91       	pop	r19
    2766:	2f 91       	pop	r18
    2768:	0f 90       	pop	r0
    276a:	0b be       	out	0x3b, r0	; 59
    276c:	0f 90       	pop	r0
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	0f 90       	pop	r0
    2772:	1f 90       	pop	r1
    2774:	18 95       	reti

00002776 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    2776:	a2 e3       	ldi	r26, 0x32	; 50
    2778:	b8 e0       	ldi	r27, 0x08	; 8
    277a:	fc 01       	movw	r30, r24
    277c:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    277e:	20 81       	ld	r18, Z
    2780:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    2782:	21 91       	ld	r18, Z+
    2784:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    2788:	e8 17       	cp	r30, r24
    278a:	f9 07       	cpc	r31, r25
    278c:	c1 f7       	brne	.-16     	; 0x277e <aes_setkey+0x8>
    278e:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    2790:	10 92 3e 01 	sts	0x013E, r1
    2794:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    2796:	e1 f7       	brne	.-8      	; 0x2790 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    2798:	80 e8       	ldi	r24, 0x80	; 128
    279a:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    279e:	80 91 3d 01 	lds	r24, 0x013D
    27a2:	80 ff       	sbrs	r24, 0
    27a4:	fc cf       	rjmp	.-8      	; 0x279e <aes_setkey+0x28>
    27a6:	eb e4       	ldi	r30, 0x4B	; 75
    27a8:	f8 e0       	ldi	r31, 0x08	; 8
    27aa:	80 e1       	ldi	r24, 0x10	; 16
    27ac:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    27ae:	90 91 3f 01 	lds	r25, 0x013F
    27b2:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    27b4:	8e 13       	cpse	r24, r30
    27b6:	fb cf       	rjmp	.-10     	; 0x27ae <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    27b8:	08 95       	ret

000027ba <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    27c0:	66 23       	and	r22, r22
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <aes_encrypt+0xc>
    27c4:	45 c0       	rjmp	.+138    	; 0x2850 <aes_encrypt+0x96>
    27c6:	86 2f       	mov	r24, r22
    27c8:	8f 70       	andi	r24, 0x0F	; 15
    27ca:	09 f0       	breq	.+2      	; 0x27ce <aes_encrypt+0x14>
    27cc:	41 c0       	rjmp	.+130    	; 0x2850 <aes_encrypt+0x96>
    27ce:	e2 e3       	ldi	r30, 0x32	; 50
    27d0:	f8 e0       	ldi	r31, 0x08	; 8
    27d2:	90 e1       	ldi	r25, 0x10	; 16
    27d4:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    27d6:	21 91       	ld	r18, Z+
    27d8:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    27dc:	9e 13       	cpse	r25, r30
    27de:	fb cf       	rjmp	.-10     	; 0x27d6 <aes_encrypt+0x1c>
    27e0:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    27e2:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    27e4:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    27e6:	40 e1       	ldi	r20, 0x10	; 16
    27e8:	94 9f       	mul	r25, r20
    27ea:	90 01       	movw	r18, r0
    27ec:	11 24       	eor	r1, r1
    27ee:	26 17       	cp	r18, r22
    27f0:	37 07       	cpc	r19, r23
    27f2:	7c f5       	brge	.+94     	; 0x2852 <aes_encrypt+0x98>
      if(i==0)
    27f4:	91 11       	cpse	r25, r1
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    27f8:	10 92 3c 01 	sts	0x013C, r1
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    27fe:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	2a 0f       	add	r18, r26
    2808:	3b 1f       	adc	r19, r27
    280a:	e9 01       	movw	r28, r18
    280c:	c4 0f       	add	r28, r20
    280e:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2810:	f8 81       	ld	r31, Y
    2812:	f0 93 3e 01 	sts	0x013E, r31
    2816:	4f 5f       	subi	r20, 0xFF	; 255
    2818:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    281a:	40 31       	cpi	r20, 0x10	; 16
    281c:	51 05       	cpc	r21, r1
    281e:	a9 f7       	brne	.-22     	; 0x280a <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2820:	40 91 3c 01 	lds	r20, 0x013C
    2824:	40 68       	ori	r20, 0x80	; 128
    2826:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    282a:	40 91 3d 01 	lds	r20, 0x013D
    282e:	40 ff       	sbrs	r20, 0
    2830:	fc cf       	rjmp	.-8      	; 0x282a <aes_encrypt+0x70>
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    2836:	f0 91 3e 01 	lds	r31, 0x013E
    283a:	e9 01       	movw	r28, r18
    283c:	c4 0f       	add	r28, r20
    283e:	d5 1f       	adc	r29, r21
    2840:	f8 83       	st	Y, r31
    2842:	4f 5f       	subi	r20, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    2846:	40 31       	cpi	r20, 0x10	; 16
    2848:	51 05       	cpc	r21, r1
    284a:	a9 f7       	brne	.-22     	; 0x2836 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    284c:	9f 5f       	subi	r25, 0xFF	; 255
    284e:	cb cf       	rjmp	.-106    	; 0x27e6 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    2862:	61 30       	cpi	r22, 0x01	; 1
    2864:	09 f4       	brne	.+2      	; 0x2868 <aes_decrypt+0x10>
    2866:	58 c0       	rjmp	.+176    	; 0x2918 <aes_decrypt+0xc0>
    2868:	86 2f       	mov	r24, r22
    286a:	8f 70       	andi	r24, 0x0F	; 15
    286c:	09 f0       	breq	.+2      	; 0x2870 <aes_decrypt+0x18>
    286e:	54 c0       	rjmp	.+168    	; 0x2918 <aes_decrypt+0xc0>
    2870:	eb e4       	ldi	r30, 0x4B	; 75
    2872:	f8 e0       	ldi	r31, 0x08	; 8
    2874:	90 e1       	ldi	r25, 0x10	; 16
    2876:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    2878:	21 91       	ld	r18, Z+
    287a:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    287e:	9e 13       	cpse	r25, r30
    2880:	fb cf       	rjmp	.-10     	; 0x2878 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2882:	62 95       	swap	r22
    2884:	6f 70       	andi	r22, 0x0F	; 15
    2886:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2888:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    288a:	6f 3f       	cpi	r22, 0xFF	; 255
    288c:	09 f4       	brne	.+2      	; 0x2890 <aes_decrypt+0x38>
    288e:	45 c0       	rjmp	.+138    	; 0x291a <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2890:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2894:	46 2f       	mov	r20, r22
    2896:	55 27       	eor	r21, r21
    2898:	47 fd       	sbrc	r20, 7
    289a:	50 95       	com	r21
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	ed 01       	movw	r28, r26
    28a2:	90 e1       	ldi	r25, 0x10	; 16
    28a4:	69 02       	muls	r22, r25
    28a6:	c0 0d       	add	r28, r0
    28a8:	d1 1d       	adc	r29, r1
    28aa:	11 24       	eor	r1, r1
    28ac:	fe 01       	movw	r30, r28
    28ae:	e2 0f       	add	r30, r18
    28b0:	f3 1f       	adc	r31, r19
    28b2:	90 81       	ld	r25, Z
    28b4:	90 93 3e 01 	sts	0x013E, r25
    28b8:	2f 5f       	subi	r18, 0xFF	; 255
    28ba:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    28bc:	20 31       	cpi	r18, 0x10	; 16
    28be:	31 05       	cpc	r19, r1
    28c0:	a9 f7       	brne	.-22     	; 0x28ac <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    28c2:	90 91 3c 01 	lds	r25, 0x013C
    28c6:	90 68       	ori	r25, 0x80	; 128
    28c8:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    28cc:	90 91 3d 01 	lds	r25, 0x013D
    28d0:	90 ff       	sbrs	r25, 0
    28d2:	fc cf       	rjmp	.-8      	; 0x28cc <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    28d4:	41 50       	subi	r20, 0x01	; 1
    28d6:	51 09       	sbc	r21, r1
    28d8:	94 e0       	ldi	r25, 0x04	; 4
    28da:	44 0f       	add	r20, r20
    28dc:	55 1f       	adc	r21, r21
    28de:	9a 95       	dec	r25
    28e0:	e1 f7       	brne	.-8      	; 0x28da <aes_decrypt+0x82>
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    28e6:	90 91 3e 01 	lds	r25, 0x013E
    28ea:	8e 01       	movw	r16, r28
    28ec:	02 0f       	add	r16, r18
    28ee:	13 1f       	adc	r17, r19
    28f0:	f8 01       	movw	r30, r16
    28f2:	90 83       	st	Z, r25
         if(i!=0)
    28f4:	66 23       	and	r22, r22
    28f6:	49 f0       	breq	.+18     	; 0x290a <aes_decrypt+0xb2>
    28f8:	f9 01       	movw	r30, r18
    28fa:	e4 0f       	add	r30, r20
    28fc:	f5 1f       	adc	r31, r21
    28fe:	ea 0f       	add	r30, r26
    2900:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    2902:	e0 81       	ld	r30, Z
    2904:	9e 27       	eor	r25, r30
    2906:	f8 01       	movw	r30, r16
    2908:	90 83       	st	Z, r25
    290a:	2f 5f       	subi	r18, 0xFF	; 255
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    290e:	20 31       	cpi	r18, 0x10	; 16
    2910:	31 05       	cpc	r19, r1
    2912:	49 f7       	brne	.-46     	; 0x28e6 <aes_decrypt+0x8e>
    2914:	61 50       	subi	r22, 0x01	; 1
    2916:	b9 cf       	rjmp	.-142    	; 0x288a <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	08 95       	ret

00002924 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    2924:	90 91 c0 00 	lds	r25, 0x00C0
    2928:	95 ff       	sbrs	r25, 5
    292a:	fc cf       	rjmp	.-8      	; 0x2924 <putc0>
    292c:	90 91 c0 00 	lds	r25, 0x00C0
    2930:	9f 7d       	andi	r25, 0xDF	; 223
    2932:	90 93 c0 00 	sts	0x00C0, r25
    2936:	80 93 c6 00 	sts	0x00C6, r24
    293a:	08 95       	ret

0000293c <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    293c:	1f 92       	push	r1
    293e:	0f 92       	push	r0
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	0f 92       	push	r0
    2944:	11 24       	eor	r1, r1
    2946:	0b b6       	in	r0, 0x3b	; 59
    2948:	0f 92       	push	r0
    294a:	2f 93       	push	r18
    294c:	3f 93       	push	r19
    294e:	4f 93       	push	r20
    2950:	5f 93       	push	r21
    2952:	6f 93       	push	r22
    2954:	7f 93       	push	r23
    2956:	8f 93       	push	r24
    2958:	9f 93       	push	r25
    295a:	af 93       	push	r26
    295c:	bf 93       	push	r27
    295e:	ef 93       	push	r30
    2960:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    2962:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    2966:	80 91 c0 00 	lds	r24, 0x00C0
    296a:	87 ff       	sbrs	r24, 7
    296c:	fc cf       	rjmp	.-8      	; 0x2966 <__vector_25+0x2a>
    296e:	80 91 c0 00 	lds	r24, 0x00C0
    2972:	8f 77       	andi	r24, 0x7F	; 127
    2974:	80 93 c0 00 	sts	0x00C0, r24
    2978:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    297c:	80 91 b2 04 	lds	r24, 0x04B2
    2980:	90 91 b3 04 	lds	r25, 0x04B3
    2984:	fc 01       	movw	r30, r24
    2986:	ee 55       	subi	r30, 0x5E	; 94
    2988:	fb 4f       	sbci	r31, 0xFB	; 251
    298a:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    298c:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    298e:	80 31       	cpi	r24, 0x10	; 16
    2990:	91 05       	cpc	r25, r1
    2992:	29 f0       	breq	.+10     	; 0x299e <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2994:	90 93 b3 04 	sts	0x04B3, r25
    2998:	80 93 b2 04 	sts	0x04B2, r24
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    299e:	10 92 b3 04 	sts	0x04B3, r1
    29a2:	10 92 b2 04 	sts	0x04B2, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    29a6:	80 91 a1 04 	lds	r24, 0x04A1
    29aa:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    29ae:	80 91 c0 00 	lds	r24, 0x00C0
    29b2:	8f 77       	andi	r24, 0x7F	; 127
    29b4:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    29b8:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
}
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	0f 90       	pop	r0
    29d6:	0b be       	out	0x3b, r0	; 59
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f 90       	pop	r0
    29de:	1f 90       	pop	r1
    29e0:	18 95       	reti

000029e2 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    29e2:	81 11       	cpse	r24, r1
    29e4:	0d c0       	rjmp	.+26     	; 0x2a00 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	40 91 b4 04 	lds	r20, 0x04B4
    29ec:	50 91 b5 04 	lds	r21, 0x04B5
    29f0:	20 91 b2 04 	lds	r18, 0x04B2
    29f4:	30 91 b3 04 	lds	r19, 0x04B3
    29f8:	42 17       	cp	r20, r18
    29fa:	53 07       	cpc	r21, r19
    29fc:	51 f4       	brne	.+20     	; 0x2a12 <nrk_uart_data_ready+0x30>
    29fe:	08 c0       	rjmp	.+16     	; 0x2a10 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    2a00:	81 30       	cpi	r24, 0x01	; 1
    2a02:	31 f4       	brne	.+12     	; 0x2a10 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    2a04:	80 91 c8 00 	lds	r24, 0x00C8
    2a08:	88 1f       	adc	r24, r24
    2a0a:	88 27       	eor	r24, r24
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    2a10:	80 e0       	ldi	r24, 0x00	; 0
}
    2a12:	08 95       	ret

00002a14 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2a14:	80 91 a1 04 	lds	r24, 0x04A1
    2a18:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1a:	19 f4       	brne	.+6      	; 0x2a22 <nrk_uart_rx_signal_get+0xe>
    2a1c:	8e e0       	ldi	r24, 0x0E	; 14
    2a1e:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
   return uart_rx_signal;
}
    2a22:	80 91 a1 04 	lds	r24, 0x04A1
    2a26:	08 95       	ret

00002a28 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	24 91       	lpm	r18, Z
    2a30:	ec 01       	movw	r28, r24
    2a32:	21 96       	adiw	r28, 0x01	; 1
    2a34:	22 23       	and	r18, r18
    2a36:	51 f0       	breq	.+20     	; 0x2a4c <nrk_kprintf+0x24>
        putchar(c);
    2a38:	60 91 63 09 	lds	r22, 0x0963
    2a3c:	70 91 64 09 	lds	r23, 0x0964
    2a40:	82 2f       	mov	r24, r18
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    2a48:	ce 01       	movw	r24, r28
    2a4a:	f0 cf       	rjmp	.-32     	; 0x2a2c <nrk_kprintf+0x4>
}
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	08 95       	ret

00002a52 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    2a52:	20 91 b4 04 	lds	r18, 0x04B4
    2a56:	30 91 b5 04 	lds	r19, 0x04B5
    2a5a:	80 91 b2 04 	lds	r24, 0x04B2
    2a5e:	90 91 b3 04 	lds	r25, 0x04B3
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	69 f4       	brne	.+26     	; 0x2a82 <getc0+0x30>
    2a68:	80 91 a1 04 	lds	r24, 0x04A1
    2a6c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <nrk_signal_register>
    2a70:	60 91 a1 04 	lds	r22, 0x04A1
    2a74:	77 27       	eor	r23, r23
    2a76:	67 fd       	sbrc	r22, 7
    2a78:	70 95       	com	r23
    2a7a:	87 2f       	mov	r24, r23
    2a7c:	97 2f       	mov	r25, r23
    2a7e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    2a82:	6f 3f       	cpi	r22, 0xFF	; 255
    2a84:	21 f4       	brne	.+8      	; 0x2a8e <getc0+0x3c>
    2a86:	8c e4       	ldi	r24, 0x4C	; 76
    2a88:	93 e0       	ldi	r25, 0x03	; 3
    2a8a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    2a8e:	20 91 b4 04 	lds	r18, 0x04B4
    2a92:	30 91 b5 04 	lds	r19, 0x04B5
    2a96:	f9 01       	movw	r30, r18
    2a98:	ee 55       	subi	r30, 0x5E	; 94
    2a9a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a9c:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    2a9e:	2f 5f       	subi	r18, 0xFF	; 255
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2aa2:	20 31       	cpi	r18, 0x10	; 16
    2aa4:	31 05       	cpc	r19, r1
    2aa6:	28 f4       	brcc	.+10     	; 0x2ab2 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    2aa8:	30 93 b5 04 	sts	0x04B5, r19
    2aac:	20 93 b4 04 	sts	0x04B4, r18
    2ab0:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2ab2:	10 92 b5 04 	sts	0x04B5, r1
    2ab6:	10 92 b4 04 	sts	0x04B4, r1

   return tmp;
}
    2aba:	08 95       	ret

00002abc <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    2abc:	86 e0       	ldi	r24, 0x06	; 6
    2abe:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    2ac0:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2ac2:	88 ef       	ldi	r24, 0xF8	; 248
    2ac4:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2ac6:	80 ef       	ldi	r24, 0xF0	; 240
    2ac8:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	8d b9       	out	0x0d, r24	; 13
    2ace:	08 95       	ret

00002ad0 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2ad0:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <PORT_INIT>

00002ad4 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2ad4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <nrk_gpio_set+0x6>
    2ad8:	6c c0       	rjmp	.+216    	; 0x2bb2 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2ada:	e8 2f       	mov	r30, r24
    2adc:	e7 70       	andi	r30, 0x07	; 7
    2ade:	4e 2f       	mov	r20, r30
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	47 30       	cpi	r20, 0x07	; 7
    2ae4:	51 05       	cpc	r21, r1
    2ae6:	08 f0       	brcs	.+2      	; 0x2aea <nrk_gpio_set+0x16>
    2ae8:	64 c0       	rjmp	.+200    	; 0x2bb2 <nrk_gpio_set+0xde>
    2aea:	fa 01       	movw	r30, r20
    2aec:	e0 57       	subi	r30, 0x70	; 112
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	86 95       	lsr	r24
    2af2:	86 95       	lsr	r24
    2af4:	86 95       	lsr	r24
    2af6:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2afa:	42 b1       	in	r20, 0x02	; 2
    2afc:	21 e0       	ldi	r18, 0x01	; 1
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	b9 01       	movw	r22, r18
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <nrk_gpio_set+0x34>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	8a 95       	dec	r24
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <nrk_gpio_set+0x30>
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	84 2b       	or	r24, r20
    2b10:	82 b9       	out	0x02, r24	; 2
    2b12:	4d c0       	rjmp	.+154    	; 0x2bae <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b14:	45 b1       	in	r20, 0x05	; 5
    2b16:	21 e0       	ldi	r18, 0x01	; 1
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <nrk_gpio_set+0x4e>
    2b1e:	66 0f       	add	r22, r22
    2b20:	77 1f       	adc	r23, r23
    2b22:	8a 95       	dec	r24
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <nrk_gpio_set+0x4a>
    2b26:	cb 01       	movw	r24, r22
    2b28:	84 2b       	or	r24, r20
    2b2a:	85 b9       	out	0x05, r24	; 5
    2b2c:	40 c0       	rjmp	.+128    	; 0x2bae <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b2e:	48 b1       	in	r20, 0x08	; 8
    2b30:	21 e0       	ldi	r18, 0x01	; 1
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	b9 01       	movw	r22, r18
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <nrk_gpio_set+0x68>
    2b38:	66 0f       	add	r22, r22
    2b3a:	77 1f       	adc	r23, r23
    2b3c:	8a 95       	dec	r24
    2b3e:	e2 f7       	brpl	.-8      	; 0x2b38 <nrk_gpio_set+0x64>
    2b40:	cb 01       	movw	r24, r22
    2b42:	84 2b       	or	r24, r20
    2b44:	88 b9       	out	0x08, r24	; 8
    2b46:	33 c0       	rjmp	.+102    	; 0x2bae <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b48:	4b b1       	in	r20, 0x0b	; 11
    2b4a:	21 e0       	ldi	r18, 0x01	; 1
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	b9 01       	movw	r22, r18
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <nrk_gpio_set+0x82>
    2b52:	66 0f       	add	r22, r22
    2b54:	77 1f       	adc	r23, r23
    2b56:	8a 95       	dec	r24
    2b58:	e2 f7       	brpl	.-8      	; 0x2b52 <nrk_gpio_set+0x7e>
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	84 2b       	or	r24, r20
    2b5e:	8b b9       	out	0x0b, r24	; 11
    2b60:	26 c0       	rjmp	.+76     	; 0x2bae <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b62:	4e b1       	in	r20, 0x0e	; 14
    2b64:	21 e0       	ldi	r18, 0x01	; 1
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	b9 01       	movw	r22, r18
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <nrk_gpio_set+0x9c>
    2b6c:	66 0f       	add	r22, r22
    2b6e:	77 1f       	adc	r23, r23
    2b70:	8a 95       	dec	r24
    2b72:	e2 f7       	brpl	.-8      	; 0x2b6c <nrk_gpio_set+0x98>
    2b74:	cb 01       	movw	r24, r22
    2b76:	84 2b       	or	r24, r20
    2b78:	8e b9       	out	0x0e, r24	; 14
    2b7a:	19 c0       	rjmp	.+50     	; 0x2bae <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b7c:	41 b3       	in	r20, 0x11	; 17
    2b7e:	21 e0       	ldi	r18, 0x01	; 1
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	b9 01       	movw	r22, r18
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <nrk_gpio_set+0xb6>
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	8a 95       	dec	r24
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <nrk_gpio_set+0xb2>
    2b8e:	cb 01       	movw	r24, r22
    2b90:	84 2b       	or	r24, r20
    2b92:	81 bb       	out	0x11, r24	; 17
    2b94:	0c c0       	rjmp	.+24     	; 0x2bae <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b96:	44 b3       	in	r20, 0x14	; 20
    2b98:	21 e0       	ldi	r18, 0x01	; 1
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	b9 01       	movw	r22, r18
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <nrk_gpio_set+0xd0>
    2ba0:	66 0f       	add	r22, r22
    2ba2:	77 1f       	adc	r23, r23
    2ba4:	8a 95       	dec	r24
    2ba6:	e2 f7       	brpl	.-8      	; 0x2ba0 <nrk_gpio_set+0xcc>
    2ba8:	cb 01       	movw	r24, r22
    2baa:	84 2b       	or	r24, r20
    2bac:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2bb0:	08 95       	ret
                default: return -1;
    2bb2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2bb4:	08 95       	ret

00002bb6 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2bb6:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <nrk_gpio_clr+0x6>
    2bba:	65 c0       	rjmp	.+202    	; 0x2c86 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    2bbc:	e8 2f       	mov	r30, r24
    2bbe:	e7 70       	andi	r30, 0x07	; 7
    2bc0:	4e 2f       	mov	r20, r30
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	47 30       	cpi	r20, 0x07	; 7
    2bc6:	51 05       	cpc	r21, r1
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <nrk_gpio_clr+0x16>
    2bca:	5d c0       	rjmp	.+186    	; 0x2c86 <nrk_gpio_clr+0xd0>
    2bcc:	fa 01       	movw	r30, r20
    2bce:	e9 56       	subi	r30, 0x69	; 105
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	86 95       	lsr	r24
    2bd4:	86 95       	lsr	r24
    2bd6:	86 95       	lsr	r24
    2bd8:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2bdc:	42 b1       	in	r20, 0x02	; 2
    2bde:	21 e0       	ldi	r18, 0x01	; 1
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	b9 01       	movw	r22, r18
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <nrk_gpio_clr+0x34>
    2be6:	66 0f       	add	r22, r22
    2be8:	77 1f       	adc	r23, r23
    2bea:	8a 95       	dec	r24
    2bec:	e2 f7       	brpl	.-8      	; 0x2be6 <nrk_gpio_clr+0x30>
    2bee:	cb 01       	movw	r24, r22
    2bf0:	80 95       	com	r24
    2bf2:	84 23       	and	r24, r20
    2bf4:	82 b9       	out	0x02, r24	; 2
    2bf6:	45 c0       	rjmp	.+138    	; 0x2c82 <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2bf8:	45 b1       	in	r20, 0x05	; 5
    2bfa:	21 e0       	ldi	r18, 0x01	; 1
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	b9 01       	movw	r22, r18
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <nrk_gpio_clr+0x50>
    2c02:	66 0f       	add	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	8a 95       	dec	r24
    2c08:	e2 f7       	brpl	.-8      	; 0x2c02 <nrk_gpio_clr+0x4c>
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	80 95       	com	r24
    2c0e:	84 23       	and	r24, r20
    2c10:	85 b9       	out	0x05, r24	; 5
    2c12:	37 c0       	rjmp	.+110    	; 0x2c82 <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2c14:	48 b1       	in	r20, 0x08	; 8
    2c16:	21 e0       	ldi	r18, 0x01	; 1
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	b9 01       	movw	r22, r18
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <nrk_gpio_clr+0x6c>
    2c1e:	66 0f       	add	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	8a 95       	dec	r24
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <nrk_gpio_clr+0x68>
    2c26:	cb 01       	movw	r24, r22
    2c28:	80 95       	com	r24
    2c2a:	84 23       	and	r24, r20
    2c2c:	88 b9       	out	0x08, r24	; 8
    2c2e:	29 c0       	rjmp	.+82     	; 0x2c82 <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2c30:	4b b1       	in	r20, 0x0b	; 11
    2c32:	21 e0       	ldi	r18, 0x01	; 1
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	b9 01       	movw	r22, r18
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <nrk_gpio_clr+0x88>
    2c3a:	66 0f       	add	r22, r22
    2c3c:	77 1f       	adc	r23, r23
    2c3e:	8a 95       	dec	r24
    2c40:	e2 f7       	brpl	.-8      	; 0x2c3a <nrk_gpio_clr+0x84>
    2c42:	cb 01       	movw	r24, r22
    2c44:	80 95       	com	r24
    2c46:	84 23       	and	r24, r20
    2c48:	8b b9       	out	0x0b, r24	; 11
    2c4a:	1b c0       	rjmp	.+54     	; 0x2c82 <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2c4c:	4e b1       	in	r20, 0x0e	; 14
    2c4e:	21 e0       	ldi	r18, 0x01	; 1
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	b9 01       	movw	r22, r18
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <nrk_gpio_clr+0xa4>
    2c56:	66 0f       	add	r22, r22
    2c58:	77 1f       	adc	r23, r23
    2c5a:	8a 95       	dec	r24
    2c5c:	e2 f7       	brpl	.-8      	; 0x2c56 <nrk_gpio_clr+0xa0>
    2c5e:	cb 01       	movw	r24, r22
    2c60:	80 95       	com	r24
    2c62:	84 23       	and	r24, r20
    2c64:	8e b9       	out	0x0e, r24	; 14
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2c68:	41 b3       	in	r20, 0x11	; 17
    2c6a:	21 e0       	ldi	r18, 0x01	; 1
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	b9 01       	movw	r22, r18
    2c70:	02 c0       	rjmp	.+4      	; 0x2c76 <nrk_gpio_clr+0xc0>
    2c72:	66 0f       	add	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	8a 95       	dec	r24
    2c78:	e2 f7       	brpl	.-8      	; 0x2c72 <nrk_gpio_clr+0xbc>
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	80 95       	com	r24
    2c7e:	84 23       	and	r24, r20
    2c80:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2c84:	08 95       	ret
                default: return -1;
    2c86:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2c88:	08 95       	ret

00002c8a <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2c8a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c8c:	31 f1       	breq	.+76     	; 0x2cda <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    2c8e:	e8 2f       	mov	r30, r24
    2c90:	e7 70       	andi	r30, 0x07	; 7
    2c92:	4e 2f       	mov	r20, r30
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	47 30       	cpi	r20, 0x07	; 7
    2c98:	51 05       	cpc	r21, r1
    2c9a:	f8 f4       	brcc	.+62     	; 0x2cda <nrk_gpio_get+0x50>
    2c9c:	fa 01       	movw	r30, r20
    2c9e:	e2 56       	subi	r30, 0x62	; 98
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	26 95       	lsr	r18
    2ca6:	26 95       	lsr	r18
    2ca8:	26 95       	lsr	r18
    2caa:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2cae:	90 b1       	in	r25, 0x00	; 0
    2cb0:	0b c0       	rjmp	.+22     	; 0x2cc8 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2cb2:	93 b1       	in	r25, 0x03	; 3
    2cb4:	09 c0       	rjmp	.+18     	; 0x2cc8 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2cb6:	96 b1       	in	r25, 0x06	; 6
    2cb8:	07 c0       	rjmp	.+14     	; 0x2cc8 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2cba:	99 b1       	in	r25, 0x09	; 9
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2cbe:	9c b1       	in	r25, 0x0c	; 12
    2cc0:	03 c0       	rjmp	.+6      	; 0x2cc8 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2cc2:	9f b1       	in	r25, 0x0f	; 15
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2cc6:	92 b3       	in	r25, 0x12	; 18
    2cc8:	89 2f       	mov	r24, r25
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <nrk_gpio_get+0x48>
    2cce:	95 95       	asr	r25
    2cd0:	87 95       	ror	r24
    2cd2:	2a 95       	dec	r18
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <nrk_gpio_get+0x44>
    2cd6:	81 70       	andi	r24, 0x01	; 1
    2cd8:	08 95       	ret
                default: return -1;
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2cdc:	08 95       	ret

00002cde <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2cde:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <nrk_gpio_toggle+0x6>
    2ce2:	06 c1       	rjmp	.+524    	; 0x2ef0 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2ce4:	e8 2f       	mov	r30, r24
    2ce6:	e7 70       	andi	r30, 0x07	; 7
    2ce8:	4e 2f       	mov	r20, r30
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	47 30       	cpi	r20, 0x07	; 7
    2cee:	51 05       	cpc	r21, r1
    2cf0:	08 f0       	brcs	.+2      	; 0x2cf4 <nrk_gpio_toggle+0x16>
    2cf2:	fe c0       	rjmp	.+508    	; 0x2ef0 <nrk_gpio_toggle+0x212>
    2cf4:	fa 01       	movw	r30, r20
    2cf6:	eb 55       	subi	r30, 0x5B	; 91
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	86 95       	lsr	r24
    2cfc:	86 95       	lsr	r24
    2cfe:	86 95       	lsr	r24
    2d00:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2d04:	20 b1       	in	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	08 2e       	mov	r0, r24
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <nrk_gpio_toggle+0x32>
    2d0c:	35 95       	asr	r19
    2d0e:	27 95       	ror	r18
    2d10:	0a 94       	dec	r0
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2d14:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2d16:	20 fd       	sbrc	r18, 0
    2d18:	0b c0       	rjmp	.+22     	; 0x2d30 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2d1a:	21 e0       	ldi	r18, 0x01	; 1
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	b9 01       	movw	r22, r18
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <nrk_gpio_toggle+0x48>
    2d22:	66 0f       	add	r22, r22
    2d24:	77 1f       	adc	r23, r23
    2d26:	8a 95       	dec	r24
    2d28:	e2 f7       	brpl	.-8      	; 0x2d22 <nrk_gpio_toggle+0x44>
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	84 2b       	or	r24, r20
    2d2e:	0b c0       	rjmp	.+22     	; 0x2d46 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    2d30:	21 e0       	ldi	r18, 0x01	; 1
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	b9 01       	movw	r22, r18
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <nrk_gpio_toggle+0x5e>
    2d38:	66 0f       	add	r22, r22
    2d3a:	77 1f       	adc	r23, r23
    2d3c:	8a 95       	dec	r24
    2d3e:	e2 f7       	brpl	.-8      	; 0x2d38 <nrk_gpio_toggle+0x5a>
    2d40:	cb 01       	movw	r24, r22
    2d42:	80 95       	com	r24
    2d44:	84 23       	and	r24, r20
    2d46:	82 b9       	out	0x02, r24	; 2
    2d48:	16 c0       	rjmp	.+44     	; 0x2d76 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2d4a:	23 b1       	in	r18, 0x03	; 3
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	08 2e       	mov	r0, r24
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <nrk_gpio_toggle+0x78>
    2d52:	35 95       	asr	r19
    2d54:	27 95       	ror	r18
    2d56:	0a 94       	dec	r0
    2d58:	e2 f7       	brpl	.-8      	; 0x2d52 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2d5a:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2d5c:	20 fd       	sbrc	r18, 0
    2d5e:	0d c0       	rjmp	.+26     	; 0x2d7a <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2d60:	21 e0       	ldi	r18, 0x01	; 1
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	b9 01       	movw	r22, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <nrk_gpio_toggle+0x8e>
    2d68:	66 0f       	add	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	8a 95       	dec	r24
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <nrk_gpio_toggle+0x8a>
    2d70:	cb 01       	movw	r24, r22
    2d72:	84 2b       	or	r24, r20
    2d74:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2d7a:	21 e0       	ldi	r18, 0x01	; 1
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	b9 01       	movw	r22, r18
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <nrk_gpio_toggle+0xa8>
    2d82:	66 0f       	add	r22, r22
    2d84:	77 1f       	adc	r23, r23
    2d86:	8a 95       	dec	r24
    2d88:	e2 f7       	brpl	.-8      	; 0x2d82 <nrk_gpio_toggle+0xa4>
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	80 95       	com	r24
    2d8e:	84 23       	and	r24, r20
    2d90:	f1 cf       	rjmp	.-30     	; 0x2d74 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2d92:	26 b1       	in	r18, 0x06	; 6
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	08 2e       	mov	r0, r24
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <nrk_gpio_toggle+0xc0>
    2d9a:	35 95       	asr	r19
    2d9c:	27 95       	ror	r18
    2d9e:	0a 94       	dec	r0
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2da2:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2da4:	20 fd       	sbrc	r18, 0
    2da6:	0b c0       	rjmp	.+22     	; 0x2dbe <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2da8:	21 e0       	ldi	r18, 0x01	; 1
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	b9 01       	movw	r22, r18
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <nrk_gpio_toggle+0xd6>
    2db0:	66 0f       	add	r22, r22
    2db2:	77 1f       	adc	r23, r23
    2db4:	8a 95       	dec	r24
    2db6:	e2 f7       	brpl	.-8      	; 0x2db0 <nrk_gpio_toggle+0xd2>
    2db8:	cb 01       	movw	r24, r22
    2dba:	84 2b       	or	r24, r20
    2dbc:	0b c0       	rjmp	.+22     	; 0x2dd4 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2dbe:	21 e0       	ldi	r18, 0x01	; 1
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	b9 01       	movw	r22, r18
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <nrk_gpio_toggle+0xec>
    2dc6:	66 0f       	add	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	8a 95       	dec	r24
    2dcc:	e2 f7       	brpl	.-8      	; 0x2dc6 <nrk_gpio_toggle+0xe8>
    2dce:	cb 01       	movw	r24, r22
    2dd0:	80 95       	com	r24
    2dd2:	84 23       	and	r24, r20
    2dd4:	88 b9       	out	0x08, r24	; 8
    2dd6:	cf cf       	rjmp	.-98     	; 0x2d76 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2dd8:	29 b1       	in	r18, 0x09	; 9
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	08 2e       	mov	r0, r24
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <nrk_gpio_toggle+0x106>
    2de0:	35 95       	asr	r19
    2de2:	27 95       	ror	r18
    2de4:	0a 94       	dec	r0
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2de8:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2dea:	20 fd       	sbrc	r18, 0
    2dec:	0b c0       	rjmp	.+22     	; 0x2e04 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2dee:	21 e0       	ldi	r18, 0x01	; 1
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	b9 01       	movw	r22, r18
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <nrk_gpio_toggle+0x11c>
    2df6:	66 0f       	add	r22, r22
    2df8:	77 1f       	adc	r23, r23
    2dfa:	8a 95       	dec	r24
    2dfc:	e2 f7       	brpl	.-8      	; 0x2df6 <nrk_gpio_toggle+0x118>
    2dfe:	cb 01       	movw	r24, r22
    2e00:	84 2b       	or	r24, r20
    2e02:	0b c0       	rjmp	.+22     	; 0x2e1a <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2e04:	21 e0       	ldi	r18, 0x01	; 1
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	b9 01       	movw	r22, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <nrk_gpio_toggle+0x132>
    2e0c:	66 0f       	add	r22, r22
    2e0e:	77 1f       	adc	r23, r23
    2e10:	8a 95       	dec	r24
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <nrk_gpio_toggle+0x12e>
    2e14:	cb 01       	movw	r24, r22
    2e16:	80 95       	com	r24
    2e18:	84 23       	and	r24, r20
    2e1a:	8b b9       	out	0x0b, r24	; 11
    2e1c:	ac cf       	rjmp	.-168    	; 0x2d76 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2e1e:	2c b1       	in	r18, 0x0c	; 12
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	08 2e       	mov	r0, r24
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <nrk_gpio_toggle+0x14c>
    2e26:	35 95       	asr	r19
    2e28:	27 95       	ror	r18
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2e2e:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2e30:	20 fd       	sbrc	r18, 0
    2e32:	0b c0       	rjmp	.+22     	; 0x2e4a <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2e34:	21 e0       	ldi	r18, 0x01	; 1
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	b9 01       	movw	r22, r18
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <nrk_gpio_toggle+0x162>
    2e3c:	66 0f       	add	r22, r22
    2e3e:	77 1f       	adc	r23, r23
    2e40:	8a 95       	dec	r24
    2e42:	e2 f7       	brpl	.-8      	; 0x2e3c <nrk_gpio_toggle+0x15e>
    2e44:	cb 01       	movw	r24, r22
    2e46:	84 2b       	or	r24, r20
    2e48:	0b c0       	rjmp	.+22     	; 0x2e60 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    2e4a:	21 e0       	ldi	r18, 0x01	; 1
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	b9 01       	movw	r22, r18
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <nrk_gpio_toggle+0x178>
    2e52:	66 0f       	add	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	8a 95       	dec	r24
    2e58:	e2 f7       	brpl	.-8      	; 0x2e52 <nrk_gpio_toggle+0x174>
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	80 95       	com	r24
    2e5e:	84 23       	and	r24, r20
    2e60:	8e b9       	out	0x0e, r24	; 14
    2e62:	89 cf       	rjmp	.-238    	; 0x2d76 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2e64:	2f b1       	in	r18, 0x0f	; 15
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	08 2e       	mov	r0, r24
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <nrk_gpio_toggle+0x192>
    2e6c:	35 95       	asr	r19
    2e6e:	27 95       	ror	r18
    2e70:	0a 94       	dec	r0
    2e72:	e2 f7       	brpl	.-8      	; 0x2e6c <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2e74:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2e76:	20 fd       	sbrc	r18, 0
    2e78:	0b c0       	rjmp	.+22     	; 0x2e90 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2e7a:	21 e0       	ldi	r18, 0x01	; 1
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	b9 01       	movw	r22, r18
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <nrk_gpio_toggle+0x1a8>
    2e82:	66 0f       	add	r22, r22
    2e84:	77 1f       	adc	r23, r23
    2e86:	8a 95       	dec	r24
    2e88:	e2 f7       	brpl	.-8      	; 0x2e82 <nrk_gpio_toggle+0x1a4>
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	84 2b       	or	r24, r20
    2e8e:	0b c0       	rjmp	.+22     	; 0x2ea6 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2e90:	21 e0       	ldi	r18, 0x01	; 1
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	b9 01       	movw	r22, r18
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <nrk_gpio_toggle+0x1be>
    2e98:	66 0f       	add	r22, r22
    2e9a:	77 1f       	adc	r23, r23
    2e9c:	8a 95       	dec	r24
    2e9e:	e2 f7       	brpl	.-8      	; 0x2e98 <nrk_gpio_toggle+0x1ba>
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	80 95       	com	r24
    2ea4:	84 23       	and	r24, r20
    2ea6:	81 bb       	out	0x11, r24	; 17
    2ea8:	66 cf       	rjmp	.-308    	; 0x2d76 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2eaa:	22 b3       	in	r18, 0x12	; 18
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	08 2e       	mov	r0, r24
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <nrk_gpio_toggle+0x1d8>
    2eb2:	35 95       	asr	r19
    2eb4:	27 95       	ror	r18
    2eb6:	0a 94       	dec	r0
    2eb8:	e2 f7       	brpl	.-8      	; 0x2eb2 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2eba:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2ebc:	20 fd       	sbrc	r18, 0
    2ebe:	0b c0       	rjmp	.+22     	; 0x2ed6 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2ec0:	21 e0       	ldi	r18, 0x01	; 1
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	b9 01       	movw	r22, r18
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <nrk_gpio_toggle+0x1ee>
    2ec8:	66 0f       	add	r22, r22
    2eca:	77 1f       	adc	r23, r23
    2ecc:	8a 95       	dec	r24
    2ece:	e2 f7       	brpl	.-8      	; 0x2ec8 <nrk_gpio_toggle+0x1ea>
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	84 2b       	or	r24, r20
    2ed4:	0b c0       	rjmp	.+22     	; 0x2eec <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2ed6:	21 e0       	ldi	r18, 0x01	; 1
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	b9 01       	movw	r22, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <nrk_gpio_toggle+0x204>
    2ede:	66 0f       	add	r22, r22
    2ee0:	77 1f       	adc	r23, r23
    2ee2:	8a 95       	dec	r24
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <nrk_gpio_toggle+0x200>
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	80 95       	com	r24
    2eea:	84 23       	and	r24, r20
    2eec:	84 bb       	out	0x14, r24	; 20
    2eee:	43 cf       	rjmp	.-378    	; 0x2d76 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    2ef0:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2ef2:	08 95       	ret

00002ef4 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2ef4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <nrk_gpio_direction+0x6>
    2ef8:	d5 c0       	rjmp	.+426    	; 0x30a4 <nrk_gpio_direction+0x1b0>
    2efa:	e8 2f       	mov	r30, r24
    2efc:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2efe:	4e 2f       	mov	r20, r30
    2f00:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2f02:	61 11       	cpse	r22, r1
    2f04:	67 c0       	rjmp	.+206    	; 0x2fd4 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    2f06:	47 30       	cpi	r20, 0x07	; 7
    2f08:	51 05       	cpc	r21, r1
    2f0a:	08 f0       	brcs	.+2      	; 0x2f0e <nrk_gpio_direction+0x1a>
    2f0c:	cb c0       	rjmp	.+406    	; 0x30a4 <nrk_gpio_direction+0x1b0>
    2f0e:	fa 01       	movw	r30, r20
    2f10:	e4 55       	subi	r30, 0x54	; 84
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	86 95       	lsr	r24
    2f16:	86 95       	lsr	r24
    2f18:	86 95       	lsr	r24
    2f1a:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    2f1e:	41 b1       	in	r20, 0x01	; 1
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	b9 01       	movw	r22, r18
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <nrk_gpio_direction+0x38>
    2f28:	66 0f       	add	r22, r22
    2f2a:	77 1f       	adc	r23, r23
    2f2c:	8a 95       	dec	r24
    2f2e:	e2 f7       	brpl	.-8      	; 0x2f28 <nrk_gpio_direction+0x34>
    2f30:	cb 01       	movw	r24, r22
    2f32:	80 95       	com	r24
    2f34:	84 23       	and	r24, r20
    2f36:	65 c0       	rjmp	.+202    	; 0x3002 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    2f38:	44 b1       	in	r20, 0x04	; 4
    2f3a:	21 e0       	ldi	r18, 0x01	; 1
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	b9 01       	movw	r22, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <nrk_gpio_direction+0x52>
    2f42:	66 0f       	add	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	8a 95       	dec	r24
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <nrk_gpio_direction+0x4e>
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	80 95       	com	r24
    2f4e:	84 23       	and	r24, r20
    2f50:	65 c0       	rjmp	.+202    	; 0x301c <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    2f52:	47 b1       	in	r20, 0x07	; 7
    2f54:	21 e0       	ldi	r18, 0x01	; 1
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	b9 01       	movw	r22, r18
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <nrk_gpio_direction+0x6c>
    2f5c:	66 0f       	add	r22, r22
    2f5e:	77 1f       	adc	r23, r23
    2f60:	8a 95       	dec	r24
    2f62:	e2 f7       	brpl	.-8      	; 0x2f5c <nrk_gpio_direction+0x68>
    2f64:	cb 01       	movw	r24, r22
    2f66:	80 95       	com	r24
    2f68:	84 23       	and	r24, r20
    2f6a:	65 c0       	rjmp	.+202    	; 0x3036 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2f6c:	4a b1       	in	r20, 0x0a	; 10
    2f6e:	21 e0       	ldi	r18, 0x01	; 1
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	b9 01       	movw	r22, r18
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <nrk_gpio_direction+0x86>
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
    2f7a:	8a 95       	dec	r24
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <nrk_gpio_direction+0x82>
    2f7e:	cb 01       	movw	r24, r22
    2f80:	80 95       	com	r24
    2f82:	84 23       	and	r24, r20
    2f84:	65 c0       	rjmp	.+202    	; 0x3050 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2f86:	4d b1       	in	r20, 0x0d	; 13
    2f88:	21 e0       	ldi	r18, 0x01	; 1
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <nrk_gpio_direction+0xa0>
    2f90:	66 0f       	add	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	8a 95       	dec	r24
    2f96:	e2 f7       	brpl	.-8      	; 0x2f90 <nrk_gpio_direction+0x9c>
    2f98:	cb 01       	movw	r24, r22
    2f9a:	80 95       	com	r24
    2f9c:	84 23       	and	r24, r20
    2f9e:	65 c0       	rjmp	.+202    	; 0x306a <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2fa0:	40 b3       	in	r20, 0x10	; 16
    2fa2:	21 e0       	ldi	r18, 0x01	; 1
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	b9 01       	movw	r22, r18
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <nrk_gpio_direction+0xba>
    2faa:	66 0f       	add	r22, r22
    2fac:	77 1f       	adc	r23, r23
    2fae:	8a 95       	dec	r24
    2fb0:	e2 f7       	brpl	.-8      	; 0x2faa <nrk_gpio_direction+0xb6>
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	80 95       	com	r24
    2fb6:	84 23       	and	r24, r20
    2fb8:	65 c0       	rjmp	.+202    	; 0x3084 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2fba:	43 b3       	in	r20, 0x13	; 19
    2fbc:	21 e0       	ldi	r18, 0x01	; 1
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	b9 01       	movw	r22, r18
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <nrk_gpio_direction+0xd4>
    2fc4:	66 0f       	add	r22, r22
    2fc6:	77 1f       	adc	r23, r23
    2fc8:	8a 95       	dec	r24
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <nrk_gpio_direction+0xd0>
    2fcc:	cb 01       	movw	r24, r22
    2fce:	80 95       	com	r24
    2fd0:	84 23       	and	r24, r20
    2fd2:	65 c0       	rjmp	.+202    	; 0x309e <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2fd4:	47 30       	cpi	r20, 0x07	; 7
    2fd6:	51 05       	cpc	r21, r1
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <nrk_gpio_direction+0xe8>
    2fda:	64 c0       	rjmp	.+200    	; 0x30a4 <nrk_gpio_direction+0x1b0>
    2fdc:	fa 01       	movw	r30, r20
    2fde:	ed 54       	subi	r30, 0x4D	; 77
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	86 95       	lsr	r24
    2fe4:	86 95       	lsr	r24
    2fe6:	86 95       	lsr	r24
    2fe8:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2fec:	41 b1       	in	r20, 0x01	; 1
    2fee:	21 e0       	ldi	r18, 0x01	; 1
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	b9 01       	movw	r22, r18
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <nrk_gpio_direction+0x106>
    2ff6:	66 0f       	add	r22, r22
    2ff8:	77 1f       	adc	r23, r23
    2ffa:	8a 95       	dec	r24
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <nrk_gpio_direction+0x102>
    2ffe:	cb 01       	movw	r24, r22
    3000:	84 2b       	or	r24, r20
    3002:	81 b9       	out	0x01, r24	; 1
    3004:	4d c0       	rjmp	.+154    	; 0x30a0 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    3006:	44 b1       	in	r20, 0x04	; 4
    3008:	21 e0       	ldi	r18, 0x01	; 1
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	b9 01       	movw	r22, r18
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <nrk_gpio_direction+0x120>
    3010:	66 0f       	add	r22, r22
    3012:	77 1f       	adc	r23, r23
    3014:	8a 95       	dec	r24
    3016:	e2 f7       	brpl	.-8      	; 0x3010 <nrk_gpio_direction+0x11c>
    3018:	cb 01       	movw	r24, r22
    301a:	84 2b       	or	r24, r20
    301c:	84 b9       	out	0x04, r24	; 4
    301e:	40 c0       	rjmp	.+128    	; 0x30a0 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    3020:	47 b1       	in	r20, 0x07	; 7
    3022:	21 e0       	ldi	r18, 0x01	; 1
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	b9 01       	movw	r22, r18
    3028:	02 c0       	rjmp	.+4      	; 0x302e <nrk_gpio_direction+0x13a>
    302a:	66 0f       	add	r22, r22
    302c:	77 1f       	adc	r23, r23
    302e:	8a 95       	dec	r24
    3030:	e2 f7       	brpl	.-8      	; 0x302a <nrk_gpio_direction+0x136>
    3032:	cb 01       	movw	r24, r22
    3034:	84 2b       	or	r24, r20
    3036:	87 b9       	out	0x07, r24	; 7
    3038:	33 c0       	rjmp	.+102    	; 0x30a0 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    303a:	4a b1       	in	r20, 0x0a	; 10
    303c:	21 e0       	ldi	r18, 0x01	; 1
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	b9 01       	movw	r22, r18
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <nrk_gpio_direction+0x154>
    3044:	66 0f       	add	r22, r22
    3046:	77 1f       	adc	r23, r23
    3048:	8a 95       	dec	r24
    304a:	e2 f7       	brpl	.-8      	; 0x3044 <nrk_gpio_direction+0x150>
    304c:	cb 01       	movw	r24, r22
    304e:	84 2b       	or	r24, r20
    3050:	8a b9       	out	0x0a, r24	; 10
    3052:	26 c0       	rjmp	.+76     	; 0x30a0 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    3054:	4d b1       	in	r20, 0x0d	; 13
    3056:	21 e0       	ldi	r18, 0x01	; 1
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	b9 01       	movw	r22, r18
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <nrk_gpio_direction+0x16e>
    305e:	66 0f       	add	r22, r22
    3060:	77 1f       	adc	r23, r23
    3062:	8a 95       	dec	r24
    3064:	e2 f7       	brpl	.-8      	; 0x305e <nrk_gpio_direction+0x16a>
    3066:	cb 01       	movw	r24, r22
    3068:	84 2b       	or	r24, r20
    306a:	8d b9       	out	0x0d, r24	; 13
    306c:	19 c0       	rjmp	.+50     	; 0x30a0 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    306e:	40 b3       	in	r20, 0x10	; 16
    3070:	21 e0       	ldi	r18, 0x01	; 1
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	b9 01       	movw	r22, r18
    3076:	02 c0       	rjmp	.+4      	; 0x307c <nrk_gpio_direction+0x188>
    3078:	66 0f       	add	r22, r22
    307a:	77 1f       	adc	r23, r23
    307c:	8a 95       	dec	r24
    307e:	e2 f7       	brpl	.-8      	; 0x3078 <nrk_gpio_direction+0x184>
    3080:	cb 01       	movw	r24, r22
    3082:	84 2b       	or	r24, r20
    3084:	80 bb       	out	0x10, r24	; 16
    3086:	0c c0       	rjmp	.+24     	; 0x30a0 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    3088:	43 b3       	in	r20, 0x13	; 19
    308a:	21 e0       	ldi	r18, 0x01	; 1
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	b9 01       	movw	r22, r18
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <nrk_gpio_direction+0x1a2>
    3092:	66 0f       	add	r22, r22
    3094:	77 1f       	adc	r23, r23
    3096:	8a 95       	dec	r24
    3098:	e2 f7       	brpl	.-8      	; 0x3092 <nrk_gpio_direction+0x19e>
    309a:	cb 01       	movw	r24, r22
    309c:	84 2b       	or	r24, r20
    309e:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    30a2:	08 95       	ret
                        default: return -1;
    30a4:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    30a6:	08 95       	ret

000030a8 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    30a8:	81 11       	cpse	r24, r1
    30aa:	06 c0       	rjmp	.+12     	; 0x30b8 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    30ac:	80 b1       	in	r24, 0x00	; 0
    30ae:	86 95       	lsr	r24
    30b0:	81 70       	andi	r24, 0x01	; 1
    30b2:	91 e0       	ldi	r25, 0x01	; 1
    30b4:	89 27       	eor	r24, r25
    30b6:	08 95       	ret
	} 
return -1;
    30b8:	8f ef       	ldi	r24, 0xFF	; 255
}
    30ba:	08 95       	ret

000030bc <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	11 f4       	brne	.+4      	; 0x30c4 <nrk_led_toggle+0x8>
    30c0:	83 e2       	ldi	r24, 0x23	; 35
    30c2:	0d c0       	rjmp	.+26     	; 0x30de <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    30c4:	81 30       	cpi	r24, 0x01	; 1
    30c6:	91 05       	cpc	r25, r1
    30c8:	11 f4       	brne	.+4      	; 0x30ce <nrk_led_toggle+0x12>
    30ca:	8b e2       	ldi	r24, 0x2B	; 43
    30cc:	08 c0       	rjmp	.+16     	; 0x30de <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    30ce:	82 30       	cpi	r24, 0x02	; 2
    30d0:	91 05       	cpc	r25, r1
    30d2:	11 f4       	brne	.+4      	; 0x30d8 <nrk_led_toggle+0x1c>
    30d4:	83 e3       	ldi	r24, 0x33	; 51
    30d6:	03 c0       	rjmp	.+6      	; 0x30de <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    30d8:	03 97       	sbiw	r24, 0x03	; 3
    30da:	29 f4       	brne	.+10     	; 0x30e6 <nrk_led_toggle+0x2a>
    30dc:	8b e3       	ldi	r24, 0x3B	; 59
    30de:	0e 94 6f 16 	call	0x2cde	; 0x2cde <nrk_gpio_toggle>
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	08 95       	ret
return -1;
    30e6:	8f ef       	ldi	r24, 0xFF	; 255
}
    30e8:	08 95       	ret

000030ea <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	11 f4       	brne	.+4      	; 0x30f2 <nrk_led_clr+0x8>
    30ee:	83 e2       	ldi	r24, 0x23	; 35
    30f0:	0d c0       	rjmp	.+26     	; 0x310c <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	91 05       	cpc	r25, r1
    30f6:	11 f4       	brne	.+4      	; 0x30fc <nrk_led_clr+0x12>
    30f8:	8b e2       	ldi	r24, 0x2B	; 43
    30fa:	08 c0       	rjmp	.+16     	; 0x310c <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    30fc:	82 30       	cpi	r24, 0x02	; 2
    30fe:	91 05       	cpc	r25, r1
    3100:	11 f4       	brne	.+4      	; 0x3106 <nrk_led_clr+0x1c>
    3102:	83 e3       	ldi	r24, 0x33	; 51
    3104:	03 c0       	rjmp	.+6      	; 0x310c <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    3106:	03 97       	sbiw	r24, 0x03	; 3
    3108:	29 f4       	brne	.+10     	; 0x3114 <nrk_led_clr+0x2a>
    310a:	8b e3       	ldi	r24, 0x3B	; 59
    310c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <nrk_gpio_set>
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	08 95       	ret
return -1;
    3114:	8f ef       	ldi	r24, 0xFF	; 255
}
    3116:	08 95       	ret

00003118 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	11 f4       	brne	.+4      	; 0x3120 <nrk_led_set+0x8>
    311c:	83 e2       	ldi	r24, 0x23	; 35
    311e:	0d c0       	rjmp	.+26     	; 0x313a <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	91 05       	cpc	r25, r1
    3124:	11 f4       	brne	.+4      	; 0x312a <nrk_led_set+0x12>
    3126:	8b e2       	ldi	r24, 0x2B	; 43
    3128:	08 c0       	rjmp	.+16     	; 0x313a <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    312a:	82 30       	cpi	r24, 0x02	; 2
    312c:	91 05       	cpc	r25, r1
    312e:	11 f4       	brne	.+4      	; 0x3134 <nrk_led_set+0x1c>
    3130:	83 e3       	ldi	r24, 0x33	; 51
    3132:	03 c0       	rjmp	.+6      	; 0x313a <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    3134:	03 97       	sbiw	r24, 0x03	; 3
    3136:	29 f4       	brne	.+10     	; 0x3142 <nrk_led_set+0x2a>
    3138:	8b e3       	ldi	r24, 0x3B	; 59
    313a:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nrk_gpio_clr>
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	08 95       	ret
return -1;
    3142:	8f ef       	ldi	r24, 0xFF	; 255
}
    3144:	08 95       	ret

00003146 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    3146:	88 23       	and	r24, r24
    3148:	19 f0       	breq	.+6      	; 0x3150 <nrk_gpio_pullups+0xa>
    314a:	85 b7       	in	r24, 0x35	; 53
    314c:	8f 7e       	andi	r24, 0xEF	; 239
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    3150:	85 b7       	in	r24, 0x35	; 53
    3152:	80 61       	ori	r24, 0x10	; 16
    3154:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	08 95       	ret

0000315a <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    315a:	90 91 c8 00 	lds	r25, 0x00C8
    315e:	95 ff       	sbrs	r25, 5
    3160:	fc cf       	rjmp	.-8      	; 0x315a <putc1>
    3162:	80 93 ce 00 	sts	0x00CE, r24
    3166:	08 95       	ret

00003168 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3168:	90 93 c5 00 	sts	0x00C5, r25
    316c:	80 93 c4 00 	sts	0x00C4, r24
    3170:	86 e0       	ldi	r24, 0x06	; 6
    3172:	80 93 c2 00 	sts	0x00C2, r24
    3176:	e1 ec       	ldi	r30, 0xC1	; 193
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8b 7f       	andi	r24, 0xFB	; 251
    317e:	80 83       	st	Z, r24
    3180:	a0 ec       	ldi	r26, 0xC0	; 192
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	8c 91       	ld	r24, X
    3186:	82 60       	ori	r24, 0x02	; 2
    3188:	8c 93       	st	X, r24
ENABLE_UART0();
    318a:	80 81       	ld	r24, Z
    318c:	88 61       	ori	r24, 0x18	; 24
    318e:	80 83       	st	Z, r24
    3190:	08 95       	ret

00003192 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3192:	90 93 cd 00 	sts	0x00CD, r25
    3196:	80 93 cc 00 	sts	0x00CC, r24
    319a:	86 e0       	ldi	r24, 0x06	; 6
    319c:	80 93 ca 00 	sts	0x00CA, r24
    31a0:	e9 ec       	ldi	r30, 0xC9	; 201
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	8b 7f       	andi	r24, 0xFB	; 251
    31a8:	80 83       	st	Z, r24
    31aa:	a8 ec       	ldi	r26, 0xC8	; 200
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	8c 91       	ld	r24, X
    31b0:	82 60       	ori	r24, 0x02	; 2
    31b2:	8c 93       	st	X, r24
ENABLE_UART1();
    31b4:	80 81       	ld	r24, Z
    31b6:	88 61       	ori	r24, 0x18	; 24
    31b8:	80 83       	st	Z, r24
    31ba:	08 95       	ret

000031bc <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    31bc:	0e 94 b4 18 	call	0x3168	; 0x3168 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    31c0:	69 e2       	ldi	r22, 0x29	; 41
    31c2:	75 e1       	ldi	r23, 0x15	; 21
    31c4:	82 e9       	ldi	r24, 0x92	; 146
    31c6:	94 e1       	ldi	r25, 0x14	; 20
    31c8:	0e 94 33 32 	call	0x6466	; 0x6466 <fdevopen>
    31cc:	90 93 64 09 	sts	0x0964, r25
    31d0:	80 93 63 09 	sts	0x0963, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    31d4:	69 e2       	ldi	r22, 0x29	; 41
    31d6:	75 e1       	ldi	r23, 0x15	; 21
    31d8:	82 e9       	ldi	r24, 0x92	; 146
    31da:	94 e1       	ldi	r25, 0x14	; 20
    31dc:	0e 94 33 32 	call	0x6466	; 0x6466 <fdevopen>
    31e0:	90 93 62 09 	sts	0x0962, r25
    31e4:	80 93 61 09 	sts	0x0961, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    31e8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_signal_create>
    31ec:	80 93 a1 04 	sts	0x04A1, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    31f0:	8f 3f       	cpi	r24, 0xFF	; 255
    31f2:	19 f4       	brne	.+6      	; 0x31fa <nrk_setup_uart+0x3e>
    31f4:	8e e0       	ldi	r24, 0x0E	; 14
    31f6:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
   uart_rx_buf_start=0;
    31fa:	10 92 b5 04 	sts	0x04B5, r1
    31fe:	10 92 b4 04 	sts	0x04B4, r1
   uart_rx_buf_end=0;
    3202:	10 92 b3 04 	sts	0x04B3, r1
    3206:	10 92 b2 04 	sts	0x04B2, r1
   ENABLE_UART0_RX_INT();
    320a:	80 91 c1 00 	lds	r24, 0x00C1
    320e:	80 68       	ori	r24, 0x80	; 128
    3210:	80 93 c1 00 	sts	0x00C1, r24
    3214:	08 95       	ret

00003216 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    3216:	80 91 c8 00 	lds	r24, 0x00C8
    321a:	87 ff       	sbrs	r24, 7
    321c:	fc cf       	rjmp	.-8      	; 0x3216 <getc1>
    321e:	80 91 c8 00 	lds	r24, 0x00C8
    3222:	8f 77       	andi	r24, 0x7F	; 127
    3224:	80 93 c8 00 	sts	0x00C8, r24
    3228:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    322c:	08 95       	ret

0000322e <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	d1 f7       	brne	.-12     	; 0x322e <halWait>

} // halWait
    323a:	08 95       	ret

0000323c <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    323c:	0c 94 8e 33 	jmp	0x671c	; 0x671c <__eerd_byte_m128rfa1>

00003240 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    3240:	0e 94 96 33 	call	0x672c	; 0x672c <__eewr_byte_m128rfa1>
}
    3244:	08 95       	ret

00003246 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    3246:	ef 92       	push	r14
    3248:	ff 92       	push	r15
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    325c:	18 2f       	mov	r17, r24
    325e:	f7 01       	movw	r30, r14
    3260:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    326a:	08 2f       	mov	r16, r24
    326c:	f7 01       	movw	r30, r14
    326e:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    3270:	82 e0       	ldi	r24, 0x02	; 2
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    3278:	d8 2f       	mov	r29, r24
    327a:	f7 01       	movw	r30, r14
    327c:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    327e:	83 e0       	ldi	r24, 0x03	; 3
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    3286:	c8 2f       	mov	r28, r24
    3288:	f7 01       	movw	r30, r14
    328a:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    328c:	84 e0       	ldi	r24, 0x04	; 4
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    3294:	10 0f       	add	r17, r16
    3296:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    3298:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    329a:	8c 17       	cp	r24, r28
    329c:	11 f0       	breq	.+4      	; 0x32a2 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    329e:	8f ef       	ldi	r24, 0xFF	; 255
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    32a2:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	ff 90       	pop	r15
    32ae:	ef 90       	pop	r14
    32b0:	08 95       	ret

000032b2 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    32b8:	85 e0       	ldi	r24, 0x05	; 5
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    32c0:	88 83       	st	Y, r24
return NRK_OK;
}
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	08 95       	ret

000032ca <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    32ca:	fc 01       	movw	r30, r24
    32cc:	60 81       	ld	r22, Z
    32ce:	86 e0       	ldi	r24, 0x06	; 6
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	0e 94 96 33 	call	0x672c	; 0x672c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	08 95       	ret

000032da <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    32e0:	86 e0       	ldi	r24, 0x06	; 6
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    32e8:	88 83       	st	Y, r24
  return NRK_OK;
}
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	08 95       	ret

000032f2 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	8c 01       	movw	r16, r24
    32fc:	c0 e0       	ldi	r28, 0x00	; 0
    32fe:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    3300:	ce 01       	movw	r24, r28
    3302:	08 96       	adiw	r24, 0x08	; 8
    3304:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    3308:	f8 01       	movw	r30, r16
    330a:	81 93       	st	Z+, r24
    330c:	8f 01       	movw	r16, r30
    330e:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    3310:	c0 31       	cpi	r28, 0x10	; 16
    3312:	d1 05       	cpc	r29, r1
    3314:	a9 f7       	brne	.-22     	; 0x3300 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	08 95       	ret

00003322 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	8c 01       	movw	r16, r24
    332c:	c0 e0       	ldi	r28, 0x00	; 0
    332e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    3330:	f8 01       	movw	r30, r16
    3332:	61 91       	ld	r22, Z+
    3334:	8f 01       	movw	r16, r30
    3336:	ce 01       	movw	r24, r28
    3338:	08 96       	adiw	r24, 0x08	; 8
    333a:	0e 94 96 33 	call	0x672c	; 0x672c <__eewr_byte_m128rfa1>
    333e:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    3340:	c0 31       	cpi	r28, 0x10	; 16
    3342:	d1 05       	cpc	r29, r1
    3344:	a9 f7       	brne	.-22     	; 0x3330 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	08 95       	ret

00003352 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    3358:	87 e0       	ldi	r24, 0x07	; 7
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 8e 33 	call	0x671c	; 0x671c <__eerd_byte_m128rfa1>
    3360:	88 83       	st	Y, r24
  return NRK_OK;
}
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    336a:	fc 01       	movw	r30, r24
    336c:	60 81       	ld	r22, Z
    336e:	87 e0       	ldi	r24, 0x07	; 7
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 96 33 	call	0x672c	; 0x672c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	08 95       	ret

0000337a <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    337a:	f8 94       	cli
    337c:	08 95       	ret

0000337e <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    337e:	78 94       	sei
    3380:	08 95       	ret

00003382 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    3382:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
while(1);
    3386:	ff cf       	rjmp	.-2      	; 0x3386 <nrk_halt+0x4>

00003388 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	a3 97       	sbiw	r28, 0x23	; 35
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    339e:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_signal_create>
    33a2:	80 93 21 09 	sts	0x0921, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    33a6:	8f 3f       	cpi	r24, 0xFF	; 255
    33a8:	21 f4       	brne	.+8      	; 0x33b2 <nrk_init+0x2a>
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	8e e0       	ldi	r24, 0x0E	; 14
    33ae:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    33b2:	0e 94 76 2c 	call	0x58ec	; 0x58ec <_nrk_startup_error>
    33b6:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    33b8:	80 ff       	sbrs	r24, 0
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <nrk_init+0x3c>
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	86 e0       	ldi	r24, 0x06	; 6
    33c0:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    33c4:	11 ff       	sbrs	r17, 1
    33c6:	04 c0       	rjmp	.+8      	; 0x33d0 <nrk_init+0x48>
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	84 e1       	ldi	r24, 0x14	; 20
    33cc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    33d0:	12 ff       	sbrs	r17, 2
    33d2:	04 c0       	rjmp	.+8      	; 0x33dc <nrk_init+0x54>
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	83 e1       	ldi	r24, 0x13	; 19
    33d8:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    33dc:	10 92 24 09 	sts	0x0924, r1
    nrk_cur_task_TCB = NULL;
    33e0:	10 92 32 09 	sts	0x0932, r1
    33e4:	10 92 31 09 	sts	0x0931, r1
    
    nrk_high_ready_TCB = NULL;
    33e8:	10 92 23 09 	sts	0x0923, r1
    33ec:	10 92 22 09 	sts	0x0922, r1
    nrk_high_ready_prio = 0; 
    33f0:	10 92 33 09 	sts	0x0933, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    33f4:	10 92 30 09 	sts	0x0930, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    33f8:	8f ef       	ldi	r24, 0xFF	; 255
    33fa:	80 93 1a 09 	sts	0x091A, r24
    nrk_sem_list[i].value=-1;
    33fe:	80 93 1c 09 	sts	0x091C, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3402:	80 93 1b 09 	sts	0x091B, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3406:	80 93 1d 09 	sts	0x091D, r24
    nrk_sem_list[i].value=-1;
    340a:	80 93 1f 09 	sts	0x091F, r24
    nrk_sem_list[i].resource_ceiling=-1;
    340e:	80 93 1e 09 	sts	0x091E, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3412:	93 e6       	ldi	r25, 0x63	; 99
    3414:	90 93 76 08 	sts	0x0876, r25
        nrk_task_TCB[i].task_ID = -1; 
    3418:	80 93 74 08 	sts	0x0874, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    341c:	90 93 a1 08 	sts	0x08A1, r25
        nrk_task_TCB[i].task_ID = -1; 
    3420:	80 93 9f 08 	sts	0x089F, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3424:	90 93 cc 08 	sts	0x08CC, r25
        nrk_task_TCB[i].task_ID = -1; 
    3428:	80 93 ca 08 	sts	0x08CA, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    342c:	90 93 f7 08 	sts	0x08F7, r25
        nrk_task_TCB[i].task_ID = -1; 
    3430:	80 93 f5 08 	sts	0x08F5, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3434:	84 e3       	ldi	r24, 0x34	; 52
    3436:	99 e0       	ldi	r25, 0x09	; 9
    3438:	29 e3       	ldi	r18, 0x39	; 57
    343a:	39 e0       	ldi	r19, 0x09	; 9
    343c:	30 93 38 09 	sts	0x0938, r19
    3440:	20 93 37 09 	sts	0x0937, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3444:	90 93 3b 09 	sts	0x093B, r25
    3448:	80 93 3a 09 	sts	0x093A, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    344c:	4e e3       	ldi	r20, 0x3E	; 62
    344e:	59 e0       	ldi	r21, 0x09	; 9
    3450:	50 93 3d 09 	sts	0x093D, r21
    3454:	40 93 3c 09 	sts	0x093C, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3458:	30 93 40 09 	sts	0x0940, r19
    345c:	20 93 3f 09 	sts	0x093F, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3460:	23 e4       	ldi	r18, 0x43	; 67
    3462:	39 e0       	ldi	r19, 0x09	; 9
    3464:	30 93 42 09 	sts	0x0942, r19
    3468:	20 93 41 09 	sts	0x0941, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    346c:	50 93 45 09 	sts	0x0945, r21
    3470:	40 93 44 09 	sts	0x0944, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3474:	48 e4       	ldi	r20, 0x48	; 72
    3476:	59 e0       	ldi	r21, 0x09	; 9
    3478:	50 93 47 09 	sts	0x0947, r21
    347c:	40 93 46 09 	sts	0x0946, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3480:	30 93 4a 09 	sts	0x094A, r19
    3484:	20 93 49 09 	sts	0x0949, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3488:	10 92 36 09 	sts	0x0936, r1
    348c:	10 92 35 09 	sts	0x0935, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    3490:	10 92 4c 09 	sts	0x094C, r1
    3494:	10 92 4b 09 	sts	0x094B, r1
	_head_node = NULL;
    3498:	10 92 27 09 	sts	0x0927, r1
    349c:	10 92 26 09 	sts	0x0926, r1
	_free_node = &_nrk_readyQ[0];
    34a0:	90 93 6b 08 	sts	0x086B, r25
    34a4:	80 93 6a 08 	sts	0x086A, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    34a8:	6f ed       	ldi	r22, 0xDF	; 223
    34aa:	76 e2       	ldi	r23, 0x26	; 38
    34ac:	ce 01       	movw	r24, r28
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    34b4:	40 e8       	ldi	r20, 0x80	; 128
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	62 e5       	ldi	r22, 0x52	; 82
    34ba:	76 e0       	ldi	r23, 0x06	; 6
    34bc:	ce 01       	movw	r24, r28
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    34c4:	85 e5       	ldi	r24, 0x55	; 85
    34c6:	80 93 52 06 	sts	0x0652, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    34ca:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    34cc:	1c 86       	std	Y+12, r1	; 0x0c
    34ce:	1d 86       	std	Y+13, r1	; 0x0d
    34d0:	1e 86       	std	Y+14, r1	; 0x0e
    34d2:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    34d4:	18 8a       	std	Y+16, r1	; 0x10
    34d6:	19 8a       	std	Y+17, r1	; 0x11
    34d8:	1a 8a       	std	Y+18, r1	; 0x12
    34da:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    34dc:	1c 8a       	std	Y+20, r1	; 0x14
    34de:	1d 8a       	std	Y+21, r1	; 0x15
    34e0:	1e 8a       	std	Y+22, r1	; 0x16
    34e2:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    34e4:	18 8e       	std	Y+24, r1	; 0x18
    34e6:	19 8e       	std	Y+25, r1	; 0x19
    34e8:	1a 8e       	std	Y+26, r1	; 0x1a
    34ea:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    34ec:	1c 8e       	std	Y+28, r1	; 0x1c
    34ee:	1d 8e       	std	Y+29, r1	; 0x1d
    34f0:	1e 8e       	std	Y+30, r1	; 0x1e
    34f2:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    34f4:	18 a2       	std	Y+32, r1	; 0x20
    34f6:	19 a2       	std	Y+33, r1	; 0x21
    34f8:	1a a2       	std	Y+34, r1	; 0x22
    34fa:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    3500:	92 e0       	ldi	r25, 0x02	; 2
    3502:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    3504:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    3506:	ce 01       	movw	r24, r28
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	0e 94 14 22 	call	0x4428	; 0x4428 <nrk_activate_task>
	
}
    350e:	a3 96       	adiw	r28, 0x23	; 35
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	08 95       	ret

00003522 <nrk_start>:




void nrk_start (void)
{
    3522:	04 e7       	ldi	r16, 0x74	; 116
    3524:	18 e0       	ldi	r17, 0x08	; 8
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3526:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3528:	f8 01       	movw	r30, r16
    352a:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    352c:	ff ef       	ldi	r31, 0xFF	; 255
    352e:	df 12       	cpse	r13, r31
    3530:	22 c0       	rjmp	.+68     	; 0x3576 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3532:	cf 5f       	subi	r28, 0xFF	; 255
    3534:	05 5d       	subi	r16, 0xD5	; 213
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	c4 30       	cpi	r28, 0x04	; 4
    353a:	b1 f7       	brne	.-20     	; 0x3528 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    353c:	0e 94 03 21 	call	0x4206	; 0x4206 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3540:	2b e2       	ldi	r18, 0x2B	; 43
    3542:	82 02       	muls	r24, r18
    3544:	c0 01       	movw	r24, r0
    3546:	11 24       	eor	r1, r1
    3548:	fc 01       	movw	r30, r24
    354a:	e4 59       	subi	r30, 0x94	; 148
    354c:	f7 4f       	sbci	r31, 0xF7	; 247
    354e:	82 85       	ldd	r24, Z+10	; 0x0a
    3550:	80 93 33 09 	sts	0x0933, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3554:	f0 93 32 09 	sts	0x0932, r31
    3558:	e0 93 31 09 	sts	0x0931, r30
    355c:	f0 93 23 09 	sts	0x0923, r31
    3560:	e0 93 22 09 	sts	0x0922, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    3564:	80 93 24 09 	sts	0x0924, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3568:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <nrk_target_start>
    nrk_stack_pointer_init(); 
    356c:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    3570:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <nrk_start_high_ready_task>
    3574:	16 c0       	rjmp	.+44     	; 0x35a2 <nrk_start+0x80>
    3576:	84 e7       	ldi	r24, 0x74	; 116
    3578:	e8 2e       	mov	r14, r24
    357a:	88 e0       	ldi	r24, 0x08	; 8
    357c:	f8 2e       	mov	r15, r24
    357e:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    3580:	cd 17       	cp	r28, r29
    3582:	41 f0       	breq	.+16     	; 0x3594 <nrk_start+0x72>
    3584:	f7 01       	movw	r30, r14
    3586:	80 81       	ld	r24, Z
    3588:	d8 12       	cpse	r13, r24
    358a:	04 c0       	rjmp	.+8      	; 0x3594 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    358c:	6d 2d       	mov	r22, r13
    358e:	85 e0       	ldi	r24, 0x05	; 5
    3590:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3594:	df 5f       	subi	r29, 0xFF	; 255
    3596:	fb e2       	ldi	r31, 0x2B	; 43
    3598:	ef 0e       	add	r14, r31
    359a:	f1 1c       	adc	r15, r1
    359c:	d4 30       	cpi	r29, 0x04	; 4
    359e:	81 f7       	brne	.-32     	; 0x3580 <nrk_start+0x5e>
    35a0:	c8 cf       	rjmp	.-112    	; 0x3532 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    35a2:	ff cf       	rjmp	.-2      	; 0x35a2 <nrk_start+0x80>

000035a4 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	ec 01       	movw	r28, r24
    35b6:	8b 01       	movw	r16, r22
    35b8:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	82 30       	cpi	r24, 0x02	; 2
    35be:	21 f0       	breq	.+8      	; 0x35c8 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    35c0:	80 91 20 09 	lds	r24, 0x0920
    35c4:	88 83       	st	Y, r24
    35c6:	01 c0       	rjmp	.+2      	; 0x35ca <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    35c8:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    35ca:	80 91 20 09 	lds	r24, 0x0920
    35ce:	84 30       	cpi	r24, 0x04	; 4
    35d0:	20 f0       	brcs	.+8      	; 0x35da <nrk_TCB_init+0x36>
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	87 e0       	ldi	r24, 0x07	; 7
    35d6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	82 30       	cpi	r24, 0x02	; 2
    35de:	29 f0       	breq	.+10     	; 0x35ea <nrk_TCB_init+0x46>
    35e0:	80 91 20 09 	lds	r24, 0x0920
    35e4:	8f 5f       	subi	r24, 0xFF	; 255
    35e6:	80 93 20 09 	sts	0x0920, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    35ea:	80 91 20 09 	lds	r24, 0x0920
    35ee:	81 11       	cpse	r24, r1
    35f0:	03 c0       	rjmp	.+6      	; 0x35f8 <nrk_TCB_init+0x54>
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	80 93 20 09 	sts	0x0920, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    35f8:	38 81       	ld	r19, Y
    35fa:	2b e2       	ldi	r18, 0x2B	; 43
    35fc:	32 03       	mulsu	r19, r18
    35fe:	f0 01       	movw	r30, r0
    3600:	11 24       	eor	r1, r1
    3602:	e4 59       	subi	r30, 0x94	; 148
    3604:	f7 4f       	sbci	r31, 0xF7	; 247
    3606:	11 83       	std	Z+1, r17	; 0x01
    3608:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    360a:	88 85       	ldd	r24, Y+8	; 0x08
    360c:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    360e:	38 81       	ld	r19, Y
    3610:	32 03       	mulsu	r19, r18
    3612:	f0 01       	movw	r30, r0
    3614:	11 24       	eor	r1, r1
    3616:	e4 59       	subi	r30, 0x94	; 148
    3618:	f7 4f       	sbci	r31, 0xF7	; 247
    361a:	83 e0       	ldi	r24, 0x03	; 3
    361c:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    361e:	38 81       	ld	r19, Y
    3620:	32 03       	mulsu	r19, r18
    3622:	f0 01       	movw	r30, r0
    3624:	11 24       	eor	r1, r1
    3626:	e4 59       	subi	r30, 0x94	; 148
    3628:	f7 4f       	sbci	r31, 0xF7	; 247
    362a:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    362c:	08 81       	ld	r16, Y
    362e:	02 03       	mulsu	r16, r18
    3630:	80 01       	movw	r16, r0
    3632:	11 24       	eor	r1, r1
    3634:	04 59       	subi	r16, 0x94	; 148
    3636:	17 4f       	sbci	r17, 0xF7	; 247
    3638:	f8 01       	movw	r30, r16
    363a:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    363c:	ce 01       	movw	r24, r28
    363e:	0b 96       	adiw	r24, 0x0b	; 11
    3640:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_nrk_time_to_ticks_long>
    3644:	f8 01       	movw	r30, r16
    3646:	61 a3       	std	Z+33, r22	; 0x21
    3648:	72 a3       	std	Z+34, r23	; 0x22
    364a:	83 a3       	std	Z+35, r24	; 0x23
    364c:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    364e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3650:	9c 85       	ldd	r25, Y+12	; 0x0c
    3652:	ad 85       	ldd	r26, Y+13	; 0x0d
    3654:	be 85       	ldd	r27, Y+14	; 0x0e
    3656:	88 33       	cpi	r24, 0x38	; 56
    3658:	99 48       	sbci	r25, 0x89	; 137
    365a:	a1 44       	sbci	r26, 0x41	; 65
    365c:	b1 05       	cpc	r27, r1
    365e:	20 f0       	brcs	.+8      	; 0x3668 <nrk_TCB_init+0xc4>
    3660:	68 81       	ld	r22, Y
    3662:	86 e1       	ldi	r24, 0x16	; 22
    3664:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    3668:	c8 80       	ld	r12, Y
    366a:	dd 24       	eor	r13, r13
    366c:	c7 fc       	sbrc	r12, 7
    366e:	d0 94       	com	r13
    3670:	ce 01       	movw	r24, r28
    3672:	4b 96       	adiw	r24, 0x1b	; 27
    3674:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_nrk_time_to_ticks_long>
    3678:	1b e2       	ldi	r17, 0x2B	; 43
    367a:	1c 9d       	mul	r17, r12
    367c:	f0 01       	movw	r30, r0
    367e:	1d 9d       	mul	r17, r13
    3680:	f0 0d       	add	r31, r0
    3682:	11 24       	eor	r1, r1
    3684:	e4 59       	subi	r30, 0x94	; 148
    3686:	f7 4f       	sbci	r31, 0xF7	; 247
    3688:	65 8b       	std	Z+21, r22	; 0x15
    368a:	76 8b       	std	Z+22, r23	; 0x16
    368c:	87 8b       	std	Z+23, r24	; 0x17
    368e:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    3690:	28 81       	ld	r18, Y
    3692:	21 03       	mulsu	r18, r17
    3694:	c0 01       	movw	r24, r0
    3696:	11 24       	eor	r1, r1
    3698:	9c 01       	movw	r18, r24
    369a:	24 59       	subi	r18, 0x94	; 148
    369c:	37 4f       	sbci	r19, 0xF7	; 247
    369e:	69 01       	movw	r12, r18
    36a0:	f9 01       	movw	r30, r18
    36a2:	45 89       	ldd	r20, Z+21	; 0x15
    36a4:	56 89       	ldd	r21, Z+22	; 0x16
    36a6:	67 89       	ldd	r22, Z+23	; 0x17
    36a8:	70 8d       	ldd	r23, Z+24	; 0x18
    36aa:	81 a1       	ldd	r24, Z+33	; 0x21
    36ac:	92 a1       	ldd	r25, Z+34	; 0x22
    36ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    36b0:	b4 a1       	ldd	r27, Z+36	; 0x24
    36b2:	84 0f       	add	r24, r20
    36b4:	95 1f       	adc	r25, r21
    36b6:	a6 1f       	adc	r26, r22
    36b8:	b7 1f       	adc	r27, r23
    36ba:	81 8f       	std	Z+25, r24	; 0x19
    36bc:	92 8f       	std	Z+26, r25	; 0x1a
    36be:	a3 8f       	std	Z+27, r26	; 0x1b
    36c0:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    36c2:	ce 01       	movw	r24, r28
    36c4:	43 96       	adiw	r24, 0x13	; 19
    36c6:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_nrk_time_to_ticks_long>
    36ca:	f6 01       	movw	r30, r12
    36cc:	65 a3       	std	Z+37, r22	; 0x25
    36ce:	76 a3       	std	Z+38, r23	; 0x26
    36d0:	87 a3       	std	Z+39, r24	; 0x27
    36d2:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    36d4:	28 81       	ld	r18, Y
    36d6:	21 03       	mulsu	r18, r17
    36d8:	f0 01       	movw	r30, r0
    36da:	11 24       	eor	r1, r1
    36dc:	e4 59       	subi	r30, 0x94	; 148
    36de:	f7 4f       	sbci	r31, 0xF7	; 247
    36e0:	85 a1       	ldd	r24, Z+37	; 0x25
    36e2:	96 a1       	ldd	r25, Z+38	; 0x26
    36e4:	a7 a1       	ldd	r26, Z+39	; 0x27
    36e6:	b0 a5       	ldd	r27, Z+40	; 0x28
    36e8:	85 8f       	std	Z+29, r24	; 0x1d
    36ea:	96 8f       	std	Z+30, r25	; 0x1e
    36ec:	a7 8f       	std	Z+31, r26	; 0x1f
    36ee:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	92 a7       	std	Z+42, r25	; 0x2a
    36f6:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    36f8:	f3 82       	std	Z+3, r15	; 0x03
    36fa:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    36fc:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	ff 90       	pop	r15
    3708:	ef 90       	pop	r14
    370a:	df 90       	pop	r13
    370c:	cf 90       	pop	r12
    370e:	08 95       	ret

00003710 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    3710:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <_nrk_scheduler>

00003714 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    3714:	85 e6       	ldi	r24, 0x65	; 101
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	08 95       	ret

0000371a <_nrk_errno_set>:
    371a:	e0 91 31 09 	lds	r30, 0x0931
    371e:	f0 91 32 09 	lds	r31, 0x0932
    3722:	84 87       	std	Z+12, r24	; 0x0c
    3724:	08 95       	ret

00003726 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    3726:	e0 91 31 09 	lds	r30, 0x0931
    372a:	f0 91 32 09 	lds	r31, 0x0932
}
    372e:	84 85       	ldd	r24, Z+12	; 0x0c
    3730:	08 95       	ret

00003732 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    3732:	fc 01       	movw	r30, r24
    if (error_num == 0)
    3734:	80 91 dd 05 	lds	r24, 0x05DD
    3738:	88 23       	and	r24, r24
    373a:	31 f0       	breq	.+12     	; 0x3748 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    373c:	db 01       	movw	r26, r22
    373e:	8c 93       	st	X, r24
    *task_id = error_task;
    3740:	80 91 d9 04 	lds	r24, 0x04D9
    3744:	80 83       	st	Z, r24
    return 1;
    3746:	81 e0       	ldi	r24, 0x01	; 1
}
    3748:	08 95       	ret

0000374a <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    374a:	80 91 dd 05 	lds	r24, 0x05DD
    374e:	88 23       	and	r24, r24
    3750:	09 f4       	brne	.+2      	; 0x3754 <nrk_error_print+0xa>
    3752:	84 c0       	rjmp	.+264    	; 0x385c <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    3754:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    3758:	8d e8       	ldi	r24, 0x8D	; 141
    375a:	95 e0       	ldi	r25, 0x05	; 5
    375c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
        printf ("%d", error_task);
    3760:	80 91 d9 04 	lds	r24, 0x04D9
    3764:	1f 92       	push	r1
    3766:	8f 93       	push	r24
    3768:	83 ef       	ldi	r24, 0xF3	; 243
    376a:	92 e0       	ldi	r25, 0x02	; 2
    376c:	9f 93       	push	r25
    376e:	8f 93       	push	r24
    3770:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
        nrk_kprintf (PSTR ("): "));
    3774:	89 e8       	ldi	r24, 0x89	; 137
    3776:	95 e0       	ldi	r25, 0x05	; 5
    3778:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	80 91 dd 05 	lds	r24, 0x05DD
    3788:	88 31       	cpi	r24, 0x18	; 24
    378a:	10 f0       	brcs	.+4      	; 0x3790 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    378c:	10 92 dd 05 	sts	0x05DD, r1
        switch (error_num)
    3790:	e0 91 dd 05 	lds	r30, 0x05DD
    3794:	8e 2f       	mov	r24, r30
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	fc 01       	movw	r30, r24
    379a:	31 97       	sbiw	r30, 0x01	; 1
    379c:	e6 31       	cpi	r30, 0x16	; 22
    379e:	f1 05       	cpc	r31, r1
    37a0:	08 f0       	brcs	.+2      	; 0x37a4 <nrk_error_print+0x5a>
    37a2:	46 c0       	rjmp	.+140    	; 0x3830 <nrk_error_print+0xe6>
    37a4:	e6 54       	subi	r30, 0x46	; 70
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    37ac:	8d e4       	ldi	r24, 0x4D	; 77
    37ae:	95 e0       	ldi	r25, 0x05	; 5
    37b0:	41 c0       	rjmp	.+130    	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    37b2:	86 e2       	ldi	r24, 0x26	; 38
    37b4:	95 e0       	ldi	r25, 0x05	; 5
    37b6:	3e c0       	rjmp	.+124    	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    37b8:	82 e1       	ldi	r24, 0x12	; 18
    37ba:	95 e0       	ldi	r25, 0x05	; 5
    37bc:	3b c0       	rjmp	.+118    	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    37be:	8c ef       	ldi	r24, 0xFC	; 252
    37c0:	94 e0       	ldi	r25, 0x04	; 4
    37c2:	38 c0       	rjmp	.+112    	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    37c4:	81 ee       	ldi	r24, 0xE1	; 225
    37c6:	94 e0       	ldi	r25, 0x04	; 4
    37c8:	35 c0       	rjmp	.+106    	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    37ca:	8b ec       	ldi	r24, 0xCB	; 203
    37cc:	94 e0       	ldi	r25, 0x04	; 4
    37ce:	32 c0       	rjmp	.+100    	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    37d0:	83 eb       	ldi	r24, 0xB3	; 179
    37d2:	94 e0       	ldi	r25, 0x04	; 4
    37d4:	2f c0       	rjmp	.+94     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    37d6:	80 ea       	ldi	r24, 0xA0	; 160
    37d8:	94 e0       	ldi	r25, 0x04	; 4
    37da:	2c c0       	rjmp	.+88     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    37dc:	8d e8       	ldi	r24, 0x8D	; 141
    37de:	94 e0       	ldi	r25, 0x04	; 4
    37e0:	29 c0       	rjmp	.+82     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    37e2:	8f e6       	ldi	r24, 0x6F	; 111
    37e4:	94 e0       	ldi	r25, 0x04	; 4
    37e6:	26 c0       	rjmp	.+76     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    37e8:	8a e4       	ldi	r24, 0x4A	; 74
    37ea:	94 e0       	ldi	r25, 0x04	; 4
    37ec:	23 c0       	rjmp	.+70     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    37ee:	8e e3       	ldi	r24, 0x3E	; 62
    37f0:	94 e0       	ldi	r25, 0x04	; 4
    37f2:	20 c0       	rjmp	.+64     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    37f4:	83 e2       	ldi	r24, 0x23	; 35
    37f6:	94 e0       	ldi	r25, 0x04	; 4
    37f8:	1d c0       	rjmp	.+58     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    37fa:	84 e1       	ldi	r24, 0x14	; 20
    37fc:	94 e0       	ldi	r25, 0x04	; 4
    37fe:	1a c0       	rjmp	.+52     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	94 e0       	ldi	r25, 0x04	; 4
    3804:	17 c0       	rjmp	.+46     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    3806:	8f ee       	ldi	r24, 0xEF	; 239
    3808:	93 e0       	ldi	r25, 0x03	; 3
    380a:	14 c0       	rjmp	.+40     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    380c:	8b ed       	ldi	r24, 0xDB	; 219
    380e:	93 e0       	ldi	r25, 0x03	; 3
    3810:	11 c0       	rjmp	.+34     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    3812:	8b eb       	ldi	r24, 0xBB	; 187
    3814:	93 e0       	ldi	r25, 0x03	; 3
    3816:	0e c0       	rjmp	.+28     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    3818:	83 ea       	ldi	r24, 0xA3	; 163
    381a:	93 e0       	ldi	r25, 0x03	; 3
    381c:	0b c0       	rjmp	.+22     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    381e:	88 e8       	ldi	r24, 0x88	; 136
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	08 c0       	rjmp	.+16     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    3824:	87 e7       	ldi	r24, 0x77	; 119
    3826:	93 e0       	ldi	r25, 0x03	; 3
    3828:	05 c0       	rjmp	.+10     	; 0x3834 <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    382a:	88 e6       	ldi	r24, 0x68	; 104
    382c:	93 e0       	ldi	r25, 0x03	; 3
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    3830:	81 e6       	ldi	r24, 0x61	; 97
    3832:	93 e0       	ldi	r25, 0x03	; 3
    3834:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>
        }
        putchar ('\r');
    3838:	60 91 63 09 	lds	r22, 0x0963
    383c:	70 91 64 09 	lds	r23, 0x0964
    3840:	8d e0       	ldi	r24, 0x0D	; 13
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
        putchar ('\n');
    3848:	60 91 63 09 	lds	r22, 0x0963
    384c:	70 91 64 09 	lds	r23, 0x0964
    3850:	8a e0       	ldi	r24, 0x0A	; 10
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    3858:	10 92 dd 05 	sts	0x05DD, r1
    return t;
}
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	08 95       	ret

00003860 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    3860:	80 93 dd 05 	sts	0x05DD, r24
    error_task = nrk_cur_task_TCB->task_ID;
    3864:	e0 91 31 09 	lds	r30, 0x0931
    3868:	f0 91 32 09 	lds	r31, 0x0932
    386c:	80 85       	ldd	r24, Z+8	; 0x08
    386e:	80 93 d9 04 	sts	0x04D9, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3872:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <nrk_error_print>

00003876 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    3876:	80 93 dd 05 	sts	0x05DD, r24
    error_task = task;
    387a:	60 93 d9 04 	sts	0x04D9, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    387e:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <nrk_error_print>

00003882 <pause>:
    }

}

void pause()
{
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	1f 92       	push	r1
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    388c:	19 82       	std	Y+1, r1	; 0x01
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	84 36       	cpi	r24, 0x64	; 100
    3892:	40 f4       	brcc	.+16     	; 0x38a4 <pause+0x22>
        nrk_spin_wait_us (2000);
    3894:	80 ed       	ldi	r24, 0xD0	; 208
    3896:	97 e0       	ldi	r25, 0x07	; 7
    3898:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	89 83       	std	Y+1, r24	; 0x01
    38a2:	f5 cf       	rjmp	.-22     	; 0x388e <pause+0xc>
        nrk_spin_wait_us (2000);
}
    38a4:	0f 90       	pop	r0
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	08 95       	ret

000038ac <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	0e 94 8c 18 	call	0x3118	; 0x3118 <nrk_led_set>
    pause();
    38b4:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
    pause();
    38b8:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
    pause();
    38bc:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
    nrk_led_clr(GREEN_LED);
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
    pause();
    38c8:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <pause>

000038cc <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	0e 94 8c 18 	call	0x3118	; 0x3118 <nrk_led_set>
    pause();
    38d4:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
    nrk_led_clr(GREEN_LED);
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
    pause();
    38e0:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <pause>

000038e4 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    38e4:	ff 92       	push	r15
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <blink_morse_code_error+0xc>
    38f0:	1f 92       	push	r1
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    38f6:	1f 92       	push	r1
    38f8:	8f 93       	push	r24
    38fa:	83 ef       	ldi	r24, 0xF3	; 243
    38fc:	92 e0       	ldi	r25, 0x02	; 2
    38fe:	9f 93       	push	r25
    3900:	8f 93       	push	r24
    3902:	8e 01       	movw	r16, r28
    3904:	0f 5f       	subi	r16, 0xFF	; 255
    3906:	1f 4f       	sbci	r17, 0xFF	; 255
    3908:	1f 93       	push	r17
    390a:	0f 93       	push	r16
    390c:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>

    for(i=0; i<strlen(str); i++ )
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	f1 2c       	mov	r15, r1
    391e:	f8 01       	movw	r30, r16
    3920:	01 90       	ld	r0, Z+
    3922:	00 20       	and	r0, r0
    3924:	e9 f7       	brne	.-6      	; 0x3920 <blink_morse_code_error+0x3c>
    3926:	31 97       	sbiw	r30, 0x01	; 1
    3928:	e0 1b       	sub	r30, r16
    392a:	f1 0b       	sbc	r31, r17
    392c:	8f 2d       	mov	r24, r15
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	8e 17       	cp	r24, r30
    3932:	9f 07       	cpc	r25, r31
    3934:	08 f0       	brcs	.+2      	; 0x3938 <blink_morse_code_error+0x54>
    3936:	5d c0       	rjmp	.+186    	; 0x39f2 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3938:	f8 01       	movw	r30, r16
    393a:	e8 0f       	add	r30, r24
    393c:	f9 1f       	adc	r31, r25
    393e:	e0 81       	ld	r30, Z
    3940:	8e 2f       	mov	r24, r30
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	fc 01       	movw	r30, r24
    3946:	f0 97       	sbiw	r30, 0x30	; 48
    3948:	ea 30       	cpi	r30, 0x0A	; 10
    394a:	f1 05       	cpc	r31, r1
    394c:	08 f0       	brcs	.+2      	; 0x3950 <blink_morse_code_error+0x6c>
    394e:	49 c0       	rjmp	.+146    	; 0x39e2 <blink_morse_code_error+0xfe>
    3950:	e0 53       	subi	r30, 0x30	; 48
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__tablejump2__>
        {
        case '0':
            blink_dash();
    3958:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    395e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dash();
    3962:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    3966:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    396a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    396e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            break;
    3972:	37 c0       	rjmp	.+110    	; 0x39e2 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    3974:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dot();
    3978:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    397c:	f4 cf       	rjmp	.-24     	; 0x3966 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    397e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dot();
    3982:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dot();
    3986:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    398a:	ef cf       	rjmp	.-34     	; 0x396a <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    398c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dot();
    3990:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dot();
    3994:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            blink_dot();
    3998:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    399c:	e8 cf       	rjmp	.-48     	; 0x396e <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    399e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    39a4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dot();
    39a8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    39ac:	04 c0       	rjmp	.+8      	; 0x39b6 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    39ae:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    39b2:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dot();
    39b6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    39ba:	06 c0       	rjmp	.+12     	; 0x39c8 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    39bc:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    39c0:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    39c4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dot();
    39c8:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
    39cc:	08 c0       	rjmp	.+16     	; 0x39de <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    39ce:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    39d2:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    39d6:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dash();
    39da:	0e 94 56 1c 	call	0x38ac	; 0x38ac <blink_dash>
            blink_dot();
    39de:	0e 94 66 1c 	call	0x38cc	; 0x38cc <blink_dot>
            break;
        }
        pause();
    39e2:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
        pause();
    39e6:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
        pause();
    39ea:	0e 94 41 1c 	call	0x3882	; 0x3882 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    39ee:	f3 94       	inc	r15
    39f0:	96 cf       	rjmp	.-212    	; 0x391e <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	08 95       	ret

00003a04 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3a04:	6f 92       	push	r6
    3a06:	7f 92       	push	r7
    3a08:	8f 92       	push	r8
    3a0a:	9f 92       	push	r9
    3a0c:	af 92       	push	r10
    3a0e:	bf 92       	push	r11
    3a10:	cf 92       	push	r12
    3a12:	df 92       	push	r13
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3a20:	89 e9       	ldi	r24, 0x99	; 153
    3a22:	95 e0       	ldi	r25, 0x05	; 5
    3a24:	0e 94 14 15 	call	0x2a28	; 0x2a28 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3a28:	e0 91 31 09 	lds	r30, 0x0931
    3a2c:	f0 91 32 09 	lds	r31, 0x0932
    3a30:	80 85       	ldd	r24, Z+8	; 0x08
    3a32:	28 2f       	mov	r18, r24
    3a34:	33 27       	eor	r19, r19
    3a36:	27 fd       	sbrc	r18, 7
    3a38:	30 95       	com	r19
    3a3a:	3f 93       	push	r19
    3a3c:	8f 93       	push	r24
    3a3e:	8d e9       	ldi	r24, 0x9D	; 157
    3a40:	93 e0       	ldi	r25, 0x03	; 3
    3a42:	9f 93       	push	r25
    3a44:	8f 93       	push	r24
    3a46:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3a4a:	e0 91 31 09 	lds	r30, 0x0931
    3a4e:	f0 91 32 09 	lds	r31, 0x0932
    3a52:	c2 81       	ldd	r28, Z+2	; 0x02
    3a54:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	81 ed       	ldi	r24, 0xD1	; 209
    3a5c:	93 e0       	ldi	r25, 0x03	; 3
    3a5e:	9f 93       	push	r25
    3a60:	8f 93       	push	r24
    3a62:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    printf( "canary = %x ",*stkc );
    3a66:	88 81       	ld	r24, Y
    3a68:	1f 92       	push	r1
    3a6a:	8f 93       	push	r24
    3a6c:	86 ea       	ldi	r24, 0xA6	; 166
    3a6e:	93 e0       	ldi	r25, 0x03	; 3
    3a70:	9f 93       	push	r25
    3a72:	8f 93       	push	r24
    3a74:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    3a78:	e0 91 31 09 	lds	r30, 0x0931
    3a7c:	f0 91 32 09 	lds	r31, 0x0932
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3a80:	81 81       	ldd	r24, Z+1	; 0x01
    3a82:	8f 93       	push	r24
    3a84:	80 81       	ld	r24, Z
    3a86:	8f 93       	push	r24
    3a88:	83 eb       	ldi	r24, 0xB3	; 179
    3a8a:	93 e0       	ldi	r25, 0x03	; 3
    3a8c:	9f 93       	push	r25
    3a8e:	8f 93       	push	r24
    3a90:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3a94:	80 91 32 09 	lds	r24, 0x0932
    3a98:	8f 93       	push	r24
    3a9a:	80 91 31 09 	lds	r24, 0x0931
    3a9e:	8f 93       	push	r24
    3aa0:	8d eb       	ldi	r24, 0xBD	; 189
    3aa2:	93 e0       	ldi	r25, 0x03	; 3
    3aa4:	9f 93       	push	r25
    3aa6:	8f 93       	push	r24
    3aa8:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    3aac:	cc e6       	ldi	r28, 0x6C	; 108
    3aae:	d8 e0       	ldi	r29, 0x08	; 8
    3ab0:	ed b7       	in	r30, 0x3d	; 61
    3ab2:	fe b7       	in	r31, 0x3e	; 62
    3ab4:	74 96       	adiw	r30, 0x14	; 20
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	fe bf       	out	0x3e, r31	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	ed bf       	out	0x3d, r30	; 61
    3ac0:	00 e0       	ldi	r16, 0x00	; 0
    3ac2:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3ac4:	8d ec       	ldi	r24, 0xCD	; 205
    3ac6:	68 2e       	mov	r6, r24
    3ac8:	83 e0       	ldi	r24, 0x03	; 3
    3aca:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3acc:	96 ea       	ldi	r25, 0xA6	; 166
    3ace:	89 2e       	mov	r8, r25
    3ad0:	93 e0       	ldi	r25, 0x03	; 3
    3ad2:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3ad4:	23 eb       	ldi	r18, 0xB3	; 179
    3ad6:	a2 2e       	mov	r10, r18
    3ad8:	23 e0       	ldi	r18, 0x03	; 3
    3ada:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3adc:	3d eb       	ldi	r19, 0xBD	; 189
    3ade:	c3 2e       	mov	r12, r19
    3ae0:	33 e0       	ldi	r19, 0x03	; 3
    3ae2:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3ae4:	ea 80       	ldd	r14, Y+2	; 0x02
    3ae6:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3ae8:	ff 92       	push	r15
    3aea:	ef 92       	push	r14
    3aec:	1f 93       	push	r17
    3aee:	0f 93       	push	r16
    3af0:	7f 92       	push	r7
    3af2:	6f 92       	push	r6
    3af4:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
        printf( "canary = %x ",*stkc );
    3af8:	f7 01       	movw	r30, r14
    3afa:	80 81       	ld	r24, Z
    3afc:	1f 92       	push	r1
    3afe:	8f 93       	push	r24
    3b00:	9f 92       	push	r9
    3b02:	8f 92       	push	r8
    3b04:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	8f 93       	push	r24
    3b0c:	88 81       	ld	r24, Y
    3b0e:	8f 93       	push	r24
    3b10:	bf 92       	push	r11
    3b12:	af 92       	push	r10
    3b14:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	df 92       	push	r13
    3b1e:	cf 92       	push	r12
    3b20:	0e 94 b6 32 	call	0x656c	; 0x656c <printf>
    3b24:	0f 5f       	subi	r16, 0xFF	; 255
    3b26:	1f 4f       	sbci	r17, 0xFF	; 255
    3b28:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3b2a:	ed b7       	in	r30, 0x3d	; 61
    3b2c:	fe b7       	in	r31, 0x3e	; 62
    3b2e:	72 96       	adiw	r30, 0x12	; 18
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	fe bf       	out	0x3e, r31	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	ed bf       	out	0x3d, r30	; 61
    3b3a:	04 30       	cpi	r16, 0x04	; 4
    3b3c:	11 05       	cpc	r17, r1
    3b3e:	91 f6       	brne	.-92     	; 0x3ae4 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	ff 90       	pop	r15
    3b4a:	ef 90       	pop	r14
    3b4c:	df 90       	pop	r13
    3b4e:	cf 90       	pop	r12
    3b50:	bf 90       	pop	r11
    3b52:	af 90       	pop	r10
    3b54:	9f 90       	pop	r9
    3b56:	8f 90       	pop	r8
    3b58:	7f 90       	pop	r7
    3b5a:	6f 90       	pop	r6
    3b5c:	08 95       	ret

00003b5e <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3b62:	e0 91 31 09 	lds	r30, 0x0931
    3b66:	f0 91 32 09 	lds	r31, 0x0932
    3b6a:	c2 81       	ldd	r28, Z+2	; 0x02
    3b6c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3b6e:	88 81       	ld	r24, Y
    3b70:	85 35       	cpi	r24, 0x55	; 85
    3b72:	39 f0       	breq	.+14     	; 0x3b82 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3b74:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3b7e:	85 e5       	ldi	r24, 0x55	; 85
    3b80:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3b82:	e0 91 31 09 	lds	r30, 0x0931
    3b86:	f0 91 32 09 	lds	r31, 0x0932
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	81 15       	cp	r24, r1
    3b90:	92 44       	sbci	r25, 0x42	; 66
    3b92:	38 f0       	brcs	.+14     	; 0x3ba2 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3b94:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3b98:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3b9e:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <nrk_error_add>




#endif
}
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	08 95       	ret

00003ba8 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    3ba8:	2b e2       	ldi	r18, 0x2B	; 43
    3baa:	82 02       	muls	r24, r18
    3bac:	c0 01       	movw	r24, r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	e4 59       	subi	r30, 0x94	; 148
    3bb4:	f7 4f       	sbci	r31, 0xF7	; 247
    3bb6:	a2 81       	ldd	r26, Z+2	; 0x02
    3bb8:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3bba:	8c 91       	ld	r24, X
    3bbc:	85 35       	cpi	r24, 0x55	; 85
    3bbe:	19 f0       	breq	.+6      	; 0x3bc6 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3bc0:	85 e5       	ldi	r24, 0x55	; 85
    3bc2:	8c 93       	st	X, r24
    3bc4:	08 c0       	rjmp	.+16     	; 0x3bd6 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	81 15       	cp	r24, r1
    3bcc:	92 44       	sbci	r25, 0x42	; 66
    3bce:	28 f0       	brcs	.+10     	; 0x3bda <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3bd0:	82 e1       	ldi	r24, 0x12	; 18
    3bd2:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
        return NRK_ERROR;
    3bd6:	8f ef       	ldi	r24, 0xFF	; 255
    3bd8:	08 95       	ret
    }
#endif
    return NRK_OK;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
}
    3bdc:	08 95       	ret

00003bde <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3bde:	0f 93       	push	r16
    3be0:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3be2:	40 91 e2 04 	lds	r20, 0x04E2
    3be6:	50 91 e3 04 	lds	r21, 0x04E3
    3bea:	60 91 e4 04 	lds	r22, 0x04E4
    3bee:	70 91 e5 04 	lds	r23, 0x04E5
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	8a 01       	movw	r16, r20
    3bf8:	9b 01       	movw	r18, r22
    3bfa:	08 2e       	mov	r0, r24
    3bfc:	04 c0       	rjmp	.+8      	; 0x3c06 <nrk_signal_create+0x28>
    3bfe:	36 95       	lsr	r19
    3c00:	27 95       	ror	r18
    3c02:	17 95       	ror	r17
    3c04:	07 95       	ror	r16
    3c06:	0a 94       	dec	r0
    3c08:	d2 f7       	brpl	.-12     	; 0x3bfe <nrk_signal_create+0x20>
    3c0a:	00 fd       	sbrc	r16, 0
    3c0c:	19 c0       	rjmp	.+50     	; 0x3c40 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3c0e:	01 e0       	ldi	r16, 0x01	; 1
    3c10:	10 e0       	ldi	r17, 0x00	; 0
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	08 2e       	mov	r0, r24
    3c18:	04 c0       	rjmp	.+8      	; 0x3c22 <nrk_signal_create+0x44>
    3c1a:	00 0f       	add	r16, r16
    3c1c:	11 1f       	adc	r17, r17
    3c1e:	22 1f       	adc	r18, r18
    3c20:	33 1f       	adc	r19, r19
    3c22:	0a 94       	dec	r0
    3c24:	d2 f7       	brpl	.-12     	; 0x3c1a <nrk_signal_create+0x3c>
    3c26:	40 2b       	or	r20, r16
    3c28:	51 2b       	or	r21, r17
    3c2a:	62 2b       	or	r22, r18
    3c2c:	73 2b       	or	r23, r19
    3c2e:	40 93 e2 04 	sts	0x04E2, r20
    3c32:	50 93 e3 04 	sts	0x04E3, r21
    3c36:	60 93 e4 04 	sts	0x04E4, r22
    3c3a:	70 93 e5 04 	sts	0x04E5, r23
			return i;
    3c3e:	05 c0       	rjmp	.+10     	; 0x3c4a <nrk_signal_create+0x6c>
    3c40:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3c42:	80 32       	cpi	r24, 0x20	; 32
    3c44:	91 05       	cpc	r25, r1
    3c46:	b9 f6       	brne	.-82     	; 0x3bf6 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3c48:	8f ef       	ldi	r24, 0xFF	; 255


}
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	08 95       	ret

00003c50 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3c50:	e0 91 31 09 	lds	r30, 0x0931
    3c54:	f0 91 32 09 	lds	r31, 0x0932
    3c58:	65 85       	ldd	r22, Z+13	; 0x0d
    3c5a:	76 85       	ldd	r23, Z+14	; 0x0e
    3c5c:	87 85       	ldd	r24, Z+15	; 0x0f
    3c5e:	90 89       	ldd	r25, Z+16	; 0x10
}
    3c60:	08 95       	ret

00003c62 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3c62:	cf 92       	push	r12
    3c64:	df 92       	push	r13
    3c66:	ef 92       	push	r14
    3c68:	ff 92       	push	r15
    3c6a:	0f 93       	push	r16
    3c6c:	1f 93       	push	r17
    3c6e:	cf 93       	push	r28
    3c70:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3c72:	c1 2c       	mov	r12, r1
    3c74:	d1 2c       	mov	r13, r1
    3c76:	76 01       	movw	r14, r12
    3c78:	c3 94       	inc	r12
    3c7a:	08 2e       	mov	r0, r24
    3c7c:	04 c0       	rjmp	.+8      	; 0x3c86 <nrk_signal_delete+0x24>
    3c7e:	cc 0c       	add	r12, r12
    3c80:	dd 1c       	adc	r13, r13
    3c82:	ee 1c       	adc	r14, r14
    3c84:	ff 1c       	adc	r15, r15
    3c86:	0a 94       	dec	r0
    3c88:	d2 f7       	brpl	.-12     	; 0x3c7e <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3c8a:	40 91 e2 04 	lds	r20, 0x04E2
    3c8e:	50 91 e3 04 	lds	r21, 0x04E3
    3c92:	60 91 e4 04 	lds	r22, 0x04E4
    3c96:	70 91 e5 04 	lds	r23, 0x04E5
    3c9a:	4c 21       	and	r20, r12
    3c9c:	5d 21       	and	r21, r13
    3c9e:	6e 21       	and	r22, r14
    3ca0:	7f 21       	and	r23, r15
    3ca2:	45 2b       	or	r20, r21
    3ca4:	46 2b       	or	r20, r22
    3ca6:	47 2b       	or	r20, r23
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <nrk_signal_delete+0x4a>
    3caa:	60 c0       	rjmp	.+192    	; 0x3d6c <nrk_signal_delete+0x10a>
    3cac:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3cae:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    3cb2:	e5 e7       	ldi	r30, 0x75	; 117
    3cb4:	f8 e0       	ldi	r31, 0x08	; 8
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3cb6:	b7 01       	movw	r22, r14
    3cb8:	a6 01       	movw	r20, r12
    3cba:	40 95       	com	r20
    3cbc:	50 95       	com	r21
    3cbe:	60 95       	com	r22
    3cc0:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3cc2:	13 e0       	ldi	r17, 0x03	; 3
    3cc4:	df 01       	movw	r26, r30
    3cc6:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3cc8:	8c 91       	ld	r24, X
    3cca:	8f 3f       	cpi	r24, 0xFF	; 255
    3ccc:	39 f1       	breq	.+78     	; 0x3d1c <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3cce:	84 81       	ldd	r24, Z+4	; 0x04
    3cd0:	95 81       	ldd	r25, Z+5	; 0x05
    3cd2:	a6 81       	ldd	r26, Z+6	; 0x06
    3cd4:	b7 81       	ldd	r27, Z+7	; 0x07
    3cd6:	8c 15       	cp	r24, r12
    3cd8:	9d 05       	cpc	r25, r13
    3cda:	ae 05       	cpc	r26, r14
    3cdc:	bf 05       	cpc	r27, r15
    3cde:	51 f4       	brne	.+20     	; 0x3cf4 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3ce0:	10 86       	std	Z+8, r1	; 0x08
    3ce2:	11 86       	std	Z+9, r1	; 0x09
    3ce4:	12 86       	std	Z+10, r1	; 0x0a
    3ce6:	13 86       	std	Z+11, r1	; 0x0b
    3ce8:	9f 01       	movw	r18, r30
    3cea:	22 50       	subi	r18, 0x02	; 2
    3cec:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3cee:	e9 01       	movw	r28, r18
    3cf0:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3cf2:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3cf4:	84 23       	and	r24, r20
    3cf6:	95 23       	and	r25, r21
    3cf8:	a6 23       	and	r26, r22
    3cfa:	b7 23       	and	r27, r23
    3cfc:	84 83       	std	Z+4, r24	; 0x04
    3cfe:	95 83       	std	Z+5, r25	; 0x05
    3d00:	a6 83       	std	Z+6, r26	; 0x06
    3d02:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3d04:	80 85       	ldd	r24, Z+8	; 0x08
    3d06:	91 85       	ldd	r25, Z+9	; 0x09
    3d08:	a2 85       	ldd	r26, Z+10	; 0x0a
    3d0a:	b3 85       	ldd	r27, Z+11	; 0x0b
    3d0c:	84 23       	and	r24, r20
    3d0e:	95 23       	and	r25, r21
    3d10:	a6 23       	and	r26, r22
    3d12:	b7 23       	and	r27, r23
    3d14:	80 87       	std	Z+8, r24	; 0x08
    3d16:	91 87       	std	Z+9, r25	; 0x09
    3d18:	a2 87       	std	Z+10, r26	; 0x0a
    3d1a:	b3 87       	std	Z+11, r27	; 0x0b
    3d1c:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3d1e:	d9 e0       	ldi	r29, 0x09	; 9
    3d20:	e1 32       	cpi	r30, 0x21	; 33
    3d22:	fd 07       	cpc	r31, r29
    3d24:	79 f6       	brne	.-98     	; 0x3cc4 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3d26:	8e ef       	ldi	r24, 0xFE	; 254
    3d28:	9f ef       	ldi	r25, 0xFF	; 255
    3d2a:	af ef       	ldi	r26, 0xFF	; 255
    3d2c:	bf ef       	ldi	r27, 0xFF	; 255
    3d2e:	04 c0       	rjmp	.+8      	; 0x3d38 <nrk_signal_delete+0xd6>
    3d30:	88 0f       	add	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	aa 1f       	adc	r26, r26
    3d36:	bb 1f       	adc	r27, r27
    3d38:	0a 95       	dec	r16
    3d3a:	d2 f7       	brpl	.-12     	; 0x3d30 <nrk_signal_delete+0xce>
    3d3c:	40 91 e2 04 	lds	r20, 0x04E2
    3d40:	50 91 e3 04 	lds	r21, 0x04E3
    3d44:	60 91 e4 04 	lds	r22, 0x04E4
    3d48:	70 91 e5 04 	lds	r23, 0x04E5
    3d4c:	84 23       	and	r24, r20
    3d4e:	95 23       	and	r25, r21
    3d50:	a6 23       	and	r26, r22
    3d52:	b7 23       	and	r27, r23
    3d54:	80 93 e2 04 	sts	0x04E2, r24
    3d58:	90 93 e3 04 	sts	0x04E3, r25
    3d5c:	a0 93 e4 04 	sts	0x04E4, r26
    3d60:	b0 93 e5 04 	sts	0x04E5, r27
	nrk_int_enable();
    3d64:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>

	return NRK_OK;
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	01 c0       	rjmp	.+2      	; 0x3d6e <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3d6c:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	ff 90       	pop	r15
    3d78:	ef 90       	pop	r14
    3d7a:	df 90       	pop	r13
    3d7c:	cf 90       	pop	r12
    3d7e:	08 95       	ret

00003d80 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3d84:	41 e0       	ldi	r20, 0x01	; 1
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	70 e0       	ldi	r23, 0x00	; 0
    3d8c:	8a 01       	movw	r16, r20
    3d8e:	9b 01       	movw	r18, r22
    3d90:	04 c0       	rjmp	.+8      	; 0x3d9a <nrk_signal_unregister+0x1a>
    3d92:	00 0f       	add	r16, r16
    3d94:	11 1f       	adc	r17, r17
    3d96:	22 1f       	adc	r18, r18
    3d98:	33 1f       	adc	r19, r19
    3d9a:	8a 95       	dec	r24
    3d9c:	d2 f7       	brpl	.-12     	; 0x3d92 <nrk_signal_unregister+0x12>
    3d9e:	d9 01       	movw	r26, r18
    3da0:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3da2:	e0 91 31 09 	lds	r30, 0x0931
    3da6:	f0 91 32 09 	lds	r31, 0x0932
    3daa:	45 85       	ldd	r20, Z+13	; 0x0d
    3dac:	56 85       	ldd	r21, Z+14	; 0x0e
    3dae:	67 85       	ldd	r22, Z+15	; 0x0f
    3db0:	70 89       	ldd	r23, Z+16	; 0x10
    3db2:	04 23       	and	r16, r20
    3db4:	15 23       	and	r17, r21
    3db6:	26 23       	and	r18, r22
    3db8:	37 23       	and	r19, r23
    3dba:	01 2b       	or	r16, r17
    3dbc:	02 2b       	or	r16, r18
    3dbe:	03 2b       	or	r16, r19
    3dc0:	d1 f0       	breq	.+52     	; 0x3df6 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3dc2:	80 95       	com	r24
    3dc4:	90 95       	com	r25
    3dc6:	a0 95       	com	r26
    3dc8:	b0 95       	com	r27
    3dca:	48 23       	and	r20, r24
    3dcc:	59 23       	and	r21, r25
    3dce:	6a 23       	and	r22, r26
    3dd0:	7b 23       	and	r23, r27
    3dd2:	45 87       	std	Z+13, r20	; 0x0d
    3dd4:	56 87       	std	Z+14, r21	; 0x0e
    3dd6:	67 87       	std	Z+15, r22	; 0x0f
    3dd8:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3dda:	41 89       	ldd	r20, Z+17	; 0x11
    3ddc:	52 89       	ldd	r21, Z+18	; 0x12
    3dde:	63 89       	ldd	r22, Z+19	; 0x13
    3de0:	74 89       	ldd	r23, Z+20	; 0x14
    3de2:	84 23       	and	r24, r20
    3de4:	95 23       	and	r25, r21
    3de6:	a6 23       	and	r26, r22
    3de8:	b7 23       	and	r27, r23
    3dea:	81 8b       	std	Z+17, r24	; 0x11
    3dec:	92 8b       	std	Z+18, r25	; 0x12
    3dee:	a3 8b       	std	Z+19, r26	; 0x13
    3df0:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	01 c0       	rjmp	.+2      	; 0x3df8 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3df6:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	08 95       	ret

00003dfe <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3dfe:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3e00:	40 91 e2 04 	lds	r20, 0x04E2
    3e04:	50 91 e3 04 	lds	r21, 0x04E3
    3e08:	60 91 e4 04 	lds	r22, 0x04E4
    3e0c:	70 91 e5 04 	lds	r23, 0x04E5
    3e10:	08 2e       	mov	r0, r24
    3e12:	04 c0       	rjmp	.+8      	; 0x3e1c <nrk_signal_register+0x1e>
    3e14:	76 95       	lsr	r23
    3e16:	67 95       	ror	r22
    3e18:	57 95       	ror	r21
    3e1a:	47 95       	ror	r20
    3e1c:	0a 94       	dec	r0
    3e1e:	d2 f7       	brpl	.-12     	; 0x3e14 <nrk_signal_register+0x16>
    3e20:	40 ff       	sbrs	r20, 0
    3e22:	1d c0       	rjmp	.+58     	; 0x3e5e <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3e24:	e0 91 31 09 	lds	r30, 0x0931
    3e28:	f0 91 32 09 	lds	r31, 0x0932
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	a0 e0       	ldi	r26, 0x00	; 0
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	04 c0       	rjmp	.+8      	; 0x3e3e <nrk_signal_register+0x40>
    3e36:	88 0f       	add	r24, r24
    3e38:	99 1f       	adc	r25, r25
    3e3a:	aa 1f       	adc	r26, r26
    3e3c:	bb 1f       	adc	r27, r27
    3e3e:	2a 95       	dec	r18
    3e40:	d2 f7       	brpl	.-12     	; 0x3e36 <nrk_signal_register+0x38>
    3e42:	45 85       	ldd	r20, Z+13	; 0x0d
    3e44:	56 85       	ldd	r21, Z+14	; 0x0e
    3e46:	67 85       	ldd	r22, Z+15	; 0x0f
    3e48:	70 89       	ldd	r23, Z+16	; 0x10
    3e4a:	84 2b       	or	r24, r20
    3e4c:	95 2b       	or	r25, r21
    3e4e:	a6 2b       	or	r26, r22
    3e50:	b7 2b       	or	r27, r23
    3e52:	85 87       	std	Z+13, r24	; 0x0d
    3e54:	96 87       	std	Z+14, r25	; 0x0e
    3e56:	a7 87       	std	Z+15, r26	; 0x0f
    3e58:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	08 95       	ret
	}
            
	return NRK_ERROR;
    3e5e:	8f ef       	ldi	r24, 0xFF	; 255
}
    3e60:	08 95       	ret

00003e62 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3e62:	cf 92       	push	r12
    3e64:	df 92       	push	r13
    3e66:	ef 92       	push	r14
    3e68:	ff 92       	push	r15
    3e6a:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3e6c:	c1 2c       	mov	r12, r1
    3e6e:	d1 2c       	mov	r13, r1
    3e70:	76 01       	movw	r14, r12
    3e72:	c3 94       	inc	r12
    3e74:	04 c0       	rjmp	.+8      	; 0x3e7e <nrk_event_signal+0x1c>
    3e76:	cc 0c       	add	r12, r12
    3e78:	dd 1c       	adc	r13, r13
    3e7a:	ee 1c       	adc	r14, r14
    3e7c:	ff 1c       	adc	r15, r15
    3e7e:	8a 95       	dec	r24
    3e80:	d2 f7       	brpl	.-12     	; 0x3e76 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3e82:	80 91 e2 04 	lds	r24, 0x04E2
    3e86:	90 91 e3 04 	lds	r25, 0x04E3
    3e8a:	a0 91 e4 04 	lds	r26, 0x04E4
    3e8e:	b0 91 e5 04 	lds	r27, 0x04E5
    3e92:	8c 21       	and	r24, r12
    3e94:	9d 21       	and	r25, r13
    3e96:	ae 21       	and	r26, r14
    3e98:	bf 21       	and	r27, r15
    3e9a:	89 2b       	or	r24, r25
    3e9c:	8a 2b       	or	r24, r26
    3e9e:	8b 2b       	or	r24, r27
    3ea0:	11 f4       	brne	.+4      	; 0x3ea6 <nrk_event_signal+0x44>
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	44 c0       	rjmp	.+136    	; 0x3f2e <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3ea6:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    3eaa:	e3 e7       	ldi	r30, 0x73	; 115
    3eac:	f8 e0       	ldi	r31, 0x08	; 8
    3eae:	a5 e7       	ldi	r26, 0x75	; 117
    3eb0:	b8 e0       	ldi	r27, 0x08	; 8

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3eb2:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3eb4:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3eb6:	90 81       	ld	r25, Z
    3eb8:	91 30       	cpi	r25, 0x01	; 1
    3eba:	b9 f4       	brne	.+46     	; 0x3eea <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3ebc:	42 85       	ldd	r20, Z+10	; 0x0a
    3ebe:	53 85       	ldd	r21, Z+11	; 0x0b
    3ec0:	64 85       	ldd	r22, Z+12	; 0x0c
    3ec2:	75 85       	ldd	r23, Z+13	; 0x0d
    3ec4:	4c 21       	and	r20, r12
    3ec6:	5d 21       	and	r21, r13
    3ec8:	6e 21       	and	r22, r14
    3eca:	7f 21       	and	r23, r15
    3ecc:	45 2b       	or	r20, r21
    3ece:	46 2b       	or	r20, r22
    3ed0:	47 2b       	or	r20, r23
    3ed2:	59 f0       	breq	.+22     	; 0x3eea <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3ed4:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3ed6:	16 86       	std	Z+14, r1	; 0x0e
    3ed8:	17 86       	std	Z+15, r1	; 0x0f
    3eda:	10 8a       	std	Z+16, r1	; 0x10
    3edc:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3ede:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3ee0:	c2 86       	std	Z+10, r12	; 0x0a
    3ee2:	d3 86       	std	Z+11, r13	; 0x0b
    3ee4:	e4 86       	std	Z+12, r14	; 0x0c
    3ee6:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3ee8:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3eea:	90 81       	ld	r25, Z
    3eec:	92 30       	cpi	r25, 0x02	; 2
    3eee:	a1 f4       	brne	.+40     	; 0x3f18 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3ef0:	42 85       	ldd	r20, Z+10	; 0x0a
    3ef2:	53 85       	ldd	r21, Z+11	; 0x0b
    3ef4:	64 85       	ldd	r22, Z+12	; 0x0c
    3ef6:	75 85       	ldd	r23, Z+13	; 0x0d
    3ef8:	4c 15       	cp	r20, r12
    3efa:	5d 05       	cpc	r21, r13
    3efc:	6e 05       	cpc	r22, r14
    3efe:	7f 05       	cpc	r23, r15
    3f00:	59 f4       	brne	.+22     	; 0x3f18 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3f02:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3f04:	16 86       	std	Z+14, r1	; 0x0e
    3f06:	17 86       	std	Z+15, r1	; 0x0f
    3f08:	10 8a       	std	Z+16, r1	; 0x10
    3f0a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3f0c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3f0e:	12 86       	std	Z+10, r1	; 0x0a
    3f10:	13 86       	std	Z+11, r1	; 0x0b
    3f12:	14 86       	std	Z+12, r1	; 0x0c
    3f14:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3f16:	c1 e0       	ldi	r28, 0x01	; 1
    3f18:	bb 96       	adiw	r30, 0x2b	; 43
    3f1a:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3f1c:	99 e0       	ldi	r25, 0x09	; 9
    3f1e:	ef 31       	cpi	r30, 0x1F	; 31
    3f20:	f9 07       	cpc	r31, r25
    3f22:	49 f6       	brne	.-110    	; 0x3eb6 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3f24:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
	if(event_occured)
    3f28:	c1 11       	cpse	r28, r1
    3f2a:	05 c0       	rjmp	.+10     	; 0x3f36 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3f2c:	82 e0       	ldi	r24, 0x02	; 2
    3f2e:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
	return NRK_ERROR;
    3f32:	8f ef       	ldi	r24, 0xFF	; 255
    3f34:	01 c0       	rjmp	.+2      	; 0x3f38 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3f38:	cf 91       	pop	r28
    3f3a:	ff 90       	pop	r15
    3f3c:	ef 90       	pop	r14
    3f3e:	df 90       	pop	r13
    3f40:	cf 90       	pop	r12
    3f42:	08 95       	ret

00003f44 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3f48:	e0 91 31 09 	lds	r30, 0x0931
    3f4c:	f0 91 32 09 	lds	r31, 0x0932
    3f50:	05 85       	ldd	r16, Z+13	; 0x0d
    3f52:	16 85       	ldd	r17, Z+14	; 0x0e
    3f54:	27 85       	ldd	r18, Z+15	; 0x0f
    3f56:	30 89       	ldd	r19, Z+16	; 0x10
    3f58:	06 23       	and	r16, r22
    3f5a:	17 23       	and	r17, r23
    3f5c:	28 23       	and	r18, r24
    3f5e:	39 23       	and	r19, r25
    3f60:	01 15       	cp	r16, r1
    3f62:	11 05       	cpc	r17, r1
    3f64:	21 05       	cpc	r18, r1
    3f66:	31 05       	cpc	r19, r1
    3f68:	11 f1       	breq	.+68     	; 0x3fae <nrk_event_wait+0x6a>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3f6e:	81 8b       	std	Z+17, r24	; 0x11
    3f70:	92 8b       	std	Z+18, r25	; 0x12
    3f72:	a3 8b       	std	Z+19, r26	; 0x13
    3f74:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3f76:	21 e0       	ldi	r18, 0x01	; 1
    3f78:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3f7a:	00 90 21 09 	lds	r0, 0x0921
    3f7e:	04 c0       	rjmp	.+8      	; 0x3f88 <nrk_event_wait+0x44>
    3f80:	b6 95       	lsr	r27
    3f82:	a7 95       	ror	r26
    3f84:	97 95       	ror	r25
    3f86:	87 95       	ror	r24
    3f88:	0a 94       	dec	r0
    3f8a:	d2 f7       	brpl	.-12     	; 0x3f80 <nrk_event_wait+0x3c>
    3f8c:	80 ff       	sbrs	r24, 0
    3f8e:	03 c0       	rjmp	.+6      	; 0x3f96 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3f90:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <nrk_wait_until_nw>
    3f94:	04 c0       	rjmp	.+8      	; 0x3f9e <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 4d 23 	call	0x469a	; 0x469a <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3f9e:	e0 91 31 09 	lds	r30, 0x0931
    3fa2:	f0 91 32 09 	lds	r31, 0x0932
    3fa6:	01 89       	ldd	r16, Z+17	; 0x11
    3fa8:	12 89       	ldd	r17, Z+18	; 0x12
    3faa:	23 89       	ldd	r18, Z+19	; 0x13
    3fac:	34 89       	ldd	r19, Z+20	; 0x14
}
    3fae:	c9 01       	movw	r24, r18
    3fb0:	b8 01       	movw	r22, r16
    3fb2:	1f 91       	pop	r17
    3fb4:	0f 91       	pop	r16
    3fb6:	08 95       	ret

00003fb8 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    3fb8:	90 91 30 09 	lds	r25, 0x0930
    3fbc:	91 11       	cpse	r25, r1
    3fbe:	1d c0       	rjmp	.+58     	; 0x3ffa <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    3fc0:	90 91 1a 09 	lds	r25, 0x091A
    3fc4:	9f 3f       	cpi	r25, 0xFF	; 255
    3fc6:	31 f0       	breq	.+12     	; 0x3fd4 <nrk_sem_create+0x1c>
    3fc8:	90 91 1d 09 	lds	r25, 0x091D
    3fcc:	9f 3f       	cpi	r25, 0xFF	; 255
    3fce:	21 f0       	breq	.+8      	; 0x3fd8 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    3fd0:	e2 e0       	ldi	r30, 0x02	; 2
    3fd2:	03 c0       	rjmp	.+6      	; 0x3fda <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    3fd4:	e0 e0       	ldi	r30, 0x00	; 0
    3fd6:	01 c0       	rjmp	.+2      	; 0x3fda <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    3fd8:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	9f 01       	movw	r18, r30
    3fde:	22 0f       	add	r18, r18
    3fe0:	33 1f       	adc	r19, r19
    3fe2:	e2 0f       	add	r30, r18
    3fe4:	f3 1f       	adc	r31, r19
    3fe6:	e6 5e       	subi	r30, 0xE6	; 230
    3fe8:	f6 4f       	sbci	r31, 0xF6	; 246
    3fea:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    3fec:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    3fee:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	80 93 30 09 	sts	0x0930, r24
	return	&nrk_sem_list[i];
    3ff6:	cf 01       	movw	r24, r30
    3ff8:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3ffe:	08 95       	ret

00004000 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4000:	29 e0       	ldi	r18, 0x09	; 9
    4002:	8a 31       	cpi	r24, 0x1A	; 26
    4004:	92 07       	cpc	r25, r18
    4006:	29 f0       	breq	.+10     	; 0x4012 <nrk_get_resource_index+0x12>
    4008:	8d 51       	subi	r24, 0x1D	; 29
    400a:	99 40       	sbci	r25, 0x09	; 9
    400c:	21 f4       	brne	.+8      	; 0x4016 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	08 95       	ret
    4012:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    4014:	08 95       	ret
	return NRK_ERROR;
    4016:	8f ef       	ldi	r24, 0xFF	; 255
}
    4018:	08 95       	ret

0000401a <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    401a:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    401e:	8f 3f       	cpi	r24, 0xFF	; 255
    4020:	11 f4       	brne	.+4      	; 0x4026 <nrk_sem_query+0xc>
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	02 c0       	rjmp	.+4      	; 0x402a <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4026:	82 30       	cpi	r24, 0x02	; 2
    4028:	21 f4       	brne	.+8      	; 0x4032 <nrk_sem_query+0x18>
    402a:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
    402e:	8f ef       	ldi	r24, 0xFF	; 255
    4030:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    4032:	99 27       	eor	r25, r25
    4034:	87 fd       	sbrc	r24, 7
    4036:	90 95       	com	r25
    4038:	fc 01       	movw	r30, r24
    403a:	ee 0f       	add	r30, r30
    403c:	ff 1f       	adc	r31, r31
    403e:	8e 0f       	add	r24, r30
    4040:	9f 1f       	adc	r25, r31
    4042:	fc 01       	movw	r30, r24
    4044:	e6 5e       	subi	r30, 0xE6	; 230
    4046:	f6 4f       	sbci	r31, 0xF6	; 246
    4048:	82 81       	ldd	r24, Z+2	; 0x02
}
    404a:	08 95       	ret

0000404c <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    404c:	ef 92       	push	r14
    404e:	ff 92       	push	r15
    4050:	0f 93       	push	r16
    4052:	1f 93       	push	r17
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	1f 92       	push	r1
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    405e:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4062:	8f 3f       	cpi	r24, 0xFF	; 255
    4064:	11 f4       	brne	.+4      	; 0x406a <nrk_sem_pend+0x1e>
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	02 c0       	rjmp	.+4      	; 0x406e <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    406a:	82 30       	cpi	r24, 0x02	; 2
    406c:	21 f4       	brne	.+8      	; 0x4076 <nrk_sem_pend+0x2a>
    406e:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
    4072:	8f ef       	ldi	r24, 0xFF	; 255
    4074:	41 c0       	rjmp	.+130    	; 0x40f8 <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    4076:	89 83       	std	Y+1, r24	; 0x01
    4078:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	e8 2e       	mov	r14, r24
    4080:	ff 24       	eor	r15, r15
    4082:	e7 fc       	sbrc	r14, 7
    4084:	f0 94       	com	r15
    4086:	87 01       	movw	r16, r14
    4088:	00 0f       	add	r16, r16
    408a:	11 1f       	adc	r17, r17
    408c:	f8 01       	movw	r30, r16
    408e:	ee 0d       	add	r30, r14
    4090:	ff 1d       	adc	r31, r15
    4092:	e6 5e       	subi	r30, 0xE6	; 230
    4094:	f6 4f       	sbci	r31, 0xF6	; 246
    4096:	92 81       	ldd	r25, Z+2	; 0x02
    4098:	91 11       	cpse	r25, r1
    409a:	16 c0       	rjmp	.+44     	; 0x40c8 <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    409c:	e0 91 31 09 	lds	r30, 0x0931
    40a0:	f0 91 32 09 	lds	r31, 0x0932
    40a4:	97 81       	ldd	r25, Z+7	; 0x07
    40a6:	92 60       	ori	r25, 0x02	; 2
    40a8:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    40aa:	99 27       	eor	r25, r25
    40ac:	87 fd       	sbrc	r24, 7
    40ae:	90 95       	com	r25
    40b0:	a9 2f       	mov	r26, r25
    40b2:	b9 2f       	mov	r27, r25
    40b4:	81 8b       	std	Z+17, r24	; 0x11
    40b6:	92 8b       	std	Z+18, r25	; 0x12
    40b8:	a3 8b       	std	Z+19, r26	; 0x13
    40ba:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    40bc:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
		nrk_wait_until_ticks(0);
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 4d 23 	call	0x469a	; 0x469a <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    40c8:	0e 0d       	add	r16, r14
    40ca:	1f 1d       	adc	r17, r15
    40cc:	d8 01       	movw	r26, r16
    40ce:	a6 5e       	subi	r26, 0xE6	; 230
    40d0:	b6 4f       	sbci	r27, 0xF6	; 246
    40d2:	12 96       	adiw	r26, 0x02	; 2
    40d4:	8c 91       	ld	r24, X
    40d6:	12 97       	sbiw	r26, 0x02	; 2
    40d8:	81 50       	subi	r24, 0x01	; 1
    40da:	12 96       	adiw	r26, 0x02	; 2
    40dc:	8c 93       	st	X, r24
    40de:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    40e0:	e0 91 31 09 	lds	r30, 0x0931
    40e4:	f0 91 32 09 	lds	r31, 0x0932
    40e8:	11 96       	adiw	r26, 0x01	; 1
    40ea:	8c 91       	ld	r24, X
    40ec:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    40f2:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>

	return NRK_OK;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
}
    40f8:	0f 90       	pop	r0
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	ff 90       	pop	r15
    4104:	ef 90       	pop	r14
    4106:	08 95       	ret

00004108 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    4108:	0f 93       	push	r16
    410a:	1f 93       	push	r17
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	1f 92       	push	r1
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    4116:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    411a:	8f 3f       	cpi	r24, 0xFF	; 255
    411c:	11 f4       	brne	.+4      	; 0x4122 <nrk_sem_post+0x1a>
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4122:	82 30       	cpi	r24, 0x02	; 2
    4124:	21 f4       	brne	.+8      	; 0x412e <nrk_sem_post+0x26>
    4126:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
    412a:	8f ef       	ldi	r24, 0xFF	; 255
    412c:	44 c0       	rjmp	.+136    	; 0x41b6 <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    412e:	48 2f       	mov	r20, r24
    4130:	55 27       	eor	r21, r21
    4132:	47 fd       	sbrc	r20, 7
    4134:	50 95       	com	r21
    4136:	9a 01       	movw	r18, r20
    4138:	22 0f       	add	r18, r18
    413a:	33 1f       	adc	r19, r19
    413c:	24 0f       	add	r18, r20
    413e:	35 1f       	adc	r19, r21
    4140:	89 01       	movw	r16, r18
    4142:	06 5e       	subi	r16, 0xE6	; 230
    4144:	16 4f       	sbci	r17, 0xF6	; 246
    4146:	f8 01       	movw	r30, r16
    4148:	22 81       	ldd	r18, Z+2	; 0x02
    414a:	90 81       	ld	r25, Z
    414c:	29 17       	cp	r18, r25
    414e:	94 f5       	brge	.+100    	; 0x41b4 <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    4150:	89 83       	std	Y+1, r24	; 0x01
    4152:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>

		nrk_sem_list[id].value++;
    4156:	f8 01       	movw	r30, r16
    4158:	92 81       	ldd	r25, Z+2	; 0x02
    415a:	9f 5f       	subi	r25, 0xFF	; 255
    415c:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    415e:	e0 91 31 09 	lds	r30, 0x0931
    4162:	f0 91 32 09 	lds	r31, 0x0932
    4166:	14 82       	std	Z+4, r1	; 0x04
    4168:	e3 e7       	ldi	r30, 0x73	; 115
    416a:	f8 e0       	ldi	r31, 0x08	; 8

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    416c:	89 81       	ldd	r24, Y+1	; 0x01
    416e:	99 27       	eor	r25, r25
    4170:	87 fd       	sbrc	r24, 7
    4172:	90 95       	com	r25
    4174:	a9 2f       	mov	r26, r25
    4176:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4178:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    417a:	30 81       	ld	r19, Z
    417c:	32 30       	cpi	r19, 0x02	; 2
    417e:	99 f4       	brne	.+38     	; 0x41a6 <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    4180:	42 85       	ldd	r20, Z+10	; 0x0a
    4182:	53 85       	ldd	r21, Z+11	; 0x0b
    4184:	64 85       	ldd	r22, Z+12	; 0x0c
    4186:	75 85       	ldd	r23, Z+13	; 0x0d
    4188:	48 17       	cp	r20, r24
    418a:	59 07       	cpc	r21, r25
    418c:	6a 07       	cpc	r22, r26
    418e:	7b 07       	cpc	r23, r27
    4190:	51 f4       	brne	.+20     	; 0x41a6 <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4192:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    4194:	16 86       	std	Z+14, r1	; 0x0e
    4196:	17 86       	std	Z+15, r1	; 0x0f
    4198:	10 8a       	std	Z+16, r1	; 0x10
    419a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    419c:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    419e:	12 86       	std	Z+10, r1	; 0x0a
    41a0:	13 86       	std	Z+11, r1	; 0x0b
    41a2:	14 86       	std	Z+12, r1	; 0x0c
    41a4:	15 86       	std	Z+13, r1	; 0x0d
    41a6:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    41a8:	39 e0       	ldi	r19, 0x09	; 9
    41aa:	ef 31       	cpi	r30, 0x1F	; 31
    41ac:	f3 07       	cpc	r31, r19
    41ae:	29 f7       	brne	.-54     	; 0x417a <nrk_sem_post+0x72>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    41b0:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
	}
		
return NRK_OK;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
}
    41b6:	0f 90       	pop	r0
    41b8:	df 91       	pop	r29
    41ba:	cf 91       	pop	r28
    41bc:	1f 91       	pop	r17
    41be:	0f 91       	pop	r16
    41c0:	08 95       	ret

000041c2 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    41c2:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    41c6:	8f 3f       	cpi	r24, 0xFF	; 255
    41c8:	11 f4       	brne	.+4      	; 0x41ce <nrk_sem_delete+0xc>
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    41ce:	82 30       	cpi	r24, 0x02	; 2
    41d0:	21 f4       	brne	.+8      	; 0x41da <nrk_sem_delete+0x18>
    41d2:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
    41d6:	8f ef       	ldi	r24, 0xFF	; 255
    41d8:	08 95       	ret

	nrk_sem_list[id].count=-1;
    41da:	99 27       	eor	r25, r25
    41dc:	87 fd       	sbrc	r24, 7
    41de:	90 95       	com	r25
    41e0:	fc 01       	movw	r30, r24
    41e2:	ee 0f       	add	r30, r30
    41e4:	ff 1f       	adc	r31, r31
    41e6:	8e 0f       	add	r24, r30
    41e8:	9f 1f       	adc	r25, r31
    41ea:	fc 01       	movw	r30, r24
    41ec:	e6 5e       	subi	r30, 0xE6	; 230
    41ee:	f6 4f       	sbci	r31, 0xF6	; 246
    41f0:	8f ef       	ldi	r24, 0xFF	; 255
    41f2:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    41f4:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    41f6:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    41f8:	80 91 30 09 	lds	r24, 0x0930
    41fc:	81 50       	subi	r24, 0x01	; 1
    41fe:	80 93 30 09 	sts	0x0930, r24
return NRK_OK;
    4202:	81 e0       	ldi	r24, 0x01	; 1
}
    4204:	08 95       	ret

00004206 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    4206:	e0 91 26 09 	lds	r30, 0x0926
    420a:	f0 91 27 09 	lds	r31, 0x0927
}
    420e:	80 81       	ld	r24, Z
    4210:	08 95       	ret

00004212 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    4212:	e0 91 26 09 	lds	r30, 0x0926
    4216:	f0 91 27 09 	lds	r31, 0x0927
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    421a:	30 97       	sbiw	r30, 0x00	; 0
    421c:	21 f0       	breq	.+8      	; 0x4226 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    421e:	03 80       	ldd	r0, Z+3	; 0x03
    4220:	f4 81       	ldd	r31, Z+4	; 0x04
    4222:	e0 2d       	mov	r30, r0
    4224:	fa cf       	rjmp	.-12     	; 0x421a <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    4226:	08 95       	ret

00004228 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    4228:	af 92       	push	r10
    422a:	bf 92       	push	r11
    422c:	cf 92       	push	r12
    422e:	df 92       	push	r13
    4230:	ef 92       	push	r14
    4232:	ff 92       	push	r15
    4234:	0f 93       	push	r16
    4236:	1f 93       	push	r17
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    423c:	e0 91 6a 08 	lds	r30, 0x086A
    4240:	f0 91 6b 08 	lds	r31, 0x086B
    4244:	30 97       	sbiw	r30, 0x00	; 0
    4246:	09 f4       	brne	.+2      	; 0x424a <nrk_add_to_readyQ+0x22>
    4248:	94 c0       	rjmp	.+296    	; 0x4372 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    424a:	00 91 26 09 	lds	r16, 0x0926
    424e:	10 91 27 09 	lds	r17, 0x0927
    CurNode = _free_node;

    if (_head_node != NULL)
    4252:	01 15       	cp	r16, r1
    4254:	11 05       	cpc	r17, r1
    4256:	09 f4       	brne	.+2      	; 0x425a <nrk_add_to_readyQ+0x32>
    4258:	4c c0       	rjmp	.+152    	; 0x42f2 <nrk_add_to_readyQ+0xca>
    425a:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    425c:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    425e:	58 2f       	mov	r21, r24
    4260:	54 03       	mulsu	r21, r20
    4262:	90 01       	movw	r18, r0
    4264:	11 24       	eor	r1, r1
    4266:	24 59       	subi	r18, 0x94	; 148
    4268:	37 4f       	sbci	r19, 0xF7	; 247
    426a:	79 01       	movw	r14, r18
    426c:	9a e0       	ldi	r25, 0x0A	; 10
    426e:	e9 0e       	add	r14, r25
    4270:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    4272:	69 01       	movw	r12, r18
    4274:	c4 e0       	ldi	r28, 0x04	; 4
    4276:	cc 0e       	add	r12, r28
    4278:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    427a:	59 01       	movw	r10, r18
    427c:	db e0       	ldi	r29, 0x0B	; 11
    427e:	ad 0e       	add	r10, r29
    4280:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4282:	2c 91       	ld	r18, X
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	42 9f       	mul	r20, r18
    4288:	b0 01       	movw	r22, r0
    428a:	43 9f       	mul	r20, r19
    428c:	70 0d       	add	r23, r0
    428e:	11 24       	eor	r1, r1
    4290:	64 59       	subi	r22, 0x94	; 148
    4292:	77 4f       	sbci	r23, 0xF7	; 247
    4294:	eb 01       	movw	r28, r22
    4296:	9c 81       	ldd	r25, Y+4	; 0x04
    4298:	99 23       	and	r25, r25
    429a:	29 f0       	breq	.+10     	; 0x42a6 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    429c:	5b 85       	ldd	r21, Y+11	; 0x0b
    429e:	e7 01       	movw	r28, r14
    42a0:	98 81       	ld	r25, Y
    42a2:	59 17       	cp	r21, r25
    42a4:	40 f1       	brcs	.+80     	; 0x42f6 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    42a6:	e6 01       	movw	r28, r12
    42a8:	98 81       	ld	r25, Y
    42aa:	99 23       	and	r25, r25
    42ac:	69 f0       	breq	.+26     	; 0x42c8 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    42ae:	42 9f       	mul	r20, r18
    42b0:	b0 01       	movw	r22, r0
    42b2:	43 9f       	mul	r20, r19
    42b4:	70 0d       	add	r23, r0
    42b6:	11 24       	eor	r1, r1
    42b8:	64 59       	subi	r22, 0x94	; 148
    42ba:	77 4f       	sbci	r23, 0xF7	; 247
    42bc:	eb 01       	movw	r28, r22
    42be:	5a 85       	ldd	r21, Y+10	; 0x0a
    42c0:	e5 01       	movw	r28, r10
    42c2:	98 81       	ld	r25, Y
    42c4:	59 17       	cp	r21, r25
    42c6:	b8 f0       	brcs	.+46     	; 0x42f6 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    42c8:	42 9f       	mul	r20, r18
    42ca:	b0 01       	movw	r22, r0
    42cc:	43 9f       	mul	r20, r19
    42ce:	70 0d       	add	r23, r0
    42d0:	11 24       	eor	r1, r1
    42d2:	9b 01       	movw	r18, r22
    42d4:	24 59       	subi	r18, 0x94	; 148
    42d6:	37 4f       	sbci	r19, 0xF7	; 247
    42d8:	e9 01       	movw	r28, r18
    42da:	2a 85       	ldd	r18, Y+10	; 0x0a
    42dc:	e7 01       	movw	r28, r14
    42de:	98 81       	ld	r25, Y
    42e0:	29 17       	cp	r18, r25
    42e2:	48 f0       	brcs	.+18     	; 0x42f6 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    42e4:	13 96       	adiw	r26, 0x03	; 3
    42e6:	0d 90       	ld	r0, X+
    42e8:	bc 91       	ld	r27, X
    42ea:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    42ec:	10 97       	sbiw	r26, 0x00	; 0
    42ee:	49 f6       	brne	.-110    	; 0x4282 <nrk_add_to_readyQ+0x5a>
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <nrk_add_to_readyQ+0xce>
    42f2:	a0 e0       	ldi	r26, 0x00	; 0
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    42f6:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    42f8:	c3 81       	ldd	r28, Z+3	; 0x03
    42fa:	d4 81       	ldd	r29, Z+4	; 0x04
    42fc:	d0 93 6b 08 	sts	0x086B, r29
    4300:	c0 93 6a 08 	sts	0x086A, r28

    if (NextNode == _head_node)
    4304:	a0 17       	cp	r26, r16
    4306:	b1 07       	cpc	r27, r17
    4308:	b1 f4       	brne	.+44     	; 0x4336 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    430a:	10 97       	sbiw	r26, 0x00	; 0
    430c:	49 f0       	breq	.+18     	; 0x4320 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    430e:	b4 83       	std	Z+4, r27	; 0x04
    4310:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    4312:	12 82       	std	Z+2, r1	; 0x02
    4314:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    4316:	12 96       	adiw	r26, 0x02	; 2
    4318:	fc 93       	st	X, r31
    431a:	ee 93       	st	-X, r30
    431c:	11 97       	sbiw	r26, 0x01	; 1
    431e:	06 c0       	rjmp	.+12     	; 0x432c <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    4320:	14 82       	std	Z+4, r1	; 0x04
    4322:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    4324:	12 82       	std	Z+2, r1	; 0x02
    4326:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    4328:	fa 83       	std	Y+2, r31	; 0x02
    432a:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    432c:	f0 93 27 09 	sts	0x0927, r31
    4330:	e0 93 26 09 	sts	0x0926, r30
    4334:	1e c0       	rjmp	.+60     	; 0x4372 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    4336:	ac 17       	cp	r26, r28
    4338:	bd 07       	cpc	r27, r29
    433a:	79 f0       	breq	.+30     	; 0x435a <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    433c:	11 96       	adiw	r26, 0x01	; 1
    433e:	8d 91       	ld	r24, X+
    4340:	9c 91       	ld	r25, X
    4342:	12 97       	sbiw	r26, 0x02	; 2
    4344:	92 83       	std	Z+2, r25	; 0x02
    4346:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    4348:	b4 83       	std	Z+4, r27	; 0x04
    434a:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    434c:	11 96       	adiw	r26, 0x01	; 1
    434e:	cd 91       	ld	r28, X+
    4350:	dc 91       	ld	r29, X
    4352:	12 97       	sbiw	r26, 0x02	; 2
    4354:	fc 83       	std	Y+4, r31	; 0x04
    4356:	eb 83       	std	Y+3, r30	; 0x03
    4358:	08 c0       	rjmp	.+16     	; 0x436a <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    435a:	14 82       	std	Z+4, r1	; 0x04
    435c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    435e:	11 96       	adiw	r26, 0x01	; 1
    4360:	8d 91       	ld	r24, X+
    4362:	9c 91       	ld	r25, X
    4364:	12 97       	sbiw	r26, 0x02	; 2
    4366:	92 83       	std	Z+2, r25	; 0x02
    4368:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    436a:	12 96       	adiw	r26, 0x02	; 2
    436c:	fc 93       	st	X, r31
    436e:	ee 93       	st	-X, r30
    4370:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    4372:	df 91       	pop	r29
    4374:	cf 91       	pop	r28
    4376:	1f 91       	pop	r17
    4378:	0f 91       	pop	r16
    437a:	ff 90       	pop	r15
    437c:	ef 90       	pop	r14
    437e:	df 90       	pop	r13
    4380:	cf 90       	pop	r12
    4382:	bf 90       	pop	r11
    4384:	af 90       	pop	r10
    4386:	08 95       	ret

00004388 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    438c:	e0 91 26 09 	lds	r30, 0x0926
    4390:	f0 91 27 09 	lds	r31, 0x0927
    4394:	30 97       	sbiw	r30, 0x00	; 0
    4396:	09 f4       	brne	.+2      	; 0x439a <nrk_rem_from_readyQ+0x12>
    4398:	44 c0       	rjmp	.+136    	; 0x4422 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    439a:	99 27       	eor	r25, r25
    439c:	87 fd       	sbrc	r24, 7
    439e:	90 95       	com	r25
    43a0:	20 81       	ld	r18, Z
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	28 17       	cp	r18, r24
    43a6:	39 07       	cpc	r19, r25
    43a8:	81 f4       	brne	.+32     	; 0x43ca <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    43aa:	a3 81       	ldd	r26, Z+3	; 0x03
    43ac:	b4 81       	ldd	r27, Z+4	; 0x04
    43ae:	b0 93 27 09 	sts	0x0927, r27
    43b2:	a0 93 26 09 	sts	0x0926, r26
        _head_node->Prev = NULL;
    43b6:	12 96       	adiw	r26, 0x02	; 2
    43b8:	1c 92       	st	X, r1
    43ba:	1e 92       	st	-X, r1
    43bc:	11 97       	sbiw	r26, 0x01	; 1
    43be:	18 c0       	rjmp	.+48     	; 0x43f0 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    43c0:	03 80       	ldd	r0, Z+3	; 0x03
    43c2:	f4 81       	ldd	r31, Z+4	; 0x04
    43c4:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    43c6:	30 97       	sbiw	r30, 0x00	; 0
    43c8:	61 f1       	breq	.+88     	; 0x4422 <nrk_rem_from_readyQ+0x9a>
    43ca:	20 81       	ld	r18, Z
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	28 17       	cp	r18, r24
    43d0:	39 07       	cpc	r19, r25
    43d2:	b1 f7       	brne	.-20     	; 0x43c0 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    43d4:	c1 81       	ldd	r28, Z+1	; 0x01
    43d6:	d2 81       	ldd	r29, Z+2	; 0x02
    43d8:	83 81       	ldd	r24, Z+3	; 0x03
    43da:	94 81       	ldd	r25, Z+4	; 0x04
    43dc:	9c 83       	std	Y+4, r25	; 0x04
    43de:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    43e0:	a3 81       	ldd	r26, Z+3	; 0x03
    43e2:	b4 81       	ldd	r27, Z+4	; 0x04
    43e4:	10 97       	sbiw	r26, 0x00	; 0
    43e6:	21 f0       	breq	.+8      	; 0x43f0 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    43e8:	12 96       	adiw	r26, 0x02	; 2
    43ea:	dc 93       	st	X, r29
    43ec:	ce 93       	st	-X, r28
    43ee:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    43f0:	a0 91 6a 08 	lds	r26, 0x086A
    43f4:	b0 91 6b 08 	lds	r27, 0x086B
    43f8:	10 97       	sbiw	r26, 0x00	; 0
    43fa:	39 f4       	brne	.+14     	; 0x440a <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    43fc:	f0 93 6b 08 	sts	0x086B, r31
    4400:	e0 93 6a 08 	sts	0x086A, r30
        _free_node->Next = NULL;
    4404:	14 82       	std	Z+4, r1	; 0x04
    4406:	13 82       	std	Z+3, r1	; 0x03
    4408:	0a c0       	rjmp	.+20     	; 0x441e <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    440a:	b4 83       	std	Z+4, r27	; 0x04
    440c:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    440e:	12 96       	adiw	r26, 0x02	; 2
    4410:	fc 93       	st	X, r31
    4412:	ee 93       	st	-X, r30
    4414:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    4416:	f0 93 6b 08 	sts	0x086B, r31
    441a:	e0 93 6a 08 	sts	0x086A, r30
    }
    _free_node->Prev = NULL;
    441e:	12 82       	std	Z+2, r1	; 0x02
    4420:	11 82       	std	Z+1, r1	; 0x01
}
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	08 95       	ret

00004428 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    4428:	ef 92       	push	r14
    442a:	ff 92       	push	r15
    442c:	0f 93       	push	r16
    442e:	1f 93       	push	r17
    4430:	cf 93       	push	r28
    4432:	df 93       	push	r29
    4434:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    4436:	4b 81       	ldd	r20, Y+3	; 0x03
    4438:	5c 81       	ldd	r21, Y+4	; 0x04
    443a:	69 81       	ldd	r22, Y+1	; 0x01
    443c:	7a 81       	ldd	r23, Y+2	; 0x02
    443e:	8d 81       	ldd	r24, Y+5	; 0x05
    4440:	9e 81       	ldd	r25, Y+6	; 0x06
    4442:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    4446:	2f 81       	ldd	r18, Y+7	; 0x07
    4448:	22 23       	and	r18, r18
    444a:	71 f0       	breq	.+28     	; 0x4468 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    444c:	4b 81       	ldd	r20, Y+3	; 0x03
    444e:	5c 81       	ldd	r21, Y+4	; 0x04
    4450:	e1 2c       	mov	r14, r1
    4452:	f1 2c       	mov	r15, r1
    4454:	00 e0       	ldi	r16, 0x00	; 0
    4456:	10 e0       	ldi	r17, 0x00	; 0
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	bc 01       	movw	r22, r24
    445e:	ce 01       	movw	r24, r28
    4460:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    4464:	1f 82       	std	Y+7, r1	; 0x07
    4466:	0c c0       	rjmp	.+24     	; 0x4480 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    4468:	e8 81       	ld	r30, Y
    446a:	2b e2       	ldi	r18, 0x2B	; 43
    446c:	e2 02       	muls	r30, r18
    446e:	f0 01       	movw	r30, r0
    4470:	11 24       	eor	r1, r1
    4472:	e4 59       	subi	r30, 0x94	; 148
    4474:	f7 4f       	sbci	r31, 0xF7	; 247
    4476:	21 85       	ldd	r18, Z+9	; 0x09
    4478:	23 30       	cpi	r18, 0x03	; 3
    447a:	b9 f4       	brne	.+46     	; 0x44aa <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    447c:	91 83       	std	Z+1, r25	; 0x01
    447e:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    4480:	e8 81       	ld	r30, Y
    4482:	8b e2       	ldi	r24, 0x2B	; 43
    4484:	e8 02       	muls	r30, r24
    4486:	f0 01       	movw	r30, r0
    4488:	11 24       	eor	r1, r1
    448a:	e4 59       	subi	r30, 0x94	; 148
    448c:	f7 4f       	sbci	r31, 0xF7	; 247
    448e:	85 89       	ldd	r24, Z+21	; 0x15
    4490:	96 89       	ldd	r25, Z+22	; 0x16
    4492:	a7 89       	ldd	r26, Z+23	; 0x17
    4494:	b0 8d       	ldd	r27, Z+24	; 0x18
    4496:	89 2b       	or	r24, r25
    4498:	8a 2b       	or	r24, r26
    449a:	8b 2b       	or	r24, r27
    449c:	41 f4       	brne	.+16     	; 0x44ae <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    449e:	82 e0       	ldi	r24, 0x02	; 2
    44a0:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    44a2:	88 81       	ld	r24, Y
    44a4:	0e 94 14 21 	call	0x4228	; 0x4228 <nrk_add_to_readyQ>
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    44aa:	8f ef       	ldi	r24, 0xFF	; 255
    44ac:	01 c0       	rjmp	.+2      	; 0x44b0 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
}
    44b0:	df 91       	pop	r29
    44b2:	cf 91       	pop	r28
    44b4:	1f 91       	pop	r17
    44b6:	0f 91       	pop	r16
    44b8:	ff 90       	pop	r15
    44ba:	ef 90       	pop	r14
    44bc:	08 95       	ret

000044be <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
    44c8:	28 97       	sbiw	r28, 0x08	; 8
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	cd bf       	out	0x3d, r28	; 61
    44d4:	29 83       	std	Y+1, r18	; 0x01
    44d6:	3a 83       	std	Y+2, r19	; 0x02
    44d8:	4b 83       	std	Y+3, r20	; 0x03
    44da:	5c 83       	std	Y+4, r21	; 0x04
    44dc:	6d 83       	std	Y+5, r22	; 0x05
    44de:	7e 83       	std	Y+6, r23	; 0x06
    44e0:	8f 83       	std	Y+7, r24	; 0x07
    44e2:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    44e4:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    44e8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    44ec:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    44ee:	ce 01       	movw	r24, r28
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    44f6:	63 30       	cpi	r22, 0x03	; 3
    44f8:	71 05       	cpc	r23, r1
    44fa:	98 f0       	brcs	.+38     	; 0x4522 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    44fc:	e0 91 31 09 	lds	r30, 0x0931
    4500:	f0 91 32 09 	lds	r31, 0x0932
    4504:	21 2f       	mov	r18, r17
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	62 0f       	add	r22, r18
    450a:	73 1f       	adc	r23, r19
    450c:	cb 01       	movw	r24, r22
    450e:	a0 e0       	ldi	r26, 0x00	; 0
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	85 8b       	std	Z+21, r24	; 0x15
    4514:	96 8b       	std	Z+22, r25	; 0x16
    4516:	a7 8b       	std	Z+23, r26	; 0x17
    4518:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    451a:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>

    return NRK_OK;
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	01 c0       	rjmp	.+2      	; 0x4524 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    4522:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    4524:	28 96       	adiw	r28, 0x08	; 8
    4526:	0f b6       	in	r0, 0x3f	; 63
    4528:	f8 94       	cli
    452a:	de bf       	out	0x3e, r29	; 62
    452c:	0f be       	out	0x3f, r0	; 63
    452e:	cd bf       	out	0x3d, r28	; 61
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	08 95       	ret

00004538 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    4538:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    453c:	e0 91 31 09 	lds	r30, 0x0931
    4540:	f0 91 32 09 	lds	r31, 0x0932
    4544:	85 81       	ldd	r24, Z+5	; 0x05
    4546:	81 11       	cpse	r24, r1
    4548:	f7 cf       	rjmp	.-18     	; 0x4538 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    454a:	08 95       	ret

0000454c <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    454c:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    454e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    4552:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    4556:	e0 91 31 09 	lds	r30, 0x0931
    455a:	f0 91 32 09 	lds	r31, 0x0932
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	92 a7       	std	Z+42, r25	; 0x2a
    4564:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    4566:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4568:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    456c:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    456e:	88 3f       	cpi	r24, 0xF8	; 248
    4570:	80 f4       	brcc	.+32     	; 0x4592 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4572:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    4576:	2c 2f       	mov	r18, r28
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	2f 5f       	subi	r18, 0xFF	; 255
    457c:	3f 4f       	sbci	r19, 0xFF	; 255
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	28 17       	cp	r18, r24
    4582:	39 07       	cpc	r19, r25
    4584:	34 f4       	brge	.+12     	; 0x4592 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    4586:	82 e0       	ldi	r24, 0x02	; 2
    4588:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    458a:	80 93 cb 07 	sts	0x07CB, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    458e:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4592:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4596:	0e 94 9c 22 	call	0x4538	; 0x4538 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	cf 91       	pop	r28
    459e:	08 95       	ret

000045a0 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    45a0:	e0 91 31 09 	lds	r30, 0x0931
    45a4:	f0 91 32 09 	lds	r31, 0x0932
    45a8:	80 85       	ldd	r24, Z+8	; 0x08
    45aa:	0e 94 c4 21 	call	0x4388	; 0x4388 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    45ae:	e0 91 31 09 	lds	r30, 0x0931
    45b2:	f0 91 32 09 	lds	r31, 0x0932
    45b6:	84 e0       	ldi	r24, 0x04	; 4
    45b8:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    45ba:	0e 94 a6 22 	call	0x454c	; 0x454c <nrk_wait_until_next_period>
    return NRK_OK;
}
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	08 95       	ret

000045c2 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    45c8:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <nrk_stack_check>

    if (p == 0)
    45cc:	20 97       	sbiw	r28, 0x00	; 0
    45ce:	11 f4       	brne	.+4      	; 0x45d4 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    45d0:	c1 e0       	ldi	r28, 0x01	; 1
    45d2:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    45d4:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    45d8:	e0 91 31 09 	lds	r30, 0x0931
    45dc:	f0 91 32 09 	lds	r31, 0x0932
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    45e4:	d2 a7       	std	Z+42, r29	; 0x2a
    45e6:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    45e8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    45ec:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    45ee:	88 3f       	cpi	r24, 0xF8	; 248
    45f0:	80 f4       	brcc	.+32     	; 0x4612 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    45f2:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    45f6:	2c 2f       	mov	r18, r28
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	2f 5f       	subi	r18, 0xFF	; 255
    45fc:	3f 4f       	sbci	r19, 0xFF	; 255
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	28 17       	cp	r18, r24
    4602:	39 07       	cpc	r19, r25
    4604:	34 f4       	brge	.+12     	; 0x4612 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    460a:	80 93 cb 07 	sts	0x07CB, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    460e:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4612:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4616:	0e 94 9c 22 	call	0x4538	; 0x4538 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	df 91       	pop	r29
    461e:	cf 91       	pop	r28
    4620:	08 95       	ret

00004622 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    4622:	ef 92       	push	r14
    4624:	ff 92       	push	r15
    4626:	0f 93       	push	r16
    4628:	1f 93       	push	r17
    462a:	cf 93       	push	r28
    462c:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    462e:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4632:	e0 91 31 09 	lds	r30, 0x0931
    4636:	f0 91 32 09 	lds	r31, 0x0932
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    463e:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    4642:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    4644:	e0 91 31 09 	lds	r30, 0x0931
    4648:	f0 91 32 09 	lds	r31, 0x0932
    464c:	e8 2e       	mov	r14, r24
    464e:	f1 2c       	mov	r15, r1
    4650:	c7 01       	movw	r24, r14
    4652:	80 0f       	add	r24, r16
    4654:	91 1f       	adc	r25, r17
    4656:	a0 e0       	ldi	r26, 0x00	; 0
    4658:	b0 e0       	ldi	r27, 0x00	; 0
    465a:	85 8b       	std	Z+21, r24	; 0x15
    465c:	96 8b       	std	Z+22, r25	; 0x16
    465e:	a7 8b       	std	Z+23, r26	; 0x17
    4660:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4662:	c8 3f       	cpi	r28, 0xF8	; 248
    4664:	78 f4       	brcc	.+30     	; 0x4684 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4666:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    466a:	9f ef       	ldi	r25, 0xFF	; 255
    466c:	e9 1a       	sub	r14, r25
    466e:	f9 0a       	sbc	r15, r25
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	e8 16       	cp	r14, r24
    4674:	f9 06       	cpc	r15, r25
    4676:	34 f4       	brge	.+12     	; 0x4684 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    4678:	82 e0       	ldi	r24, 0x02	; 2
    467a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    467c:	80 93 cb 07 	sts	0x07CB, r24
            _nrk_set_next_wakeup (timer);
    4680:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4684:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4688:	0e 94 9c 22 	call	0x4538	; 0x4538 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	cf 91       	pop	r28
    4690:	1f 91       	pop	r17
    4692:	0f 91       	pop	r16
    4694:	ff 90       	pop	r15
    4696:	ef 90       	pop	r14
    4698:	08 95       	ret

0000469a <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    469a:	cf 93       	push	r28
    469c:	df 93       	push	r29
    469e:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    46a0:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    46a4:	e0 91 31 09 	lds	r30, 0x0931
    46a8:	f0 91 32 09 	lds	r31, 0x0932
    46ac:	21 e0       	ldi	r18, 0x01	; 1
    46ae:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    46b0:	ce 01       	movw	r24, r28
    46b2:	a0 e0       	ldi	r26, 0x00	; 0
    46b4:	b0 e0       	ldi	r27, 0x00	; 0
    46b6:	85 8b       	std	Z+21, r24	; 0x15
    46b8:	96 8b       	std	Z+22, r25	; 0x16
    46ba:	a7 8b       	std	Z+23, r26	; 0x17
    46bc:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    46be:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    46c2:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    46c4:	88 3f       	cpi	r24, 0xF8	; 248
    46c6:	80 f4       	brcc	.+32     	; 0x46e8 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    46c8:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    46cc:	2c 2f       	mov	r18, r28
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	2f 5f       	subi	r18, 0xFF	; 255
    46d2:	3f 4f       	sbci	r19, 0xFF	; 255
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	28 17       	cp	r18, r24
    46d8:	39 07       	cpc	r19, r25
    46da:	34 f4       	brge	.+12     	; 0x46e8 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    46dc:	82 e0       	ldi	r24, 0x02	; 2
    46de:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    46e0:	80 93 cb 07 	sts	0x07CB, r24
            _nrk_set_next_wakeup (timer);
    46e4:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    46e8:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    46ec:	0e 94 9c 22 	call	0x4538	; 0x4538 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	08 95       	ret

000046f8 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    46f8:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    46fa:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    46fe:	e0 91 31 09 	lds	r30, 0x0931
    4702:	f0 91 32 09 	lds	r31, 0x0932
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    470a:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    470c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    4710:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4712:	88 3f       	cpi	r24, 0xF8	; 248
    4714:	80 f4       	brcc	.+32     	; 0x4736 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4716:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    471a:	2c 2f       	mov	r18, r28
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	2f 5f       	subi	r18, 0xFF	; 255
    4720:	3f 4f       	sbci	r19, 0xFF	; 255
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	28 17       	cp	r18, r24
    4726:	39 07       	cpc	r19, r25
    4728:	34 f4       	brge	.+12     	; 0x4736 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    472a:	82 e0       	ldi	r24, 0x02	; 2
    472c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    472e:	80 93 cb 07 	sts	0x07CB, r24
            _nrk_set_next_wakeup (timer);
    4732:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4736:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    473a:	0e 94 9c 22 	call	0x4538	; 0x4538 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	cf 91       	pop	r28
    4742:	08 95       	ret

00004744 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	28 97       	sbiw	r28, 0x08	; 8
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	29 83       	std	Y+1, r18	; 0x01
    475c:	3a 83       	std	Y+2, r19	; 0x02
    475e:	4b 83       	std	Y+3, r20	; 0x03
    4760:	5c 83       	std	Y+4, r21	; 0x04
    4762:	6d 83       	std	Y+5, r22	; 0x05
    4764:	7e 83       	std	Y+6, r23	; 0x06
    4766:	8f 83       	std	Y+7, r24	; 0x07
    4768:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    476a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <nrk_stack_check>

    nrk_int_disable ();
    476e:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4772:	e0 91 31 09 	lds	r30, 0x0931
    4776:	f0 91 32 09 	lds	r31, 0x0932
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	92 a7       	std	Z+42, r25	; 0x2a
    4784:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    4786:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    478a:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    478c:	ce 01       	movw	r24, r28
    478e:	01 96       	adiw	r24, 0x01	; 1
    4790:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4794:	e0 91 31 09 	lds	r30, 0x0931
    4798:	f0 91 32 09 	lds	r31, 0x0932
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	81 0f       	add	r24, r17
    47a2:	91 1d       	adc	r25, r1
    47a4:	a1 1d       	adc	r26, r1
    47a6:	b1 1d       	adc	r27, r1
    47a8:	85 8b       	std	Z+21, r24	; 0x15
    47aa:	96 8b       	std	Z+22, r25	; 0x16
    47ac:	a7 8b       	std	Z+23, r26	; 0x17
    47ae:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    47b0:	18 3f       	cpi	r17, 0xF8	; 248
    47b2:	80 f4       	brcc	.+32     	; 0x47d4 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    47b4:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    47b8:	21 2f       	mov	r18, r17
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	2f 5f       	subi	r18, 0xFF	; 255
    47be:	3f 4f       	sbci	r19, 0xFF	; 255
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	28 17       	cp	r18, r24
    47c4:	39 07       	cpc	r19, r25
    47c6:	34 f4       	brge	.+12     	; 0x47d4 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    47c8:	82 e0       	ldi	r24, 0x02	; 2
    47ca:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    47cc:	80 93 cb 07 	sts	0x07CB, r24
            _nrk_set_next_wakeup (timer);
    47d0:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    47d4:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    47d8:	0e 94 9c 22 	call	0x4538	; 0x4538 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	28 96       	adiw	r28, 0x08	; 8
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	cd bf       	out	0x3d, r28	; 61
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	1f 91       	pop	r17
    47f0:	08 95       	ret

000047f2 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    47f2:	8f 92       	push	r8
    47f4:	9f 92       	push	r9
    47f6:	af 92       	push	r10
    47f8:	bf 92       	push	r11
    47fa:	cf 92       	push	r12
    47fc:	df 92       	push	r13
    47fe:	ef 92       	push	r14
    4800:	ff 92       	push	r15
    4802:	0f 93       	push	r16
    4804:	1f 93       	push	r17
    4806:	cf 93       	push	r28
    4808:	df 93       	push	r29
    480a:	cd b7       	in	r28, 0x3d	; 61
    480c:	de b7       	in	r29, 0x3e	; 62
    480e:	60 97       	sbiw	r28, 0x10	; 16
    4810:	0f b6       	in	r0, 0x3f	; 63
    4812:	f8 94       	cli
    4814:	de bf       	out	0x3e, r29	; 62
    4816:	0f be       	out	0x3f, r0	; 63
    4818:	cd bf       	out	0x3d, r28	; 61
    481a:	29 87       	std	Y+9, r18	; 0x09
    481c:	3a 87       	std	Y+10, r19	; 0x0a
    481e:	4b 87       	std	Y+11, r20	; 0x0b
    4820:	5c 87       	std	Y+12, r21	; 0x0c
    4822:	6d 87       	std	Y+13, r22	; 0x0d
    4824:	7e 87       	std	Y+14, r23	; 0x0e
    4826:	8f 87       	std	Y+15, r24	; 0x0f
    4828:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    482a:	ce 01       	movw	r24, r28
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	0e 94 55 24 	call	0x48aa	; 0x48aa <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    4832:	89 80       	ldd	r8, Y+1	; 0x01
    4834:	9a 80       	ldd	r9, Y+2	; 0x02
    4836:	ab 80       	ldd	r10, Y+3	; 0x03
    4838:	bc 80       	ldd	r11, Y+4	; 0x04
    483a:	cd 80       	ldd	r12, Y+5	; 0x05
    483c:	de 80       	ldd	r13, Y+6	; 0x06
    483e:	ef 80       	ldd	r14, Y+7	; 0x07
    4840:	f8 84       	ldd	r15, Y+8	; 0x08
    4842:	09 85       	ldd	r16, Y+9	; 0x09
    4844:	1a 85       	ldd	r17, Y+10	; 0x0a
    4846:	2b 85       	ldd	r18, Y+11	; 0x0b
    4848:	3c 85       	ldd	r19, Y+12	; 0x0c
    484a:	4d 85       	ldd	r20, Y+13	; 0x0d
    484c:	5e 85       	ldd	r21, Y+14	; 0x0e
    484e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4850:	78 89       	ldd	r23, Y+16	; 0x10
    4852:	ce 01       	movw	r24, r28
    4854:	09 96       	adiw	r24, 0x09	; 9
    4856:	0e 94 b2 24 	call	0x4964	; 0x4964 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    485a:	8f 3f       	cpi	r24, 0xFF	; 255
    485c:	61 f0       	breq	.+24     	; 0x4876 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    485e:	29 85       	ldd	r18, Y+9	; 0x09
    4860:	3a 85       	ldd	r19, Y+10	; 0x0a
    4862:	4b 85       	ldd	r20, Y+11	; 0x0b
    4864:	5c 85       	ldd	r21, Y+12	; 0x0c
    4866:	6d 85       	ldd	r22, Y+13	; 0x0d
    4868:	7e 85       	ldd	r23, Y+14	; 0x0e
    486a:	8f 85       	ldd	r24, Y+15	; 0x0f
    486c:	98 89       	ldd	r25, Y+16	; 0x10
    486e:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_wait>

    return NRK_OK;
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	01 c0       	rjmp	.+2      	; 0x4878 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    4876:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4878:	60 96       	adiw	r28, 0x10	; 16
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	ff 90       	pop	r15
    488e:	ef 90       	pop	r14
    4890:	df 90       	pop	r13
    4892:	cf 90       	pop	r12
    4894:	bf 90       	pop	r11
    4896:	af 90       	pop	r10
    4898:	9f 90       	pop	r9
    489a:	8f 90       	pop	r8
    489c:	08 95       	ret

0000489e <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    489e:	e0 91 31 09 	lds	r30, 0x0931
    48a2:	f0 91 32 09 	lds	r31, 0x0932
}
    48a6:	80 85       	ldd	r24, Z+8	; 0x08
    48a8:	08 95       	ret

000048aa <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    48aa:	0f 93       	push	r16
    48ac:	1f 93       	push	r17
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    48b4:	1c 82       	std	Y+4, r1	; 0x04
    48b6:	1d 82       	std	Y+5, r1	; 0x05
    48b8:	1e 82       	std	Y+6, r1	; 0x06
    48ba:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    48bc:	80 91 28 09 	lds	r24, 0x0928
    48c0:	90 91 29 09 	lds	r25, 0x0929
    48c4:	a0 91 2a 09 	lds	r26, 0x092A
    48c8:	b0 91 2b 09 	lds	r27, 0x092B
    48cc:	88 83       	st	Y, r24
    48ce:	99 83       	std	Y+1, r25	; 0x01
    48d0:	aa 83       	std	Y+2, r26	; 0x02
    48d2:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    48d4:	80 91 2c 09 	lds	r24, 0x092C
    48d8:	90 91 2d 09 	lds	r25, 0x092D
    48dc:	a0 91 2e 09 	lds	r26, 0x092E
    48e0:	b0 91 2f 09 	lds	r27, 0x092F
    48e4:	8c 83       	std	Y+4, r24	; 0x04
    48e6:	9d 83       	std	Y+5, r25	; 0x05
    48e8:	ae 83       	std	Y+6, r26	; 0x06
    48ea:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    48ec:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    48f0:	a8 2f       	mov	r26, r24
    48f2:	b0 e0       	ldi	r27, 0x00	; 0
    48f4:	23 eb       	ldi	r18, 0xB3	; 179
    48f6:	36 ee       	ldi	r19, 0xE6	; 230
    48f8:	4e e0       	ldi	r20, 0x0E	; 14
    48fa:	50 e0       	ldi	r21, 0x00	; 0
    48fc:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    4900:	0c 81       	ldd	r16, Y+4	; 0x04
    4902:	1d 81       	ldd	r17, Y+5	; 0x05
    4904:	2e 81       	ldd	r18, Y+6	; 0x06
    4906:	3f 81       	ldd	r19, Y+7	; 0x07
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	80 0f       	add	r24, r16
    490e:	91 1f       	adc	r25, r17
    4910:	a2 1f       	adc	r26, r18
    4912:	b3 1f       	adc	r27, r19
    4914:	8c 83       	std	Y+4, r24	; 0x04
    4916:	9d 83       	std	Y+5, r25	; 0x05
    4918:	ae 83       	std	Y+6, r26	; 0x06
    491a:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    491c:	8c 81       	ldd	r24, Y+4	; 0x04
    491e:	9d 81       	ldd	r25, Y+5	; 0x05
    4920:	ae 81       	ldd	r26, Y+6	; 0x06
    4922:	bf 81       	ldd	r27, Y+7	; 0x07
    4924:	81 15       	cp	r24, r1
    4926:	2a ec       	ldi	r18, 0xCA	; 202
    4928:	92 07       	cpc	r25, r18
    492a:	2a e9       	ldi	r18, 0x9A	; 154
    492c:	a2 07       	cpc	r26, r18
    492e:	2b e3       	ldi	r18, 0x3B	; 59
    4930:	b2 07       	cpc	r27, r18
    4932:	98 f0       	brcs	.+38     	; 0x495a <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    4934:	9a 5c       	subi	r25, 0xCA	; 202
    4936:	aa 49       	sbci	r26, 0x9A	; 154
    4938:	bb 43       	sbci	r27, 0x3B	; 59
    493a:	8c 83       	std	Y+4, r24	; 0x04
    493c:	9d 83       	std	Y+5, r25	; 0x05
    493e:	ae 83       	std	Y+6, r26	; 0x06
    4940:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4942:	88 81       	ld	r24, Y
    4944:	99 81       	ldd	r25, Y+1	; 0x01
    4946:	aa 81       	ldd	r26, Y+2	; 0x02
    4948:	bb 81       	ldd	r27, Y+3	; 0x03
    494a:	01 96       	adiw	r24, 0x01	; 1
    494c:	a1 1d       	adc	r26, r1
    494e:	b1 1d       	adc	r27, r1
    4950:	88 83       	st	Y, r24
    4952:	99 83       	std	Y+1, r25	; 0x01
    4954:	aa 83       	std	Y+2, r26	; 0x02
    4956:	bb 83       	std	Y+3, r27	; 0x03
    4958:	e1 cf       	rjmp	.-62     	; 0x491c <nrk_time_get+0x72>
    }

}
    495a:	df 91       	pop	r29
    495c:	cf 91       	pop	r28
    495e:	1f 91       	pop	r17
    4960:	0f 91       	pop	r16
    4962:	08 95       	ret

00004964 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4964:	8f 92       	push	r8
    4966:	9f 92       	push	r9
    4968:	af 92       	push	r10
    496a:	bf 92       	push	r11
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	60 97       	sbiw	r28, 0x10	; 16
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	fc 01       	movw	r30, r24
    498e:	09 83       	std	Y+1, r16	; 0x01
    4990:	1a 83       	std	Y+2, r17	; 0x02
    4992:	2b 83       	std	Y+3, r18	; 0x03
    4994:	3c 83       	std	Y+4, r19	; 0x04
    4996:	4d 83       	std	Y+5, r20	; 0x05
    4998:	5e 83       	std	Y+6, r21	; 0x06
    499a:	6f 83       	std	Y+7, r22	; 0x07
    499c:	78 87       	std	Y+8, r23	; 0x08
    499e:	89 86       	std	Y+9, r8	; 0x09
    49a0:	9a 86       	std	Y+10, r9	; 0x0a
    49a2:	ab 86       	std	Y+11, r10	; 0x0b
    49a4:	bc 86       	std	Y+12, r11	; 0x0c
    49a6:	cd 86       	std	Y+13, r12	; 0x0d
    49a8:	de 86       	std	Y+14, r13	; 0x0e
    49aa:	ef 86       	std	Y+15, r14	; 0x0f
    49ac:	f8 8a       	std	Y+16, r15	; 0x10
    49ae:	09 81       	ldd	r16, Y+1	; 0x01
    49b0:	1a 81       	ldd	r17, Y+2	; 0x02
    49b2:	2b 81       	ldd	r18, Y+3	; 0x03
    49b4:	3c 81       	ldd	r19, Y+4	; 0x04
    49b6:	4d 81       	ldd	r20, Y+5	; 0x05
    49b8:	5e 81       	ldd	r21, Y+6	; 0x06
    49ba:	6f 81       	ldd	r22, Y+7	; 0x07
    49bc:	78 85       	ldd	r23, Y+8	; 0x08
    49be:	c9 84       	ldd	r12, Y+9	; 0x09
    49c0:	da 84       	ldd	r13, Y+10	; 0x0a
    49c2:	eb 84       	ldd	r14, Y+11	; 0x0b
    49c4:	fc 84       	ldd	r15, Y+12	; 0x0c
    49c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ca:	af 85       	ldd	r26, Y+15	; 0x0f
    49cc:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    49ce:	0c 15       	cp	r16, r12
    49d0:	1d 05       	cpc	r17, r13
    49d2:	2e 05       	cpc	r18, r14
    49d4:	3f 05       	cpc	r19, r15
    49d6:	f0 f1       	brcs	.+124    	; 0x4a54 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    49d8:	c0 16       	cp	r12, r16
    49da:	d1 06       	cpc	r13, r17
    49dc:	e2 06       	cpc	r14, r18
    49de:	f3 06       	cpc	r15, r19
    49e0:	91 f4       	brne	.+36     	; 0x4a06 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    49e2:	48 17       	cp	r20, r24
    49e4:	59 07       	cpc	r21, r25
    49e6:	6a 07       	cpc	r22, r26
    49e8:	7b 07       	cpc	r23, r27
    49ea:	a0 f1       	brcs	.+104    	; 0x4a54 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    49ec:	48 1b       	sub	r20, r24
    49ee:	59 0b       	sbc	r21, r25
    49f0:	6a 0b       	sbc	r22, r26
    49f2:	7b 0b       	sbc	r23, r27
    49f4:	44 83       	std	Z+4, r20	; 0x04
    49f6:	55 83       	std	Z+5, r21	; 0x05
    49f8:	66 83       	std	Z+6, r22	; 0x06
    49fa:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    49fc:	10 82       	st	Z, r1
    49fe:	11 82       	std	Z+1, r1	; 0x01
    4a00:	12 82       	std	Z+2, r1	; 0x02
    4a02:	13 82       	std	Z+3, r1	; 0x03
    4a04:	25 c0       	rjmp	.+74     	; 0x4a50 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4a06:	48 17       	cp	r20, r24
    4a08:	59 07       	cpc	r21, r25
    4a0a:	6a 07       	cpc	r22, r26
    4a0c:	7b 07       	cpc	r23, r27
    4a0e:	80 f4       	brcc	.+32     	; 0x4a30 <nrk_time_sub+0xcc>
{
	high.secs--;
    4a10:	01 50       	subi	r16, 0x01	; 1
    4a12:	11 09       	sbc	r17, r1
    4a14:	21 09       	sbc	r18, r1
    4a16:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4a18:	0c 19       	sub	r16, r12
    4a1a:	1d 09       	sbc	r17, r13
    4a1c:	2e 09       	sbc	r18, r14
    4a1e:	3f 09       	sbc	r19, r15
    4a20:	00 83       	st	Z, r16
    4a22:	11 83       	std	Z+1, r17	; 0x01
    4a24:	22 83       	std	Z+2, r18	; 0x02
    4a26:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    4a28:	56 53       	subi	r21, 0x36	; 54
    4a2a:	65 46       	sbci	r22, 0x65	; 101
    4a2c:	74 4c       	sbci	r23, 0xC4	; 196
    4a2e:	08 c0       	rjmp	.+16     	; 0x4a40 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4a30:	0c 19       	sub	r16, r12
    4a32:	1d 09       	sbc	r17, r13
    4a34:	2e 09       	sbc	r18, r14
    4a36:	3f 09       	sbc	r19, r15
    4a38:	00 83       	st	Z, r16
    4a3a:	11 83       	std	Z+1, r17	; 0x01
    4a3c:	22 83       	std	Z+2, r18	; 0x02
    4a3e:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4a40:	48 1b       	sub	r20, r24
    4a42:	59 0b       	sbc	r21, r25
    4a44:	6a 0b       	sbc	r22, r26
    4a46:	7b 0b       	sbc	r23, r27
    4a48:	44 83       	std	Z+4, r20	; 0x04
    4a4a:	55 83       	std	Z+5, r21	; 0x05
    4a4c:	66 83       	std	Z+6, r22	; 0x06
    4a4e:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	01 c0       	rjmp	.+2      	; 0x4a56 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4a54:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    4a56:	60 96       	adiw	r28, 0x10	; 16
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	f8 94       	cli
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	1f 91       	pop	r17
    4a68:	0f 91       	pop	r16
    4a6a:	ff 90       	pop	r15
    4a6c:	ef 90       	pop	r14
    4a6e:	df 90       	pop	r13
    4a70:	cf 90       	pop	r12
    4a72:	bf 90       	pop	r11
    4a74:	af 90       	pop	r10
    4a76:	9f 90       	pop	r9
    4a78:	8f 90       	pop	r8
    4a7a:	08 95       	ret

00004a7c <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4a7c:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4a7e:	44 81       	ldd	r20, Z+4	; 0x04
    4a80:	55 81       	ldd	r21, Z+5	; 0x05
    4a82:	66 81       	ldd	r22, Z+6	; 0x06
    4a84:	77 81       	ldd	r23, Z+7	; 0x07
    4a86:	41 15       	cp	r20, r1
    4a88:	8a ec       	ldi	r24, 0xCA	; 202
    4a8a:	58 07       	cpc	r21, r24
    4a8c:	8a e9       	ldi	r24, 0x9A	; 154
    4a8e:	68 07       	cpc	r22, r24
    4a90:	8b e3       	ldi	r24, 0x3B	; 59
    4a92:	78 07       	cpc	r23, r24
    4a94:	98 f0       	brcs	.+38     	; 0x4abc <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4a96:	5a 5c       	subi	r21, 0xCA	; 202
    4a98:	6a 49       	sbci	r22, 0x9A	; 154
    4a9a:	7b 43       	sbci	r23, 0x3B	; 59
    4a9c:	44 83       	std	Z+4, r20	; 0x04
    4a9e:	55 83       	std	Z+5, r21	; 0x05
    4aa0:	66 83       	std	Z+6, r22	; 0x06
    4aa2:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    4aa4:	80 81       	ld	r24, Z
    4aa6:	91 81       	ldd	r25, Z+1	; 0x01
    4aa8:	a2 81       	ldd	r26, Z+2	; 0x02
    4aaa:	b3 81       	ldd	r27, Z+3	; 0x03
    4aac:	01 96       	adiw	r24, 0x01	; 1
    4aae:	a1 1d       	adc	r26, r1
    4ab0:	b1 1d       	adc	r27, r1
    4ab2:	80 83       	st	Z, r24
    4ab4:	91 83       	std	Z+1, r25	; 0x01
    4ab6:	a2 83       	std	Z+2, r26	; 0x02
    4ab8:	b3 83       	std	Z+3, r27	; 0x03
    4aba:	e1 cf       	rjmp	.-62     	; 0x4a7e <nrk_time_compact_nanos+0x2>
    }
}
    4abc:	08 95       	ret

00004abe <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4abe:	8f 92       	push	r8
    4ac0:	9f 92       	push	r9
    4ac2:	af 92       	push	r10
    4ac4:	bf 92       	push	r11
    4ac6:	cf 92       	push	r12
    4ac8:	df 92       	push	r13
    4aca:	ef 92       	push	r14
    4acc:	ff 92       	push	r15
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	cd b7       	in	r28, 0x3d	; 61
    4ad8:	de b7       	in	r29, 0x3e	; 62
    4ada:	60 97       	sbiw	r28, 0x10	; 16
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	09 83       	std	Y+1, r16	; 0x01
    4ae8:	1a 83       	std	Y+2, r17	; 0x02
    4aea:	2b 83       	std	Y+3, r18	; 0x03
    4aec:	3c 83       	std	Y+4, r19	; 0x04
    4aee:	4d 83       	std	Y+5, r20	; 0x05
    4af0:	5e 83       	std	Y+6, r21	; 0x06
    4af2:	6f 83       	std	Y+7, r22	; 0x07
    4af4:	78 87       	std	Y+8, r23	; 0x08
    4af6:	89 86       	std	Y+9, r8	; 0x09
    4af8:	9a 86       	std	Y+10, r9	; 0x0a
    4afa:	ab 86       	std	Y+11, r10	; 0x0b
    4afc:	bc 86       	std	Y+12, r11	; 0x0c
    4afe:	cd 86       	std	Y+13, r12	; 0x0d
    4b00:	de 86       	std	Y+14, r13	; 0x0e
    4b02:	ef 86       	std	Y+15, r14	; 0x0f
    4b04:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4b06:	09 85       	ldd	r16, Y+9	; 0x09
    4b08:	1a 85       	ldd	r17, Y+10	; 0x0a
    4b0a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b0e:	49 81       	ldd	r20, Y+1	; 0x01
    4b10:	5a 81       	ldd	r21, Y+2	; 0x02
    4b12:	6b 81       	ldd	r22, Y+3	; 0x03
    4b14:	7c 81       	ldd	r23, Y+4	; 0x04
    4b16:	40 0f       	add	r20, r16
    4b18:	51 1f       	adc	r21, r17
    4b1a:	62 1f       	adc	r22, r18
    4b1c:	73 1f       	adc	r23, r19
    4b1e:	fc 01       	movw	r30, r24
    4b20:	40 83       	st	Z, r20
    4b22:	51 83       	std	Z+1, r21	; 0x01
    4b24:	62 83       	std	Z+2, r22	; 0x02
    4b26:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4b28:	0d 85       	ldd	r16, Y+13	; 0x0d
    4b2a:	1e 85       	ldd	r17, Y+14	; 0x0e
    4b2c:	2f 85       	ldd	r18, Y+15	; 0x0f
    4b2e:	38 89       	ldd	r19, Y+16	; 0x10
    4b30:	4d 81       	ldd	r20, Y+5	; 0x05
    4b32:	5e 81       	ldd	r21, Y+6	; 0x06
    4b34:	6f 81       	ldd	r22, Y+7	; 0x07
    4b36:	78 85       	ldd	r23, Y+8	; 0x08
    4b38:	40 0f       	add	r20, r16
    4b3a:	51 1f       	adc	r21, r17
    4b3c:	62 1f       	adc	r22, r18
    4b3e:	73 1f       	adc	r23, r19
    4b40:	44 83       	std	Z+4, r20	; 0x04
    4b42:	55 83       	std	Z+5, r21	; 0x05
    4b44:	66 83       	std	Z+6, r22	; 0x06
    4b46:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    4b48:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <nrk_time_compact_nanos>
return NRK_OK;
}
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	60 96       	adiw	r28, 0x10	; 16
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	1f 91       	pop	r17
    4b60:	0f 91       	pop	r16
    4b62:	ff 90       	pop	r15
    4b64:	ef 90       	pop	r14
    4b66:	df 90       	pop	r13
    4b68:	cf 90       	pop	r12
    4b6a:	bf 90       	pop	r11
    4b6c:	af 90       	pop	r10
    4b6e:	9f 90       	pop	r9
    4b70:	8f 90       	pop	r8
    4b72:	08 95       	ret

00004b74 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    4b74:	e8 e2       	ldi	r30, 0x28	; 40
    4b76:	f9 e0       	ldi	r31, 0x09	; 9
    4b78:	60 83       	st	Z, r22
    4b7a:	71 83       	std	Z+1, r23	; 0x01
    4b7c:	82 83       	std	Z+2, r24	; 0x02
    4b7e:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    4b80:	24 83       	std	Z+4, r18	; 0x04
    4b82:	35 83       	std	Z+5, r19	; 0x05
    4b84:	46 83       	std	Z+6, r20	; 0x06
    4b86:	57 83       	std	Z+7, r21	; 0x07
    4b88:	08 95       	ret

00004b8a <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    4b8a:	2f 92       	push	r2
    4b8c:	3f 92       	push	r3
    4b8e:	4f 92       	push	r4
    4b90:	5f 92       	push	r5
    4b92:	6f 92       	push	r6
    4b94:	7f 92       	push	r7
    4b96:	8f 92       	push	r8
    4b98:	9f 92       	push	r9
    4b9a:	af 92       	push	r10
    4b9c:	bf 92       	push	r11
    4b9e:	cf 92       	push	r12
    4ba0:	df 92       	push	r13
    4ba2:	ef 92       	push	r14
    4ba4:	ff 92       	push	r15
    4ba6:	0f 93       	push	r16
    4ba8:	1f 93       	push	r17
    4baa:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4bac:	c0 80       	ld	r12, Z
    4bae:	d1 80       	ldd	r13, Z+1	; 0x01
    4bb0:	e2 80       	ldd	r14, Z+2	; 0x02
    4bb2:	f3 80       	ldd	r15, Z+3	; 0x03
    4bb4:	c1 14       	cp	r12, r1
    4bb6:	d1 04       	cpc	r13, r1
    4bb8:	e1 04       	cpc	r14, r1
    4bba:	f1 04       	cpc	r15, r1
    4bbc:	e1 f1       	breq	.+120    	; 0x4c36 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    4bbe:	84 81       	ldd	r24, Z+4	; 0x04
    4bc0:	95 81       	ldd	r25, Z+5	; 0x05
    4bc2:	a6 81       	ldd	r26, Z+6	; 0x06
    4bc4:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4bc6:	22 e4       	ldi	r18, 0x42	; 66
    4bc8:	c2 16       	cp	r12, r18
    4bca:	d1 04       	cpc	r13, r1
    4bcc:	e1 04       	cpc	r14, r1
    4bce:	f1 04       	cpc	r15, r1
    4bd0:	f0 f5       	brcc	.+124    	; 0x4c4e <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4bd2:	1c 01       	movw	r2, r24
    4bd4:	2d 01       	movw	r4, r26
    4bd6:	61 2c       	mov	r6, r1
    4bd8:	71 2c       	mov	r7, r1
    4bda:	43 01       	movw	r8, r6
    4bdc:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4bde:	8e 2f       	mov	r24, r30
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	a0 e0       	ldi	r26, 0x00	; 0
    4be4:	b0 e0       	ldi	r27, 0x00	; 0
    4be6:	8c 15       	cp	r24, r12
    4be8:	9d 05       	cpc	r25, r13
    4bea:	ae 05       	cpc	r26, r14
    4bec:	bf 05       	cpc	r27, r15
    4bee:	88 f4       	brcc	.+34     	; 0x4c12 <_nrk_time_to_ticks+0x88>
    4bf0:	91 01       	movw	r18, r2
    4bf2:	a2 01       	movw	r20, r4
    4bf4:	b3 01       	movw	r22, r6
    4bf6:	c4 01       	movw	r24, r8
    4bf8:	36 53       	subi	r19, 0x36	; 54
    4bfa:	45 46       	sbci	r20, 0x65	; 101
    4bfc:	54 4c       	sbci	r21, 0xC4	; 196
    4bfe:	6f 4f       	sbci	r22, 0xFF	; 255
    4c00:	7f 4f       	sbci	r23, 0xFF	; 255
    4c02:	8f 4f       	sbci	r24, 0xFF	; 255
    4c04:	9f 4f       	sbci	r25, 0xFF	; 255
    4c06:	19 01       	movw	r2, r18
    4c08:	2a 01       	movw	r4, r20
    4c0a:	3b 01       	movw	r6, r22
    4c0c:	4c 01       	movw	r8, r24
    4c0e:	ef 5f       	subi	r30, 0xFF	; 255
    4c10:	e6 cf       	rjmp	.-52     	; 0x4bde <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4c12:	83 eb       	ldi	r24, 0xB3	; 179
    4c14:	a8 2e       	mov	r10, r24
    4c16:	96 ee       	ldi	r25, 0xE6	; 230
    4c18:	b9 2e       	mov	r11, r25
    4c1a:	2e e0       	ldi	r18, 0x0E	; 14
    4c1c:	c2 2e       	mov	r12, r18
    4c1e:	d1 2c       	mov	r13, r1
    4c20:	e1 2c       	mov	r14, r1
    4c22:	f1 2c       	mov	r15, r1
    4c24:	00 e0       	ldi	r16, 0x00	; 0
    4c26:	10 e0       	ldi	r17, 0x00	; 0
    4c28:	91 01       	movw	r18, r2
    4c2a:	a2 01       	movw	r20, r4
    4c2c:	b3 01       	movw	r22, r6
    4c2e:	c4 01       	movw	r24, r8
    4c30:	0e 94 4b 31 	call	0x6296	; 0x6296 <__udivdi3>
    4c34:	0a c0       	rjmp	.+20     	; 0x4c4a <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4c36:	64 81       	ldd	r22, Z+4	; 0x04
    4c38:	75 81       	ldd	r23, Z+5	; 0x05
    4c3a:	86 81       	ldd	r24, Z+6	; 0x06
    4c3c:	97 81       	ldd	r25, Z+7	; 0x07
    4c3e:	23 eb       	ldi	r18, 0xB3	; 179
    4c40:	36 ee       	ldi	r19, 0xE6	; 230
    4c42:	4e e0       	ldi	r20, 0x0E	; 14
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    4c4a:	c9 01       	movw	r24, r18
    4c4c:	02 c0       	rjmp	.+4      	; 0x4c52 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4c52:	1f 91       	pop	r17
    4c54:	0f 91       	pop	r16
    4c56:	ff 90       	pop	r15
    4c58:	ef 90       	pop	r14
    4c5a:	df 90       	pop	r13
    4c5c:	cf 90       	pop	r12
    4c5e:	bf 90       	pop	r11
    4c60:	af 90       	pop	r10
    4c62:	9f 90       	pop	r9
    4c64:	8f 90       	pop	r8
    4c66:	7f 90       	pop	r7
    4c68:	6f 90       	pop	r6
    4c6a:	5f 90       	pop	r5
    4c6c:	4f 90       	pop	r4
    4c6e:	3f 90       	pop	r3
    4c70:	2f 90       	pop	r2
    4c72:	08 95       	ret

00004c74 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4c74:	cf 92       	push	r12
    4c76:	df 92       	push	r13
    4c78:	ef 92       	push	r14
    4c7a:	ff 92       	push	r15
    4c7c:	cf 93       	push	r28
    4c7e:	df 93       	push	r29
    4c80:	cd b7       	in	r28, 0x3d	; 61
    4c82:	de b7       	in	r29, 0x3e	; 62
    4c84:	28 97       	sbiw	r28, 0x08	; 8
    4c86:	0f b6       	in	r0, 0x3f	; 63
    4c88:	f8 94       	cli
    4c8a:	de bf       	out	0x3e, r29	; 62
    4c8c:	0f be       	out	0x3f, r0	; 63
    4c8e:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4c90:	6b 01       	movw	r12, r22
    4c92:	7c 01       	movw	r14, r24
    4c94:	2a e0       	ldi	r18, 0x0A	; 10
    4c96:	f6 94       	lsr	r15
    4c98:	e7 94       	ror	r14
    4c9a:	d7 94       	ror	r13
    4c9c:	c7 94       	ror	r12
    4c9e:	2a 95       	dec	r18
    4ca0:	d1 f7       	brne	.-12     	; 0x4c96 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    4ca2:	c9 82       	std	Y+1, r12	; 0x01
    4ca4:	da 82       	std	Y+2, r13	; 0x02
    4ca6:	eb 82       	std	Y+3, r14	; 0x03
    4ca8:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4caa:	9b 01       	movw	r18, r22
    4cac:	ac 01       	movw	r20, r24
    4cae:	33 70       	andi	r19, 0x03	; 3
    4cb0:	44 27       	eor	r20, r20
    4cb2:	55 27       	eor	r21, r21
    4cb4:	63 eb       	ldi	r22, 0xB3	; 179
    4cb6:	76 ee       	ldi	r23, 0xE6	; 230
    4cb8:	8e e0       	ldi	r24, 0x0E	; 14
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__mulsi3>

return t;
    4cc0:	2c 2d       	mov	r18, r12
    4cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    4cc4:	4b 81       	ldd	r20, Y+3	; 0x03
    4cc6:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4cc8:	28 96       	adiw	r28, 0x08	; 8
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	f8 94       	cli
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	0f be       	out	0x3f, r0	; 63
    4cd2:	cd bf       	out	0x3d, r28	; 61
    4cd4:	df 91       	pop	r29
    4cd6:	cf 91       	pop	r28
    4cd8:	ff 90       	pop	r15
    4cda:	ef 90       	pop	r14
    4cdc:	df 90       	pop	r13
    4cde:	cf 90       	pop	r12
    4ce0:	08 95       	ret

00004ce2 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4ce2:	2f 92       	push	r2
    4ce4:	3f 92       	push	r3
    4ce6:	4f 92       	push	r4
    4ce8:	5f 92       	push	r5
    4cea:	6f 92       	push	r6
    4cec:	7f 92       	push	r7
    4cee:	8f 92       	push	r8
    4cf0:	9f 92       	push	r9
    4cf2:	af 92       	push	r10
    4cf4:	bf 92       	push	r11
    4cf6:	cf 92       	push	r12
    4cf8:	df 92       	push	r13
    4cfa:	ef 92       	push	r14
    4cfc:	ff 92       	push	r15
    4cfe:	0f 93       	push	r16
    4d00:	1f 93       	push	r17
    4d02:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4d04:	c0 80       	ld	r12, Z
    4d06:	d1 80       	ldd	r13, Z+1	; 0x01
    4d08:	e2 80       	ldd	r14, Z+2	; 0x02
    4d0a:	f3 80       	ldd	r15, Z+3	; 0x03
    4d0c:	c1 14       	cp	r12, r1
    4d0e:	d1 04       	cpc	r13, r1
    4d10:	e1 04       	cpc	r14, r1
    4d12:	f1 04       	cpc	r15, r1
    4d14:	b9 f1       	breq	.+110    	; 0x4d84 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4d16:	84 81       	ldd	r24, Z+4	; 0x04
    4d18:	95 81       	ldd	r25, Z+5	; 0x05
    4d1a:	a6 81       	ldd	r26, Z+6	; 0x06
    4d1c:	b7 81       	ldd	r27, Z+7	; 0x07
    4d1e:	1c 01       	movw	r2, r24
    4d20:	2d 01       	movw	r4, r26
    4d22:	61 2c       	mov	r6, r1
    4d24:	71 2c       	mov	r7, r1
    4d26:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4d28:	e0 e0       	ldi	r30, 0x00	; 0
    4d2a:	8e 2f       	mov	r24, r30
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	a0 e0       	ldi	r26, 0x00	; 0
    4d30:	b0 e0       	ldi	r27, 0x00	; 0
    4d32:	8c 15       	cp	r24, r12
    4d34:	9d 05       	cpc	r25, r13
    4d36:	ae 05       	cpc	r26, r14
    4d38:	bf 05       	cpc	r27, r15
    4d3a:	88 f4       	brcc	.+34     	; 0x4d5e <_nrk_time_to_ticks_long+0x7c>
    4d3c:	91 01       	movw	r18, r2
    4d3e:	a2 01       	movw	r20, r4
    4d40:	b3 01       	movw	r22, r6
    4d42:	c4 01       	movw	r24, r8
    4d44:	36 53       	subi	r19, 0x36	; 54
    4d46:	45 46       	sbci	r20, 0x65	; 101
    4d48:	54 4c       	sbci	r21, 0xC4	; 196
    4d4a:	6f 4f       	sbci	r22, 0xFF	; 255
    4d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d50:	9f 4f       	sbci	r25, 0xFF	; 255
    4d52:	19 01       	movw	r2, r18
    4d54:	2a 01       	movw	r4, r20
    4d56:	3b 01       	movw	r6, r22
    4d58:	4c 01       	movw	r8, r24
    4d5a:	ef 5f       	subi	r30, 0xFF	; 255
    4d5c:	e6 cf       	rjmp	.-52     	; 0x4d2a <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4d5e:	83 eb       	ldi	r24, 0xB3	; 179
    4d60:	a8 2e       	mov	r10, r24
    4d62:	96 ee       	ldi	r25, 0xE6	; 230
    4d64:	b9 2e       	mov	r11, r25
    4d66:	2e e0       	ldi	r18, 0x0E	; 14
    4d68:	c2 2e       	mov	r12, r18
    4d6a:	d1 2c       	mov	r13, r1
    4d6c:	e1 2c       	mov	r14, r1
    4d6e:	f1 2c       	mov	r15, r1
    4d70:	00 e0       	ldi	r16, 0x00	; 0
    4d72:	10 e0       	ldi	r17, 0x00	; 0
    4d74:	91 01       	movw	r18, r2
    4d76:	a2 01       	movw	r20, r4
    4d78:	b3 01       	movw	r22, r6
    4d7a:	c4 01       	movw	r24, r8
    4d7c:	0e 94 4b 31 	call	0x6296	; 0x6296 <__udivdi3>
    4d80:	ca 01       	movw	r24, r20
    4d82:	0b c0       	rjmp	.+22     	; 0x4d9a <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4d84:	64 81       	ldd	r22, Z+4	; 0x04
    4d86:	75 81       	ldd	r23, Z+5	; 0x05
    4d88:	86 81       	ldd	r24, Z+6	; 0x06
    4d8a:	97 81       	ldd	r25, Z+7	; 0x07
    4d8c:	23 eb       	ldi	r18, 0xB3	; 179
    4d8e:	36 ee       	ldi	r19, 0xE6	; 230
    4d90:	4e e0       	ldi	r20, 0x0E	; 14
    4d92:	50 e0       	ldi	r21, 0x00	; 0
    4d94:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    4d98:	ca 01       	movw	r24, r20
}
return ticks;
}
    4d9a:	b9 01       	movw	r22, r18
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	ff 90       	pop	r15
    4da2:	ef 90       	pop	r14
    4da4:	df 90       	pop	r13
    4da6:	cf 90       	pop	r12
    4da8:	bf 90       	pop	r11
    4daa:	af 90       	pop	r10
    4dac:	9f 90       	pop	r9
    4dae:	8f 90       	pop	r8
    4db0:	7f 90       	pop	r7
    4db2:	6f 90       	pop	r6
    4db4:	5f 90       	pop	r5
    4db6:	4f 90       	pop	r4
    4db8:	3f 90       	pop	r3
    4dba:	2f 90       	pop	r2
    4dbc:	08 95       	ret

00004dbe <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4dbe:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4dc0:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4dc2:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4dc6:	0e 94 94 2b 	call	0x5728	; 0x5728 <_nrk_get_next_wakeup>
    4dca:	84 30       	cpi	r24, 0x04	; 4
    4dcc:	28 f4       	brcc	.+10     	; 0x4dd8 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4dce:	d0 93 25 09 	sts	0x0925, r29
	    nrk_idle();
    4dd2:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <nrk_idle>
    4dd6:	08 c0       	rjmp	.+16     	; 0x4de8 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    4dd8:	8a e0       	ldi	r24, 0x0A	; 10
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 ac 2a 	call	0x5558	; 0x5558 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4de0:	c0 93 25 09 	sts	0x0925, r28
	    nrk_sleep();
    4de4:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4de8:	80 91 52 06 	lds	r24, 0x0652
    4dec:	85 35       	cpi	r24, 0x55	; 85
    4dee:	19 f0       	breq	.+6      	; 0x4df6 <nrk_idle_task+0x38>
    4df0:	88 e0       	ldi	r24, 0x08	; 8
    4df2:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4df6:	80 91 7e 41 	lds	r24, 0x417E
    4dfa:	85 35       	cpi	r24, 0x55	; 85
    4dfc:	11 f3       	breq	.-60     	; 0x4dc2 <nrk_idle_task+0x4>
    4dfe:	88 e0       	ldi	r24, 0x08	; 8
    4e00:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
    4e04:	de cf       	rjmp	.-68     	; 0x4dc2 <nrk_idle_task+0x4>

00004e06 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4e06:	2f 92       	push	r2
    4e08:	3f 92       	push	r3
    4e0a:	4f 92       	push	r4
    4e0c:	5f 92       	push	r5
    4e0e:	6f 92       	push	r6
    4e10:	7f 92       	push	r7
    4e12:	8f 92       	push	r8
    4e14:	9f 92       	push	r9
    4e16:	af 92       	push	r10
    4e18:	bf 92       	push	r11
    4e1a:	cf 92       	push	r12
    4e1c:	df 92       	push	r13
    4e1e:	ef 92       	push	r14
    4e20:	ff 92       	push	r15
    4e22:	0f 93       	push	r16
    4e24:	1f 93       	push	r17
    4e26:	cf 93       	push	r28
    4e28:	df 93       	push	r29
    4e2a:	00 d0       	rcall	.+0      	; 0x4e2c <_nrk_scheduler+0x26>
    4e2c:	1f 92       	push	r1
    4e2e:	cd b7       	in	r28, 0x3d	; 61
    4e30:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4e32:	0e 94 c8 2a 	call	0x5590	; 0x5590 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4e36:	0e 94 bf 19 	call	0x337e	; 0x337e <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    4e3a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4e3e:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <_nrk_high_speed_timer_get>
    4e42:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4e44:	8a ef       	ldi	r24, 0xFA	; 250
    4e46:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4e4a:	a0 91 cb 07 	lds	r26, 0x07CB
    4e4e:	b0 e0       	ldi	r27, 0x00	; 0
    4e50:	23 eb       	ldi	r18, 0xB3	; 179
    4e52:	36 ee       	ldi	r19, 0xE6	; 230
    4e54:	4e e0       	ldi	r20, 0x0E	; 14
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    4e5c:	00 91 2c 09 	lds	r16, 0x092C
    4e60:	10 91 2d 09 	lds	r17, 0x092D
    4e64:	20 91 2e 09 	lds	r18, 0x092E
    4e68:	30 91 2f 09 	lds	r19, 0x092F
    4e6c:	6b 01       	movw	r12, r22
    4e6e:	7c 01       	movw	r14, r24
    4e70:	c0 0e       	add	r12, r16
    4e72:	d1 1e       	adc	r13, r17
    4e74:	e2 1e       	adc	r14, r18
    4e76:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4e78:	c7 01       	movw	r24, r14
    4e7a:	b6 01       	movw	r22, r12
    4e7c:	23 eb       	ldi	r18, 0xB3	; 179
    4e7e:	36 ee       	ldi	r19, 0xE6	; 230
    4e80:	4e e0       	ldi	r20, 0x0E	; 14
    4e82:	50 e0       	ldi	r21, 0x00	; 0
    4e84:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    4e88:	26 01       	movw	r4, r12
    4e8a:	37 01       	movw	r6, r14
    4e8c:	46 1a       	sub	r4, r22
    4e8e:	57 0a       	sbc	r5, r23
    4e90:	68 0a       	sbc	r6, r24
    4e92:	79 0a       	sbc	r7, r25
    4e94:	d3 01       	movw	r26, r6
    4e96:	c2 01       	movw	r24, r4
    4e98:	00 91 28 09 	lds	r16, 0x0928
    4e9c:	10 91 29 09 	lds	r17, 0x0929
    4ea0:	20 91 2a 09 	lds	r18, 0x092A
    4ea4:	30 91 2b 09 	lds	r19, 0x092B

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4ea8:	43 eb       	ldi	r20, 0xB3	; 179
    4eaa:	84 2e       	mov	r8, r20
    4eac:	46 ee       	ldi	r20, 0xE6	; 230
    4eae:	94 2e       	mov	r9, r20
    4eb0:	4e e0       	ldi	r20, 0x0E	; 14
    4eb2:	a4 2e       	mov	r10, r20
    4eb4:	b1 2c       	mov	r11, r1
    4eb6:	68 01       	movw	r12, r16
    4eb8:	79 01       	movw	r14, r18
    4eba:	4f ef       	ldi	r20, 0xFF	; 255
    4ebc:	c4 1a       	sub	r12, r20
    4ebe:	d4 0a       	sbc	r13, r20
    4ec0:	e4 0a       	sbc	r14, r20
    4ec2:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4ec4:	81 15       	cp	r24, r1
    4ec6:	5a ec       	ldi	r21, 0xCA	; 202
    4ec8:	95 07       	cpc	r25, r21
    4eca:	5a e9       	ldi	r21, 0x9A	; 154
    4ecc:	a5 07       	cpc	r26, r21
    4ece:	5b e3       	ldi	r21, 0x3B	; 59
    4ed0:	b5 07       	cpc	r27, r21
    4ed2:	c8 f0       	brcs	.+50     	; 0x4f06 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4ed4:	2c 01       	movw	r4, r24
    4ed6:	3d 01       	movw	r6, r26
    4ed8:	2a ec       	ldi	r18, 0xCA	; 202
    4eda:	52 1a       	sub	r5, r18
    4edc:	2a e9       	ldi	r18, 0x9A	; 154
    4ede:	62 0a       	sbc	r6, r18
    4ee0:	2b e3       	ldi	r18, 0x3B	; 59
    4ee2:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4ee4:	c3 01       	movw	r24, r6
    4ee6:	b2 01       	movw	r22, r4
    4ee8:	a5 01       	movw	r20, r10
    4eea:	94 01       	movw	r18, r8
    4eec:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    4ef0:	a3 01       	movw	r20, r6
    4ef2:	92 01       	movw	r18, r4
    4ef4:	26 1b       	sub	r18, r22
    4ef6:	37 0b       	sbc	r19, r23
    4ef8:	48 0b       	sbc	r20, r24
    4efa:	59 0b       	sbc	r21, r25
    4efc:	da 01       	movw	r26, r20
    4efe:	c9 01       	movw	r24, r18
    4f00:	97 01       	movw	r18, r14
    4f02:	86 01       	movw	r16, r12
    4f04:	d8 cf       	rjmp	.-80     	; 0x4eb6 <_nrk_scheduler+0xb0>
    4f06:	80 93 2c 09 	sts	0x092C, r24
    4f0a:	90 93 2d 09 	sts	0x092D, r25
    4f0e:	a0 93 2e 09 	sts	0x092E, r26
    4f12:	b0 93 2f 09 	sts	0x092F, r27
    4f16:	00 93 28 09 	sts	0x0928, r16
    4f1a:	10 93 29 09 	sts	0x0929, r17
    4f1e:	20 93 2a 09 	sts	0x092A, r18
    4f22:	30 93 2b 09 	sts	0x092B, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4f26:	e0 91 31 09 	lds	r30, 0x0931
    4f2a:	f0 91 32 09 	lds	r31, 0x0932
    4f2e:	85 81       	ldd	r24, Z+5	; 0x05
    4f30:	88 23       	and	r24, r24
    4f32:	39 f1       	breq	.+78     	; 0x4f82 <_nrk_scheduler+0x17c>
    4f34:	81 85       	ldd	r24, Z+9	; 0x09
    4f36:	84 30       	cpi	r24, 0x04	; 4
    4f38:	21 f1       	breq	.+72     	; 0x4f82 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4f3a:	87 81       	ldd	r24, Z+7	; 0x07
    4f3c:	82 30       	cpi	r24, 0x02	; 2
    4f3e:	29 f0       	breq	.+10     	; 0x4f4a <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4f40:	88 23       	and	r24, r24
    4f42:	41 f0       	breq	.+16     	; 0x4f54 <_nrk_scheduler+0x14e>
    4f44:	86 81       	ldd	r24, Z+6	; 0x06
    4f46:	81 11       	cpse	r24, r1
    4f48:	02 c0       	rjmp	.+4      	; 0x4f4e <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4f4a:	85 e0       	ldi	r24, 0x05	; 5
    4f4c:	01 c0       	rjmp	.+2      	; 0x4f50 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4f4e:	83 e0       	ldi	r24, 0x03	; 3
    4f50:	81 87       	std	Z+9, r24	; 0x09
    4f52:	14 c0       	rjmp	.+40     	; 0x4f7c <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4f54:	83 e0       	ldi	r24, 0x03	; 3
    4f56:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4f58:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4f5a:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4f5c:	85 89       	ldd	r24, Z+21	; 0x15
    4f5e:	96 89       	ldd	r25, Z+22	; 0x16
    4f60:	a7 89       	ldd	r26, Z+23	; 0x17
    4f62:	b0 8d       	ldd	r27, Z+24	; 0x18
    4f64:	89 2b       	or	r24, r25
    4f66:	8a 2b       	or	r24, r26
    4f68:	8b 2b       	or	r24, r27
    4f6a:	41 f4       	brne	.+16     	; 0x4f7c <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4f6c:	81 8d       	ldd	r24, Z+25	; 0x19
    4f6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4f70:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4f72:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4f74:	85 8b       	std	Z+21, r24	; 0x15
    4f76:	96 8b       	std	Z+22, r25	; 0x16
    4f78:	a7 8b       	std	Z+23, r26	; 0x17
    4f7a:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4f7c:	80 85       	ldd	r24, Z+8	; 0x08
    4f7e:	0e 94 c4 21 	call	0x4388	; 0x4388 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4f82:	e0 91 31 09 	lds	r30, 0x0931
    4f86:	f0 91 32 09 	lds	r31, 0x0932
    4f8a:	85 a1       	ldd	r24, Z+37	; 0x25
    4f8c:	96 a1       	ldd	r25, Z+38	; 0x26
    4f8e:	a7 a1       	ldd	r26, Z+39	; 0x27
    4f90:	b0 a5       	ldd	r27, Z+40	; 0x28
    4f92:	89 2b       	or	r24, r25
    4f94:	8a 2b       	or	r24, r26
    4f96:	8b 2b       	or	r24, r27
    4f98:	09 f4       	brne	.+2      	; 0x4f9c <_nrk_scheduler+0x196>
    4f9a:	44 c0       	rjmp	.+136    	; 0x5024 <_nrk_scheduler+0x21e>
    4f9c:	20 85       	ldd	r18, Z+8	; 0x08
    4f9e:	22 23       	and	r18, r18
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <_nrk_scheduler+0x19e>
    4fa2:	40 c0       	rjmp	.+128    	; 0x5024 <_nrk_scheduler+0x21e>
    4fa4:	81 85       	ldd	r24, Z+9	; 0x09
    4fa6:	84 30       	cpi	r24, 0x04	; 4
    4fa8:	e9 f1       	breq	.+122    	; 0x5024 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4faa:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fac:	96 8d       	ldd	r25, Z+30	; 0x1e
    4fae:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4fb0:	b0 a1       	ldd	r27, Z+32	; 0x20
    4fb2:	40 91 cb 07 	lds	r20, 0x07CB
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	60 e0       	ldi	r22, 0x00	; 0
    4fba:	70 e0       	ldi	r23, 0x00	; 0
    4fbc:	84 17       	cp	r24, r20
    4fbe:	95 07       	cpc	r25, r21
    4fc0:	a6 07       	cpc	r26, r22
    4fc2:	b7 07       	cpc	r27, r23
    4fc4:	68 f4       	brcc	.+26     	; 0x4fe0 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4fc6:	62 2f       	mov	r22, r18
    4fc8:	82 e0       	ldi	r24, 0x02	; 2
    4fca:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4fce:	e0 91 31 09 	lds	r30, 0x0931
    4fd2:	f0 91 32 09 	lds	r31, 0x0932
    4fd6:	15 8e       	std	Z+29, r1	; 0x1d
    4fd8:	16 8e       	std	Z+30, r1	; 0x1e
    4fda:	17 8e       	std	Z+31, r1	; 0x1f
    4fdc:	10 a2       	std	Z+32, r1	; 0x20
    4fde:	08 c0       	rjmp	.+16     	; 0x4ff0 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4fe0:	84 1b       	sub	r24, r20
    4fe2:	95 0b       	sbc	r25, r21
    4fe4:	a6 0b       	sbc	r26, r22
    4fe6:	b7 0b       	sbc	r27, r23
    4fe8:	85 8f       	std	Z+29, r24	; 0x1d
    4fea:	96 8f       	std	Z+30, r25	; 0x1e
    4fec:	a7 8f       	std	Z+31, r26	; 0x1f
    4fee:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4ff0:	e0 91 31 09 	lds	r30, 0x0931
    4ff4:	f0 91 32 09 	lds	r31, 0x0932
    4ff8:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4ffa:	85 8d       	ldd	r24, Z+29	; 0x1d
    4ffc:	96 8d       	ldd	r25, Z+30	; 0x1e
    4ffe:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5000:	b0 a1       	ldd	r27, Z+32	; 0x20
    5002:	89 2b       	or	r24, r25
    5004:	8a 2b       	or	r24, r26
    5006:	8b 2b       	or	r24, r27
    5008:	69 f4       	brne	.+26     	; 0x5024 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    500a:	61 2f       	mov	r22, r17
    500c:	83 e0       	ldi	r24, 0x03	; 3
    500e:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5012:	e0 91 31 09 	lds	r30, 0x0931
    5016:	f0 91 32 09 	lds	r31, 0x0932
    501a:	83 e0       	ldi	r24, 0x03	; 3
    501c:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    501e:	81 2f       	mov	r24, r17
    5020:	0e 94 c4 21 	call	0x4388	; 0x4388 <nrk_rem_from_readyQ>
    5024:	85 e7       	ldi	r24, 0x75	; 117
    5026:	98 e0       	ldi	r25, 0x08	; 8
    5028:	9b 83       	std	Y+3, r25	; 0x03
    502a:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    502c:	00 e6       	ldi	r16, 0x60	; 96
    502e:	1a ee       	ldi	r17, 0xEA	; 234
    5030:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5032:	2a ef       	ldi	r18, 0xFA	; 250
    5034:	c2 2e       	mov	r12, r18
    5036:	d1 2c       	mov	r13, r1
    5038:	e1 2c       	mov	r14, r1
    503a:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    503c:	81 2c       	mov	r8, r1
    503e:	91 2c       	mov	r9, r1
    5040:	54 01       	movw	r10, r8
    5042:	83 94       	inc	r8
    5044:	ea 81       	ldd	r30, Y+2	; 0x02
    5046:	fb 81       	ldd	r31, Y+3	; 0x03
    5048:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    504a:	80 81       	ld	r24, Z
    504c:	8f 3f       	cpi	r24, 0xFF	; 255
    504e:	09 f4       	brne	.+2      	; 0x5052 <_nrk_scheduler+0x24c>
    5050:	04 c1       	rjmp	.+520    	; 0x525a <_nrk_scheduler+0x454>
    5052:	ea 81       	ldd	r30, Y+2	; 0x02
    5054:	fb 81       	ldd	r31, Y+3	; 0x03
    5056:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    5058:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    505a:	88 23       	and	r24, r24
    505c:	09 f4       	brne	.+2      	; 0x5060 <_nrk_scheduler+0x25a>
    505e:	67 c0       	rjmp	.+206    	; 0x512e <_nrk_scheduler+0x328>
    5060:	ea 81       	ldd	r30, Y+2	; 0x02
    5062:	fb 81       	ldd	r31, Y+3	; 0x03
    5064:	80 81       	ld	r24, Z
    5066:	84 30       	cpi	r24, 0x04	; 4
    5068:	09 f4       	brne	.+2      	; 0x506c <_nrk_scheduler+0x266>
    506a:	61 c0       	rjmp	.+194    	; 0x512e <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    506c:	44 84       	ldd	r4, Z+12	; 0x0c
    506e:	55 84       	ldd	r5, Z+13	; 0x0d
    5070:	66 84       	ldd	r6, Z+14	; 0x0e
    5072:	77 84       	ldd	r7, Z+15	; 0x0f
    5074:	60 91 cb 07 	lds	r22, 0x07CB
    5078:	70 e0       	ldi	r23, 0x00	; 0
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	46 16       	cp	r4, r22
    5080:	57 06       	cpc	r5, r23
    5082:	68 06       	cpc	r6, r24
    5084:	79 06       	cpc	r7, r25
    5086:	48 f0       	brcs	.+18     	; 0x509a <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    5088:	46 1a       	sub	r4, r22
    508a:	57 0a       	sbc	r5, r23
    508c:	68 0a       	sbc	r6, r24
    508e:	79 0a       	sbc	r7, r25
    5090:	44 86       	std	Z+12, r4	; 0x0c
    5092:	55 86       	std	Z+13, r5	; 0x0d
    5094:	66 86       	std	Z+14, r6	; 0x0e
    5096:	77 86       	std	Z+15, r7	; 0x0f
    5098:	06 c0       	rjmp	.+12     	; 0x50a6 <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    509a:	ea 81       	ldd	r30, Y+2	; 0x02
    509c:	fb 81       	ldd	r31, Y+3	; 0x03
    509e:	14 86       	std	Z+12, r1	; 0x0c
    50a0:	15 86       	std	Z+13, r1	; 0x0d
    50a2:	16 86       	std	Z+14, r1	; 0x0e
    50a4:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    50a6:	ea 81       	ldd	r30, Y+2	; 0x02
    50a8:	fb 81       	ldd	r31, Y+3	; 0x03
    50aa:	40 88       	ldd	r4, Z+16	; 0x10
    50ac:	51 88       	ldd	r5, Z+17	; 0x11
    50ae:	62 88       	ldd	r6, Z+18	; 0x12
    50b0:	73 88       	ldd	r7, Z+19	; 0x13
    50b2:	46 16       	cp	r4, r22
    50b4:	57 06       	cpc	r5, r23
    50b6:	68 06       	cpc	r6, r24
    50b8:	79 06       	cpc	r7, r25
    50ba:	48 f0       	brcs	.+18     	; 0x50ce <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    50bc:	46 1a       	sub	r4, r22
    50be:	57 0a       	sbc	r5, r23
    50c0:	68 0a       	sbc	r6, r24
    50c2:	79 0a       	sbc	r7, r25
    50c4:	40 8a       	std	Z+16, r4	; 0x10
    50c6:	51 8a       	std	Z+17, r5	; 0x11
    50c8:	62 8a       	std	Z+18, r6	; 0x12
    50ca:	73 8a       	std	Z+19, r7	; 0x13
    50cc:	1e c0       	rjmp	.+60     	; 0x510a <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    50ce:	ea 81       	ldd	r30, Y+2	; 0x02
    50d0:	fb 81       	ldd	r31, Y+3	; 0x03
    50d2:	20 8d       	ldd	r18, Z+24	; 0x18
    50d4:	31 8d       	ldd	r19, Z+25	; 0x19
    50d6:	42 8d       	ldd	r20, Z+26	; 0x1a
    50d8:	53 8d       	ldd	r21, Z+27	; 0x1b
    50da:	62 17       	cp	r22, r18
    50dc:	73 07       	cpc	r23, r19
    50de:	84 07       	cpc	r24, r20
    50e0:	95 07       	cpc	r25, r21
    50e2:	58 f4       	brcc	.+22     	; 0x50fa <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    50e4:	29 01       	movw	r4, r18
    50e6:	3a 01       	movw	r6, r20
    50e8:	46 1a       	sub	r4, r22
    50ea:	57 0a       	sbc	r5, r23
    50ec:	68 0a       	sbc	r6, r24
    50ee:	79 0a       	sbc	r7, r25
    50f0:	40 8a       	std	Z+16, r4	; 0x10
    50f2:	51 8a       	std	Z+17, r5	; 0x11
    50f4:	62 8a       	std	Z+18, r6	; 0x12
    50f6:	73 8a       	std	Z+19, r7	; 0x13
    50f8:	08 c0       	rjmp	.+16     	; 0x510a <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    50fa:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    50fe:	ea 81       	ldd	r30, Y+2	; 0x02
    5100:	fb 81       	ldd	r31, Y+3	; 0x03
    5102:	60 8b       	std	Z+16, r22	; 0x10
    5104:	71 8b       	std	Z+17, r23	; 0x11
    5106:	82 8b       	std	Z+18, r24	; 0x12
    5108:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    510a:	ea 81       	ldd	r30, Y+2	; 0x02
    510c:	fb 81       	ldd	r31, Y+3	; 0x03
    510e:	80 89       	ldd	r24, Z+16	; 0x10
    5110:	91 89       	ldd	r25, Z+17	; 0x11
    5112:	a2 89       	ldd	r26, Z+18	; 0x12
    5114:	b3 89       	ldd	r27, Z+19	; 0x13
    5116:	89 2b       	or	r24, r25
    5118:	8a 2b       	or	r24, r26
    511a:	8b 2b       	or	r24, r27
    511c:	41 f4       	brne	.+16     	; 0x512e <_nrk_scheduler+0x328>
    511e:	80 8d       	ldd	r24, Z+24	; 0x18
    5120:	91 8d       	ldd	r25, Z+25	; 0x19
    5122:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5124:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5126:	80 8b       	std	Z+16, r24	; 0x10
    5128:	91 8b       	std	Z+17, r25	; 0x11
    512a:	a2 8b       	std	Z+18, r26	; 0x12
    512c:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    512e:	ea 81       	ldd	r30, Y+2	; 0x02
    5130:	fb 81       	ldd	r31, Y+3	; 0x03
    5132:	80 81       	ld	r24, Z
    5134:	83 30       	cpi	r24, 0x03	; 3
    5136:	09 f0       	breq	.+2      	; 0x513a <_nrk_scheduler+0x334>
    5138:	90 c0       	rjmp	.+288    	; 0x525a <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    513a:	84 85       	ldd	r24, Z+12	; 0x0c
    513c:	95 85       	ldd	r25, Z+13	; 0x0d
    513e:	a6 85       	ldd	r26, Z+14	; 0x0e
    5140:	b7 85       	ldd	r27, Z+15	; 0x0f
    5142:	89 2b       	or	r24, r25
    5144:	8a 2b       	or	r24, r26
    5146:	8b 2b       	or	r24, r27
    5148:	09 f0       	breq	.+2      	; 0x514c <_nrk_scheduler+0x346>
    514a:	74 c0       	rjmp	.+232    	; 0x5234 <_nrk_scheduler+0x42e>
    514c:	df 01       	movw	r26, r30
    514e:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    5150:	8c 91       	ld	r24, X
    5152:	9f 01       	movw	r18, r30
    5154:	23 50       	subi	r18, 0x03	; 3
    5156:	31 09       	sbc	r19, r1
    5158:	88 23       	and	r24, r24
    515a:	a9 f0       	breq	.+42     	; 0x5186 <_nrk_scheduler+0x380>
    515c:	f9 01       	movw	r30, r18
    515e:	80 81       	ld	r24, Z
    5160:	88 23       	and	r24, r24
    5162:	89 f0       	breq	.+34     	; 0x5186 <_nrk_scheduler+0x380>
    5164:	b5 01       	movw	r22, r10
    5166:	a4 01       	movw	r20, r8
    5168:	00 90 21 09 	lds	r0, 0x0921
    516c:	04 c0       	rjmp	.+8      	; 0x5176 <_nrk_scheduler+0x370>
    516e:	44 0f       	add	r20, r20
    5170:	55 1f       	adc	r21, r21
    5172:	66 1f       	adc	r22, r22
    5174:	77 1f       	adc	r23, r23
    5176:	0a 94       	dec	r0
    5178:	d2 f7       	brpl	.-12     	; 0x516e <_nrk_scheduler+0x368>
    517a:	ea 81       	ldd	r30, Y+2	; 0x02
    517c:	fb 81       	ldd	r31, Y+3	; 0x03
    517e:	40 87       	std	Z+8, r20	; 0x08
    5180:	51 87       	std	Z+9, r21	; 0x09
    5182:	62 87       	std	Z+10, r22	; 0x0a
    5184:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    5186:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    5188:	f9 01       	movw	r30, r18
    518a:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    518c:	ea 81       	ldd	r30, Y+2	; 0x02
    518e:	fb 81       	ldd	r31, Y+3	; 0x03
    5190:	a0 a1       	ldd	r26, Z+32	; 0x20
    5192:	b1 a1       	ldd	r27, Z+33	; 0x21
    5194:	a1 30       	cpi	r26, 0x01	; 1
    5196:	b1 05       	cpc	r27, r1
    5198:	19 f5       	brne	.+70     	; 0x51e0 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    519a:	84 8d       	ldd	r24, Z+28	; 0x1c
    519c:	95 8d       	ldd	r25, Z+29	; 0x1d
    519e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    51a0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    51a2:	84 8b       	std	Z+20, r24	; 0x14
    51a4:	95 8b       	std	Z+21, r25	; 0x15
    51a6:	a6 8b       	std	Z+22, r26	; 0x16
    51a8:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    51aa:	92 e0       	ldi	r25, 0x02	; 2
    51ac:	49 2e       	mov	r4, r25
    51ae:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    51b0:	80 89       	ldd	r24, Z+16	; 0x10
    51b2:	91 89       	ldd	r25, Z+17	; 0x11
    51b4:	a2 89       	ldd	r26, Z+18	; 0x12
    51b6:	b3 89       	ldd	r27, Z+19	; 0x13
    51b8:	84 87       	std	Z+12, r24	; 0x0c
    51ba:	95 87       	std	Z+13, r25	; 0x0d
    51bc:	a6 87       	std	Z+14, r26	; 0x0e
    51be:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    51c0:	80 8d       	ldd	r24, Z+24	; 0x18
    51c2:	91 8d       	ldd	r25, Z+25	; 0x19
    51c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    51c6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    51c8:	89 2b       	or	r24, r25
    51ca:	8a 2b       	or	r24, r26
    51cc:	8b 2b       	or	r24, r27
    51ce:	21 f4       	brne	.+8      	; 0x51d8 <_nrk_scheduler+0x3d2>
    51d0:	c4 86       	std	Z+12, r12	; 0x0c
    51d2:	d5 86       	std	Z+13, r13	; 0x0d
    51d4:	e6 86       	std	Z+14, r14	; 0x0e
    51d6:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    51d8:	89 81       	ldd	r24, Y+1	; 0x01
    51da:	0e 94 14 21 	call	0x4228	; 0x4228 <nrk_add_to_readyQ>
    51de:	2a c0       	rjmp	.+84     	; 0x5234 <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    51e0:	ea 81       	ldd	r30, Y+2	; 0x02
    51e2:	fb 81       	ldd	r31, Y+3	; 0x03
    51e4:	44 8d       	ldd	r20, Z+28	; 0x1c
    51e6:	55 8d       	ldd	r21, Z+29	; 0x1d
    51e8:	66 8d       	ldd	r22, Z+30	; 0x1e
    51ea:	77 8d       	ldd	r23, Z+31	; 0x1f
    51ec:	44 8b       	std	Z+20, r20	; 0x14
    51ee:	55 8b       	std	Z+21, r21	; 0x15
    51f0:	66 8b       	std	Z+22, r22	; 0x16
    51f2:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    51f4:	40 8c       	ldd	r4, Z+24	; 0x18
    51f6:	51 8c       	ldd	r5, Z+25	; 0x19
    51f8:	62 8c       	ldd	r6, Z+26	; 0x1a
    51fa:	73 8c       	ldd	r7, Z+27	; 0x1b
    51fc:	11 97       	sbiw	r26, 0x01	; 1
    51fe:	a3 01       	movw	r20, r6
    5200:	92 01       	movw	r18, r4
    5202:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    5206:	64 87       	std	Z+12, r22	; 0x0c
    5208:	75 87       	std	Z+13, r23	; 0x0d
    520a:	86 87       	std	Z+14, r24	; 0x0e
    520c:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    520e:	60 8b       	std	Z+16, r22	; 0x10
    5210:	71 8b       	std	Z+17, r23	; 0x11
    5212:	82 8b       	std	Z+18, r24	; 0x12
    5214:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5216:	45 28       	or	r4, r5
    5218:	46 28       	or	r4, r6
    521a:	47 28       	or	r4, r7
    521c:	21 f4       	brne	.+8      	; 0x5226 <_nrk_scheduler+0x420>
    521e:	c4 86       	std	Z+12, r12	; 0x0c
    5220:	d5 86       	std	Z+13, r13	; 0x0d
    5222:	e6 86       	std	Z+14, r14	; 0x0e
    5224:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    5226:	44 24       	eor	r4, r4
    5228:	43 94       	inc	r4
    522a:	51 2c       	mov	r5, r1
    522c:	ea 81       	ldd	r30, Y+2	; 0x02
    522e:	fb 81       	ldd	r31, Y+3	; 0x03
    5230:	51 a2       	std	Z+33, r5	; 0x21
    5232:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    5234:	ea 81       	ldd	r30, Y+2	; 0x02
    5236:	fb 81       	ldd	r31, Y+3	; 0x03
    5238:	84 85       	ldd	r24, Z+12	; 0x0c
    523a:	95 85       	ldd	r25, Z+13	; 0x0d
    523c:	a6 85       	ldd	r26, Z+14	; 0x0e
    523e:	b7 85       	ldd	r27, Z+15	; 0x0f
    5240:	00 97       	sbiw	r24, 0x00	; 0
    5242:	a1 05       	cpc	r26, r1
    5244:	b1 05       	cpc	r27, r1
    5246:	49 f0       	breq	.+18     	; 0x525a <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    5248:	a8 01       	movw	r20, r16
    524a:	60 e0       	ldi	r22, 0x00	; 0
    524c:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    524e:	84 17       	cp	r24, r20
    5250:	95 07       	cpc	r25, r21
    5252:	a6 07       	cpc	r26, r22
    5254:	b7 07       	cpc	r27, r23
    5256:	08 f4       	brcc	.+2      	; 0x525a <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    5258:	8c 01       	movw	r16, r24
    525a:	f9 81       	ldd	r31, Y+1	; 0x01
    525c:	ff 5f       	subi	r31, 0xFF	; 255
    525e:	f9 83       	std	Y+1, r31	; 0x01
    5260:	2a 81       	ldd	r18, Y+2	; 0x02
    5262:	3b 81       	ldd	r19, Y+3	; 0x03
    5264:	25 5d       	subi	r18, 0xD5	; 213
    5266:	3f 4f       	sbci	r19, 0xFF	; 255
    5268:	3b 83       	std	Y+3, r19	; 0x03
    526a:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    526c:	f4 30       	cpi	r31, 0x04	; 4
    526e:	09 f0       	breq	.+2      	; 0x5272 <_nrk_scheduler+0x46c>
    5270:	e9 ce       	rjmp	.-558    	; 0x5044 <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    5272:	0e 94 03 21 	call	0x4206	; 0x4206 <nrk_get_high_ready_task_ID>
    5276:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    5278:	3b e2       	ldi	r19, 0x2B	; 43
    527a:	83 02       	muls	r24, r19
    527c:	f0 01       	movw	r30, r0
    527e:	11 24       	eor	r1, r1
    5280:	e4 59       	subi	r30, 0x94	; 148
    5282:	f7 4f       	sbci	r31, 0xF7	; 247
    5284:	22 85       	ldd	r18, Z+10	; 0x0a
    5286:	20 93 33 09 	sts	0x0933, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    528a:	f0 93 23 09 	sts	0x0923, r31
    528e:	e0 93 22 09 	sts	0x0922, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    5292:	88 23       	and	r24, r24
    5294:	f9 f0       	breq	.+62     	; 0x52d4 <_nrk_scheduler+0x4ce>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    5296:	85 a1       	ldd	r24, Z+37	; 0x25
    5298:	96 a1       	ldd	r25, Z+38	; 0x26
    529a:	a7 a1       	ldd	r26, Z+39	; 0x27
    529c:	b0 a5       	ldd	r27, Z+40	; 0x28
    529e:	89 2b       	or	r24, r25
    52a0:	8a 2b       	or	r24, r26
    52a2:	8b 2b       	or	r24, r27
    52a4:	99 f0       	breq	.+38     	; 0x52cc <_nrk_scheduler+0x4c6>
    52a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    52a8:	96 8d       	ldd	r25, Z+30	; 0x1e
    52aa:	a7 8d       	ldd	r26, Z+31	; 0x1f
    52ac:	b0 a1       	ldd	r27, Z+32	; 0x20
    52ae:	8a 3f       	cpi	r24, 0xFA	; 250
    52b0:	91 05       	cpc	r25, r1
    52b2:	a1 05       	cpc	r26, r1
    52b4:	b1 05       	cpc	r27, r1
    52b6:	50 f4       	brcc	.+20     	; 0x52cc <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    52b8:	a8 01       	movw	r20, r16
    52ba:	60 e0       	ldi	r22, 0x00	; 0
    52bc:	70 e0       	ldi	r23, 0x00	; 0
    52be:	84 17       	cp	r24, r20
    52c0:	95 07       	cpc	r25, r21
    52c2:	a6 07       	cpc	r26, r22
    52c4:	b7 07       	cpc	r27, r23
    52c6:	e8 f4       	brcc	.+58     	; 0x5302 <_nrk_scheduler+0x4fc>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    52c8:	8c 01       	movw	r16, r24
    52ca:	1b c0       	rjmp	.+54     	; 0x5302 <_nrk_scheduler+0x4fc>
    52cc:	0b 3f       	cpi	r16, 0xFB	; 251
    52ce:	11 05       	cpc	r17, r1
    52d0:	c0 f0       	brcs	.+48     	; 0x5302 <_nrk_scheduler+0x4fc>
    52d2:	12 c0       	rjmp	.+36     	; 0x52f8 <_nrk_scheduler+0x4f2>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    52d4:	04 30       	cpi	r16, 0x04	; 4
    52d6:	11 05       	cpc	r17, r1
    52d8:	a0 f0       	brcs	.+40     	; 0x5302 <_nrk_scheduler+0x4fc>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    52da:	c8 01       	movw	r24, r16
    52dc:	03 97       	sbiw	r24, 0x03	; 3
    52de:	8a 3f       	cpi	r24, 0xFA	; 250
    52e0:	91 05       	cpc	r25, r1
    52e2:	38 f4       	brcc	.+14     	; 0x52f2 <_nrk_scheduler+0x4ec>
    52e4:	8c 01       	movw	r16, r24
    52e6:	82 30       	cpi	r24, 0x02	; 2
    52e8:	91 05       	cpc	r25, r1
    52ea:	58 f4       	brcc	.+22     	; 0x5302 <_nrk_scheduler+0x4fc>
    52ec:	02 e0       	ldi	r16, 0x02	; 2
    52ee:	10 e0       	ldi	r17, 0x00	; 0
    52f0:	08 c0       	rjmp	.+16     	; 0x5302 <_nrk_scheduler+0x4fc>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    52f2:	0d 3f       	cpi	r16, 0xFD	; 253
    52f4:	11 05       	cpc	r17, r1
    52f6:	19 f0       	breq	.+6      	; 0x52fe <_nrk_scheduler+0x4f8>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    52f8:	0a ef       	ldi	r16, 0xFA	; 250
    52fa:	10 e0       	ldi	r17, 0x00	; 0
    52fc:	02 c0       	rjmp	.+4      	; 0x5302 <_nrk_scheduler+0x4fc>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    52fe:	07 ef       	ldi	r16, 0xF7	; 247
    5300:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    5302:	20 93 24 09 	sts	0x0924, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    5306:	f0 93 32 09 	sts	0x0932, r31
    530a:	e0 93 31 09 	sts	0x0931, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    530e:	00 93 cb 07 	sts	0x07CB, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    5312:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    5316:	28 2f       	mov	r18, r24
    5318:	30 e0       	ldi	r19, 0x00	; 0
    531a:	2f 5f       	subi	r18, 0xFF	; 255
    531c:	3f 4f       	sbci	r19, 0xFF	; 255
    531e:	20 17       	cp	r18, r16
    5320:	31 07       	cpc	r19, r17
    5322:	40 f0       	brcs	.+16     	; 0x5334 <_nrk_scheduler+0x52e>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    5324:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_nrk_os_timer_get>
    5328:	08 2f       	mov	r16, r24
    532a:	10 e0       	ldi	r17, 0x00	; 0
    532c:	0e 5f       	subi	r16, 0xFE	; 254
    532e:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    5330:	00 93 cb 07 	sts	0x07CB, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    5334:	f1 10       	cpse	r15, r1
    5336:	10 92 25 09 	sts	0x0925, r1

    _nrk_set_next_wakeup(next_wake);
    533a:	80 2f       	mov	r24, r16
    533c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    5340:	6c ed       	ldi	r22, 0xDC	; 220
    5342:	75 e0       	ldi	r23, 0x05	; 5
    5344:	c1 01       	movw	r24, r2
    5346:	0e 94 00 2b 	call	0x5600	; 0x5600 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    534a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    534e:	0f 90       	pop	r0
    5350:	0f 90       	pop	r0
    5352:	0f 90       	pop	r0
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	ff 90       	pop	r15
    535e:	ef 90       	pop	r14
    5360:	df 90       	pop	r13
    5362:	cf 90       	pop	r12
    5364:	bf 90       	pop	r11
    5366:	af 90       	pop	r10
    5368:	9f 90       	pop	r9
    536a:	8f 90       	pop	r8
    536c:	7f 90       	pop	r7
    536e:	6f 90       	pop	r6
    5370:	5f 90       	pop	r5
    5372:	4f 90       	pop	r4
    5374:	3f 90       	pop	r3
    5376:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    5378:	0c 94 28 2f 	jmp	0x5e50	; 0x5e50 <nrk_start_high_ready_task>

0000537c <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    537c:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    537e:	90 91 4e 09 	lds	r25, 0x094E
    5382:	92 30       	cpi	r25, 0x02	; 2
    5384:	74 f4       	brge	.+28     	; 0x53a2 <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    5386:	84 e0       	ldi	r24, 0x04	; 4
    5388:	98 02       	muls	r25, r24
    538a:	f0 01       	movw	r30, r0
    538c:	11 24       	eor	r1, r1
    538e:	e1 5b       	subi	r30, 0xB1	; 177
    5390:	f6 4f       	sbci	r31, 0xF6	; 246
    5392:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    5394:	33 83       	std	Z+3, r19	; 0x03
    5396:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    5398:	9f 5f       	subi	r25, 0xFF	; 255
    539a:	90 93 4e 09 	sts	0x094E, r25
        return NRK_OK;
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	08 95       	ret
    }
    else
        return NRK_ERROR;
    53a2:	8f ef       	ldi	r24, 0xFF	; 255
}
    53a4:	08 95       	ret

000053a6 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	cf 93       	push	r28
    53ac:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    53ae:	40 91 4e 09 	lds	r20, 0x094E
    53b2:	55 27       	eor	r21, r21
    53b4:	47 fd       	sbrc	r20, 7
    53b6:	50 95       	com	r21
    53b8:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    53ba:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    53bc:	2c 2f       	mov	r18, r28
    53be:	30 e0       	ldi	r19, 0x00	; 0
    53c0:	24 17       	cp	r18, r20
    53c2:	35 07       	cpc	r19, r21
    53c4:	8c f5       	brge	.+98     	; 0x5428 <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    53c6:	89 01       	movw	r16, r18
    53c8:	00 0f       	add	r16, r16
    53ca:	11 1f       	adc	r17, r17
    53cc:	00 0f       	add	r16, r16
    53ce:	11 1f       	adc	r17, r17
    53d0:	d8 01       	movw	r26, r16
    53d2:	a1 5b       	subi	r26, 0xB1	; 177
    53d4:	b6 4f       	sbci	r27, 0xF6	; 246
    53d6:	ec 91       	ld	r30, X
    53d8:	ff 27       	eor	r31, r31
    53da:	e7 fd       	sbrc	r30, 7
    53dc:	f0 95       	com	r31
    53de:	e8 17       	cp	r30, r24
    53e0:	f9 07       	cpc	r31, r25
    53e2:	01 f5       	brne	.+64     	; 0x5424 <nrk_open+0x7e>
    53e4:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    53e6:	f9 01       	movw	r30, r18
    53e8:	e9 5a       	subi	r30, 0xA9	; 169
    53ea:	f6 4f       	sbci	r31, 0xF6	; 246
    53ec:	80 81       	ld	r24, Z
    53ee:	81 11       	cpse	r24, r1
    53f0:	0b c0       	rjmp	.+22     	; 0x5408 <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    53f6:	12 96       	adiw	r26, 0x02	; 2
    53f8:	ed 91       	ld	r30, X+
    53fa:	fc 91       	ld	r31, X
    53fc:	13 97       	sbiw	r26, 0x03	; 3
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	40 e0       	ldi	r20, 0x00	; 0
    5402:	50 e0       	ldi	r21, 0x00	; 0
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    5408:	f8 01       	movw	r30, r16
    540a:	e1 5b       	subi	r30, 0xB1	; 177
    540c:	f6 4f       	sbci	r31, 0xF6	; 246
    540e:	02 80       	ldd	r0, Z+2	; 0x02
    5410:	f3 81       	ldd	r31, Z+3	; 0x03
    5412:	e0 2d       	mov	r30, r0
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	40 e0       	ldi	r20, 0x00	; 0
    5418:	50 e0       	ldi	r21, 0x00	; 0
    541a:	6d 2f       	mov	r22, r29
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	09 95       	icall
            return cnt;
    5420:	8c 2f       	mov	r24, r28
    5422:	03 c0       	rjmp	.+6      	; 0x542a <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    5424:	cf 5f       	subi	r28, 0xFF	; 255
    5426:	ca cf       	rjmp	.-108    	; 0x53bc <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    5428:	8f ef       	ldi	r24, 0xFF	; 255
}
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	1f 91       	pop	r17
    5430:	0f 91       	pop	r16
    5432:	08 95       	ret

00005434 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	20 91 4e 09 	lds	r18, 0x094E
    543a:	33 27       	eor	r19, r19
    543c:	27 fd       	sbrc	r18, 7
    543e:	30 95       	com	r19
    5440:	28 17       	cp	r18, r24
    5442:	39 07       	cpc	r19, r25
    5444:	84 f0       	brlt	.+32     	; 0x5466 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    5446:	88 0f       	add	r24, r24
    5448:	99 1f       	adc	r25, r25
    544a:	88 0f       	add	r24, r24
    544c:	99 1f       	adc	r25, r25
    544e:	fc 01       	movw	r30, r24
    5450:	e1 5b       	subi	r30, 0xB1	; 177
    5452:	f6 4f       	sbci	r31, 0xF6	; 246
    5454:	02 80       	ldd	r0, Z+2	; 0x02
    5456:	f3 81       	ldd	r31, Z+3	; 0x03
    5458:	e0 2d       	mov	r30, r0
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	40 e0       	ldi	r20, 0x00	; 0
    545e:	50 e0       	ldi	r21, 0x00	; 0
    5460:	60 e0       	ldi	r22, 0x00	; 0
    5462:	82 e0       	ldi	r24, 0x02	; 2
    5464:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    546c:	8f ef       	ldi	r24, 0xFF	; 255
    546e:	08 95       	ret

00005470 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    5470:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	e0 91 4e 09 	lds	r30, 0x094E
    5478:	ff 27       	eor	r31, r31
    547a:	e7 fd       	sbrc	r30, 7
    547c:	f0 95       	com	r31
    547e:	e8 17       	cp	r30, r24
    5480:	f9 07       	cpc	r31, r25
    5482:	74 f0       	brlt	.+28     	; 0x54a0 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    5484:	88 0f       	add	r24, r24
    5486:	99 1f       	adc	r25, r25
    5488:	88 0f       	add	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	fc 01       	movw	r30, r24
    548e:	e1 5b       	subi	r30, 0xB1	; 177
    5490:	f6 4f       	sbci	r31, 0xF6	; 246
    5492:	02 80       	ldd	r0, Z+2	; 0x02
    5494:	f3 81       	ldd	r31, Z+3	; 0x03
    5496:	e0 2d       	mov	r30, r0
    5498:	ab 01       	movw	r20, r22
    549a:	60 e0       	ldi	r22, 0x00	; 0
    549c:	86 e0       	ldi	r24, 0x06	; 6
    549e:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    54a6:	8f ef       	ldi	r24, 0xFF	; 255
    54a8:	08 95       	ret

000054aa <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    54aa:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	e0 91 4e 09 	lds	r30, 0x094E
    54b2:	ff 27       	eor	r31, r31
    54b4:	e7 fd       	sbrc	r30, 7
    54b6:	f0 95       	com	r31
    54b8:	e8 17       	cp	r30, r24
    54ba:	f9 07       	cpc	r31, r25
    54bc:	74 f0       	brlt	.+28     	; 0x54da <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    54be:	88 0f       	add	r24, r24
    54c0:	99 1f       	adc	r25, r25
    54c2:	88 0f       	add	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	fc 01       	movw	r30, r24
    54c8:	e1 5b       	subi	r30, 0xB1	; 177
    54ca:	f6 4f       	sbci	r31, 0xF6	; 246
    54cc:	02 80       	ldd	r0, Z+2	; 0x02
    54ce:	f3 81       	ldd	r31, Z+3	; 0x03
    54d0:	e0 2d       	mov	r30, r0
    54d2:	ab 01       	movw	r20, r22
    54d4:	60 e0       	ldi	r22, 0x00	; 0
    54d6:	85 e0       	ldi	r24, 0x05	; 5
    54d8:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    54e0:	8f ef       	ldi	r24, 0xFF	; 255
    54e2:	08 95       	ret

000054e4 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    54e4:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	e0 91 4e 09 	lds	r30, 0x094E
    54ec:	ff 27       	eor	r31, r31
    54ee:	e7 fd       	sbrc	r30, 7
    54f0:	f0 95       	com	r31
    54f2:	e8 17       	cp	r30, r24
    54f4:	f9 07       	cpc	r31, r25
    54f6:	74 f0       	brlt	.+28     	; 0x5514 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    54f8:	88 0f       	add	r24, r24
    54fa:	99 1f       	adc	r25, r25
    54fc:	88 0f       	add	r24, r24
    54fe:	99 1f       	adc	r25, r25
    5500:	fc 01       	movw	r30, r24
    5502:	e1 5b       	subi	r30, 0xB1	; 177
    5504:	f6 4f       	sbci	r31, 0xF6	; 246
    5506:	02 80       	ldd	r0, Z+2	; 0x02
    5508:	f3 81       	ldd	r31, Z+3	; 0x03
    550a:	e0 2d       	mov	r30, r0
    550c:	40 e0       	ldi	r20, 0x00	; 0
    550e:	50 e0       	ldi	r21, 0x00	; 0
    5510:	84 e0       	ldi	r24, 0x04	; 4
    5512:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5514:	81 e0       	ldi	r24, 0x01	; 1
    5516:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    551a:	8f ef       	ldi	r24, 0xFF	; 255
    551c:	08 95       	ret

0000551e <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	20 91 4e 09 	lds	r18, 0x094E
    5524:	33 27       	eor	r19, r19
    5526:	27 fd       	sbrc	r18, 7
    5528:	30 95       	com	r19
    552a:	28 17       	cp	r18, r24
    552c:	39 07       	cpc	r19, r25
    552e:	7c f0       	brlt	.+30     	; 0x554e <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    5530:	88 0f       	add	r24, r24
    5532:	99 1f       	adc	r25, r25
    5534:	88 0f       	add	r24, r24
    5536:	99 1f       	adc	r25, r25
    5538:	fc 01       	movw	r30, r24
    553a:	e1 5b       	subi	r30, 0xB1	; 177
    553c:	f6 4f       	sbci	r31, 0xF6	; 246
    553e:	02 80       	ldd	r0, Z+2	; 0x02
    5540:	f3 81       	ldd	r31, Z+3	; 0x03
    5542:	e0 2d       	mov	r30, r0
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	40 e0       	ldi	r20, 0x00	; 0
    5548:	50 e0       	ldi	r21, 0x00	; 0
    554a:	83 e0       	ldi	r24, 0x03	; 3
    554c:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	0e 94 8d 1b 	call	0x371a	; 0x371a <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    5554:	8f ef       	ldi	r24, 0xFF	; 255
    5556:	08 95       	ret

00005558 <nrk_spin_wait_us>:
	...
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	91 f7       	brne	.-28     	; 0x5558 <nrk_spin_wait_us>
    5574:	08 95       	ret

00005576 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    5576:	10 92 21 01 	sts	0x0121, r1
    557a:	08 95       	ret

0000557c <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    557c:	89 e0       	ldi	r24, 0x09	; 9
    557e:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    5582:	8d e8       	ldi	r24, 0x8D	; 141
    5584:	9c e3       	ldi	r25, 0x3C	; 60
    5586:	90 93 29 01 	sts	0x0129, r25
    558a:	80 93 28 01 	sts	0x0128, r24
    558e:	08 95       	ret

00005590 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5590:	10 92 25 01 	sts	0x0125, r1
    5594:	10 92 24 01 	sts	0x0124, r1
    5598:	08 95       	ret

0000559a <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    559a:	cf 93       	push	r28
    559c:	df 93       	push	r29
    559e:	00 d0       	rcall	.+0      	; 0x55a0 <_nrk_precision_os_timer_get+0x6>
    55a0:	cd b7       	in	r28, 0x3d	; 61
    55a2:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    55a4:	80 91 24 01 	lds	r24, 0x0124
    55a8:	90 91 25 01 	lds	r25, 0x0125
    55ac:	9a 83       	std	Y+2, r25	; 0x02
    55ae:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    55b0:	89 81       	ldd	r24, Y+1	; 0x01
    55b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    55b4:	0f 90       	pop	r0
    55b6:	0f 90       	pop	r0
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	08 95       	ret

000055be <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    55be:	10 92 81 00 	sts	0x0081, r1
    55c2:	08 95       	ret

000055c4 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	80 93 81 00 	sts	0x0081, r24
    55ca:	08 95       	ret

000055cc <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    55cc:	83 b5       	in	r24, 0x23	; 35
    55ce:	81 60       	ori	r24, 0x01	; 1
    55d0:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    55d2:	10 92 85 00 	sts	0x0085, r1
    55d6:	10 92 84 00 	sts	0x0084, r1
    55da:	08 95       	ret

000055dc <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    55dc:	cf 93       	push	r28
    55de:	df 93       	push	r29
    55e0:	00 d0       	rcall	.+0      	; 0x55e2 <_nrk_high_speed_timer_get+0x6>
    55e2:	cd b7       	in	r28, 0x3d	; 61
    55e4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    55e6:	80 91 84 00 	lds	r24, 0x0084
    55ea:	90 91 85 00 	lds	r25, 0x0085
    55ee:	9a 83       	std	Y+2, r25	; 0x02
    55f0:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    55f6:	0f 90       	pop	r0
    55f8:	0f 90       	pop	r0
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	08 95       	ret

00005600 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    5600:	cf 92       	push	r12
    5602:	df 92       	push	r13
    5604:	ef 92       	push	r14
    5606:	ff 92       	push	r15
    5608:	cf 93       	push	r28
    560a:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    560c:	ec 01       	movw	r28, r24
    560e:	cc 0f       	add	r28, r28
    5610:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    5612:	c9 37       	cpi	r28, 0x79	; 121
    5614:	8f ef       	ldi	r24, 0xFF	; 255
    5616:	d8 07       	cpc	r29, r24
    5618:	10 f0       	brcs	.+4      	; 0x561e <nrk_high_speed_timer_wait+0x1e>
    561a:	c0 e0       	ldi	r28, 0x00	; 0
    561c:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    561e:	6b 01       	movw	r12, r22
    5620:	e1 2c       	mov	r14, r1
    5622:	f1 2c       	mov	r15, r1
    5624:	cc 0e       	add	r12, r28
    5626:	dd 1e       	adc	r13, r29
    5628:	e1 1c       	adc	r14, r1
    562a:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	c8 16       	cp	r12, r24
    5630:	d1 04       	cpc	r13, r1
    5632:	e8 06       	cpc	r14, r24
    5634:	f1 04       	cpc	r15, r1
    5636:	40 f0       	brcs	.+16     	; 0x5648 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	e8 1a       	sub	r14, r24
    563c:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    563e:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <_nrk_high_speed_timer_get>
    5642:	c8 17       	cp	r28, r24
    5644:	d9 07       	cpc	r29, r25
    5646:	d8 f3       	brcs	.-10     	; 0x563e <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    5648:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <_nrk_high_speed_timer_get>
    564c:	8c 15       	cp	r24, r12
    564e:	9d 05       	cpc	r25, r13
    5650:	d8 f3       	brcs	.-10     	; 0x5648 <nrk_high_speed_timer_wait+0x48>
}
    5652:	df 91       	pop	r29
    5654:	cf 91       	pop	r28
    5656:	ff 90       	pop	r15
    5658:	ef 90       	pop	r14
    565a:	df 90       	pop	r13
    565c:	cf 90       	pop	r12
    565e:	08 95       	ret

00005660 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    5660:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    5664:	e0 e7       	ldi	r30, 0x70	; 112
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	80 81       	ld	r24, Z
    566a:	8d 7f       	andi	r24, 0xFD	; 253
    566c:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    566e:	80 81       	ld	r24, Z
    5670:	8e 7f       	andi	r24, 0xFE	; 254
    5672:	80 83       	st	Z, r24
    5674:	08 95       	ret

00005676 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    5676:	80 93 b2 00 	sts	0x00B2, r24
    567a:	08 95       	ret

0000567c <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    567c:	e0 e7       	ldi	r30, 0x70	; 112
    567e:	f0 e0       	ldi	r31, 0x00	; 0
    5680:	80 81       	ld	r24, Z
    5682:	83 60       	ori	r24, 0x03	; 3
    5684:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    5686:	83 e0       	ldi	r24, 0x03	; 3
    5688:	80 93 b1 00 	sts	0x00B1, r24
    568c:	08 95       	ret

0000568e <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    568e:	83 b5       	in	r24, 0x23	; 35
    5690:	82 60       	ori	r24, 0x02	; 2
    5692:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    5694:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    5698:	10 92 c9 07 	sts	0x07C9, r1
    _nrk_prev_timer_val=0;
    569c:	10 92 cb 07 	sts	0x07CB, r1
    56a0:	08 95       	ret

000056a2 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    56a6:	8e ef       	ldi	r24, 0xFE	; 254
    56a8:	80 93 cb 07 	sts	0x07CB, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    56ac:	80 e2       	ldi	r24, 0x20	; 32
    56ae:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    56b2:	80 91 cb 07 	lds	r24, 0x07CB
    56b6:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    56ba:	83 e0       	ldi	r24, 0x03	; 3
    56bc:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    56be:	92 e0       	ldi	r25, 0x02	; 2
    56c0:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    56c4:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    56c8:	93 b5       	in	r25, 0x23	; 35
    56ca:	92 60       	ori	r25, 0x02	; 2
    56cc:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    56ce:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    56d0:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    56d2:	83 b5       	in	r24, 0x23	; 35
    56d4:	82 60       	ori	r24, 0x02	; 2
    56d6:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    56d8:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    56e2:	10 92 85 00 	sts	0x0085, r1
    56e6:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    56ea:	83 b5       	in	r24, 0x23	; 35
    56ec:	82 60       	ori	r24, 0x02	; 2
    56ee:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    56f0:	83 b5       	in	r24, 0x23	; 35
    56f2:	81 60       	ori	r24, 0x01	; 1
    56f4:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    56f6:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    56fa:	c4 e2       	ldi	r28, 0x24	; 36
    56fc:	d1 e0       	ldi	r29, 0x01	; 1
    56fe:	19 82       	std	Y+1, r1	; 0x01
    5700:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5702:	83 b5       	in	r24, 0x23	; 35
    5704:	82 60       	ori	r24, 0x02	; 2
    5706:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5708:	83 b5       	in	r24, 0x23	; 35
    570a:	81 60       	ori	r24, 0x01	; 1
    570c:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    570e:	0e 94 47 2b 	call	0x568e	; 0x568e <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5712:	19 82       	std	Y+1, r1	; 0x01
    5714:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    5716:	0e 94 3e 2b 	call	0x567c	; 0x567c <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    571a:	0e 94 be 2a 	call	0x557c	; 0x557c <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    571e:	10 92 c9 07 	sts	0x07C9, r1
}
    5722:	df 91       	pop	r29
    5724:	cf 91       	pop	r28
    5726:	08 95       	ret

00005728 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    5728:	80 91 b3 00 	lds	r24, 0x00B3
}
    572c:	8f 5f       	subi	r24, 0xFF	; 255
    572e:	08 95       	ret

00005730 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    5730:	81 50       	subi	r24, 0x01	; 1
    5732:	80 93 b3 00 	sts	0x00B3, r24
    5736:	08 95       	ret

00005738 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5738:	81 11       	cpse	r24, r1
    573a:	02 c0       	rjmp	.+4      	; 0x5740 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    573c:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	08 95       	ret

00005744 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5744:	81 11       	cpse	r24, r1
    5746:	06 c0       	rjmp	.+12     	; 0x5754 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    5748:	10 92 95 00 	sts	0x0095, r1
    574c:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	08 95       	ret
	}
return NRK_ERROR;
    5754:	8f ef       	ldi	r24, 0xFF	; 255
}
    5756:	08 95       	ret

00005758 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5758:	81 11       	cpse	r24, r1
    575a:	05 c0       	rjmp	.+10     	; 0x5766 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    575c:	80 91 94 00 	lds	r24, 0x0094
    5760:	90 91 95 00 	lds	r25, 0x0095
    5764:	08 95       	ret
	}
return 0;
    5766:	80 e0       	ldi	r24, 0x00	; 0
    5768:	90 e0       	ldi	r25, 0x00	; 0

}
    576a:	08 95       	ret

0000576c <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    576c:	81 11       	cpse	r24, r1
    576e:	05 c0       	rjmp	.+10     	; 0x577a <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    5770:	82 e0       	ldi	r24, 0x02	; 2
    5772:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5776:	81 e0       	ldi	r24, 0x01	; 1
    5778:	08 95       	ret
	}
return NRK_ERROR;
    577a:	8f ef       	ldi	r24, 0xFF	; 255
}
    577c:	08 95       	ret

0000577e <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    577e:	81 11       	cpse	r24, r1
    5780:	35 c0       	rjmp	.+106    	; 0x57ec <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    5782:	cb 01       	movw	r24, r22
    5784:	01 97       	sbiw	r24, 0x01	; 1
    5786:	05 97       	sbiw	r24, 0x05	; 5
    5788:	10 f4       	brcc	.+4      	; 0x578e <nrk_timer_int_configure+0x10>
    578a:	60 93 ca 07 	sts	0x07CA, r22
	TCCR3A = 0;  
    578e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    5792:	88 e0       	ldi	r24, 0x08	; 8
    5794:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    5798:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    579c:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    57a0:	30 93 c8 07 	sts	0x07C8, r19
    57a4:	20 93 c7 07 	sts	0x07C7, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    57a8:	80 91 ca 07 	lds	r24, 0x07CA
    57ac:	81 30       	cpi	r24, 0x01	; 1
    57ae:	21 f4       	brne	.+8      	; 0x57b8 <nrk_timer_int_configure+0x3a>
    57b0:	80 91 91 00 	lds	r24, 0x0091
    57b4:	81 60       	ori	r24, 0x01	; 1
    57b6:	11 c0       	rjmp	.+34     	; 0x57da <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    57b8:	82 30       	cpi	r24, 0x02	; 2
    57ba:	21 f4       	brne	.+8      	; 0x57c4 <nrk_timer_int_configure+0x46>
    57bc:	80 91 91 00 	lds	r24, 0x0091
    57c0:	82 60       	ori	r24, 0x02	; 2
    57c2:	0b c0       	rjmp	.+22     	; 0x57da <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    57c4:	83 30       	cpi	r24, 0x03	; 3
    57c6:	21 f4       	brne	.+8      	; 0x57d0 <nrk_timer_int_configure+0x52>
    57c8:	80 91 91 00 	lds	r24, 0x0091
    57cc:	83 60       	ori	r24, 0x03	; 3
    57ce:	05 c0       	rjmp	.+10     	; 0x57da <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    57d0:	84 30       	cpi	r24, 0x04	; 4
    57d2:	31 f4       	brne	.+12     	; 0x57e0 <nrk_timer_int_configure+0x62>
    57d4:	80 91 91 00 	lds	r24, 0x0091
    57d8:	84 60       	ori	r24, 0x04	; 4
    57da:	80 93 91 00 	sts	0x0091, r24
    57de:	08 c0       	rjmp	.+16     	; 0x57f0 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    57e0:	85 30       	cpi	r24, 0x05	; 5
    57e2:	31 f4       	brne	.+12     	; 0x57f0 <nrk_timer_int_configure+0x72>
    57e4:	80 91 91 00 	lds	r24, 0x0091
    57e8:	85 60       	ori	r24, 0x05	; 5
    57ea:	f7 cf       	rjmp	.-18     	; 0x57da <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    57ec:	8f ef       	ldi	r24, 0xFF	; 255
    57ee:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    57f0:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    57f2:	08 95       	ret

000057f4 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    57f4:	80 91 b2 00 	lds	r24, 0x00B2
}
    57f8:	08 95       	ret

000057fa <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    57fa:	1f 92       	push	r1
    57fc:	0f 92       	push	r0
    57fe:	0f b6       	in	r0, 0x3f	; 63
    5800:	0f 92       	push	r0
    5802:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5804:	60 e0       	ldi	r22, 0x00	; 0
    5806:	8a e0       	ldi	r24, 0x0A	; 10
    5808:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
	while(1);
    580c:	ff cf       	rjmp	.-2      	; 0x580c <__vector_default+0x12>

0000580e <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    580e:	0f 92       	push	r0
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	0f 92       	push	r0
    5814:	1f 92       	push	r1
    5816:	2f 92       	push	r2
    5818:	3f 92       	push	r3
    581a:	4f 92       	push	r4
    581c:	5f 92       	push	r5
    581e:	6f 92       	push	r6
    5820:	7f 92       	push	r7
    5822:	8f 92       	push	r8
    5824:	9f 92       	push	r9
    5826:	af 92       	push	r10
    5828:	bf 92       	push	r11
    582a:	cf 92       	push	r12
    582c:	df 92       	push	r13
    582e:	ef 92       	push	r14
    5830:	ff 92       	push	r15
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	2f 93       	push	r18
    5838:	3f 93       	push	r19
    583a:	4f 93       	push	r20
    583c:	5f 93       	push	r21
    583e:	6f 93       	push	r22
    5840:	7f 93       	push	r23
    5842:	8f 93       	push	r24
    5844:	9f 93       	push	r25
    5846:	af 93       	push	r26
    5848:	bf 93       	push	r27
    584a:	cf 93       	push	r28
    584c:	df 93       	push	r29
    584e:	ef 93       	push	r30
    5850:	ff 93       	push	r31
    5852:	a0 91 31 09 	lds	r26, 0x0931
    5856:	b0 91 32 09 	lds	r27, 0x0932
    585a:	0d b6       	in	r0, 0x3d	; 61
    585c:	0d 92       	st	X+, r0
    585e:	0e b6       	in	r0, 0x3e	; 62
    5860:	0d 92       	st	X+, r0
    5862:	1f 92       	push	r1
    5864:	a0 91 5b 05 	lds	r26, 0x055B
    5868:	b0 91 5c 05 	lds	r27, 0x055C
    586c:	1e 90       	ld	r1, -X
    586e:	be bf       	out	0x3e, r27	; 62
    5870:	ad bf       	out	0x3d, r26	; 61
    5872:	08 95       	ret

00005874 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    5874:	1f 92       	push	r1
    5876:	0f 92       	push	r0
    5878:	0f b6       	in	r0, 0x3f	; 63
    587a:	0f 92       	push	r0
    587c:	11 24       	eor	r1, r1
    587e:	0b b6       	in	r0, 0x3b	; 59
    5880:	0f 92       	push	r0
    5882:	2f 93       	push	r18
    5884:	3f 93       	push	r19
    5886:	4f 93       	push	r20
    5888:	5f 93       	push	r21
    588a:	6f 93       	push	r22
    588c:	7f 93       	push	r23
    588e:	8f 93       	push	r24
    5890:	9f 93       	push	r25
    5892:	af 93       	push	r26
    5894:	bf 93       	push	r27
    5896:	ef 93       	push	r30
    5898:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    589a:	e0 91 c7 07 	lds	r30, 0x07C7
    589e:	f0 91 c8 07 	lds	r31, 0x07C8
    58a2:	30 97       	sbiw	r30, 0x00	; 0
    58a4:	11 f0       	breq	.+4      	; 0x58aa <__vector_32+0x36>
    58a6:	09 95       	icall
    58a8:	04 c0       	rjmp	.+8      	; 0x58b2 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    58aa:	60 e0       	ldi	r22, 0x00	; 0
    58ac:	8a e0       	ldi	r24, 0x0A	; 10
    58ae:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
	return;  	
}
    58b2:	ff 91       	pop	r31
    58b4:	ef 91       	pop	r30
    58b6:	bf 91       	pop	r27
    58b8:	af 91       	pop	r26
    58ba:	9f 91       	pop	r25
    58bc:	8f 91       	pop	r24
    58be:	7f 91       	pop	r23
    58c0:	6f 91       	pop	r22
    58c2:	5f 91       	pop	r21
    58c4:	4f 91       	pop	r20
    58c6:	3f 91       	pop	r19
    58c8:	2f 91       	pop	r18
    58ca:	0f 90       	pop	r0
    58cc:	0b be       	out	0x3b, r0	; 59
    58ce:	0f 90       	pop	r0
    58d0:	0f be       	out	0x3f, r0	; 63
    58d2:	0f 90       	pop	r0
    58d4:	1f 90       	pop	r1
    58d6:	18 95       	reti

000058d8 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    58d8:	1f 92       	push	r1
    58da:	0f 92       	push	r0
    58dc:	0f b6       	in	r0, 0x3f	; 63
    58de:	0f 92       	push	r0
    58e0:	11 24       	eor	r1, r1

	return;  	
} 
    58e2:	0f 90       	pop	r0
    58e4:	0f be       	out	0x3f, r0	; 63
    58e6:	0f 90       	pop	r0
    58e8:	1f 90       	pop	r1
    58ea:	18 95       	reti

000058ec <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    58ec:	04 b6       	in	r0, 0x34	; 52
    58ee:	03 fe       	sbrs	r0, 3
    58f0:	02 c0       	rjmp	.+4      	; 0x58f6 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    58f2:	80 e1       	ldi	r24, 0x10	; 16
    58f4:	01 c0       	rjmp	.+2      	; 0x58f8 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    58f6:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    58f8:	04 b6       	in	r0, 0x34	; 52
    58fa:	02 fe       	sbrs	r0, 2
    58fc:	06 c0       	rjmp	.+12     	; 0x590a <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    58fe:	94 b7       	in	r25, 0x34	; 52
    5900:	9b 7f       	andi	r25, 0xFB	; 251
    5902:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    5904:	04 b6       	in	r0, 0x34	; 52
    5906:	00 fe       	sbrs	r0, 0
		error|=0x04;
    5908:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    590a:	04 b6       	in	r0, 0x34	; 52
    590c:	01 fe       	sbrs	r0, 1
    590e:	05 c0       	rjmp	.+10     	; 0x591a <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    5910:	94 b7       	in	r25, 0x34	; 52
    5912:	9d 7f       	andi	r25, 0xFD	; 253
    5914:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    5916:	82 60       	ori	r24, 0x02	; 2
    5918:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    591a:	81 11       	cpse	r24, r1
    591c:	0c c0       	rjmp	.+24     	; 0x5936 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    591e:	04 b6       	in	r0, 0x34	; 52
    5920:	00 fe       	sbrs	r0, 0
    5922:	04 c0       	rjmp	.+8      	; 0x592c <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    5924:	94 b7       	in	r25, 0x34	; 52
    5926:	9e 7f       	andi	r25, 0xFE	; 254
    5928:	94 bf       	out	0x34, r25	; 52
    592a:	01 c0       	rjmp	.+2      	; 0x592e <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    592c:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    592e:	90 91 b0 00 	lds	r25, 0x00B0
    5932:	91 11       	cpse	r25, r1
    5934:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    5936:	08 95       	ret

00005938 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    5938:	81 11       	cpse	r24, r1
    593a:	02 c0       	rjmp	.+4      	; 0x5940 <nrk_ext_int_enable+0x8>
    593c:	e8 9a       	sbi	0x1d, 0	; 29
    593e:	39 c0       	rjmp	.+114    	; 0x59b2 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5940:	81 30       	cpi	r24, 0x01	; 1
    5942:	11 f4       	brne	.+4      	; 0x5948 <nrk_ext_int_enable+0x10>
    5944:	e9 9a       	sbi	0x1d, 1	; 29
    5946:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    5948:	82 30       	cpi	r24, 0x02	; 2
    594a:	11 f4       	brne	.+4      	; 0x5950 <nrk_ext_int_enable+0x18>
    594c:	ea 9a       	sbi	0x1d, 2	; 29
    594e:	31 c0       	rjmp	.+98     	; 0x59b2 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    5950:	83 30       	cpi	r24, 0x03	; 3
    5952:	21 f4       	brne	.+8      	; 0x595c <nrk_ext_int_enable+0x24>
    5954:	80 91 6b 00 	lds	r24, 0x006B
    5958:	81 60       	ori	r24, 0x01	; 1
    595a:	29 c0       	rjmp	.+82     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    595c:	84 30       	cpi	r24, 0x04	; 4
    595e:	21 f4       	brne	.+8      	; 0x5968 <nrk_ext_int_enable+0x30>
    5960:	80 91 6b 00 	lds	r24, 0x006B
    5964:	82 60       	ori	r24, 0x02	; 2
    5966:	23 c0       	rjmp	.+70     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    5968:	85 30       	cpi	r24, 0x05	; 5
    596a:	21 f4       	brne	.+8      	; 0x5974 <nrk_ext_int_enable+0x3c>
    596c:	80 91 6b 00 	lds	r24, 0x006B
    5970:	84 60       	ori	r24, 0x04	; 4
    5972:	1d c0       	rjmp	.+58     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    5974:	86 30       	cpi	r24, 0x06	; 6
    5976:	21 f4       	brne	.+8      	; 0x5980 <nrk_ext_int_enable+0x48>
    5978:	80 91 6b 00 	lds	r24, 0x006B
    597c:	88 60       	ori	r24, 0x08	; 8
    597e:	17 c0       	rjmp	.+46     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    5980:	87 30       	cpi	r24, 0x07	; 7
    5982:	21 f4       	brne	.+8      	; 0x598c <nrk_ext_int_enable+0x54>
    5984:	80 91 6b 00 	lds	r24, 0x006B
    5988:	80 61       	ori	r24, 0x10	; 16
    598a:	11 c0       	rjmp	.+34     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    598c:	88 30       	cpi	r24, 0x08	; 8
    598e:	21 f4       	brne	.+8      	; 0x5998 <nrk_ext_int_enable+0x60>
    5990:	80 91 6b 00 	lds	r24, 0x006B
    5994:	80 62       	ori	r24, 0x20	; 32
    5996:	0b c0       	rjmp	.+22     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    5998:	89 30       	cpi	r24, 0x09	; 9
    599a:	21 f4       	brne	.+8      	; 0x59a4 <nrk_ext_int_enable+0x6c>
    599c:	80 91 6b 00 	lds	r24, 0x006B
    59a0:	80 64       	ori	r24, 0x40	; 64
    59a2:	05 c0       	rjmp	.+10     	; 0x59ae <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    59a4:	8a 30       	cpi	r24, 0x0A	; 10
    59a6:	39 f4       	brne	.+14     	; 0x59b6 <nrk_ext_int_enable+0x7e>
    59a8:	80 91 6b 00 	lds	r24, 0x006B
    59ac:	80 68       	ori	r24, 0x80	; 128
    59ae:	80 93 6b 00 	sts	0x006B, r24
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	08 95       	ret
return NRK_ERROR;
    59b6:	8f ef       	ldi	r24, 0xFF	; 255
}
    59b8:	08 95       	ret

000059ba <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    59ba:	81 11       	cpse	r24, r1
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <nrk_ext_int_disable+0x8>
    59be:	e8 98       	cbi	0x1d, 0	; 29
    59c0:	39 c0       	rjmp	.+114    	; 0x5a34 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    59c2:	81 30       	cpi	r24, 0x01	; 1
    59c4:	11 f4       	brne	.+4      	; 0x59ca <nrk_ext_int_disable+0x10>
    59c6:	e9 98       	cbi	0x1d, 1	; 29
    59c8:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    59ca:	82 30       	cpi	r24, 0x02	; 2
    59cc:	11 f4       	brne	.+4      	; 0x59d2 <nrk_ext_int_disable+0x18>
    59ce:	e9 98       	cbi	0x1d, 1	; 29
    59d0:	31 c0       	rjmp	.+98     	; 0x5a34 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    59d2:	83 30       	cpi	r24, 0x03	; 3
    59d4:	21 f4       	brne	.+8      	; 0x59de <nrk_ext_int_disable+0x24>
    59d6:	80 91 6b 00 	lds	r24, 0x006B
    59da:	8e 7f       	andi	r24, 0xFE	; 254
    59dc:	29 c0       	rjmp	.+82     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    59de:	84 30       	cpi	r24, 0x04	; 4
    59e0:	21 f4       	brne	.+8      	; 0x59ea <nrk_ext_int_disable+0x30>
    59e2:	80 91 6b 00 	lds	r24, 0x006B
    59e6:	8d 7f       	andi	r24, 0xFD	; 253
    59e8:	23 c0       	rjmp	.+70     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    59ea:	85 30       	cpi	r24, 0x05	; 5
    59ec:	21 f4       	brne	.+8      	; 0x59f6 <nrk_ext_int_disable+0x3c>
    59ee:	80 91 6b 00 	lds	r24, 0x006B
    59f2:	8b 7f       	andi	r24, 0xFB	; 251
    59f4:	1d c0       	rjmp	.+58     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    59f6:	86 30       	cpi	r24, 0x06	; 6
    59f8:	21 f4       	brne	.+8      	; 0x5a02 <nrk_ext_int_disable+0x48>
    59fa:	80 91 6b 00 	lds	r24, 0x006B
    59fe:	87 7f       	andi	r24, 0xF7	; 247
    5a00:	17 c0       	rjmp	.+46     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    5a02:	87 30       	cpi	r24, 0x07	; 7
    5a04:	21 f4       	brne	.+8      	; 0x5a0e <nrk_ext_int_disable+0x54>
    5a06:	80 91 6b 00 	lds	r24, 0x006B
    5a0a:	8f 7e       	andi	r24, 0xEF	; 239
    5a0c:	11 c0       	rjmp	.+34     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5a0e:	88 30       	cpi	r24, 0x08	; 8
    5a10:	21 f4       	brne	.+8      	; 0x5a1a <nrk_ext_int_disable+0x60>
    5a12:	80 91 6b 00 	lds	r24, 0x006B
    5a16:	8f 7d       	andi	r24, 0xDF	; 223
    5a18:	0b c0       	rjmp	.+22     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    5a1a:	89 30       	cpi	r24, 0x09	; 9
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <nrk_ext_int_disable+0x6c>
    5a1e:	80 91 6b 00 	lds	r24, 0x006B
    5a22:	8f 7b       	andi	r24, 0xBF	; 191
    5a24:	05 c0       	rjmp	.+10     	; 0x5a30 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    5a26:	8a 30       	cpi	r24, 0x0A	; 10
    5a28:	39 f4       	brne	.+14     	; 0x5a38 <nrk_ext_int_disable+0x7e>
    5a2a:	80 91 6b 00 	lds	r24, 0x006B
    5a2e:	8f 77       	andi	r24, 0x7F	; 127
    5a30:	80 93 6b 00 	sts	0x006B, r24
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	08 95       	ret
return NRK_ERROR;
    5a38:	8f ef       	ldi	r24, 0xFF	; 255
}
    5a3a:	08 95       	ret

00005a3c <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    5a3c:	81 11       	cpse	r24, r1
    5a3e:	26 c0       	rjmp	.+76     	; 0x5a8c <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    5a40:	50 93 5c 09 	sts	0x095C, r21
    5a44:	40 93 5b 09 	sts	0x095B, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    5a48:	61 11       	cpse	r22, r1
    5a4a:	04 c0       	rjmp	.+8      	; 0x5a54 <nrk_ext_int_configure+0x18>
    5a4c:	80 91 69 00 	lds	r24, 0x0069
    5a50:	8c 7f       	andi	r24, 0xFC	; 252
    5a52:	3d c0       	rjmp	.+122    	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5a54:	61 30       	cpi	r22, 0x01	; 1
    5a56:	49 f4       	brne	.+18     	; 0x5a6a <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    5a58:	80 91 69 00 	lds	r24, 0x0069
    5a5c:	8d 7f       	andi	r24, 0xFD	; 253
    5a5e:	80 93 69 00 	sts	0x0069, r24
    5a62:	80 91 69 00 	lds	r24, 0x0069
    5a66:	81 60       	ori	r24, 0x01	; 1
    5a68:	32 c0       	rjmp	.+100    	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5a6a:	62 30       	cpi	r22, 0x02	; 2
    5a6c:	49 f4       	brne	.+18     	; 0x5a80 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    5a6e:	80 91 69 00 	lds	r24, 0x0069
    5a72:	82 60       	ori	r24, 0x02	; 2
    5a74:	80 93 69 00 	sts	0x0069, r24
    5a78:	80 91 69 00 	lds	r24, 0x0069
    5a7c:	8e 7f       	andi	r24, 0xFE	; 254
    5a7e:	27 c0       	rjmp	.+78     	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    5a80:	63 30       	cpi	r22, 0x03	; 3
    5a82:	39 f5       	brne	.+78     	; 0x5ad2 <nrk_ext_int_configure+0x96>
    5a84:	80 91 69 00 	lds	r24, 0x0069
    5a88:	83 60       	ori	r24, 0x03	; 3
    5a8a:	21 c0       	rjmp	.+66     	; 0x5ace <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5a8c:	81 30       	cpi	r24, 0x01	; 1
    5a8e:	49 f5       	brne	.+82     	; 0x5ae2 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    5a90:	50 93 5a 09 	sts	0x095A, r21
    5a94:	40 93 59 09 	sts	0x0959, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    5a98:	61 11       	cpse	r22, r1
    5a9a:	04 c0       	rjmp	.+8      	; 0x5aa4 <nrk_ext_int_configure+0x68>
    5a9c:	80 91 69 00 	lds	r24, 0x0069
    5aa0:	83 7f       	andi	r24, 0xF3	; 243
    5aa2:	15 c0       	rjmp	.+42     	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5aa4:	61 30       	cpi	r22, 0x01	; 1
    5aa6:	49 f4       	brne	.+18     	; 0x5aba <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5aa8:	80 91 69 00 	lds	r24, 0x0069
    5aac:	87 7f       	andi	r24, 0xF7	; 247
    5aae:	80 93 69 00 	sts	0x0069, r24
    5ab2:	80 91 69 00 	lds	r24, 0x0069
    5ab6:	84 60       	ori	r24, 0x04	; 4
    5ab8:	0a c0       	rjmp	.+20     	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5aba:	62 30       	cpi	r22, 0x02	; 2
    5abc:	61 f4       	brne	.+24     	; 0x5ad6 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5abe:	80 91 69 00 	lds	r24, 0x0069
    5ac2:	88 60       	ori	r24, 0x08	; 8
    5ac4:	80 93 69 00 	sts	0x0069, r24
    5ac8:	80 91 69 00 	lds	r24, 0x0069
    5acc:	8b 7f       	andi	r24, 0xFB	; 251
    5ace:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    5ad2:	81 e0       	ldi	r24, 0x01	; 1
    5ad4:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5ad6:	63 30       	cpi	r22, 0x03	; 3
    5ad8:	e1 f7       	brne	.-8      	; 0x5ad2 <nrk_ext_int_configure+0x96>
    5ada:	80 91 69 00 	lds	r24, 0x0069
    5ade:	8c 60       	ori	r24, 0x0C	; 12
    5ae0:	f6 cf       	rjmp	.-20     	; 0x5ace <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    5ae2:	82 30       	cpi	r24, 0x02	; 2
    5ae4:	31 f5       	brne	.+76     	; 0x5b32 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5ae6:	50 93 5e 09 	sts	0x095E, r21
    5aea:	40 93 5d 09 	sts	0x095D, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5aee:	61 11       	cpse	r22, r1
    5af0:	04 c0       	rjmp	.+8      	; 0x5afa <nrk_ext_int_configure+0xbe>
    5af2:	80 91 69 00 	lds	r24, 0x0069
    5af6:	8f 7c       	andi	r24, 0xCF	; 207
    5af8:	ea cf       	rjmp	.-44     	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5afa:	61 30       	cpi	r22, 0x01	; 1
    5afc:	49 f4       	brne	.+18     	; 0x5b10 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5afe:	80 91 69 00 	lds	r24, 0x0069
    5b02:	8f 7d       	andi	r24, 0xDF	; 223
    5b04:	80 93 69 00 	sts	0x0069, r24
    5b08:	80 91 69 00 	lds	r24, 0x0069
    5b0c:	80 61       	ori	r24, 0x10	; 16
    5b0e:	df cf       	rjmp	.-66     	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5b10:	62 30       	cpi	r22, 0x02	; 2
    5b12:	49 f4       	brne	.+18     	; 0x5b26 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5b14:	80 91 69 00 	lds	r24, 0x0069
    5b18:	80 62       	ori	r24, 0x20	; 32
    5b1a:	80 93 69 00 	sts	0x0069, r24
    5b1e:	80 91 69 00 	lds	r24, 0x0069
    5b22:	8f 7e       	andi	r24, 0xEF	; 239
    5b24:	d4 cf       	rjmp	.-88     	; 0x5ace <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5b26:	63 30       	cpi	r22, 0x03	; 3
    5b28:	a1 f6       	brne	.-88     	; 0x5ad2 <nrk_ext_int_configure+0x96>
    5b2a:	80 91 69 00 	lds	r24, 0x0069
    5b2e:	80 63       	ori	r24, 0x30	; 48
    5b30:	ce cf       	rjmp	.-100    	; 0x5ace <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5b32:	83 50       	subi	r24, 0x03	; 3
    5b34:	88 30       	cpi	r24, 0x08	; 8
    5b36:	50 f4       	brcc	.+20     	; 0x5b4c <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5b38:	80 91 68 00 	lds	r24, 0x0068
    5b3c:	81 60       	ori	r24, 0x01	; 1
    5b3e:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5b42:	50 93 60 09 	sts	0x0960, r21
    5b46:	40 93 5f 09 	sts	0x095F, r20
    5b4a:	c3 cf       	rjmp	.-122    	; 0x5ad2 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    5b4c:	8f ef       	ldi	r24, 0xFF	; 255
}
    5b4e:	08 95       	ret

00005b50 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5b50:	1f 92       	push	r1
    5b52:	0f 92       	push	r0
    5b54:	0f b6       	in	r0, 0x3f	; 63
    5b56:	0f 92       	push	r0
    5b58:	11 24       	eor	r1, r1
    5b5a:	0b b6       	in	r0, 0x3b	; 59
    5b5c:	0f 92       	push	r0
    5b5e:	2f 93       	push	r18
    5b60:	3f 93       	push	r19
    5b62:	4f 93       	push	r20
    5b64:	5f 93       	push	r21
    5b66:	6f 93       	push	r22
    5b68:	7f 93       	push	r23
    5b6a:	8f 93       	push	r24
    5b6c:	9f 93       	push	r25
    5b6e:	af 93       	push	r26
    5b70:	bf 93       	push	r27
    5b72:	ef 93       	push	r30
    5b74:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    5b76:	e0 91 5f 09 	lds	r30, 0x095F
    5b7a:	f0 91 60 09 	lds	r31, 0x0960
    5b7e:	30 97       	sbiw	r30, 0x00	; 0
    5b80:	11 f0       	breq	.+4      	; 0x5b86 <__vector_9+0x36>
    5b82:	09 95       	icall
    5b84:	04 c0       	rjmp	.+8      	; 0x5b8e <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b86:	60 e0       	ldi	r22, 0x00	; 0
    5b88:	8a e0       	ldi	r24, 0x0A	; 10
    5b8a:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
	return;  	
}
    5b8e:	ff 91       	pop	r31
    5b90:	ef 91       	pop	r30
    5b92:	bf 91       	pop	r27
    5b94:	af 91       	pop	r26
    5b96:	9f 91       	pop	r25
    5b98:	8f 91       	pop	r24
    5b9a:	7f 91       	pop	r23
    5b9c:	6f 91       	pop	r22
    5b9e:	5f 91       	pop	r21
    5ba0:	4f 91       	pop	r20
    5ba2:	3f 91       	pop	r19
    5ba4:	2f 91       	pop	r18
    5ba6:	0f 90       	pop	r0
    5ba8:	0b be       	out	0x3b, r0	; 59
    5baa:	0f 90       	pop	r0
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	0f 90       	pop	r0
    5bb0:	1f 90       	pop	r1
    5bb2:	18 95       	reti

00005bb4 <__vector_1>:


SIGNAL(INT0_vect) {
    5bb4:	1f 92       	push	r1
    5bb6:	0f 92       	push	r0
    5bb8:	0f b6       	in	r0, 0x3f	; 63
    5bba:	0f 92       	push	r0
    5bbc:	11 24       	eor	r1, r1
    5bbe:	0b b6       	in	r0, 0x3b	; 59
    5bc0:	0f 92       	push	r0
    5bc2:	2f 93       	push	r18
    5bc4:	3f 93       	push	r19
    5bc6:	4f 93       	push	r20
    5bc8:	5f 93       	push	r21
    5bca:	6f 93       	push	r22
    5bcc:	7f 93       	push	r23
    5bce:	8f 93       	push	r24
    5bd0:	9f 93       	push	r25
    5bd2:	af 93       	push	r26
    5bd4:	bf 93       	push	r27
    5bd6:	ef 93       	push	r30
    5bd8:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5bda:	e0 91 5b 09 	lds	r30, 0x095B
    5bde:	f0 91 5c 09 	lds	r31, 0x095C
    5be2:	30 97       	sbiw	r30, 0x00	; 0
    5be4:	11 f0       	breq	.+4      	; 0x5bea <__vector_1+0x36>
    5be6:	09 95       	icall
    5be8:	04 c0       	rjmp	.+8      	; 0x5bf2 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5bea:	60 e0       	ldi	r22, 0x00	; 0
    5bec:	8a e0       	ldi	r24, 0x0A	; 10
    5bee:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
	return;  	
}
    5bf2:	ff 91       	pop	r31
    5bf4:	ef 91       	pop	r30
    5bf6:	bf 91       	pop	r27
    5bf8:	af 91       	pop	r26
    5bfa:	9f 91       	pop	r25
    5bfc:	8f 91       	pop	r24
    5bfe:	7f 91       	pop	r23
    5c00:	6f 91       	pop	r22
    5c02:	5f 91       	pop	r21
    5c04:	4f 91       	pop	r20
    5c06:	3f 91       	pop	r19
    5c08:	2f 91       	pop	r18
    5c0a:	0f 90       	pop	r0
    5c0c:	0b be       	out	0x3b, r0	; 59
    5c0e:	0f 90       	pop	r0
    5c10:	0f be       	out	0x3f, r0	; 63
    5c12:	0f 90       	pop	r0
    5c14:	1f 90       	pop	r1
    5c16:	18 95       	reti

00005c18 <__vector_2>:

SIGNAL(INT1_vect) {
    5c18:	1f 92       	push	r1
    5c1a:	0f 92       	push	r0
    5c1c:	0f b6       	in	r0, 0x3f	; 63
    5c1e:	0f 92       	push	r0
    5c20:	11 24       	eor	r1, r1
    5c22:	0b b6       	in	r0, 0x3b	; 59
    5c24:	0f 92       	push	r0
    5c26:	2f 93       	push	r18
    5c28:	3f 93       	push	r19
    5c2a:	4f 93       	push	r20
    5c2c:	5f 93       	push	r21
    5c2e:	6f 93       	push	r22
    5c30:	7f 93       	push	r23
    5c32:	8f 93       	push	r24
    5c34:	9f 93       	push	r25
    5c36:	af 93       	push	r26
    5c38:	bf 93       	push	r27
    5c3a:	ef 93       	push	r30
    5c3c:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5c3e:	e0 91 59 09 	lds	r30, 0x0959
    5c42:	f0 91 5a 09 	lds	r31, 0x095A
    5c46:	30 97       	sbiw	r30, 0x00	; 0
    5c48:	11 f0       	breq	.+4      	; 0x5c4e <__vector_2+0x36>
    5c4a:	09 95       	icall
    5c4c:	04 c0       	rjmp	.+8      	; 0x5c56 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5c4e:	60 e0       	ldi	r22, 0x00	; 0
    5c50:	8a e0       	ldi	r24, 0x0A	; 10
    5c52:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
	return;  	
}
    5c56:	ff 91       	pop	r31
    5c58:	ef 91       	pop	r30
    5c5a:	bf 91       	pop	r27
    5c5c:	af 91       	pop	r26
    5c5e:	9f 91       	pop	r25
    5c60:	8f 91       	pop	r24
    5c62:	7f 91       	pop	r23
    5c64:	6f 91       	pop	r22
    5c66:	5f 91       	pop	r21
    5c68:	4f 91       	pop	r20
    5c6a:	3f 91       	pop	r19
    5c6c:	2f 91       	pop	r18
    5c6e:	0f 90       	pop	r0
    5c70:	0b be       	out	0x3b, r0	; 59
    5c72:	0f 90       	pop	r0
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	0f 90       	pop	r0
    5c78:	1f 90       	pop	r1
    5c7a:	18 95       	reti

00005c7c <__vector_3>:

SIGNAL(INT2_vect) {
    5c7c:	1f 92       	push	r1
    5c7e:	0f 92       	push	r0
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	0f 92       	push	r0
    5c84:	11 24       	eor	r1, r1
    5c86:	0b b6       	in	r0, 0x3b	; 59
    5c88:	0f 92       	push	r0
    5c8a:	2f 93       	push	r18
    5c8c:	3f 93       	push	r19
    5c8e:	4f 93       	push	r20
    5c90:	5f 93       	push	r21
    5c92:	6f 93       	push	r22
    5c94:	7f 93       	push	r23
    5c96:	8f 93       	push	r24
    5c98:	9f 93       	push	r25
    5c9a:	af 93       	push	r26
    5c9c:	bf 93       	push	r27
    5c9e:	ef 93       	push	r30
    5ca0:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5ca2:	e0 91 5d 09 	lds	r30, 0x095D
    5ca6:	f0 91 5e 09 	lds	r31, 0x095E
    5caa:	30 97       	sbiw	r30, 0x00	; 0
    5cac:	11 f0       	breq	.+4      	; 0x5cb2 <__vector_3+0x36>
    5cae:	09 95       	icall
    5cb0:	04 c0       	rjmp	.+8      	; 0x5cba <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5cb2:	60 e0       	ldi	r22, 0x00	; 0
    5cb4:	8a e0       	ldi	r24, 0x0A	; 10
    5cb6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_kernel_error_add>
	return;  	
}
    5cba:	ff 91       	pop	r31
    5cbc:	ef 91       	pop	r30
    5cbe:	bf 91       	pop	r27
    5cc0:	af 91       	pop	r26
    5cc2:	9f 91       	pop	r25
    5cc4:	8f 91       	pop	r24
    5cc6:	7f 91       	pop	r23
    5cc8:	6f 91       	pop	r22
    5cca:	5f 91       	pop	r21
    5ccc:	4f 91       	pop	r20
    5cce:	3f 91       	pop	r19
    5cd0:	2f 91       	pop	r18
    5cd2:	0f 90       	pop	r0
    5cd4:	0b be       	out	0x3b, r0	; 59
    5cd6:	0f 90       	pop	r0
    5cd8:	0f be       	out	0x3f, r0	; 63
    5cda:	0f 90       	pop	r0
    5cdc:	1f 90       	pop	r1
    5cde:	18 95       	reti

00005ce0 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    5ce0:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5ce4:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5ce6:	84 b7       	in	r24, 0x34	; 52
    5ce8:	87 7f       	andi	r24, 0xF7	; 247
    5cea:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5cec:	e0 e6       	ldi	r30, 0x60	; 96
    5cee:	f0 e0       	ldi	r31, 0x00	; 0
    5cf0:	80 81       	ld	r24, Z
    5cf2:	88 61       	ori	r24, 0x18	; 24
    5cf4:	80 83       	st	Z, r24
WDTCSR = 0;
    5cf6:	10 82       	st	Z, r1
nrk_int_enable();
    5cf8:	0c 94 bf 19 	jmp	0x337e	; 0x337e <nrk_int_enable>

00005cfc <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    5cfc:	0e 94 bd 19 	call	0x337a	; 0x337a <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5d00:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5d02:	84 b7       	in	r24, 0x34	; 52
    5d04:	87 7f       	andi	r24, 0xF7	; 247
    5d06:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5d08:	e0 e6       	ldi	r30, 0x60	; 96
    5d0a:	f0 e0       	ldi	r31, 0x00	; 0
    5d0c:	80 81       	ld	r24, Z
    5d0e:	88 61       	ori	r24, 0x18	; 24
    5d10:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5d12:	8d e0       	ldi	r24, 0x0D	; 13
    5d14:	80 83       	st	Z, r24
nrk_int_enable();
    5d16:	0c 94 bf 19 	jmp	0x337e	; 0x337e <nrk_int_enable>

00005d1a <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5d1a:	04 b6       	in	r0, 0x34	; 52
    5d1c:	03 fe       	sbrs	r0, 3
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    5d20:	8f ef       	ldi	r24, 0xFF	; 255
    5d22:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5d24:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5d26:	08 95       	ret

00005d28 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5d28:	a8 95       	wdr
    5d2a:	08 95       	ret

00005d2c <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5d2c:	08 95       	ret

00005d2e <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5d2e:	83 b7       	in	r24, 0x33	; 51
    5d30:	81 7f       	andi	r24, 0xF1	; 241
    5d32:	86 60       	ori	r24, 0x06	; 6
    5d34:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5d36:	83 b7       	in	r24, 0x33	; 51
    5d38:	81 60       	ori	r24, 0x01	; 1
    5d3a:	83 bf       	out	0x33, r24	; 51
    5d3c:	88 95       	sleep
    5d3e:	83 b7       	in	r24, 0x33	; 51
    5d40:	8e 7f       	andi	r24, 0xFE	; 254
    5d42:	83 bf       	out	0x33, r24	; 51
    5d44:	08 95       	ret

00005d46 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5d46:	83 b7       	in	r24, 0x33	; 51
    5d48:	81 7f       	andi	r24, 0xF1	; 241
    5d4a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5d4c:	83 b7       	in	r24, 0x33	; 51
    5d4e:	81 60       	ori	r24, 0x01	; 1
    5d50:	83 bf       	out	0x33, r24	; 51
    5d52:	88 95       	sleep
    5d54:	83 b7       	in	r24, 0x33	; 51
    5d56:	8e 7f       	andi	r24, 0xFE	; 254
    5d58:	83 bf       	out	0x33, r24	; 51
    5d5a:	08 95       	ret

00005d5c <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5d5c:	fc 01       	movw	r30, r24
    5d5e:	76 83       	std	Z+6, r23	; 0x06
    5d60:	65 83       	std	Z+5, r22	; 0x05
    5d62:	08 95       	ret

00005d64 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5d64:	ef 92       	push	r14
    5d66:	ff 92       	push	r15
    5d68:	0f 93       	push	r16
    5d6a:	1f 93       	push	r17
    5d6c:	cf 93       	push	r28
    5d6e:	df 93       	push	r29
    5d70:	8c 01       	movw	r16, r24
    5d72:	7b 01       	movw	r14, r22
    5d74:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    5d76:	40 32       	cpi	r20, 0x20	; 32
    5d78:	51 05       	cpc	r21, r1
    5d7a:	18 f4       	brcc	.+6      	; 0x5d82 <nrk_task_set_stk+0x1e>
    5d7c:	81 e1       	ldi	r24, 0x11	; 17
    5d7e:	0e 94 30 1c 	call	0x3860	; 0x3860 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    5d82:	21 97       	sbiw	r28, 0x01	; 1
    5d84:	ce 0d       	add	r28, r14
    5d86:	df 1d       	adc	r29, r15
    5d88:	f8 01       	movw	r30, r16
    5d8a:	d2 83       	std	Z+2, r29	; 0x02
    5d8c:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    5d8e:	f4 82       	std	Z+4, r15	; 0x04
    5d90:	e3 82       	std	Z+3, r14	; 0x03

}
    5d92:	df 91       	pop	r29
    5d94:	cf 91       	pop	r28
    5d96:	1f 91       	pop	r17
    5d98:	0f 91       	pop	r16
    5d9a:	ff 90       	pop	r15
    5d9c:	ef 90       	pop	r14
    5d9e:	08 95       	ret

00005da0 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    5da0:	25 e5       	ldi	r18, 0x55	; 85
    5da2:	fa 01       	movw	r30, r20
    5da4:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5da6:	fb 01       	movw	r30, r22
    5da8:	32 97       	sbiw	r30, 0x02	; 2
    5daa:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5dac:	31 96       	adiw	r30, 0x01	; 1
    5dae:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5db0:	33 97       	sbiw	r30, 0x03	; 3
    5db2:	11 82       	std	Z+1, r1	; 0x01
    5db4:	10 82       	st	Z, r1
    *(--stk) = 0;       
    5db6:	32 97       	sbiw	r30, 0x02	; 2
    5db8:	11 82       	std	Z+1, r1	; 0x01
    5dba:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5dbc:	32 97       	sbiw	r30, 0x02	; 2
    5dbe:	11 82       	std	Z+1, r1	; 0x01
    5dc0:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5dc2:	32 97       	sbiw	r30, 0x02	; 2
    5dc4:	11 82       	std	Z+1, r1	; 0x01
    5dc6:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5dc8:	32 97       	sbiw	r30, 0x02	; 2
    5dca:	11 82       	std	Z+1, r1	; 0x01
    5dcc:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5dce:	32 97       	sbiw	r30, 0x02	; 2
    5dd0:	11 82       	std	Z+1, r1	; 0x01
    5dd2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5dd4:	32 97       	sbiw	r30, 0x02	; 2
    5dd6:	11 82       	std	Z+1, r1	; 0x01
    5dd8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5dda:	32 97       	sbiw	r30, 0x02	; 2
    5ddc:	11 82       	std	Z+1, r1	; 0x01
    5dde:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5de0:	32 97       	sbiw	r30, 0x02	; 2
    5de2:	11 82       	std	Z+1, r1	; 0x01
    5de4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5de6:	32 97       	sbiw	r30, 0x02	; 2
    5de8:	11 82       	std	Z+1, r1	; 0x01
    5dea:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5dec:	32 97       	sbiw	r30, 0x02	; 2
    5dee:	11 82       	std	Z+1, r1	; 0x01
    5df0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5df2:	32 97       	sbiw	r30, 0x02	; 2
    5df4:	11 82       	std	Z+1, r1	; 0x01
    5df6:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5df8:	32 97       	sbiw	r30, 0x02	; 2
    5dfa:	11 82       	std	Z+1, r1	; 0x01
    5dfc:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5dfe:	32 97       	sbiw	r30, 0x02	; 2
    5e00:	11 82       	std	Z+1, r1	; 0x01
    5e02:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5e04:	32 97       	sbiw	r30, 0x02	; 2
    5e06:	11 82       	std	Z+1, r1	; 0x01
    5e08:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5e0a:	32 97       	sbiw	r30, 0x02	; 2
    5e0c:	11 82       	std	Z+1, r1	; 0x01
    5e0e:	10 82       	st	Z, r1
    *(--stk) = 0;
    5e10:	cb 01       	movw	r24, r22
    5e12:	84 97       	sbiw	r24, 0x24	; 36
    5e14:	fc 01       	movw	r30, r24
    5e16:	11 82       	std	Z+1, r1	; 0x01
    5e18:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5e1a:	08 95       	ret

00005e1c <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5e1c:	85 e5       	ldi	r24, 0x55	; 85
    5e1e:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5e22:	ee ef       	ldi	r30, 0xFE	; 254
    5e24:	f1 e4       	ldi	r31, 0x41	; 65
    5e26:	f0 93 5c 05 	sts	0x055C, r31
    5e2a:	e0 93 5b 05 	sts	0x055B, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5e2e:	88 e8       	ldi	r24, 0x88	; 136
    5e30:	9b e1       	ldi	r25, 0x1B	; 27
    5e32:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5e34:	80 93 ff 41 	sts	0x41FF, r24
    5e38:	08 95       	ret

00005e3a <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5e3a:	88 e8       	ldi	r24, 0x88	; 136
    5e3c:	9b e1       	ldi	r25, 0x1B	; 27
    5e3e:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5e42:	80 93 ff 41 	sts	0x41FF, r24
    5e46:	08 95       	ret

00005e48 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5e48:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <_nrk_setup_timer>
  nrk_int_enable();  
    5e4c:	0c 94 bf 19 	jmp	0x337e	; 0x337e <nrk_int_enable>

00005e50 <nrk_start_high_ready_task>:
    5e50:	a0 91 22 09 	lds	r26, 0x0922
    5e54:	b0 91 23 09 	lds	r27, 0x0923
    5e58:	cd 91       	ld	r28, X+
    5e5a:	cd bf       	out	0x3d, r28	; 61
    5e5c:	dd 91       	ld	r29, X+
    5e5e:	de bf       	out	0x3e, r29	; 62
    5e60:	ff 91       	pop	r31
    5e62:	ef 91       	pop	r30
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	bf 91       	pop	r27
    5e6a:	af 91       	pop	r26
    5e6c:	9f 91       	pop	r25
    5e6e:	8f 91       	pop	r24
    5e70:	7f 91       	pop	r23
    5e72:	6f 91       	pop	r22
    5e74:	5f 91       	pop	r21
    5e76:	4f 91       	pop	r20
    5e78:	3f 91       	pop	r19
    5e7a:	2f 91       	pop	r18
    5e7c:	1f 91       	pop	r17
    5e7e:	0f 91       	pop	r16
    5e80:	ff 90       	pop	r15
    5e82:	ef 90       	pop	r14
    5e84:	df 90       	pop	r13
    5e86:	cf 90       	pop	r12
    5e88:	bf 90       	pop	r11
    5e8a:	af 90       	pop	r10
    5e8c:	9f 90       	pop	r9
    5e8e:	8f 90       	pop	r8
    5e90:	7f 90       	pop	r7
    5e92:	6f 90       	pop	r6
    5e94:	5f 90       	pop	r5
    5e96:	4f 90       	pop	r4
    5e98:	3f 90       	pop	r3
    5e9a:	2f 90       	pop	r2
    5e9c:	1f 90       	pop	r1
    5e9e:	0f 90       	pop	r0
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	0f 90       	pop	r0
    5ea4:	18 95       	reti

00005ea6 <main>:
void nrk_register_drivers();

int main ()
{
  uint16_t div;
  nrk_setup_ports ();
    5ea6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    5eaa:	80 e1       	ldi	r24, 0x10	; 16
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	0e 94 de 18 	call	0x31bc	; 0x31bc <nrk_setup_uart>

  nrk_init ();
    5eb2:	0e 94 c4 19 	call	0x3388	; 0x3388 <nrk_init>

  nrk_led_clr (0);
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
  nrk_led_clr (1);
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
  nrk_led_clr (2);
    5ec6:	82 e0       	ldi	r24, 0x02	; 2
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>
  nrk_led_clr (3);
    5ece:	83 e0       	ldi	r24, 0x03	; 3
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	0e 94 75 18 	call	0x30ea	; 0x30ea <nrk_led_clr>

  nrk_time_set (0, 0);
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	a9 01       	movw	r20, r18
    5edc:	60 e0       	ldi	r22, 0x00	; 0
    5ede:	70 e0       	ldi	r23, 0x00	; 0
    5ee0:	cb 01       	movw	r24, r22
    5ee2:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <nrk_time_set>

  bmac_task_config ();
    5ee6:	0e 94 a3 08 	call	0x1146	; 0x1146 <bmac_task_config>

  nrk_register_drivers();
    5eea:	0e 94 3a 05 	call	0xa74	; 0xa74 <nrk_register_drivers>
  nrk_create_taskset ();
    5eee:	0e 94 00 05 	call	0xa00	; 0xa00 <nrk_create_taskset>
  nrk_start ();
    5ef2:	0e 94 91 1a 	call	0x3522	; 0x3522 <nrk_start>

  return 0;
}
    5ef6:	80 e0       	ldi	r24, 0x00	; 0
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	08 95       	ret

00005efc <vfprintf>:
    5efc:	6f 92       	push	r6
    5efe:	7f 92       	push	r7
    5f00:	8f 92       	push	r8
    5f02:	9f 92       	push	r9
    5f04:	af 92       	push	r10
    5f06:	bf 92       	push	r11
    5f08:	cf 92       	push	r12
    5f0a:	df 92       	push	r13
    5f0c:	ef 92       	push	r14
    5f0e:	ff 92       	push	r15
    5f10:	0f 93       	push	r16
    5f12:	1f 93       	push	r17
    5f14:	cf 93       	push	r28
    5f16:	df 93       	push	r29
    5f18:	cd b7       	in	r28, 0x3d	; 61
    5f1a:	de b7       	in	r29, 0x3e	; 62
    5f1c:	2c 97       	sbiw	r28, 0x0c	; 12
    5f1e:	0f b6       	in	r0, 0x3f	; 63
    5f20:	f8 94       	cli
    5f22:	de bf       	out	0x3e, r29	; 62
    5f24:	0f be       	out	0x3f, r0	; 63
    5f26:	cd bf       	out	0x3d, r28	; 61
    5f28:	6c 01       	movw	r12, r24
    5f2a:	5b 01       	movw	r10, r22
    5f2c:	7a 01       	movw	r14, r20
    5f2e:	fc 01       	movw	r30, r24
    5f30:	17 82       	std	Z+7, r1	; 0x07
    5f32:	16 82       	std	Z+6, r1	; 0x06
    5f34:	83 81       	ldd	r24, Z+3	; 0x03
    5f36:	81 ff       	sbrs	r24, 1
    5f38:	0e c1       	rjmp	.+540    	; 0x6156 <vfprintf+0x25a>
    5f3a:	ce 01       	movw	r24, r28
    5f3c:	01 96       	adiw	r24, 0x01	; 1
    5f3e:	4c 01       	movw	r8, r24
    5f40:	f6 01       	movw	r30, r12
    5f42:	03 81       	ldd	r16, Z+3	; 0x03
    5f44:	f5 01       	movw	r30, r10
    5f46:	03 fd       	sbrc	r16, 3
    5f48:	15 91       	lpm	r17, Z+
    5f4a:	03 ff       	sbrs	r16, 3
    5f4c:	11 91       	ld	r17, Z+
    5f4e:	5f 01       	movw	r10, r30
    5f50:	11 23       	and	r17, r17
    5f52:	09 f4       	brne	.+2      	; 0x5f56 <vfprintf+0x5a>
    5f54:	fc c0       	rjmp	.+504    	; 0x614e <vfprintf+0x252>
    5f56:	15 32       	cpi	r17, 0x25	; 37
    5f58:	49 f4       	brne	.+18     	; 0x5f6c <vfprintf+0x70>
    5f5a:	03 fd       	sbrc	r16, 3
    5f5c:	15 91       	lpm	r17, Z+
    5f5e:	03 ff       	sbrs	r16, 3
    5f60:	11 91       	ld	r17, Z+
    5f62:	5f 01       	movw	r10, r30
    5f64:	15 32       	cpi	r17, 0x25	; 37
    5f66:	11 f0       	breq	.+4      	; 0x5f6c <vfprintf+0x70>
    5f68:	20 e0       	ldi	r18, 0x00	; 0
    5f6a:	1b c0       	rjmp	.+54     	; 0x5fa2 <vfprintf+0xa6>
    5f6c:	b6 01       	movw	r22, r12
    5f6e:	81 2f       	mov	r24, r17
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    5f76:	37 01       	movw	r6, r14
    5f78:	73 01       	movw	r14, r6
    5f7a:	e2 cf       	rjmp	.-60     	; 0x5f40 <vfprintf+0x44>
    5f7c:	11 23       	and	r17, r17
    5f7e:	09 f4       	brne	.+2      	; 0x5f82 <vfprintf+0x86>
    5f80:	e6 c0       	rjmp	.+460    	; 0x614e <vfprintf+0x252>
    5f82:	61 2f       	mov	r22, r17
    5f84:	70 e0       	ldi	r23, 0x00	; 0
    5f86:	8f ea       	ldi	r24, 0xAF	; 175
    5f88:	95 e0       	ldi	r25, 0x05	; 5
    5f8a:	2c 87       	std	Y+12, r18	; 0x0c
    5f8c:	0e 94 1f 32 	call	0x643e	; 0x643e <strchr_P>
    5f90:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f92:	89 2b       	or	r24, r25
    5f94:	49 f0       	breq	.+18     	; 0x5fa8 <vfprintf+0xac>
    5f96:	f5 01       	movw	r30, r10
    5f98:	03 fd       	sbrc	r16, 3
    5f9a:	15 91       	lpm	r17, Z+
    5f9c:	03 ff       	sbrs	r16, 3
    5f9e:	11 91       	ld	r17, Z+
    5fa0:	5f 01       	movw	r10, r30
    5fa2:	27 ff       	sbrs	r18, 7
    5fa4:	eb cf       	rjmp	.-42     	; 0x5f7c <vfprintf+0x80>
    5fa6:	09 c0       	rjmp	.+18     	; 0x5fba <vfprintf+0xbe>
    5fa8:	13 32       	cpi	r17, 0x23	; 35
    5faa:	29 f0       	breq	.+10     	; 0x5fb6 <vfprintf+0xba>
    5fac:	1c 36       	cpi	r17, 0x6C	; 108
    5fae:	09 f0       	breq	.+2      	; 0x5fb2 <vfprintf+0xb6>
    5fb0:	d5 c0       	rjmp	.+426    	; 0x615c <vfprintf+0x260>
    5fb2:	20 68       	ori	r18, 0x80	; 128
    5fb4:	f0 cf       	rjmp	.-32     	; 0x5f96 <vfprintf+0x9a>
    5fb6:	20 e1       	ldi	r18, 0x10	; 16
    5fb8:	ee cf       	rjmp	.-36     	; 0x5f96 <vfprintf+0x9a>
    5fba:	02 2f       	mov	r16, r18
    5fbc:	11 23       	and	r17, r17
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <vfprintf+0xc6>
    5fc0:	c6 c0       	rjmp	.+396    	; 0x614e <vfprintf+0x252>
    5fc2:	61 2f       	mov	r22, r17
    5fc4:	70 e0       	ldi	r23, 0x00	; 0
    5fc6:	88 ea       	ldi	r24, 0xA8	; 168
    5fc8:	95 e0       	ldi	r25, 0x05	; 5
    5fca:	2c 87       	std	Y+12, r18	; 0x0c
    5fcc:	0e 94 1f 32 	call	0x643e	; 0x643e <strchr_P>
    5fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    5fd2:	89 2b       	or	r24, r25
    5fd4:	41 f0       	breq	.+16     	; 0x5fe6 <vfprintf+0xea>
    5fd6:	37 01       	movw	r6, r14
    5fd8:	f4 e0       	ldi	r31, 0x04	; 4
    5fda:	6f 0e       	add	r6, r31
    5fdc:	71 1c       	adc	r7, r1
    5fde:	b6 01       	movw	r22, r12
    5fe0:	8f e3       	ldi	r24, 0x3F	; 63
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	11 c0       	rjmp	.+34     	; 0x6008 <vfprintf+0x10c>
    5fe6:	13 36       	cpi	r17, 0x63	; 99
    5fe8:	39 f0       	breq	.+14     	; 0x5ff8 <vfprintf+0xfc>
    5fea:	13 37       	cpi	r17, 0x73	; 115
    5fec:	81 f0       	breq	.+32     	; 0x600e <vfprintf+0x112>
    5fee:	13 35       	cpi	r17, 0x53	; 83
    5ff0:	19 f5       	brne	.+70     	; 0x6038 <vfprintf+0x13c>
    5ff2:	02 2f       	mov	r16, r18
    5ff4:	01 60       	ori	r16, 0x01	; 1
    5ff6:	0b c0       	rjmp	.+22     	; 0x600e <vfprintf+0x112>
    5ff8:	37 01       	movw	r6, r14
    5ffa:	82 e0       	ldi	r24, 0x02	; 2
    5ffc:	68 0e       	add	r6, r24
    5ffe:	71 1c       	adc	r7, r1
    6000:	b6 01       	movw	r22, r12
    6002:	f7 01       	movw	r30, r14
    6004:	80 81       	ld	r24, Z
    6006:	91 81       	ldd	r25, Z+1	; 0x01
    6008:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    600c:	b5 cf       	rjmp	.-150    	; 0x5f78 <vfprintf+0x7c>
    600e:	37 01       	movw	r6, r14
    6010:	f2 e0       	ldi	r31, 0x02	; 2
    6012:	6f 0e       	add	r6, r31
    6014:	71 1c       	adc	r7, r1
    6016:	f7 01       	movw	r30, r14
    6018:	e0 80       	ld	r14, Z
    601a:	f1 80       	ldd	r15, Z+1	; 0x01
    601c:	f7 01       	movw	r30, r14
    601e:	00 fd       	sbrc	r16, 0
    6020:	85 91       	lpm	r24, Z+
    6022:	00 ff       	sbrs	r16, 0
    6024:	81 91       	ld	r24, Z+
    6026:	7f 01       	movw	r14, r30
    6028:	88 23       	and	r24, r24
    602a:	09 f4       	brne	.+2      	; 0x602e <vfprintf+0x132>
    602c:	a5 cf       	rjmp	.-182    	; 0x5f78 <vfprintf+0x7c>
    602e:	b6 01       	movw	r22, r12
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    6036:	f2 cf       	rjmp	.-28     	; 0x601c <vfprintf+0x120>
    6038:	14 36       	cpi	r17, 0x64	; 100
    603a:	11 f0       	breq	.+4      	; 0x6040 <vfprintf+0x144>
    603c:	19 36       	cpi	r17, 0x69	; 105
    603e:	29 f5       	brne	.+74     	; 0x608a <vfprintf+0x18e>
    6040:	37 01       	movw	r6, r14
    6042:	27 ff       	sbrs	r18, 7
    6044:	09 c0       	rjmp	.+18     	; 0x6058 <vfprintf+0x15c>
    6046:	f4 e0       	ldi	r31, 0x04	; 4
    6048:	6f 0e       	add	r6, r31
    604a:	71 1c       	adc	r7, r1
    604c:	f7 01       	movw	r30, r14
    604e:	60 81       	ld	r22, Z
    6050:	71 81       	ldd	r23, Z+1	; 0x01
    6052:	82 81       	ldd	r24, Z+2	; 0x02
    6054:	93 81       	ldd	r25, Z+3	; 0x03
    6056:	0a c0       	rjmp	.+20     	; 0x606c <vfprintf+0x170>
    6058:	f2 e0       	ldi	r31, 0x02	; 2
    605a:	6f 0e       	add	r6, r31
    605c:	71 1c       	adc	r7, r1
    605e:	f7 01       	movw	r30, r14
    6060:	60 81       	ld	r22, Z
    6062:	71 81       	ldd	r23, Z+1	; 0x01
    6064:	88 27       	eor	r24, r24
    6066:	77 fd       	sbrc	r23, 7
    6068:	80 95       	com	r24
    606a:	98 2f       	mov	r25, r24
    606c:	02 2f       	mov	r16, r18
    606e:	0f 7e       	andi	r16, 0xEF	; 239
    6070:	97 ff       	sbrs	r25, 7
    6072:	08 c0       	rjmp	.+16     	; 0x6084 <vfprintf+0x188>
    6074:	90 95       	com	r25
    6076:	80 95       	com	r24
    6078:	70 95       	com	r23
    607a:	61 95       	neg	r22
    607c:	7f 4f       	sbci	r23, 0xFF	; 255
    607e:	8f 4f       	sbci	r24, 0xFF	; 255
    6080:	9f 4f       	sbci	r25, 0xFF	; 255
    6082:	00 64       	ori	r16, 0x40	; 64
    6084:	2a e0       	ldi	r18, 0x0A	; 10
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	33 c0       	rjmp	.+102    	; 0x60f0 <vfprintf+0x1f4>
    608a:	10 37       	cpi	r17, 0x70	; 112
    608c:	99 f0       	breq	.+38     	; 0x60b4 <vfprintf+0x1b8>
    608e:	40 f4       	brcc	.+16     	; 0x60a0 <vfprintf+0x1a4>
    6090:	18 35       	cpi	r17, 0x58	; 88
    6092:	b1 f0       	breq	.+44     	; 0x60c0 <vfprintf+0x1c4>
    6094:	1f 36       	cpi	r17, 0x6F	; 111
    6096:	09 f0       	breq	.+2      	; 0x609a <vfprintf+0x19e>
    6098:	5a c0       	rjmp	.+180    	; 0x614e <vfprintf+0x252>
    609a:	28 e0       	ldi	r18, 0x08	; 8
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	14 c0       	rjmp	.+40     	; 0x60c8 <vfprintf+0x1cc>
    60a0:	15 37       	cpi	r17, 0x75	; 117
    60a2:	19 f0       	breq	.+6      	; 0x60aa <vfprintf+0x1ae>
    60a4:	18 37       	cpi	r17, 0x78	; 120
    60a6:	41 f0       	breq	.+16     	; 0x60b8 <vfprintf+0x1bc>
    60a8:	52 c0       	rjmp	.+164    	; 0x614e <vfprintf+0x252>
    60aa:	02 2f       	mov	r16, r18
    60ac:	0f 7e       	andi	r16, 0xEF	; 239
    60ae:	2a e0       	ldi	r18, 0x0A	; 10
    60b0:	30 e0       	ldi	r19, 0x00	; 0
    60b2:	0a c0       	rjmp	.+20     	; 0x60c8 <vfprintf+0x1cc>
    60b4:	02 2f       	mov	r16, r18
    60b6:	00 61       	ori	r16, 0x10	; 16
    60b8:	04 62       	ori	r16, 0x24	; 36
    60ba:	20 e1       	ldi	r18, 0x10	; 16
    60bc:	30 e0       	ldi	r19, 0x00	; 0
    60be:	04 c0       	rjmp	.+8      	; 0x60c8 <vfprintf+0x1cc>
    60c0:	02 2f       	mov	r16, r18
    60c2:	04 60       	ori	r16, 0x04	; 4
    60c4:	20 e1       	ldi	r18, 0x10	; 16
    60c6:	32 e0       	ldi	r19, 0x02	; 2
    60c8:	37 01       	movw	r6, r14
    60ca:	07 ff       	sbrs	r16, 7
    60cc:	09 c0       	rjmp	.+18     	; 0x60e0 <vfprintf+0x1e4>
    60ce:	f4 e0       	ldi	r31, 0x04	; 4
    60d0:	6f 0e       	add	r6, r31
    60d2:	71 1c       	adc	r7, r1
    60d4:	f7 01       	movw	r30, r14
    60d6:	60 81       	ld	r22, Z
    60d8:	71 81       	ldd	r23, Z+1	; 0x01
    60da:	82 81       	ldd	r24, Z+2	; 0x02
    60dc:	93 81       	ldd	r25, Z+3	; 0x03
    60de:	08 c0       	rjmp	.+16     	; 0x60f0 <vfprintf+0x1f4>
    60e0:	f2 e0       	ldi	r31, 0x02	; 2
    60e2:	6f 0e       	add	r6, r31
    60e4:	71 1c       	adc	r7, r1
    60e6:	f7 01       	movw	r30, r14
    60e8:	60 81       	ld	r22, Z
    60ea:	71 81       	ldd	r23, Z+1	; 0x01
    60ec:	80 e0       	ldi	r24, 0x00	; 0
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	a4 01       	movw	r20, r8
    60f2:	0e 94 30 33 	call	0x6660	; 0x6660 <__ultoa_invert>
    60f6:	18 2f       	mov	r17, r24
    60f8:	18 19       	sub	r17, r8
    60fa:	06 ff       	sbrs	r16, 6
    60fc:	05 c0       	rjmp	.+10     	; 0x6108 <vfprintf+0x20c>
    60fe:	b6 01       	movw	r22, r12
    6100:	8d e2       	ldi	r24, 0x2D	; 45
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    6108:	04 ff       	sbrs	r16, 4
    610a:	15 c0       	rjmp	.+42     	; 0x6136 <vfprintf+0x23a>
    610c:	fe 01       	movw	r30, r28
    610e:	e1 0f       	add	r30, r17
    6110:	f1 1d       	adc	r31, r1
    6112:	80 81       	ld	r24, Z
    6114:	80 33       	cpi	r24, 0x30	; 48
    6116:	79 f0       	breq	.+30     	; 0x6136 <vfprintf+0x23a>
    6118:	b6 01       	movw	r22, r12
    611a:	80 e3       	ldi	r24, 0x30	; 48
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    6122:	02 ff       	sbrs	r16, 2
    6124:	08 c0       	rjmp	.+16     	; 0x6136 <vfprintf+0x23a>
    6126:	00 72       	andi	r16, 0x20	; 32
    6128:	80 2f       	mov	r24, r16
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	b6 01       	movw	r22, r12
    612e:	88 5a       	subi	r24, 0xA8	; 168
    6130:	9f 4f       	sbci	r25, 0xFF	; 255
    6132:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    6136:	11 50       	subi	r17, 0x01	; 1
    6138:	f4 01       	movw	r30, r8
    613a:	e1 0f       	add	r30, r17
    613c:	f1 1d       	adc	r31, r1
    613e:	80 81       	ld	r24, Z
    6140:	b6 01       	movw	r22, r12
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	0e 94 7e 32 	call	0x64fc	; 0x64fc <fputc>
    6148:	11 11       	cpse	r17, r1
    614a:	f5 cf       	rjmp	.-22     	; 0x6136 <vfprintf+0x23a>
    614c:	15 cf       	rjmp	.-470    	; 0x5f78 <vfprintf+0x7c>
    614e:	f6 01       	movw	r30, r12
    6150:	86 81       	ldd	r24, Z+6	; 0x06
    6152:	97 81       	ldd	r25, Z+7	; 0x07
    6154:	05 c0       	rjmp	.+10     	; 0x6160 <vfprintf+0x264>
    6156:	8f ef       	ldi	r24, 0xFF	; 255
    6158:	9f ef       	ldi	r25, 0xFF	; 255
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <vfprintf+0x264>
    615c:	02 2f       	mov	r16, r18
    615e:	31 cf       	rjmp	.-414    	; 0x5fc2 <vfprintf+0xc6>
    6160:	2c 96       	adiw	r28, 0x0c	; 12
    6162:	0f b6       	in	r0, 0x3f	; 63
    6164:	f8 94       	cli
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	0f be       	out	0x3f, r0	; 63
    616a:	cd bf       	out	0x3d, r28	; 61
    616c:	df 91       	pop	r29
    616e:	cf 91       	pop	r28
    6170:	1f 91       	pop	r17
    6172:	0f 91       	pop	r16
    6174:	ff 90       	pop	r15
    6176:	ef 90       	pop	r14
    6178:	df 90       	pop	r13
    617a:	cf 90       	pop	r12
    617c:	bf 90       	pop	r11
    617e:	af 90       	pop	r10
    6180:	9f 90       	pop	r9
    6182:	8f 90       	pop	r8
    6184:	7f 90       	pop	r7
    6186:	6f 90       	pop	r6
    6188:	08 95       	ret

0000618a <__muluhisi3>:
    618a:	0e 94 b6 31 	call	0x636c	; 0x636c <__umulhisi3>
    618e:	a5 9f       	mul	r26, r21
    6190:	90 0d       	add	r25, r0
    6192:	b4 9f       	mul	r27, r20
    6194:	90 0d       	add	r25, r0
    6196:	a4 9f       	mul	r26, r20
    6198:	80 0d       	add	r24, r0
    619a:	91 1d       	adc	r25, r1
    619c:	11 24       	eor	r1, r1
    619e:	08 95       	ret

000061a0 <__mulshisi3>:
    61a0:	b7 ff       	sbrs	r27, 7
    61a2:	0c 94 c5 30 	jmp	0x618a	; 0x618a <__muluhisi3>

000061a6 <__mulohisi3>:
    61a6:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    61aa:	82 1b       	sub	r24, r18
    61ac:	93 0b       	sbc	r25, r19
    61ae:	08 95       	ret

000061b0 <__mulsi3>:
    61b0:	db 01       	movw	r26, r22
    61b2:	8f 93       	push	r24
    61b4:	9f 93       	push	r25
    61b6:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    61ba:	bf 91       	pop	r27
    61bc:	af 91       	pop	r26
    61be:	a2 9f       	mul	r26, r18
    61c0:	80 0d       	add	r24, r0
    61c2:	91 1d       	adc	r25, r1
    61c4:	a3 9f       	mul	r26, r19
    61c6:	90 0d       	add	r25, r0
    61c8:	b2 9f       	mul	r27, r18
    61ca:	90 0d       	add	r25, r0
    61cc:	11 24       	eor	r1, r1
    61ce:	08 95       	ret

000061d0 <__udivmodhi4>:
    61d0:	aa 1b       	sub	r26, r26
    61d2:	bb 1b       	sub	r27, r27
    61d4:	51 e1       	ldi	r21, 0x11	; 17
    61d6:	07 c0       	rjmp	.+14     	; 0x61e6 <__udivmodhi4_ep>

000061d8 <__udivmodhi4_loop>:
    61d8:	aa 1f       	adc	r26, r26
    61da:	bb 1f       	adc	r27, r27
    61dc:	a6 17       	cp	r26, r22
    61de:	b7 07       	cpc	r27, r23
    61e0:	10 f0       	brcs	.+4      	; 0x61e6 <__udivmodhi4_ep>
    61e2:	a6 1b       	sub	r26, r22
    61e4:	b7 0b       	sbc	r27, r23

000061e6 <__udivmodhi4_ep>:
    61e6:	88 1f       	adc	r24, r24
    61e8:	99 1f       	adc	r25, r25
    61ea:	5a 95       	dec	r21
    61ec:	a9 f7       	brne	.-22     	; 0x61d8 <__udivmodhi4_loop>
    61ee:	80 95       	com	r24
    61f0:	90 95       	com	r25
    61f2:	bc 01       	movw	r22, r24
    61f4:	cd 01       	movw	r24, r26
    61f6:	08 95       	ret

000061f8 <__divmodhi4>:
    61f8:	97 fb       	bst	r25, 7
    61fa:	07 2e       	mov	r0, r23
    61fc:	16 f4       	brtc	.+4      	; 0x6202 <__divmodhi4+0xa>
    61fe:	00 94       	com	r0
    6200:	07 d0       	rcall	.+14     	; 0x6210 <__divmodhi4_neg1>
    6202:	77 fd       	sbrc	r23, 7
    6204:	09 d0       	rcall	.+18     	; 0x6218 <__divmodhi4_neg2>
    6206:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <__udivmodhi4>
    620a:	07 fc       	sbrc	r0, 7
    620c:	05 d0       	rcall	.+10     	; 0x6218 <__divmodhi4_neg2>
    620e:	3e f4       	brtc	.+14     	; 0x621e <__divmodhi4_exit>

00006210 <__divmodhi4_neg1>:
    6210:	90 95       	com	r25
    6212:	81 95       	neg	r24
    6214:	9f 4f       	sbci	r25, 0xFF	; 255
    6216:	08 95       	ret

00006218 <__divmodhi4_neg2>:
    6218:	70 95       	com	r23
    621a:	61 95       	neg	r22
    621c:	7f 4f       	sbci	r23, 0xFF	; 255

0000621e <__divmodhi4_exit>:
    621e:	08 95       	ret

00006220 <__udivmodsi4>:
    6220:	a1 e2       	ldi	r26, 0x21	; 33
    6222:	1a 2e       	mov	r1, r26
    6224:	aa 1b       	sub	r26, r26
    6226:	bb 1b       	sub	r27, r27
    6228:	fd 01       	movw	r30, r26
    622a:	0d c0       	rjmp	.+26     	; 0x6246 <__udivmodsi4_ep>

0000622c <__udivmodsi4_loop>:
    622c:	aa 1f       	adc	r26, r26
    622e:	bb 1f       	adc	r27, r27
    6230:	ee 1f       	adc	r30, r30
    6232:	ff 1f       	adc	r31, r31
    6234:	a2 17       	cp	r26, r18
    6236:	b3 07       	cpc	r27, r19
    6238:	e4 07       	cpc	r30, r20
    623a:	f5 07       	cpc	r31, r21
    623c:	20 f0       	brcs	.+8      	; 0x6246 <__udivmodsi4_ep>
    623e:	a2 1b       	sub	r26, r18
    6240:	b3 0b       	sbc	r27, r19
    6242:	e4 0b       	sbc	r30, r20
    6244:	f5 0b       	sbc	r31, r21

00006246 <__udivmodsi4_ep>:
    6246:	66 1f       	adc	r22, r22
    6248:	77 1f       	adc	r23, r23
    624a:	88 1f       	adc	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	1a 94       	dec	r1
    6250:	69 f7       	brne	.-38     	; 0x622c <__udivmodsi4_loop>
    6252:	60 95       	com	r22
    6254:	70 95       	com	r23
    6256:	80 95       	com	r24
    6258:	90 95       	com	r25
    625a:	9b 01       	movw	r18, r22
    625c:	ac 01       	movw	r20, r24
    625e:	bd 01       	movw	r22, r26
    6260:	cf 01       	movw	r24, r30
    6262:	08 95       	ret

00006264 <__divmodsi4>:
    6264:	05 2e       	mov	r0, r21
    6266:	97 fb       	bst	r25, 7
    6268:	1e f4       	brtc	.+6      	; 0x6270 <__divmodsi4+0xc>
    626a:	00 94       	com	r0
    626c:	0e 94 a8 31 	call	0x6350	; 0x6350 <__negsi2>
    6270:	57 fd       	sbrc	r21, 7
    6272:	07 d0       	rcall	.+14     	; 0x6282 <__divmodsi4_neg2>
    6274:	0e 94 10 31 	call	0x6220	; 0x6220 <__udivmodsi4>
    6278:	07 fc       	sbrc	r0, 7
    627a:	03 d0       	rcall	.+6      	; 0x6282 <__divmodsi4_neg2>
    627c:	4e f4       	brtc	.+18     	; 0x6290 <__divmodsi4_exit>
    627e:	0c 94 a8 31 	jmp	0x6350	; 0x6350 <__negsi2>

00006282 <__divmodsi4_neg2>:
    6282:	50 95       	com	r21
    6284:	40 95       	com	r20
    6286:	30 95       	com	r19
    6288:	21 95       	neg	r18
    628a:	3f 4f       	sbci	r19, 0xFF	; 255
    628c:	4f 4f       	sbci	r20, 0xFF	; 255
    628e:	5f 4f       	sbci	r21, 0xFF	; 255

00006290 <__divmodsi4_exit>:
    6290:	08 95       	ret

00006292 <__umoddi3>:
    6292:	68 94       	set
    6294:	01 c0       	rjmp	.+2      	; 0x6298 <__udivdi3_umoddi3>

00006296 <__udivdi3>:
    6296:	e8 94       	clt

00006298 <__udivdi3_umoddi3>:
    6298:	8f 92       	push	r8
    629a:	9f 92       	push	r9
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	0e 94 57 31 	call	0x62ae	; 0x62ae <__udivmod64>
    62a4:	df 91       	pop	r29
    62a6:	cf 91       	pop	r28
    62a8:	9f 90       	pop	r9
    62aa:	8f 90       	pop	r8
    62ac:	08 95       	ret

000062ae <__udivmod64>:
    62ae:	88 24       	eor	r8, r8
    62b0:	99 24       	eor	r9, r9
    62b2:	f4 01       	movw	r30, r8
    62b4:	e4 01       	movw	r28, r8
    62b6:	b0 e4       	ldi	r27, 0x40	; 64
    62b8:	9f 93       	push	r25
    62ba:	aa 27       	eor	r26, r26
    62bc:	9a 15       	cp	r25, r10
    62be:	8b 04       	cpc	r8, r11
    62c0:	9c 04       	cpc	r9, r12
    62c2:	ed 05       	cpc	r30, r13
    62c4:	fe 05       	cpc	r31, r14
    62c6:	cf 05       	cpc	r28, r15
    62c8:	d0 07       	cpc	r29, r16
    62ca:	a1 07       	cpc	r26, r17
    62cc:	98 f4       	brcc	.+38     	; 0x62f4 <__udivmod64+0x46>
    62ce:	ad 2f       	mov	r26, r29
    62d0:	dc 2f       	mov	r29, r28
    62d2:	cf 2f       	mov	r28, r31
    62d4:	fe 2f       	mov	r31, r30
    62d6:	e9 2d       	mov	r30, r9
    62d8:	98 2c       	mov	r9, r8
    62da:	89 2e       	mov	r8, r25
    62dc:	98 2f       	mov	r25, r24
    62de:	87 2f       	mov	r24, r23
    62e0:	76 2f       	mov	r23, r22
    62e2:	65 2f       	mov	r22, r21
    62e4:	54 2f       	mov	r21, r20
    62e6:	43 2f       	mov	r20, r19
    62e8:	32 2f       	mov	r19, r18
    62ea:	22 27       	eor	r18, r18
    62ec:	b8 50       	subi	r27, 0x08	; 8
    62ee:	31 f7       	brne	.-52     	; 0x62bc <__udivmod64+0xe>
    62f0:	bf 91       	pop	r27
    62f2:	27 c0       	rjmp	.+78     	; 0x6342 <__udivmod64+0x94>
    62f4:	1b 2e       	mov	r1, r27
    62f6:	bf 91       	pop	r27
    62f8:	bb 27       	eor	r27, r27
    62fa:	22 0f       	add	r18, r18
    62fc:	33 1f       	adc	r19, r19
    62fe:	44 1f       	adc	r20, r20
    6300:	55 1f       	adc	r21, r21
    6302:	66 1f       	adc	r22, r22
    6304:	77 1f       	adc	r23, r23
    6306:	88 1f       	adc	r24, r24
    6308:	99 1f       	adc	r25, r25
    630a:	88 1c       	adc	r8, r8
    630c:	99 1c       	adc	r9, r9
    630e:	ee 1f       	adc	r30, r30
    6310:	ff 1f       	adc	r31, r31
    6312:	cc 1f       	adc	r28, r28
    6314:	dd 1f       	adc	r29, r29
    6316:	aa 1f       	adc	r26, r26
    6318:	bb 1f       	adc	r27, r27
    631a:	8a 14       	cp	r8, r10
    631c:	9b 04       	cpc	r9, r11
    631e:	ec 05       	cpc	r30, r12
    6320:	fd 05       	cpc	r31, r13
    6322:	ce 05       	cpc	r28, r14
    6324:	df 05       	cpc	r29, r15
    6326:	a0 07       	cpc	r26, r16
    6328:	b1 07       	cpc	r27, r17
    632a:	48 f0       	brcs	.+18     	; 0x633e <__udivmod64+0x90>
    632c:	8a 18       	sub	r8, r10
    632e:	9b 08       	sbc	r9, r11
    6330:	ec 09       	sbc	r30, r12
    6332:	fd 09       	sbc	r31, r13
    6334:	ce 09       	sbc	r28, r14
    6336:	df 09       	sbc	r29, r15
    6338:	a0 0b       	sbc	r26, r16
    633a:	b1 0b       	sbc	r27, r17
    633c:	21 60       	ori	r18, 0x01	; 1
    633e:	1a 94       	dec	r1
    6340:	e1 f6       	brne	.-72     	; 0x62fa <__udivmod64+0x4c>
    6342:	2e f4       	brtc	.+10     	; 0x634e <__udivmod64+0xa0>
    6344:	94 01       	movw	r18, r8
    6346:	af 01       	movw	r20, r30
    6348:	be 01       	movw	r22, r28
    634a:	cd 01       	movw	r24, r26
    634c:	00 0c       	add	r0, r0
    634e:	08 95       	ret

00006350 <__negsi2>:
    6350:	90 95       	com	r25
    6352:	80 95       	com	r24
    6354:	70 95       	com	r23
    6356:	61 95       	neg	r22
    6358:	7f 4f       	sbci	r23, 0xFF	; 255
    635a:	8f 4f       	sbci	r24, 0xFF	; 255
    635c:	9f 4f       	sbci	r25, 0xFF	; 255
    635e:	08 95       	ret

00006360 <__tablejump2__>:
    6360:	ee 0f       	add	r30, r30
    6362:	ff 1f       	adc	r31, r31

00006364 <__tablejump__>:
    6364:	05 90       	lpm	r0, Z+
    6366:	f4 91       	lpm	r31, Z
    6368:	e0 2d       	mov	r30, r0
    636a:	09 94       	ijmp

0000636c <__umulhisi3>:
    636c:	a2 9f       	mul	r26, r18
    636e:	b0 01       	movw	r22, r0
    6370:	b3 9f       	mul	r27, r19
    6372:	c0 01       	movw	r24, r0
    6374:	a3 9f       	mul	r26, r19
    6376:	70 0d       	add	r23, r0
    6378:	81 1d       	adc	r24, r1
    637a:	11 24       	eor	r1, r1
    637c:	91 1d       	adc	r25, r1
    637e:	b2 9f       	mul	r27, r18
    6380:	70 0d       	add	r23, r0
    6382:	81 1d       	adc	r24, r1
    6384:	11 24       	eor	r1, r1
    6386:	91 1d       	adc	r25, r1
    6388:	08 95       	ret

0000638a <do_rand>:
    638a:	8f 92       	push	r8
    638c:	9f 92       	push	r9
    638e:	af 92       	push	r10
    6390:	bf 92       	push	r11
    6392:	cf 92       	push	r12
    6394:	df 92       	push	r13
    6396:	ef 92       	push	r14
    6398:	ff 92       	push	r15
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	ec 01       	movw	r28, r24
    63a0:	68 81       	ld	r22, Y
    63a2:	79 81       	ldd	r23, Y+1	; 0x01
    63a4:	8a 81       	ldd	r24, Y+2	; 0x02
    63a6:	9b 81       	ldd	r25, Y+3	; 0x03
    63a8:	61 15       	cp	r22, r1
    63aa:	71 05       	cpc	r23, r1
    63ac:	81 05       	cpc	r24, r1
    63ae:	91 05       	cpc	r25, r1
    63b0:	21 f4       	brne	.+8      	; 0x63ba <do_rand+0x30>
    63b2:	64 e2       	ldi	r22, 0x24	; 36
    63b4:	79 ed       	ldi	r23, 0xD9	; 217
    63b6:	8b e5       	ldi	r24, 0x5B	; 91
    63b8:	97 e0       	ldi	r25, 0x07	; 7
    63ba:	2d e1       	ldi	r18, 0x1D	; 29
    63bc:	33 ef       	ldi	r19, 0xF3	; 243
    63be:	41 e0       	ldi	r20, 0x01	; 1
    63c0:	50 e0       	ldi	r21, 0x00	; 0
    63c2:	0e 94 32 31 	call	0x6264	; 0x6264 <__divmodsi4>
    63c6:	49 01       	movw	r8, r18
    63c8:	5a 01       	movw	r10, r20
    63ca:	9b 01       	movw	r18, r22
    63cc:	ac 01       	movw	r20, r24
    63ce:	a7 ea       	ldi	r26, 0xA7	; 167
    63d0:	b1 e4       	ldi	r27, 0x41	; 65
    63d2:	0e 94 c5 30 	call	0x618a	; 0x618a <__muluhisi3>
    63d6:	6b 01       	movw	r12, r22
    63d8:	7c 01       	movw	r14, r24
    63da:	ac ee       	ldi	r26, 0xEC	; 236
    63dc:	b4 ef       	ldi	r27, 0xF4	; 244
    63de:	a5 01       	movw	r20, r10
    63e0:	94 01       	movw	r18, r8
    63e2:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <__mulohisi3>
    63e6:	dc 01       	movw	r26, r24
    63e8:	cb 01       	movw	r24, r22
    63ea:	8c 0d       	add	r24, r12
    63ec:	9d 1d       	adc	r25, r13
    63ee:	ae 1d       	adc	r26, r14
    63f0:	bf 1d       	adc	r27, r15
    63f2:	b7 ff       	sbrs	r27, 7
    63f4:	03 c0       	rjmp	.+6      	; 0x63fc <do_rand+0x72>
    63f6:	01 97       	sbiw	r24, 0x01	; 1
    63f8:	a1 09       	sbc	r26, r1
    63fa:	b0 48       	sbci	r27, 0x80	; 128
    63fc:	88 83       	st	Y, r24
    63fe:	99 83       	std	Y+1, r25	; 0x01
    6400:	aa 83       	std	Y+2, r26	; 0x02
    6402:	bb 83       	std	Y+3, r27	; 0x03
    6404:	9f 77       	andi	r25, 0x7F	; 127
    6406:	df 91       	pop	r29
    6408:	cf 91       	pop	r28
    640a:	ff 90       	pop	r15
    640c:	ef 90       	pop	r14
    640e:	df 90       	pop	r13
    6410:	cf 90       	pop	r12
    6412:	bf 90       	pop	r11
    6414:	af 90       	pop	r10
    6416:	9f 90       	pop	r9
    6418:	8f 90       	pop	r8
    641a:	08 95       	ret

0000641c <rand_r>:
    641c:	0c 94 c5 31 	jmp	0x638a	; 0x638a <do_rand>

00006420 <rand>:
    6420:	80 e0       	ldi	r24, 0x00	; 0
    6422:	92 e0       	ldi	r25, 0x02	; 2
    6424:	0c 94 c5 31 	jmp	0x638a	; 0x638a <do_rand>

00006428 <srand>:
    6428:	a0 e0       	ldi	r26, 0x00	; 0
    642a:	b0 e0       	ldi	r27, 0x00	; 0
    642c:	80 93 00 02 	sts	0x0200, r24
    6430:	90 93 01 02 	sts	0x0201, r25
    6434:	a0 93 02 02 	sts	0x0202, r26
    6438:	b0 93 03 02 	sts	0x0203, r27
    643c:	08 95       	ret

0000643e <strchr_P>:
    643e:	fc 01       	movw	r30, r24
    6440:	05 90       	lpm	r0, Z+
    6442:	06 16       	cp	r0, r22
    6444:	21 f0       	breq	.+8      	; 0x644e <strchr_P+0x10>
    6446:	00 20       	and	r0, r0
    6448:	d9 f7       	brne	.-10     	; 0x6440 <strchr_P+0x2>
    644a:	c0 01       	movw	r24, r0
    644c:	08 95       	ret
    644e:	31 97       	sbiw	r30, 0x01	; 1
    6450:	cf 01       	movw	r24, r30
    6452:	08 95       	ret

00006454 <memcpy>:
    6454:	fb 01       	movw	r30, r22
    6456:	dc 01       	movw	r26, r24
    6458:	02 c0       	rjmp	.+4      	; 0x645e <memcpy+0xa>
    645a:	01 90       	ld	r0, Z+
    645c:	0d 92       	st	X+, r0
    645e:	41 50       	subi	r20, 0x01	; 1
    6460:	50 40       	sbci	r21, 0x00	; 0
    6462:	d8 f7       	brcc	.-10     	; 0x645a <memcpy+0x6>
    6464:	08 95       	ret

00006466 <fdevopen>:
    6466:	0f 93       	push	r16
    6468:	1f 93       	push	r17
    646a:	cf 93       	push	r28
    646c:	df 93       	push	r29
    646e:	00 97       	sbiw	r24, 0x00	; 0
    6470:	31 f4       	brne	.+12     	; 0x647e <fdevopen+0x18>
    6472:	61 15       	cp	r22, r1
    6474:	71 05       	cpc	r23, r1
    6476:	19 f4       	brne	.+6      	; 0x647e <fdevopen+0x18>
    6478:	80 e0       	ldi	r24, 0x00	; 0
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	3a c0       	rjmp	.+116    	; 0x64f2 <fdevopen+0x8c>
    647e:	8b 01       	movw	r16, r22
    6480:	ec 01       	movw	r28, r24
    6482:	6e e0       	ldi	r22, 0x0E	; 14
    6484:	70 e0       	ldi	r23, 0x00	; 0
    6486:	81 e0       	ldi	r24, 0x01	; 1
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	0e 94 a4 33 	call	0x6748	; 0x6748 <calloc>
    648e:	fc 01       	movw	r30, r24
    6490:	00 97       	sbiw	r24, 0x00	; 0
    6492:	91 f3       	breq	.-28     	; 0x6478 <fdevopen+0x12>
    6494:	80 e8       	ldi	r24, 0x80	; 128
    6496:	83 83       	std	Z+3, r24	; 0x03
    6498:	01 15       	cp	r16, r1
    649a:	11 05       	cpc	r17, r1
    649c:	71 f0       	breq	.+28     	; 0x64ba <fdevopen+0x54>
    649e:	13 87       	std	Z+11, r17	; 0x0b
    64a0:	02 87       	std	Z+10, r16	; 0x0a
    64a2:	81 e8       	ldi	r24, 0x81	; 129
    64a4:	83 83       	std	Z+3, r24	; 0x03
    64a6:	80 91 61 09 	lds	r24, 0x0961
    64aa:	90 91 62 09 	lds	r25, 0x0962
    64ae:	89 2b       	or	r24, r25
    64b0:	21 f4       	brne	.+8      	; 0x64ba <fdevopen+0x54>
    64b2:	f0 93 62 09 	sts	0x0962, r31
    64b6:	e0 93 61 09 	sts	0x0961, r30
    64ba:	20 97       	sbiw	r28, 0x00	; 0
    64bc:	c9 f0       	breq	.+50     	; 0x64f0 <fdevopen+0x8a>
    64be:	d1 87       	std	Z+9, r29	; 0x09
    64c0:	c0 87       	std	Z+8, r28	; 0x08
    64c2:	83 81       	ldd	r24, Z+3	; 0x03
    64c4:	82 60       	ori	r24, 0x02	; 2
    64c6:	83 83       	std	Z+3, r24	; 0x03
    64c8:	80 91 63 09 	lds	r24, 0x0963
    64cc:	90 91 64 09 	lds	r25, 0x0964
    64d0:	89 2b       	or	r24, r25
    64d2:	71 f4       	brne	.+28     	; 0x64f0 <fdevopen+0x8a>
    64d4:	f0 93 64 09 	sts	0x0964, r31
    64d8:	e0 93 63 09 	sts	0x0963, r30
    64dc:	80 91 65 09 	lds	r24, 0x0965
    64e0:	90 91 66 09 	lds	r25, 0x0966
    64e4:	89 2b       	or	r24, r25
    64e6:	21 f4       	brne	.+8      	; 0x64f0 <fdevopen+0x8a>
    64e8:	f0 93 66 09 	sts	0x0966, r31
    64ec:	e0 93 65 09 	sts	0x0965, r30
    64f0:	cf 01       	movw	r24, r30
    64f2:	df 91       	pop	r29
    64f4:	cf 91       	pop	r28
    64f6:	1f 91       	pop	r17
    64f8:	0f 91       	pop	r16
    64fa:	08 95       	ret

000064fc <fputc>:
    64fc:	0f 93       	push	r16
    64fe:	1f 93       	push	r17
    6500:	cf 93       	push	r28
    6502:	df 93       	push	r29
    6504:	fb 01       	movw	r30, r22
    6506:	23 81       	ldd	r18, Z+3	; 0x03
    6508:	21 fd       	sbrc	r18, 1
    650a:	03 c0       	rjmp	.+6      	; 0x6512 <fputc+0x16>
    650c:	8f ef       	ldi	r24, 0xFF	; 255
    650e:	9f ef       	ldi	r25, 0xFF	; 255
    6510:	28 c0       	rjmp	.+80     	; 0x6562 <fputc+0x66>
    6512:	22 ff       	sbrs	r18, 2
    6514:	16 c0       	rjmp	.+44     	; 0x6542 <fputc+0x46>
    6516:	46 81       	ldd	r20, Z+6	; 0x06
    6518:	57 81       	ldd	r21, Z+7	; 0x07
    651a:	24 81       	ldd	r18, Z+4	; 0x04
    651c:	35 81       	ldd	r19, Z+5	; 0x05
    651e:	42 17       	cp	r20, r18
    6520:	53 07       	cpc	r21, r19
    6522:	44 f4       	brge	.+16     	; 0x6534 <fputc+0x38>
    6524:	a0 81       	ld	r26, Z
    6526:	b1 81       	ldd	r27, Z+1	; 0x01
    6528:	9d 01       	movw	r18, r26
    652a:	2f 5f       	subi	r18, 0xFF	; 255
    652c:	3f 4f       	sbci	r19, 0xFF	; 255
    652e:	31 83       	std	Z+1, r19	; 0x01
    6530:	20 83       	st	Z, r18
    6532:	8c 93       	st	X, r24
    6534:	26 81       	ldd	r18, Z+6	; 0x06
    6536:	37 81       	ldd	r19, Z+7	; 0x07
    6538:	2f 5f       	subi	r18, 0xFF	; 255
    653a:	3f 4f       	sbci	r19, 0xFF	; 255
    653c:	37 83       	std	Z+7, r19	; 0x07
    653e:	26 83       	std	Z+6, r18	; 0x06
    6540:	10 c0       	rjmp	.+32     	; 0x6562 <fputc+0x66>
    6542:	eb 01       	movw	r28, r22
    6544:	09 2f       	mov	r16, r25
    6546:	18 2f       	mov	r17, r24
    6548:	00 84       	ldd	r0, Z+8	; 0x08
    654a:	f1 85       	ldd	r31, Z+9	; 0x09
    654c:	e0 2d       	mov	r30, r0
    654e:	09 95       	icall
    6550:	89 2b       	or	r24, r25
    6552:	e1 f6       	brne	.-72     	; 0x650c <fputc+0x10>
    6554:	8e 81       	ldd	r24, Y+6	; 0x06
    6556:	9f 81       	ldd	r25, Y+7	; 0x07
    6558:	01 96       	adiw	r24, 0x01	; 1
    655a:	9f 83       	std	Y+7, r25	; 0x07
    655c:	8e 83       	std	Y+6, r24	; 0x06
    655e:	81 2f       	mov	r24, r17
    6560:	90 2f       	mov	r25, r16
    6562:	df 91       	pop	r29
    6564:	cf 91       	pop	r28
    6566:	1f 91       	pop	r17
    6568:	0f 91       	pop	r16
    656a:	08 95       	ret

0000656c <printf>:
    656c:	cf 93       	push	r28
    656e:	df 93       	push	r29
    6570:	cd b7       	in	r28, 0x3d	; 61
    6572:	de b7       	in	r29, 0x3e	; 62
    6574:	ae 01       	movw	r20, r28
    6576:	4b 5f       	subi	r20, 0xFB	; 251
    6578:	5f 4f       	sbci	r21, 0xFF	; 255
    657a:	fa 01       	movw	r30, r20
    657c:	61 91       	ld	r22, Z+
    657e:	71 91       	ld	r23, Z+
    6580:	af 01       	movw	r20, r30
    6582:	80 91 63 09 	lds	r24, 0x0963
    6586:	90 91 64 09 	lds	r25, 0x0964
    658a:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <vfprintf>
    658e:	df 91       	pop	r29
    6590:	cf 91       	pop	r28
    6592:	08 95       	ret

00006594 <putchar>:
    6594:	60 91 63 09 	lds	r22, 0x0963
    6598:	70 91 64 09 	lds	r23, 0x0964
    659c:	0c 94 7e 32 	jmp	0x64fc	; 0x64fc <fputc>

000065a0 <puts>:
    65a0:	0f 93       	push	r16
    65a2:	1f 93       	push	r17
    65a4:	cf 93       	push	r28
    65a6:	df 93       	push	r29
    65a8:	e0 91 63 09 	lds	r30, 0x0963
    65ac:	f0 91 64 09 	lds	r31, 0x0964
    65b0:	23 81       	ldd	r18, Z+3	; 0x03
    65b2:	21 ff       	sbrs	r18, 1
    65b4:	1b c0       	rjmp	.+54     	; 0x65ec <puts+0x4c>
    65b6:	8c 01       	movw	r16, r24
    65b8:	d0 e0       	ldi	r29, 0x00	; 0
    65ba:	c0 e0       	ldi	r28, 0x00	; 0
    65bc:	f8 01       	movw	r30, r16
    65be:	81 91       	ld	r24, Z+
    65c0:	8f 01       	movw	r16, r30
    65c2:	60 91 63 09 	lds	r22, 0x0963
    65c6:	70 91 64 09 	lds	r23, 0x0964
    65ca:	db 01       	movw	r26, r22
    65cc:	18 96       	adiw	r26, 0x08	; 8
    65ce:	ed 91       	ld	r30, X+
    65d0:	fc 91       	ld	r31, X
    65d2:	19 97       	sbiw	r26, 0x09	; 9
    65d4:	88 23       	and	r24, r24
    65d6:	31 f0       	breq	.+12     	; 0x65e4 <puts+0x44>
    65d8:	09 95       	icall
    65da:	89 2b       	or	r24, r25
    65dc:	79 f3       	breq	.-34     	; 0x65bc <puts+0x1c>
    65de:	df ef       	ldi	r29, 0xFF	; 255
    65e0:	cf ef       	ldi	r28, 0xFF	; 255
    65e2:	ec cf       	rjmp	.-40     	; 0x65bc <puts+0x1c>
    65e4:	8a e0       	ldi	r24, 0x0A	; 10
    65e6:	09 95       	icall
    65e8:	89 2b       	or	r24, r25
    65ea:	19 f0       	breq	.+6      	; 0x65f2 <puts+0x52>
    65ec:	8f ef       	ldi	r24, 0xFF	; 255
    65ee:	9f ef       	ldi	r25, 0xFF	; 255
    65f0:	02 c0       	rjmp	.+4      	; 0x65f6 <puts+0x56>
    65f2:	8d 2f       	mov	r24, r29
    65f4:	9c 2f       	mov	r25, r28
    65f6:	df 91       	pop	r29
    65f8:	cf 91       	pop	r28
    65fa:	1f 91       	pop	r17
    65fc:	0f 91       	pop	r16
    65fe:	08 95       	ret

00006600 <sprintf>:
    6600:	0f 93       	push	r16
    6602:	1f 93       	push	r17
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	cd b7       	in	r28, 0x3d	; 61
    660a:	de b7       	in	r29, 0x3e	; 62
    660c:	2e 97       	sbiw	r28, 0x0e	; 14
    660e:	0f b6       	in	r0, 0x3f	; 63
    6610:	f8 94       	cli
    6612:	de bf       	out	0x3e, r29	; 62
    6614:	0f be       	out	0x3f, r0	; 63
    6616:	cd bf       	out	0x3d, r28	; 61
    6618:	0d 89       	ldd	r16, Y+21	; 0x15
    661a:	1e 89       	ldd	r17, Y+22	; 0x16
    661c:	86 e0       	ldi	r24, 0x06	; 6
    661e:	8c 83       	std	Y+4, r24	; 0x04
    6620:	1a 83       	std	Y+2, r17	; 0x02
    6622:	09 83       	std	Y+1, r16	; 0x01
    6624:	8f ef       	ldi	r24, 0xFF	; 255
    6626:	9f e7       	ldi	r25, 0x7F	; 127
    6628:	9e 83       	std	Y+6, r25	; 0x06
    662a:	8d 83       	std	Y+5, r24	; 0x05
    662c:	ae 01       	movw	r20, r28
    662e:	47 5e       	subi	r20, 0xE7	; 231
    6630:	5f 4f       	sbci	r21, 0xFF	; 255
    6632:	6f 89       	ldd	r22, Y+23	; 0x17
    6634:	78 8d       	ldd	r23, Y+24	; 0x18
    6636:	ce 01       	movw	r24, r28
    6638:	01 96       	adiw	r24, 0x01	; 1
    663a:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <vfprintf>
    663e:	2f 81       	ldd	r18, Y+7	; 0x07
    6640:	38 85       	ldd	r19, Y+8	; 0x08
    6642:	f8 01       	movw	r30, r16
    6644:	e2 0f       	add	r30, r18
    6646:	f3 1f       	adc	r31, r19
    6648:	10 82       	st	Z, r1
    664a:	2e 96       	adiw	r28, 0x0e	; 14
    664c:	0f b6       	in	r0, 0x3f	; 63
    664e:	f8 94       	cli
    6650:	de bf       	out	0x3e, r29	; 62
    6652:	0f be       	out	0x3f, r0	; 63
    6654:	cd bf       	out	0x3d, r28	; 61
    6656:	df 91       	pop	r29
    6658:	cf 91       	pop	r28
    665a:	1f 91       	pop	r17
    665c:	0f 91       	pop	r16
    665e:	08 95       	ret

00006660 <__ultoa_invert>:
    6660:	fa 01       	movw	r30, r20
    6662:	aa 27       	eor	r26, r26
    6664:	28 30       	cpi	r18, 0x08	; 8
    6666:	51 f1       	breq	.+84     	; 0x66bc <__ultoa_invert+0x5c>
    6668:	20 31       	cpi	r18, 0x10	; 16
    666a:	81 f1       	breq	.+96     	; 0x66cc <__ultoa_invert+0x6c>
    666c:	e8 94       	clt
    666e:	6f 93       	push	r22
    6670:	6e 7f       	andi	r22, 0xFE	; 254
    6672:	6e 5f       	subi	r22, 0xFE	; 254
    6674:	7f 4f       	sbci	r23, 0xFF	; 255
    6676:	8f 4f       	sbci	r24, 0xFF	; 255
    6678:	9f 4f       	sbci	r25, 0xFF	; 255
    667a:	af 4f       	sbci	r26, 0xFF	; 255
    667c:	b1 e0       	ldi	r27, 0x01	; 1
    667e:	3e d0       	rcall	.+124    	; 0x66fc <__ultoa_invert+0x9c>
    6680:	b4 e0       	ldi	r27, 0x04	; 4
    6682:	3c d0       	rcall	.+120    	; 0x66fc <__ultoa_invert+0x9c>
    6684:	67 0f       	add	r22, r23
    6686:	78 1f       	adc	r23, r24
    6688:	89 1f       	adc	r24, r25
    668a:	9a 1f       	adc	r25, r26
    668c:	a1 1d       	adc	r26, r1
    668e:	68 0f       	add	r22, r24
    6690:	79 1f       	adc	r23, r25
    6692:	8a 1f       	adc	r24, r26
    6694:	91 1d       	adc	r25, r1
    6696:	a1 1d       	adc	r26, r1
    6698:	6a 0f       	add	r22, r26
    669a:	71 1d       	adc	r23, r1
    669c:	81 1d       	adc	r24, r1
    669e:	91 1d       	adc	r25, r1
    66a0:	a1 1d       	adc	r26, r1
    66a2:	20 d0       	rcall	.+64     	; 0x66e4 <__ultoa_invert+0x84>
    66a4:	09 f4       	brne	.+2      	; 0x66a8 <__ultoa_invert+0x48>
    66a6:	68 94       	set
    66a8:	3f 91       	pop	r19
    66aa:	2a e0       	ldi	r18, 0x0A	; 10
    66ac:	26 9f       	mul	r18, r22
    66ae:	11 24       	eor	r1, r1
    66b0:	30 19       	sub	r19, r0
    66b2:	30 5d       	subi	r19, 0xD0	; 208
    66b4:	31 93       	st	Z+, r19
    66b6:	de f6       	brtc	.-74     	; 0x666e <__ultoa_invert+0xe>
    66b8:	cf 01       	movw	r24, r30
    66ba:	08 95       	ret
    66bc:	46 2f       	mov	r20, r22
    66be:	47 70       	andi	r20, 0x07	; 7
    66c0:	40 5d       	subi	r20, 0xD0	; 208
    66c2:	41 93       	st	Z+, r20
    66c4:	b3 e0       	ldi	r27, 0x03	; 3
    66c6:	0f d0       	rcall	.+30     	; 0x66e6 <__ultoa_invert+0x86>
    66c8:	c9 f7       	brne	.-14     	; 0x66bc <__ultoa_invert+0x5c>
    66ca:	f6 cf       	rjmp	.-20     	; 0x66b8 <__ultoa_invert+0x58>
    66cc:	46 2f       	mov	r20, r22
    66ce:	4f 70       	andi	r20, 0x0F	; 15
    66d0:	40 5d       	subi	r20, 0xD0	; 208
    66d2:	4a 33       	cpi	r20, 0x3A	; 58
    66d4:	18 f0       	brcs	.+6      	; 0x66dc <__ultoa_invert+0x7c>
    66d6:	49 5d       	subi	r20, 0xD9	; 217
    66d8:	31 fd       	sbrc	r19, 1
    66da:	40 52       	subi	r20, 0x20	; 32
    66dc:	41 93       	st	Z+, r20
    66de:	02 d0       	rcall	.+4      	; 0x66e4 <__ultoa_invert+0x84>
    66e0:	a9 f7       	brne	.-22     	; 0x66cc <__ultoa_invert+0x6c>
    66e2:	ea cf       	rjmp	.-44     	; 0x66b8 <__ultoa_invert+0x58>
    66e4:	b4 e0       	ldi	r27, 0x04	; 4
    66e6:	a6 95       	lsr	r26
    66e8:	97 95       	ror	r25
    66ea:	87 95       	ror	r24
    66ec:	77 95       	ror	r23
    66ee:	67 95       	ror	r22
    66f0:	ba 95       	dec	r27
    66f2:	c9 f7       	brne	.-14     	; 0x66e6 <__ultoa_invert+0x86>
    66f4:	00 97       	sbiw	r24, 0x00	; 0
    66f6:	61 05       	cpc	r22, r1
    66f8:	71 05       	cpc	r23, r1
    66fa:	08 95       	ret
    66fc:	9b 01       	movw	r18, r22
    66fe:	ac 01       	movw	r20, r24
    6700:	0a 2e       	mov	r0, r26
    6702:	06 94       	lsr	r0
    6704:	57 95       	ror	r21
    6706:	47 95       	ror	r20
    6708:	37 95       	ror	r19
    670a:	27 95       	ror	r18
    670c:	ba 95       	dec	r27
    670e:	c9 f7       	brne	.-14     	; 0x6702 <__ultoa_invert+0xa2>
    6710:	62 0f       	add	r22, r18
    6712:	73 1f       	adc	r23, r19
    6714:	84 1f       	adc	r24, r20
    6716:	95 1f       	adc	r25, r21
    6718:	a0 1d       	adc	r26, r0
    671a:	08 95       	ret

0000671c <__eerd_byte_m128rfa1>:
    671c:	f9 99       	sbic	0x1f, 1	; 31
    671e:	fe cf       	rjmp	.-4      	; 0x671c <__eerd_byte_m128rfa1>
    6720:	92 bd       	out	0x22, r25	; 34
    6722:	81 bd       	out	0x21, r24	; 33
    6724:	f8 9a       	sbi	0x1f, 0	; 31
    6726:	99 27       	eor	r25, r25
    6728:	80 b5       	in	r24, 0x20	; 32
    672a:	08 95       	ret

0000672c <__eewr_byte_m128rfa1>:
    672c:	26 2f       	mov	r18, r22

0000672e <__eewr_r18_m128rfa1>:
    672e:	f9 99       	sbic	0x1f, 1	; 31
    6730:	fe cf       	rjmp	.-4      	; 0x672e <__eewr_r18_m128rfa1>
    6732:	1f ba       	out	0x1f, r1	; 31
    6734:	92 bd       	out	0x22, r25	; 34
    6736:	81 bd       	out	0x21, r24	; 33
    6738:	20 bd       	out	0x20, r18	; 32
    673a:	0f b6       	in	r0, 0x3f	; 63
    673c:	f8 94       	cli
    673e:	fa 9a       	sbi	0x1f, 2	; 31
    6740:	f9 9a       	sbi	0x1f, 1	; 31
    6742:	0f be       	out	0x3f, r0	; 63
    6744:	01 96       	adiw	r24, 0x01	; 1
    6746:	08 95       	ret

00006748 <calloc>:
    6748:	0f 93       	push	r16
    674a:	1f 93       	push	r17
    674c:	cf 93       	push	r28
    674e:	df 93       	push	r29
    6750:	86 9f       	mul	r24, r22
    6752:	80 01       	movw	r16, r0
    6754:	87 9f       	mul	r24, r23
    6756:	10 0d       	add	r17, r0
    6758:	96 9f       	mul	r25, r22
    675a:	10 0d       	add	r17, r0
    675c:	11 24       	eor	r1, r1
    675e:	c8 01       	movw	r24, r16
    6760:	0e 94 c0 33 	call	0x6780	; 0x6780 <malloc>
    6764:	ec 01       	movw	r28, r24
    6766:	00 97       	sbiw	r24, 0x00	; 0
    6768:	29 f0       	breq	.+10     	; 0x6774 <calloc+0x2c>
    676a:	a8 01       	movw	r20, r16
    676c:	60 e0       	ldi	r22, 0x00	; 0
    676e:	70 e0       	ldi	r23, 0x00	; 0
    6770:	0e 94 ed 34 	call	0x69da	; 0x69da <memset>
    6774:	ce 01       	movw	r24, r28
    6776:	df 91       	pop	r29
    6778:	cf 91       	pop	r28
    677a:	1f 91       	pop	r17
    677c:	0f 91       	pop	r16
    677e:	08 95       	ret

00006780 <malloc>:
    6780:	cf 93       	push	r28
    6782:	df 93       	push	r29
    6784:	82 30       	cpi	r24, 0x02	; 2
    6786:	91 05       	cpc	r25, r1
    6788:	10 f4       	brcc	.+4      	; 0x678e <malloc+0xe>
    678a:	82 e0       	ldi	r24, 0x02	; 2
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	e0 91 69 09 	lds	r30, 0x0969
    6792:	f0 91 6a 09 	lds	r31, 0x096A
    6796:	20 e0       	ldi	r18, 0x00	; 0
    6798:	30 e0       	ldi	r19, 0x00	; 0
    679a:	c0 e0       	ldi	r28, 0x00	; 0
    679c:	d0 e0       	ldi	r29, 0x00	; 0
    679e:	30 97       	sbiw	r30, 0x00	; 0
    67a0:	11 f1       	breq	.+68     	; 0x67e6 <malloc+0x66>
    67a2:	40 81       	ld	r20, Z
    67a4:	51 81       	ldd	r21, Z+1	; 0x01
    67a6:	48 17       	cp	r20, r24
    67a8:	59 07       	cpc	r21, r25
    67aa:	c0 f0       	brcs	.+48     	; 0x67dc <malloc+0x5c>
    67ac:	48 17       	cp	r20, r24
    67ae:	59 07       	cpc	r21, r25
    67b0:	61 f4       	brne	.+24     	; 0x67ca <malloc+0x4a>
    67b2:	82 81       	ldd	r24, Z+2	; 0x02
    67b4:	93 81       	ldd	r25, Z+3	; 0x03
    67b6:	20 97       	sbiw	r28, 0x00	; 0
    67b8:	19 f0       	breq	.+6      	; 0x67c0 <malloc+0x40>
    67ba:	9b 83       	std	Y+3, r25	; 0x03
    67bc:	8a 83       	std	Y+2, r24	; 0x02
    67be:	2b c0       	rjmp	.+86     	; 0x6816 <malloc+0x96>
    67c0:	90 93 6a 09 	sts	0x096A, r25
    67c4:	80 93 69 09 	sts	0x0969, r24
    67c8:	26 c0       	rjmp	.+76     	; 0x6816 <malloc+0x96>
    67ca:	21 15       	cp	r18, r1
    67cc:	31 05       	cpc	r19, r1
    67ce:	19 f0       	breq	.+6      	; 0x67d6 <malloc+0x56>
    67d0:	42 17       	cp	r20, r18
    67d2:	53 07       	cpc	r21, r19
    67d4:	18 f4       	brcc	.+6      	; 0x67dc <malloc+0x5c>
    67d6:	9a 01       	movw	r18, r20
    67d8:	be 01       	movw	r22, r28
    67da:	df 01       	movw	r26, r30
    67dc:	ef 01       	movw	r28, r30
    67de:	02 80       	ldd	r0, Z+2	; 0x02
    67e0:	f3 81       	ldd	r31, Z+3	; 0x03
    67e2:	e0 2d       	mov	r30, r0
    67e4:	dc cf       	rjmp	.-72     	; 0x679e <malloc+0x1e>
    67e6:	21 15       	cp	r18, r1
    67e8:	31 05       	cpc	r19, r1
    67ea:	09 f1       	breq	.+66     	; 0x682e <malloc+0xae>
    67ec:	28 1b       	sub	r18, r24
    67ee:	39 0b       	sbc	r19, r25
    67f0:	24 30       	cpi	r18, 0x04	; 4
    67f2:	31 05       	cpc	r19, r1
    67f4:	90 f4       	brcc	.+36     	; 0x681a <malloc+0x9a>
    67f6:	12 96       	adiw	r26, 0x02	; 2
    67f8:	8d 91       	ld	r24, X+
    67fa:	9c 91       	ld	r25, X
    67fc:	13 97       	sbiw	r26, 0x03	; 3
    67fe:	61 15       	cp	r22, r1
    6800:	71 05       	cpc	r23, r1
    6802:	21 f0       	breq	.+8      	; 0x680c <malloc+0x8c>
    6804:	fb 01       	movw	r30, r22
    6806:	93 83       	std	Z+3, r25	; 0x03
    6808:	82 83       	std	Z+2, r24	; 0x02
    680a:	04 c0       	rjmp	.+8      	; 0x6814 <malloc+0x94>
    680c:	90 93 6a 09 	sts	0x096A, r25
    6810:	80 93 69 09 	sts	0x0969, r24
    6814:	fd 01       	movw	r30, r26
    6816:	32 96       	adiw	r30, 0x02	; 2
    6818:	44 c0       	rjmp	.+136    	; 0x68a2 <malloc+0x122>
    681a:	fd 01       	movw	r30, r26
    681c:	e2 0f       	add	r30, r18
    681e:	f3 1f       	adc	r31, r19
    6820:	81 93       	st	Z+, r24
    6822:	91 93       	st	Z+, r25
    6824:	22 50       	subi	r18, 0x02	; 2
    6826:	31 09       	sbc	r19, r1
    6828:	2d 93       	st	X+, r18
    682a:	3c 93       	st	X, r19
    682c:	3a c0       	rjmp	.+116    	; 0x68a2 <malloc+0x122>
    682e:	20 91 67 09 	lds	r18, 0x0967
    6832:	30 91 68 09 	lds	r19, 0x0968
    6836:	23 2b       	or	r18, r19
    6838:	41 f4       	brne	.+16     	; 0x684a <malloc+0xca>
    683a:	20 91 06 02 	lds	r18, 0x0206
    683e:	30 91 07 02 	lds	r19, 0x0207
    6842:	30 93 68 09 	sts	0x0968, r19
    6846:	20 93 67 09 	sts	0x0967, r18
    684a:	20 91 04 02 	lds	r18, 0x0204
    684e:	30 91 05 02 	lds	r19, 0x0205
    6852:	21 15       	cp	r18, r1
    6854:	31 05       	cpc	r19, r1
    6856:	41 f4       	brne	.+16     	; 0x6868 <malloc+0xe8>
    6858:	2d b7       	in	r18, 0x3d	; 61
    685a:	3e b7       	in	r19, 0x3e	; 62
    685c:	40 91 08 02 	lds	r20, 0x0208
    6860:	50 91 09 02 	lds	r21, 0x0209
    6864:	24 1b       	sub	r18, r20
    6866:	35 0b       	sbc	r19, r21
    6868:	e0 91 67 09 	lds	r30, 0x0967
    686c:	f0 91 68 09 	lds	r31, 0x0968
    6870:	e2 17       	cp	r30, r18
    6872:	f3 07       	cpc	r31, r19
    6874:	a0 f4       	brcc	.+40     	; 0x689e <malloc+0x11e>
    6876:	2e 1b       	sub	r18, r30
    6878:	3f 0b       	sbc	r19, r31
    687a:	28 17       	cp	r18, r24
    687c:	39 07       	cpc	r19, r25
    687e:	78 f0       	brcs	.+30     	; 0x689e <malloc+0x11e>
    6880:	ac 01       	movw	r20, r24
    6882:	4e 5f       	subi	r20, 0xFE	; 254
    6884:	5f 4f       	sbci	r21, 0xFF	; 255
    6886:	24 17       	cp	r18, r20
    6888:	35 07       	cpc	r19, r21
    688a:	48 f0       	brcs	.+18     	; 0x689e <malloc+0x11e>
    688c:	4e 0f       	add	r20, r30
    688e:	5f 1f       	adc	r21, r31
    6890:	50 93 68 09 	sts	0x0968, r21
    6894:	40 93 67 09 	sts	0x0967, r20
    6898:	81 93       	st	Z+, r24
    689a:	91 93       	st	Z+, r25
    689c:	02 c0       	rjmp	.+4      	; 0x68a2 <malloc+0x122>
    689e:	e0 e0       	ldi	r30, 0x00	; 0
    68a0:	f0 e0       	ldi	r31, 0x00	; 0
    68a2:	cf 01       	movw	r24, r30
    68a4:	df 91       	pop	r29
    68a6:	cf 91       	pop	r28
    68a8:	08 95       	ret

000068aa <free>:
    68aa:	0f 93       	push	r16
    68ac:	1f 93       	push	r17
    68ae:	cf 93       	push	r28
    68b0:	df 93       	push	r29
    68b2:	00 97       	sbiw	r24, 0x00	; 0
    68b4:	09 f4       	brne	.+2      	; 0x68b8 <free+0xe>
    68b6:	8c c0       	rjmp	.+280    	; 0x69d0 <free+0x126>
    68b8:	fc 01       	movw	r30, r24
    68ba:	32 97       	sbiw	r30, 0x02	; 2
    68bc:	13 82       	std	Z+3, r1	; 0x03
    68be:	12 82       	std	Z+2, r1	; 0x02
    68c0:	00 91 69 09 	lds	r16, 0x0969
    68c4:	10 91 6a 09 	lds	r17, 0x096A
    68c8:	01 15       	cp	r16, r1
    68ca:	11 05       	cpc	r17, r1
    68cc:	81 f4       	brne	.+32     	; 0x68ee <free+0x44>
    68ce:	20 81       	ld	r18, Z
    68d0:	31 81       	ldd	r19, Z+1	; 0x01
    68d2:	82 0f       	add	r24, r18
    68d4:	93 1f       	adc	r25, r19
    68d6:	20 91 67 09 	lds	r18, 0x0967
    68da:	30 91 68 09 	lds	r19, 0x0968
    68de:	28 17       	cp	r18, r24
    68e0:	39 07       	cpc	r19, r25
    68e2:	79 f5       	brne	.+94     	; 0x6942 <free+0x98>
    68e4:	f0 93 68 09 	sts	0x0968, r31
    68e8:	e0 93 67 09 	sts	0x0967, r30
    68ec:	71 c0       	rjmp	.+226    	; 0x69d0 <free+0x126>
    68ee:	d8 01       	movw	r26, r16
    68f0:	40 e0       	ldi	r20, 0x00	; 0
    68f2:	50 e0       	ldi	r21, 0x00	; 0
    68f4:	ae 17       	cp	r26, r30
    68f6:	bf 07       	cpc	r27, r31
    68f8:	50 f4       	brcc	.+20     	; 0x690e <free+0x64>
    68fa:	12 96       	adiw	r26, 0x02	; 2
    68fc:	2d 91       	ld	r18, X+
    68fe:	3c 91       	ld	r19, X
    6900:	13 97       	sbiw	r26, 0x03	; 3
    6902:	ad 01       	movw	r20, r26
    6904:	21 15       	cp	r18, r1
    6906:	31 05       	cpc	r19, r1
    6908:	09 f1       	breq	.+66     	; 0x694c <free+0xa2>
    690a:	d9 01       	movw	r26, r18
    690c:	f3 cf       	rjmp	.-26     	; 0x68f4 <free+0x4a>
    690e:	9d 01       	movw	r18, r26
    6910:	da 01       	movw	r26, r20
    6912:	33 83       	std	Z+3, r19	; 0x03
    6914:	22 83       	std	Z+2, r18	; 0x02
    6916:	60 81       	ld	r22, Z
    6918:	71 81       	ldd	r23, Z+1	; 0x01
    691a:	86 0f       	add	r24, r22
    691c:	97 1f       	adc	r25, r23
    691e:	82 17       	cp	r24, r18
    6920:	93 07       	cpc	r25, r19
    6922:	69 f4       	brne	.+26     	; 0x693e <free+0x94>
    6924:	ec 01       	movw	r28, r24
    6926:	28 81       	ld	r18, Y
    6928:	39 81       	ldd	r19, Y+1	; 0x01
    692a:	26 0f       	add	r18, r22
    692c:	37 1f       	adc	r19, r23
    692e:	2e 5f       	subi	r18, 0xFE	; 254
    6930:	3f 4f       	sbci	r19, 0xFF	; 255
    6932:	31 83       	std	Z+1, r19	; 0x01
    6934:	20 83       	st	Z, r18
    6936:	8a 81       	ldd	r24, Y+2	; 0x02
    6938:	9b 81       	ldd	r25, Y+3	; 0x03
    693a:	93 83       	std	Z+3, r25	; 0x03
    693c:	82 83       	std	Z+2, r24	; 0x02
    693e:	45 2b       	or	r20, r21
    6940:	29 f4       	brne	.+10     	; 0x694c <free+0xa2>
    6942:	f0 93 6a 09 	sts	0x096A, r31
    6946:	e0 93 69 09 	sts	0x0969, r30
    694a:	42 c0       	rjmp	.+132    	; 0x69d0 <free+0x126>
    694c:	13 96       	adiw	r26, 0x03	; 3
    694e:	fc 93       	st	X, r31
    6950:	ee 93       	st	-X, r30
    6952:	12 97       	sbiw	r26, 0x02	; 2
    6954:	ed 01       	movw	r28, r26
    6956:	49 91       	ld	r20, Y+
    6958:	59 91       	ld	r21, Y+
    695a:	9e 01       	movw	r18, r28
    695c:	24 0f       	add	r18, r20
    695e:	35 1f       	adc	r19, r21
    6960:	e2 17       	cp	r30, r18
    6962:	f3 07       	cpc	r31, r19
    6964:	71 f4       	brne	.+28     	; 0x6982 <free+0xd8>
    6966:	80 81       	ld	r24, Z
    6968:	91 81       	ldd	r25, Z+1	; 0x01
    696a:	84 0f       	add	r24, r20
    696c:	95 1f       	adc	r25, r21
    696e:	02 96       	adiw	r24, 0x02	; 2
    6970:	11 96       	adiw	r26, 0x01	; 1
    6972:	9c 93       	st	X, r25
    6974:	8e 93       	st	-X, r24
    6976:	82 81       	ldd	r24, Z+2	; 0x02
    6978:	93 81       	ldd	r25, Z+3	; 0x03
    697a:	13 96       	adiw	r26, 0x03	; 3
    697c:	9c 93       	st	X, r25
    697e:	8e 93       	st	-X, r24
    6980:	12 97       	sbiw	r26, 0x02	; 2
    6982:	e0 e0       	ldi	r30, 0x00	; 0
    6984:	f0 e0       	ldi	r31, 0x00	; 0
    6986:	d8 01       	movw	r26, r16
    6988:	12 96       	adiw	r26, 0x02	; 2
    698a:	8d 91       	ld	r24, X+
    698c:	9c 91       	ld	r25, X
    698e:	13 97       	sbiw	r26, 0x03	; 3
    6990:	00 97       	sbiw	r24, 0x00	; 0
    6992:	19 f0       	breq	.+6      	; 0x699a <free+0xf0>
    6994:	f8 01       	movw	r30, r16
    6996:	8c 01       	movw	r16, r24
    6998:	f6 cf       	rjmp	.-20     	; 0x6986 <free+0xdc>
    699a:	8d 91       	ld	r24, X+
    699c:	9c 91       	ld	r25, X
    699e:	98 01       	movw	r18, r16
    69a0:	2e 5f       	subi	r18, 0xFE	; 254
    69a2:	3f 4f       	sbci	r19, 0xFF	; 255
    69a4:	82 0f       	add	r24, r18
    69a6:	93 1f       	adc	r25, r19
    69a8:	20 91 67 09 	lds	r18, 0x0967
    69ac:	30 91 68 09 	lds	r19, 0x0968
    69b0:	28 17       	cp	r18, r24
    69b2:	39 07       	cpc	r19, r25
    69b4:	69 f4       	brne	.+26     	; 0x69d0 <free+0x126>
    69b6:	30 97       	sbiw	r30, 0x00	; 0
    69b8:	29 f4       	brne	.+10     	; 0x69c4 <free+0x11a>
    69ba:	10 92 6a 09 	sts	0x096A, r1
    69be:	10 92 69 09 	sts	0x0969, r1
    69c2:	02 c0       	rjmp	.+4      	; 0x69c8 <free+0x11e>
    69c4:	13 82       	std	Z+3, r1	; 0x03
    69c6:	12 82       	std	Z+2, r1	; 0x02
    69c8:	10 93 68 09 	sts	0x0968, r17
    69cc:	00 93 67 09 	sts	0x0967, r16
    69d0:	df 91       	pop	r29
    69d2:	cf 91       	pop	r28
    69d4:	1f 91       	pop	r17
    69d6:	0f 91       	pop	r16
    69d8:	08 95       	ret

000069da <memset>:
    69da:	dc 01       	movw	r26, r24
    69dc:	01 c0       	rjmp	.+2      	; 0x69e0 <memset+0x6>
    69de:	6d 93       	st	X+, r22
    69e0:	41 50       	subi	r20, 0x01	; 1
    69e2:	50 40       	sbci	r21, 0x00	; 0
    69e4:	e0 f7       	brcc	.-8      	; 0x69de <memset+0x4>
    69e6:	08 95       	ret

000069e8 <_exit>:
    69e8:	f8 94       	cli

000069ea <__stop_program>:
    69ea:	ff cf       	rjmp	.-2      	; 0x69ea <__stop_program>

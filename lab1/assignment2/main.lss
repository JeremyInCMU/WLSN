
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800200  00005c3a  00005cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f2  00800390  00800390  00005e5e  2**0
                  ALLOC
  3 .stab         00011940  00000000  00000000  00005e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000090b9  00000000  00000000  000177a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00020859  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0002086a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  000219ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00022a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00022a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__ctors_end>
       4:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <__vector_1>
       8:	0c 94 0e 26 	jmp	0x4c1c	; 0x4c1c <__vector_2>
       c:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__vector_3>
      10:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      14:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      18:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      1c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      20:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      24:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__vector_9>
      28:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      2c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      30:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      34:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__vector_13>
      38:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      3c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__vector_13>
      40:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      44:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      48:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      4c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      50:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      54:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      58:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      5c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      60:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      64:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_25>
      68:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      6c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      70:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      74:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      78:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      7c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      80:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__vector_32>
      84:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      88:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      8c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      90:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      94:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      98:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      9c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      a0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      a4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      a8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      ac:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      b0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      b4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      b8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      bc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      c0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      c4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      c8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      cc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      d0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      d4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      d8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      dc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      e0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      e4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_57>
      e8:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_58>
      ec:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_59>
      f0:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_60>
      f4:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_61>
      f8:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_62>
      fc:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_63>
     100:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__vector_64>
     104:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     108:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     10c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     110:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     114:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     118:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     11c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     120:	6d 0e       	add	r6, r29
     122:	7a 0e       	add	r7, r26
     124:	87 0e       	add	r8, r23
     126:	94 0e       	add	r9, r20
     128:	a1 0e       	add	r10, r17
     12a:	ae 0e       	add	r10, r30
     12c:	bb 0e       	add	r11, r27
     12e:	de 0e       	add	r13, r30
     130:	ec 0e       	add	r14, r28
     132:	fa 0e       	add	r15, r26
     134:	08 0f       	add	r16, r24
     136:	16 0f       	add	r17, r22
     138:	24 0f       	add	r18, r20
     13a:	24 0f       	add	r18, r20
     13c:	47 0f       	add	r20, r23
     13e:	49 0f       	add	r20, r25
     140:	4b 0f       	add	r20, r27
     142:	4d 0f       	add	r20, r29
     144:	4f 0f       	add	r20, r31
     146:	51 0f       	add	r21, r17
     148:	53 0f       	add	r21, r19
     14a:	72 0f       	add	r23, r18
     14c:	95 0f       	add	r25, r21
     14e:	b9 0f       	add	r27, r25
     150:	dc 0f       	add	r29, r28
     152:	ff 0f       	add	r31, r31
     154:	22 10       	cpse	r2, r2
     156:	45 10       	cpse	r4, r5
     158:	7f 10       	cpse	r7, r15
     15a:	8c 10       	cpse	r8, r12
     15c:	99 10       	cpse	r9, r9
     15e:	a6 10       	cpse	r10, r6
     160:	b3 10       	cpse	r11, r3
     162:	c0 10       	cpse	r12, r0
     164:	cd 10       	cpse	r12, r13
     166:	e6 10       	cpse	r14, r6
     168:	f3 10       	cpse	r15, r3
     16a:	00 11       	cpse	r16, r0
     16c:	0d 11       	cpse	r16, r13
     16e:	1a 11       	cpse	r17, r10
     170:	27 11       	cpse	r18, r7
     172:	34 11       	cpse	r19, r4
     174:	cc 14       	cp	r12, r12
     176:	d2 14       	cp	r13, r2
     178:	d5 14       	cp	r13, r5
     17a:	d8 14       	cp	r13, r8
     17c:	db 14       	cp	r13, r11
     17e:	de 14       	cp	r13, r14
     180:	e4 14       	cp	r14, r4
     182:	e1 14       	cp	r14, r1
     184:	e7 14       	cp	r14, r7
     186:	ea 14       	cp	r14, r10
     188:	ed 14       	cp	r14, r13
     18a:	f6 14       	cp	r15, r6
     18c:	f9 14       	cp	r15, r9
     18e:	fc 14       	cp	r15, r12
     190:	ff 14       	cp	r15, r15
     192:	f3 14       	cp	r15, r3
     194:	c9 14       	cp	r12, r9
     196:	cf 14       	cp	r12, r15
     198:	02 15       	cp	r16, r2
     19a:	05 15       	cp	r16, r5
     19c:	f0 14       	cp	r15, r0
     19e:	c6 14       	cp	r12, r6
     1a0:	9c 15       	cp	r25, r12
     1a2:	9f 15       	cp	r25, r15
     1a4:	aa 15       	cp	r26, r10
     1a6:	af 15       	cp	r26, r15
     1a8:	b6 15       	cp	r27, r6
     1aa:	bf 15       	cp	r27, r15
     1ac:	c2 15       	cp	r28, r2
     1ae:	c7 15       	cp	r28, r7
     1b0:	ce 15       	cp	r28, r14
     1b2:	d7 15       	cp	r29, r7

000001b4 <__trampolines_end>:
     1b4:	54 78       	andi	r21, 0x84	; 132
     1b6:	20 74       	andi	r18, 0x40	; 64
     1b8:	61 73       	andi	r22, 0x31	; 49
     1ba:	6b 20       	and	r6, r11
     1bc:	73 65       	ori	r23, 0x53	; 83
     1be:	6e 74       	andi	r22, 0x4E	; 78
     1c0:	20 64       	ori	r18, 0x40	; 64
     1c2:	61 74       	andi	r22, 0x41	; 65
     1c4:	61 21       	and	r22, r1
     1c6:	0d 0a       	sbc	r0, r29
	...

000001c9 <__c.3430>:
     1c9:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     1d9:	72 72 6f 72 0d 0a 00                                rror...

000001e0 <__c.3428>:
     1e0:	54 78 20 70 61 63 6b 65 74 20 65 6e 71 75 65 75     Tx packet enqueu
     1f0:	65 64 0d 0a 00                                      ed...

000001f5 <__c.3406>:
     1f5:	45 52 52 4f 52 20 73 65 74 74 69 6e 67 20 62 6d     ERROR setting bm
     205:	61 63 20 72 61 74 65 0d 0a 00                       ac rate...

0000020f <__c.3762>:
     20f:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     21f:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

0000022b <__c.3736>:
     22b:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     23b:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     24b:	0d 0a 00                                            ...

0000024e <__c.3734>:
     24e:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     25e:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     26e:	74 0d 0a 00                                         t...

00000272 <__c.3718>:
     272:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     282:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     292:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

0000029e <__c.3716>:
     29e:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2ae:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     2be:	61 69 6c 65 64 0d 0a 00                             ailed...

000002c6 <__c.3714>:
     2c6:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2d6:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     2e6:	61 69 6c 65 64 0d 0a 00                             ailed...

000002ee <__c.3125>:
     2ee:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     2fe:	65 64 0d 0a 00                                      ed...

00000303 <__c.3381>:
     303:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000030a <__c.3378>:
     30a:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000319 <__c.3375>:
     319:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

0000032a <__c.3372>:
     32a:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     33a:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000345 <__c.3369>:
     345:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     355:	20 53 69 67 6e 61 6c 00                              Signal.

0000035d <__c.3366>:
     35d:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     36d:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000037d <__c.3363>:
     37d:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     38d:	72 6f 72 00                                         ror.

00000391 <__c.3360>:
     391:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000003a2 <__c.3357>:
     3a2:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     3b2:	61 72 74 00                                         art.

000003b6 <__c.3354>:
     3b6:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000003c5 <__c.3351>:
     3c5:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     3d5:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000003e0 <__c.3348>:
     3e0:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000003ec <__c.3345>:
     3ec:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     3fc:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     40c:	20 6f 6b 3f 00                                       ok?.

00000411 <__c.3342>:
     411:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     421:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000042f <__c.3339>:
     42f:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     43f:	72 74 00                                            rt.

00000442 <__c.3336>:
     442:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     452:	49 44 00                                            ID.

00000455 <__c.3333>:
     455:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     465:	20 57 61 6b 65 75 70 00                              Wakeup.

0000046d <__c.3330>:
     46d:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     47d:	6c 61 74 65 64 00                                   lated.

00000483 <__c.3327>:
     483:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     493:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000049e <__c.3324>:
     49e:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     4ae:	69 6e 74 65 72 00                                   inter.

000004b4 <__c.3321>:
     4b4:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     4c4:	6c 6f 77 00                                         low.

000004c8 <__c.3318>:
     4c8:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     4d8:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     4e8:	6e 6f 75 67 68 21 00                                nough!.

000004ef <__c.3314>:
     4ef:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     4ff:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     50f:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     51f:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

0000052b <__c.3311>:
     52b:	29 3a 20 00                                         ): .

0000052f <__c.3309>:
     52f:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000053b <__c.3246>:
     53b:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000054a <__c.2228>:
     54a:	45 46 47 65 66 67 00                                EFGefg.

00000551 <__c.2222>:
     551:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000562 <__ctors_end>:
     562:	11 24       	eor	r1, r1
     564:	1f be       	out	0x3f, r1	; 63
     566:	cf ef       	ldi	r28, 0xFF	; 255
     568:	d1 e4       	ldi	r29, 0x41	; 65
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	cd bf       	out	0x3d, r28	; 61

0000056e <__do_copy_data>:
     56e:	13 e0       	ldi	r17, 0x03	; 3
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b2 e0       	ldi	r27, 0x02	; 2
     574:	ea e3       	ldi	r30, 0x3A	; 58
     576:	fc e5       	ldi	r31, 0x5C	; 92
     578:	00 e0       	ldi	r16, 0x00	; 0
     57a:	0b bf       	out	0x3b, r16	; 59
     57c:	02 c0       	rjmp	.+4      	; 0x582 <__do_copy_data+0x14>
     57e:	07 90       	elpm	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	a0 39       	cpi	r26, 0x90	; 144
     584:	b1 07       	cpc	r27, r17
     586:	d9 f7       	brne	.-10     	; 0x57e <__do_copy_data+0x10>

00000588 <__do_clear_bss>:
     588:	18 e0       	ldi	r17, 0x08	; 8
     58a:	a0 e9       	ldi	r26, 0x90	; 144
     58c:	b3 e0       	ldi	r27, 0x03	; 3
     58e:	01 c0       	rjmp	.+2      	; 0x592 <.do_clear_bss_start>

00000590 <.do_clear_bss_loop>:
     590:	1d 92       	st	X+, r1

00000592 <.do_clear_bss_start>:
     592:	a2 38       	cpi	r26, 0x82	; 130
     594:	b1 07       	cpc	r27, r17
     596:	e1 f7       	brne	.-8      	; 0x590 <.do_clear_bss_loop>
     598:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <main>
     59c:	0c 94 1b 2e 	jmp	0x5c36	; 0x5c36 <_exit>

000005a0 <__bad_interrupt>:
     5a0:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <__vector_default>

000005a4 <tx_task>:
{
  uint8_t j, i, val, len, cnt;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;

  printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     5a4:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <nrk_get_pid>
     5a8:	1f 92       	push	r1
     5aa:	8f 93       	push	r24
     5ac:	8b e5       	ldi	r24, 0x5B	; 91
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0e 94 4b 06 	call	0xc96	; 0xc96 <bmac_started>
     5c4:	81 11       	cpse	r24, r1
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <tx_task+0x2a>
    nrk_wait_until_next_period ();
     5c8:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_wait_until_next_period>
     5cc:	f9 cf       	rjmp	.-14     	; 0x5c0 <tx_task+0x1c>

  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
     5ce:	0e 94 84 05 	call	0xb08	; 0xb08 <bmac_get_tx_done_signal>
     5d2:	c8 2f       	mov	r28, r24
  nrk_signal_register (tx_done_signal);
     5d4:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
    // This function shows how to transmit packets in a
    // non-blocking manner  
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
    nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));
    // This functions waits on the tx_done_signal
    ret = nrk_event_wait (SIG(tx_done_signal));
     5d8:	c1 2c       	mov	r12, r1
     5da:	d1 2c       	mov	r13, r1
     5dc:	76 01       	movw	r14, r12
     5de:	c3 94       	inc	r12
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <tx_task+0x46>
     5e2:	cc 0c       	add	r12, r12
     5e4:	dd 1c       	adc	r13, r13
     5e6:	ee 1c       	adc	r14, r14
     5e8:	ff 1c       	adc	r15, r15
     5ea:	ca 95       	dec	r28
     5ec:	d2 f7       	brpl	.-12     	; 0x5e2 <tx_task+0x3e>

    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) 
     5ee:	81 2c       	mov	r8, r1
     5f0:	91 2c       	mov	r9, r1
     5f2:	54 01       	movw	r10, r8
     5f4:	83 94       	inc	r8
     5f6:	c1 14       	cp	r12, r1
     5f8:	d1 04       	cpc	r13, r1
     5fa:	e1 04       	cpc	r14, r1
     5fc:	f1 04       	cpc	r15, r1
     5fe:	19 f0       	breq	.+6      	; 0x606 <tx_task+0x62>
     600:	81 2c       	mov	r8, r1
     602:	91 2c       	mov	r9, r1
     604:	54 01       	movw	r10, r8
  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
  nrk_signal_register (tx_done_signal);

  cnt = 0;
     606:	71 2c       	mov	r7, r1
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "This is a test %d", cnt);
     608:	0c e6       	ldi	r16, 0x6C	; 108
     60a:	12 e0       	ldi	r17, 0x02	; 2
     60c:	cc ee       	ldi	r28, 0xEC	; 236
     60e:	d5 e0       	ldi	r29, 0x05	; 5
     610:	1f 92       	push	r1
     612:	7f 92       	push	r7
     614:	1f 93       	push	r17
     616:	0f 93       	push	r16
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	0e 94 00 2c 	call	0x5800	; 0x5800 <sprintf>
    cnt++;
     620:	73 94       	inc	r7
    // For this there is no need to register  
    // val=bmac_tx_packet(tx_buf, strlen(tx_buf));

    // This function shows how to transmit packets in a
    // non-blocking manner  
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
     622:	fe 01       	movw	r30, r28
     624:	01 90       	ld	r0, Z+
     626:	00 20       	and	r0, r0
     628:	e9 f7       	brne	.-6      	; 0x624 <tx_task+0x80>
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	bf 01       	movw	r22, r30
     62e:	6c 5e       	subi	r22, 0xEC	; 236
     630:	75 40       	sbci	r23, 0x05	; 5
     632:	8c ee       	ldi	r24, 0xEC	; 236
     634:	95 e0       	ldi	r25, 0x05	; 5
     636:	0e 94 6c 05 	call	0xad8	; 0xad8 <bmac_tx_pkt_nonblocking>
    nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));
     63a:	80 ee       	ldi	r24, 0xE0	; 224
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
    // This functions waits on the tx_done_signal
    ret = nrk_event_wait (SIG(tx_done_signal));
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 92 18 	call	0x3124	; 0x3124 <nrk_event_wait>

    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) 
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	88 21       	and	r24, r8
     650:	99 21       	and	r25, r9
     652:	aa 21       	and	r26, r10
     654:	bb 21       	and	r27, r11
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	89 2b       	or	r24, r25
     664:	8a 2b       	or	r24, r26
     666:	8b 2b       	or	r24, r27
     668:	21 f0       	breq	.+8      	; 0x672 <tx_task+0xce>
    	nrk_kprintf (PSTR ("TX done signal error\r\n"));
     66a:	89 ec       	ldi	r24, 0xC9	; 201
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>

    // Task gets control again after TX complete
    nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
     672:	84 eb       	ldi	r24, 0xB4	; 180
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
    // nrk_led_clr (BLUE_LED);
    nrk_wait_until_next_period ();
     67a:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_wait_until_next_period>
  }
     67e:	c8 cf       	rjmp	.-112    	; 0x610 <tx_task+0x6c>

00000680 <display_rssi>:

/**
 *  Displays the RSSI on the 4 LEDs on the firefly board
 */
void display_rssi(int8_t rssi)
{
     680:	cf 93       	push	r28

    int8_t rssi_led = (rssi / 6.25);
     682:	68 2f       	mov	r22, r24
     684:	77 27       	eor	r23, r23
     686:	67 fd       	sbrc	r22, 7
     688:	70 95       	com	r23
     68a:	87 2f       	mov	r24, r23
     68c:	97 2f       	mov	r25, r23
     68e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__floatsisf>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	48 ec       	ldi	r20, 0xC8	; 200
     698:	50 e4       	ldi	r21, 0x40	; 64
     69a:	0e 94 c5 28 	call	0x518a	; 0x518a <__divsf3>
     69e:	0e 94 2d 29 	call	0x525a	; 0x525a <__fixsfsi>
     6a2:	c6 2f       	mov	r28, r22
    
    printf("\nRSSI LED = %d\n", rssi_led);
     6a4:	8c 2f       	mov	r24, r28
     6a6:	99 27       	eor	r25, r25
     6a8:	87 fd       	sbrc	r24, 7
     6aa:	90 95       	com	r25
     6ac:	9f 93       	push	r25
     6ae:	cf 93       	push	r28
     6b0:	8e e7       	ldi	r24, 0x7E	; 126
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    if(rssi_led & 1 == 1)
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
    {
             nrk_led_set(BLUE_LED);
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	90 e0       	ldi	r25, 0x00	; 0
{

    int8_t rssi_led = (rssi / 6.25);
    
    printf("\nRSSI LED = %d\n", rssi_led);
    if(rssi_led & 1 == 1)
     6c8:	c0 ff       	sbrs	r28, 0
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <display_rssi+0x52>
    {
             nrk_led_set(BLUE_LED);
     6cc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <nrk_led_set>
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <display_rssi+0x56>
    }
    else if((rssi_led & 1) == 0)
    {
        nrk_led_clr(BLUE_LED);
     6d2:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
    }
    if(((rssi_led >> 1) & 1) == 1)
    {
        nrk_led_set(ORANGE_LED);
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if((rssi_led & 1) == 0)
    {
        nrk_led_clr(BLUE_LED);
    }
    if(((rssi_led >> 1) & 1) == 1)
     6da:	c1 ff       	sbrs	r28, 1
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <display_rssi+0x64>
    {
        nrk_led_set(ORANGE_LED);
     6de:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <nrk_led_set>
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <display_rssi+0x68>
    }
    else if(((rssi_led >> 1) & 1) == 0)
    {
        nrk_led_clr(ORANGE_LED);
     6e4:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
    }
    if(((rssi_led >> 2) & 1) == 1)
    {
        nrk_led_set(GREEN_LED);
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if(((rssi_led >> 1) & 1) == 0)
    {
        nrk_led_clr(ORANGE_LED);
    }
    if(((rssi_led >> 2) & 1) == 1)
     6ec:	c2 ff       	sbrs	r28, 2
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <display_rssi+0x76>
    {
        nrk_led_set(GREEN_LED);
     6f0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <nrk_led_set>
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <display_rssi+0x7a>
    }
    else if(((rssi_led >> 2) & 1) == 0)
    {
        nrk_led_clr(GREEN_LED);
     6f6:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
    }
    if(((rssi_led >> 3) & 1) == 1)
    {
        nrk_led_set(RED_LED);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if(((rssi_led >> 2) & 1) == 0)
    {
        nrk_led_clr(GREEN_LED);
    }
    if(((rssi_led >> 3) & 1) == 1)
     6fe:	c3 ff       	sbrs	r28, 3
     700:	03 c0       	rjmp	.+6      	; 0x708 <display_rssi+0x88>
    }
    else if(((rssi_led >> 3) & 1) == 0)
    {
        nrk_led_clr(RED_LED);
    }
}
     702:	cf 91       	pop	r28
    {
        nrk_led_clr(GREEN_LED);
    }
    if(((rssi_led >> 3) & 1) == 1)
    {
        nrk_led_set(RED_LED);
     704:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <nrk_led_set>
    }
    else if(((rssi_led >> 3) & 1) == 0)
    {
        nrk_led_clr(RED_LED);
    }
}
     708:	cf 91       	pop	r28
    {
        nrk_led_set(RED_LED);
    }
    else if(((rssi_led >> 3) & 1) == 0)
    {
        nrk_led_clr(RED_LED);
     70a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <nrk_led_clr>

0000070e <rx_task>:

  return 0;
}

void rx_task ()
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <rx_task+0x6>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
  uint8_t i, len;
  int8_t rssi, val;
  uint8_t *local_rx_buf;
  nrk_time_t check_period;
  printf ("rx_task PID=%d\r\n", nrk_get_pid ());
     718:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <nrk_get_pid>
     71c:	1f 92       	push	r1
     71e:	8f 93       	push	r24
     720:	8e e8       	ldi	r24, 0x8E	; 142
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>

  // init bmac on channel 25 
  bmac_init (12);
     72c:	8c e0       	ldi	r24, 0x0C	; 12
     72e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <bmac_init>
  // bmac will try to receive fainter packets.  If the value is set
  // too high or too low performance will suffer greatly.
  // bmac_set_cca_thresh(-45); 


  if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
  // This sets the next RX buffer.
  // This can be called at anytime before releaseing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     73a:	64 e7       	ldi	r22, 0x74	; 116
     73c:	86 e7       	ldi	r24, 0x76	; 118
     73e:	95 e0       	ldi	r25, 0x05	; 5
     740:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <bmac_rx_pkt_set_buffer>
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    // nrk_led_set (GREEN_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
     744:	8f e9       	ldi	r24, 0x9F	; 159
     746:	e8 2e       	mov	r14, r24
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	f8 2e       	mov	r15, r24
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
     74c:	0e 94 bf 04 	call	0x97e	; 0x97e <bmac_wait_until_rx_pkt>
    // Get the RX packet 
    // nrk_led_set (GREEN_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     750:	be 01       	movw	r22, r28
     752:	6f 5f       	subi	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	ce 01       	movw	r24, r28
     758:	02 96       	adiw	r24, 0x02	; 2
     75a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <bmac_rx_pkt_get>
    printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	28 2f       	mov	r18, r24
     762:	33 27       	eor	r19, r19
     764:	27 fd       	sbrc	r18, 7
     766:	30 95       	com	r19
     768:	3f 93       	push	r19
     76a:	8f 93       	push	r24
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	1f 92       	push	r1
     770:	8f 93       	push	r24
     772:	ff 92       	push	r15
     774:	ef 92       	push	r14
     776:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    
    // Display RSSI value on LEDs
    display_rssi(rssi);
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	0e 94 40 03 	call	0x680	; 0x680 <display_rssi>

    for (i = 0; i < len; i++)
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	18 17       	cp	r17, r24
     792:	50 f4       	brcc	.+20     	; 0x7a8 <rx_task+0x9a>
      printf ("%c", rx_buf[i]);
     794:	e1 2f       	mov	r30, r17
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	ea 58       	subi	r30, 0x8A	; 138
     79a:	fa 4f       	sbci	r31, 0xFA	; 250
     79c:	80 81       	ld	r24, Z
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 ca 2b 	call	0x5794	; 0x5794 <putchar>
    printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
    
    // Display RSSI value on LEDs
    display_rssi(rssi);

    for (i = 0; i < len; i++)
     7a4:	1f 5f       	subi	r17, 0xFF	; 255
     7a6:	f3 cf       	rjmp	.-26     	; 0x78e <rx_task+0x80>
      printf ("%c", rx_buf[i]);
    printf ("]\r\n");
     7a8:	87 ee       	ldi	r24, 0xE7	; 231
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <puts>
    // nrk_led_clr (GREEN_LED);
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
     7b0:	0e 94 f7 05 	call	0xbee	; 0xbee <bmac_rx_pkt_release>
  }
     7b4:	cb cf       	rjmp	.-106    	; 0x74c <rx_task+0x3e>

000007b6 <nrk_create_taskset>:
  }

}

void nrk_create_taskset ()
{
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29


  RX_TASK.task = rx_task;
     7ca:	e0 e6       	ldi	r30, 0x60	; 96
     7cc:	f6 e0       	ldi	r31, 0x06	; 6
     7ce:	87 e8       	ldi	r24, 0x87	; 135
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	96 83       	std	Z+6, r25	; 0x06
     7d4:	85 83       	std	Z+5, r24	; 0x05
  RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
     7d6:	89 e6       	ldi	r24, 0x69	; 105
     7d8:	95 e0       	ldi	r25, 0x05	; 5
     7da:	92 83       	std	Z+2, r25	; 0x02
     7dc:	81 83       	std	Z+1, r24	; 0x01
  RX_TASK.Pbos = (void *) &rx_task_stack[0];
     7de:	8a ee       	ldi	r24, 0xEA	; 234
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	94 83       	std	Z+4, r25	; 0x04
     7e4:	83 83       	std	Z+3, r24	; 0x03
  RX_TASK.prio = 2;
     7e6:	d2 e0       	ldi	r29, 0x02	; 2
     7e8:	d0 87       	std	Z+8, r29	; 0x08
  RX_TASK.FirstActivation = TRUE;
     7ea:	c1 e0       	ldi	r28, 0x01	; 1
     7ec:	c7 83       	std	Z+7, r28	; 0x07
  RX_TASK.Type = BASIC_TASK;
     7ee:	c1 87       	std	Z+9, r28	; 0x09
  RX_TASK.SchType = PREEMPTIVE;
     7f0:	c2 87       	std	Z+10, r28	; 0x0a
  RX_TASK.period.secs = 1;
     7f2:	c1 2c       	mov	r12, r1
     7f4:	d1 2c       	mov	r13, r1
     7f6:	76 01       	movw	r14, r12
     7f8:	c3 94       	inc	r12
     7fa:	c3 86       	std	Z+11, r12	; 0x0b
     7fc:	d4 86       	std	Z+12, r13	; 0x0c
     7fe:	e5 86       	std	Z+13, r14	; 0x0d
     800:	f6 86       	std	Z+14, r15	; 0x0e
  RX_TASK.period.nano_secs = 0;
     802:	17 86       	std	Z+15, r1	; 0x0f
     804:	10 8a       	std	Z+16, r1	; 0x10
     806:	11 8a       	std	Z+17, r1	; 0x11
     808:	12 8a       	std	Z+18, r1	; 0x12
  RX_TASK.cpu_reserve.secs = 1;
     80a:	c3 8a       	std	Z+19, r12	; 0x13
     80c:	d4 8a       	std	Z+20, r13	; 0x14
     80e:	e5 8a       	std	Z+21, r14	; 0x15
     810:	f6 8a       	std	Z+22, r15	; 0x16
  RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     812:	81 2c       	mov	r8, r1
     814:	95 e6       	ldi	r25, 0x65	; 101
     816:	99 2e       	mov	r9, r25
     818:	9d ec       	ldi	r25, 0xCD	; 205
     81a:	a9 2e       	mov	r10, r25
     81c:	9d e1       	ldi	r25, 0x1D	; 29
     81e:	b9 2e       	mov	r11, r25
     820:	87 8a       	std	Z+23, r8	; 0x17
     822:	90 8e       	std	Z+24, r9	; 0x18
     824:	a1 8e       	std	Z+25, r10	; 0x19
     826:	b2 8e       	std	Z+26, r11	; 0x1a
  RX_TASK.offset.secs = 0;
     828:	13 8e       	std	Z+27, r1	; 0x1b
     82a:	14 8e       	std	Z+28, r1	; 0x1c
     82c:	15 8e       	std	Z+29, r1	; 0x1d
     82e:	16 8e       	std	Z+30, r1	; 0x1e
  RX_TASK.offset.nano_secs = 0;
     830:	17 8e       	std	Z+31, r1	; 0x1f
     832:	10 a2       	std	Z+32, r1	; 0x20
     834:	11 a2       	std	Z+33, r1	; 0x21
     836:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&RX_TASK);
     838:	cf 01       	movw	r24, r30
     83a:	0e 94 04 1b 	call	0x3608	; 0x3608 <nrk_activate_task>

  TX_TASK.task = tx_task;
     83e:	e3 e8       	ldi	r30, 0x83	; 131
     840:	f6 e0       	ldi	r31, 0x06	; 6
     842:	82 ed       	ldi	r24, 0xD2	; 210
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	96 83       	std	Z+6, r25	; 0x06
     848:	85 83       	std	Z+5, r24	; 0x05
  TX_TASK.Ptos = (void *) &tx_task_stack[NRK_APP_STACKSIZE - 1];
     84a:	87 ee       	ldi	r24, 0xE7	; 231
     84c:	94 e0       	ldi	r25, 0x04	; 4
     84e:	92 83       	std	Z+2, r25	; 0x02
     850:	81 83       	std	Z+1, r24	; 0x01
  TX_TASK.Pbos = (void *) &tx_task_stack[0];
     852:	88 e6       	ldi	r24, 0x68	; 104
     854:	94 e0       	ldi	r25, 0x04	; 4
     856:	94 83       	std	Z+4, r25	; 0x04
     858:	83 83       	std	Z+3, r24	; 0x03
  TX_TASK.prio = 2;
     85a:	d0 87       	std	Z+8, r29	; 0x08
  TX_TASK.FirstActivation = TRUE;
     85c:	c7 83       	std	Z+7, r28	; 0x07
  TX_TASK.Type = BASIC_TASK;
     85e:	c1 87       	std	Z+9, r28	; 0x09
  TX_TASK.SchType = PREEMPTIVE;
     860:	c2 87       	std	Z+10, r28	; 0x0a
  TX_TASK.period.secs = 1;
     862:	c3 86       	std	Z+11, r12	; 0x0b
     864:	d4 86       	std	Z+12, r13	; 0x0c
     866:	e5 86       	std	Z+13, r14	; 0x0d
     868:	f6 86       	std	Z+14, r15	; 0x0e
  TX_TASK.period.nano_secs = 0;
     86a:	17 86       	std	Z+15, r1	; 0x0f
     86c:	10 8a       	std	Z+16, r1	; 0x10
     86e:	11 8a       	std	Z+17, r1	; 0x11
     870:	12 8a       	std	Z+18, r1	; 0x12
  TX_TASK.cpu_reserve.secs = 1;
     872:	c3 8a       	std	Z+19, r12	; 0x13
     874:	d4 8a       	std	Z+20, r13	; 0x14
     876:	e5 8a       	std	Z+21, r14	; 0x15
     878:	f6 8a       	std	Z+22, r15	; 0x16
  TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     87a:	87 8a       	std	Z+23, r8	; 0x17
     87c:	90 8e       	std	Z+24, r9	; 0x18
     87e:	a1 8e       	std	Z+25, r10	; 0x19
     880:	b2 8e       	std	Z+26, r11	; 0x1a
  TX_TASK.offset.secs = 0;
     882:	13 8e       	std	Z+27, r1	; 0x1b
     884:	14 8e       	std	Z+28, r1	; 0x1c
     886:	15 8e       	std	Z+29, r1	; 0x1d
     888:	16 8e       	std	Z+30, r1	; 0x1e
  TX_TASK.offset.nano_secs = 0;
     88a:	17 8e       	std	Z+31, r1	; 0x1f
     88c:	10 a2       	std	Z+32, r1	; 0x20
     88e:	11 a2       	std	Z+33, r1	; 0x21
     890:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&TX_TASK);
     892:	cf 01       	movw	r24, r30
     894:	0e 94 04 1b 	call	0x3608	; 0x3608 <nrk_activate_task>



  printf ("Create done\r\n");
     898:	8e eb       	ldi	r24, 0xBE	; 190
     89a:	92 e0       	ldi	r25, 0x02	; 2
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
  TX_TASK.offset.nano_secs = 0;
  nrk_activate_task (&TX_TASK);



  printf ("Create done\r\n");
     8b0:	0c 94 d0 2b 	jmp	0x57a0	; 0x57a0 <puts>

000008b4 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     8b4:	08 95       	ret

000008b6 <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     8b6:	64 30       	cpi	r22, 0x04	; 4
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     8ba:	0e 94 bb 0b 	call	0x1776	; 0x1776 <rf_security_set_ctr_counter>
  return NRK_OK;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     8c4:	08 95       	ret

000008c6 <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	08 95       	ret

000008ca <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	08 95       	ret

000008d0 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     8d0:	0e 94 53 08 	call	0x10a6	; 0x10a6 <rf_auto_ack_disable>
  return NRK_OK;
}
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	08 95       	ret

000008d8 <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     8d8:	0e 94 4d 08 	call	0x109a	; 0x109a <rf_auto_ack_enable>
  return NRK_OK;
}
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	08 95       	ret

000008e0 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     8e0:	0e 94 47 08 	call	0x108e	; 0x108e <rf_addr_decode_disable>
  return NRK_OK;
}
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	08 95       	ret

000008e8 <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     8e8:	0e 94 41 08 	call	0x1082	; 0x1082 <rf_addr_decode_enable>
  return NRK_OK;
}
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	08 95       	ret

000008f0 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     8f0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret

000008f8 <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     8f8:	90 93 6b 05 	sts	0x056B, r25
     8fc:	80 93 6a 05 	sts	0x056A, r24
  return NRK_OK;
}
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 95       	ret

00000904 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     904:	0e 94 b9 0b 	call	0x1772	; 0x1772 <rf_security_last_pkt_status>
}
     908:	08 95       	ret

0000090a <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     90a:	60 31       	cpi	r22, 0x10	; 16
     90c:	21 f4       	brne	.+8      	; 0x916 <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     90e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rf_security_set_key>
  return NRK_OK;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     916:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     918:	08 95       	ret

0000091a <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret

0000091e <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret

00000922 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     922:	80 32       	cpi	r24, 0x20	; 32
     924:	20 f4       	brcc	.+8      	; 0x92e <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     926:	0e 94 37 08 	call	0x106e	; 0x106e <rf_tx_power>
  return NRK_OK;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     92e:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     930:	08 95       	ret

00000932 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     932:	80 93 99 03 	sts	0x0399, r24
     936:	08 95       	ret

00000938 <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     938:	99 27       	eor	r25, r25
     93a:	87 fd       	sbrc	r24, 7
     93c:	90 95       	com	r25
     93e:	0e 94 af 0b 	call	0x175e	; 0x175e <rf_set_cca_thresh>
  return NRK_OK;
}
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	08 95       	ret

00000946 <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	1f 92       	push	r1
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     950:	8b 31       	cpi	r24, 0x1B	; 27
     952:	80 f4       	brcc	.+32     	; 0x974 <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     954:	80 93 a3 03 	sts	0x03A3, r24
  rf_power_up ();
     958:	89 83       	std	Y+1, r24	; 0x01
     95a:	0e 94 21 08 	call	0x1042	; 0x1042 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4f ef       	ldi	r20, 0xFF	; 255
     964:	5f ef       	ldi	r21, 0xFF	; 255
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	86 ea       	ldi	r24, 0xA6	; 166
     96a:	96 e0       	ldi	r25, 0x06	; 6
     96c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <rf_init>
  return NRK_OK;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	01 c0       	rjmp	.+2      	; 0x976 <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     974:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     97e:	80 91 a6 03 	lds	r24, 0x03A6
     982:	88 23       	and	r24, r24
     984:	11 f1       	breq	.+68     	; 0x9ca <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     986:	80 91 75 05 	lds	r24, 0x0575
     98a:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	00 90 75 05 	lds	r0, 0x0575
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <bmac_wait_until_rx_pkt+0x2a>
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	88 1f       	adc	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	0a 94       	dec	r0
     9aa:	d2 f7       	brpl	.-12     	; 0x9a0 <bmac_wait_until_rx_pkt+0x22>
     9ac:	0e 94 92 18 	call	0x3124	; 0x3124 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	00 90 75 05 	lds	r0, 0x0575
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <bmac_wait_until_rx_pkt+0x44>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <bmac_wait_until_rx_pkt+0x3c>
     9c6:	80 ff       	sbrs	r24, 0
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     9d0:	08 95       	ret

000009d2 <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	51 f0       	breq	.+20     	; 0x9ea <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     9d6:	90 93 ac 06 	sts	0x06AC, r25
     9da:	80 93 ab 06 	sts	0x06AB, r24
  bmac_rfRxInfo.max_length = size;
     9de:	60 93 aa 06 	sts	0x06AA, r22
  rx_buf_empty = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 a6 03 	sts	0x03A6, r24
  return NRK_OK;
     9e8:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     9ec:	08 95       	ret

000009ee <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	18 2f       	mov	r17, r24
  bmac_running = 0;
     9f6:	10 92 a5 03 	sts	0x03A5, r1
  tx_reserve = -1;
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	80 93 98 03 	sts	0x0398, r24
  cca_active = true;
     a00:	d1 e0       	ldi	r29, 0x01	; 1
     a02:	d0 93 99 03 	sts	0x0399, r29
  rx_failure_cnt = 0;
     a06:	10 92 a8 03 	sts	0x03A8, r1
     a0a:	10 92 a9 03 	sts	0x03A9, r1
     a0e:	10 92 aa 03 	sts	0x03AA, r1
     a12:	10 92 ab 03 	sts	0x03AB, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     a16:	10 92 9a 03 	sts	0x039A, r1
     a1a:	10 92 9b 03 	sts	0x039B, r1
     a1e:	10 92 9c 03 	sts	0x039C, r1
     a22:	10 92 9d 03 	sts	0x039D, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	91 ee       	ldi	r25, 0xE1	; 225
     a2a:	a5 ef       	ldi	r26, 0xF5	; 245
     a2c:	b5 e0       	ldi	r27, 0x05	; 5
     a2e:	80 93 9e 03 	sts	0x039E, r24
     a32:	90 93 9f 03 	sts	0x039F, r25
     a36:	a0 93 a0 03 	sts	0x03A0, r26
     a3a:	b0 93 a1 03 	sts	0x03A1, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
     a3e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <nrk_signal_create>
     a42:	c8 2f       	mov	r28, r24
     a44:	80 93 75 05 	sts	0x0575, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     a48:	8f 3f       	cpi	r24, 0xFF	; 255
     a4a:	19 f4       	brne	.+6      	; 0xa52 <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     a4c:	86 ec       	ldi	r24, 0xC6	; 198
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     a52:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <nrk_signal_create>
     a56:	c8 2f       	mov	r28, r24
     a58:	80 93 33 07 	sts	0x0733, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     a5c:	8f 3f       	cpi	r24, 0xFF	; 255
     a5e:	69 f4       	brne	.+26     	; 0xa7a <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     a60:	8e e9       	ldi	r24, 0x9E	; 158
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     a68:	e0 91 53 08 	lds	r30, 0x0853
     a6c:	f0 91 54 08 	lds	r31, 0x0854
     a70:	60 85       	ldd	r22, Z+8	; 0x08
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
    return NRK_ERROR;
     a78:	2a c0       	rjmp	.+84     	; 0xace <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
     a7a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <nrk_signal_create>
     a7e:	c8 2f       	mov	r28, r24
     a80:	80 93 e9 04 	sts	0x04E9, r24
  if (bmac_enable_signal == NRK_ERROR) {
     a84:	8f 3f       	cpi	r24, 0xFF	; 255
     a86:	19 f4       	brne	.+6      	; 0xa8e <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     a88:	82 e7       	ldi	r24, 0x72	; 114
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	eb cf       	rjmp	.-42     	; 0xa64 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     a8e:	10 92 a7 03 	sts	0x03A7, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     a92:	10 92 a6 03 	sts	0x03A6, r1
  bmac_rfRxInfo.pPayload = NULL;
     a96:	10 92 ac 06 	sts	0x06AC, r1
     a9a:	10 92 ab 06 	sts	0x06AB, r1
  bmac_rfRxInfo.max_length = 0;
     a9e:	10 92 aa 06 	sts	0x06AA, r1

  // Setup the cc2420 chip
  rf_power_up ();
     aa2:	0e 94 21 08 	call	0x1042	; 0x1042 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4f ef       	ldi	r20, 0xFF	; 255
     aac:	5f ef       	ldi	r21, 0xFF	; 255
     aae:	61 2f       	mov	r22, r17
     ab0:	86 ea       	ldi	r24, 0xA6	; 166
     ab2:	96 e0       	ldi	r25, 0x06	; 6
     ab4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <rf_init>
  g_chan = chan;
     ab8:	10 93 a3 03 	sts	0x03A3, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 af 0b 	call	0x175e	; 0x175e <rf_set_cca_thresh>
  bmac_running = 1;
     ac4:	d0 93 a5 03 	sts	0x03A5, r29
  is_enabled = 1;
     ac8:	d0 93 a2 03 	sts	0x03A2, r29
  return NRK_OK;
     acc:	c1 e0       	ldi	r28, 0x01	; 1
}
     ace:	8c 2f       	mov	r24, r28
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	08 95       	ret

00000ad8 <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     ad8:	20 91 a7 03 	lds	r18, 0x03A7
     adc:	21 30       	cpi	r18, 0x01	; 1
     ade:	59 f0       	breq	.+22     	; 0xaf6 <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	20 93 a7 03 	sts	0x03A7, r18
  bmac_rfTxInfo.pPayload = buf;
     ae6:	90 93 6e 05 	sts	0x056E, r25
     aea:	80 93 6d 05 	sts	0x056D, r24
  bmac_rfTxInfo.length = len;
     aee:	60 93 6c 05 	sts	0x056C, r22
  return NRK_OK;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     af6:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     af8:	08 95       	ret

00000afa <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     afa:	80 91 75 05 	lds	r24, 0x0575
     afe:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     b02:	80 91 75 05 	lds	r24, 0x0575
     b06:	08 95       	ret

00000b08 <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     b08:	80 91 33 07 	lds	r24, 0x0733
     b0c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     b10:	80 91 33 07 	lds	r24, 0x0733
     b14:	08 95       	ret

00000b16 <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
     b1e:	20 91 a7 03 	lds	r18, 0x03A7
     b22:	21 30       	cpi	r18, 0x01	; 1
     b24:	f1 f1       	breq	.+124    	; 0xba2 <bmac_tx_pkt+0x8c>
     b26:	f6 2e       	mov	r15, r22
     b28:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     b2a:	80 91 33 07 	lds	r24, 0x0733
     b2e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
  tx_data_ready = 1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 a7 03 	sts	0x03A7, r24
  bmac_rfTxInfo.pPayload = buf;
     b38:	d0 92 6e 05 	sts	0x056E, r13
     b3c:	c0 92 6d 05 	sts	0x056D, r12
  bmac_rfTxInfo.length = len;
     b40:	f0 92 6c 05 	sts	0x056C, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	bc 01       	movw	r22, r24
     b4e:	cd 01       	movw	r24, r26
     b50:	00 90 33 07 	lds	r0, 0x0733
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <bmac_tx_pkt+0x48>
     b56:	66 0f       	add	r22, r22
     b58:	77 1f       	adc	r23, r23
     b5a:	88 1f       	adc	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	0a 94       	dec	r0
     b60:	d2 f7       	brpl	.-12     	; 0xb56 <bmac_tx_pkt+0x40>
     b62:	0e 94 92 18 	call	0x3124	; 0x3124 <nrk_event_wait>
     b66:	6b 01       	movw	r12, r22
     b68:	7c 01       	movw	r14, r24
  if (mask == 0)
     b6a:	61 15       	cp	r22, r1
     b6c:	71 05       	cpc	r23, r1
     b6e:	81 05       	cpc	r24, r1
     b70:	91 05       	cpc	r25, r1
     b72:	21 f4       	brne	.+8      	; 0xb7c <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     b74:	8e e4       	ldi	r24, 0x4E	; 78
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     b7c:	00 90 33 07 	lds	r0, 0x0733
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <bmac_tx_pkt+0x74>
     b82:	f6 94       	lsr	r15
     b84:	e7 94       	ror	r14
     b86:	d7 94       	ror	r13
     b88:	c7 94       	ror	r12
     b8a:	0a 94       	dec	r0
     b8c:	d2 f7       	brpl	.-12     	; 0xb82 <bmac_tx_pkt+0x6c>
     b8e:	c0 fc       	sbrc	r12, 0
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     b92:	8b e2       	ldi	r24, 0x2B	; 43
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
  if (pkt_got_ack)
     b9a:	80 91 a4 03 	lds	r24, 0x03A4
     b9e:	81 11       	cpse	r24, r1
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	08 95       	ret

00000bb2 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
     bb2:	20 91 a6 03 	lds	r18, 0x03A6
     bb6:	22 23       	and	r18, r18
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <bmac_rx_pkt_get+0x16>
    *len = 0;
     bba:	fc 01       	movw	r30, r24
     bbc:	10 82       	st	Z, r1
    *rssi = 0;
     bbe:	fb 01       	movw	r30, r22
     bc0:	10 82       	st	Z, r1
    return NULL;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
     bc8:	20 91 a9 06 	lds	r18, 0x06A9
     bcc:	fc 01       	movw	r30, r24
     bce:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
     bd0:	80 91 ae 06 	lds	r24, 0x06AE
     bd4:	fb 01       	movw	r30, r22
     bd6:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
     bd8:	80 91 ab 06 	lds	r24, 0x06AB
     bdc:	90 91 ac 06 	lds	r25, 0x06AC
}
     be0:	08 95       	ret

00000be2 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 91 a6 03 	lds	r25, 0x03A6
     be8:	91 11       	cpse	r25, r1
     bea:	80 e0       	ldi	r24, 0x00	; 0
}
     bec:	08 95       	ret

00000bee <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	80 93 a6 03 	sts	0x03A6, r24
  return NRK_OK;
}
     bf4:	08 95       	ret

00000bf6 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     bf6:	10 92 a2 03 	sts	0x03A2, r1
  rf_power_down ();
     bfa:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <rf_power_down>

00000bfe <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 a2 03 	sts	0x03A2, r24
  rf_power_up ();
     c04:	0e 94 21 08 	call	0x1042	; 0x1042 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     c08:	80 91 e9 04 	lds	r24, 0x04E9
     c0c:	0c 94 21 18 	jmp	0x3042	; 0x3042 <nrk_event_signal>

00000c10 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	28 97       	sbiw	r28, 0x08	; 8
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	29 83       	std	Y+1, r18	; 0x01
     c26:	3a 83       	std	Y+2, r19	; 0x02
     c28:	4b 83       	std	Y+3, r20	; 0x03
     c2a:	5c 83       	std	Y+4, r21	; 0x04
     c2c:	6d 83       	std	Y+5, r22	; 0x05
     c2e:	7e 83       	std	Y+6, r23	; 0x06
     c30:	8f 83       	std	Y+7, r24	; 0x07
     c32:	98 87       	std	Y+8, r25	; 0x08
     c34:	49 81       	ldd	r20, Y+1	; 0x01
     c36:	5a 81       	ldd	r21, Y+2	; 0x02
     c38:	6b 81       	ldd	r22, Y+3	; 0x03
     c3a:	7c 81       	ldd	r23, Y+4	; 0x04
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	af 81       	ldd	r26, Y+7	; 0x07
     c42:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	61 05       	cpc	r22, r1
     c4a:	71 05       	cpc	r23, r1
     c4c:	41 f4       	brne	.+16     	; 0xc5e <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
     c4e:	81 15       	cp	r24, r1
     c50:	2d e2       	ldi	r18, 0x2D	; 45
     c52:	92 07       	cpc	r25, r18
     c54:	21 e3       	ldi	r18, 0x31	; 49
     c56:	a2 07       	cpc	r26, r18
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	b2 07       	cpc	r27, r18
     c5c:	90 f0       	brcs	.+36     	; 0xc82 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
     c5e:	40 93 9a 03 	sts	0x039A, r20
     c62:	50 93 9b 03 	sts	0x039B, r21
     c66:	60 93 9c 03 	sts	0x039C, r22
     c6a:	70 93 9d 03 	sts	0x039D, r23
  _bmac_check_period.nano_secs = period.nano_secs;
     c6e:	80 93 9e 03 	sts	0x039E, r24
     c72:	90 93 9f 03 	sts	0x039F, r25
     c76:	a0 93 a0 03 	sts	0x03A0, r26
     c7a:	b0 93 a1 03 	sts	0x03A1, r27
  return NRK_OK;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
     c82:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
     c84:	28 96       	adiw	r28, 0x08	; 8
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
     c96:	80 91 a5 03 	lds	r24, 0x03A5
     c9a:	08 95       	ret

00000c9c <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
     c9c:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
     c9e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <rf_rx_on>
  val += rf_cca_check ();
     ca2:	0e 94 49 0a 	call	0x1492	; 0x1492 <rf_cca_check>
     ca6:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
     ca8:	0e 94 49 0a 	call	0x1492	; 0x1492 <rf_cca_check>
     cac:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
     cae:	0e 94 49 0a 	call	0x1492	; 0x1492 <rf_cca_check>
     cb2:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
     cb4:	0e 94 ef 08 	call	0x11de	; 0x11de <rf_rx_off>
     cb8:	8c 2f       	mov	r24, r28
     cba:	1c 16       	cp	r1, r28
     cbc:	0c f4       	brge	.+2      	; 0xcc0 <_bmac_channel_check+0x24>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
     cc4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
     cc8:	10 92 90 03 	sts	0x0390, r1
     ccc:	10 92 91 03 	sts	0x0391, r1
     cd0:	10 92 92 03 	sts	0x0392, r1
     cd4:	10 92 93 03 	sts	0x0393, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	68 2f       	mov	r22, r24
     cdc:	80 93 94 03 	sts	0x0394, r24
     ce0:	8b e4       	ldi	r24, 0x4B	; 75
     ce2:	80 93 95 03 	sts	0x0395, r24
     ce6:	8c e4       	ldi	r24, 0x4C	; 76
     ce8:	80 93 96 03 	sts	0x0396, r24
     cec:	10 92 97 03 	sts	0x0397, r1
  nrk_wait (dummy_t);
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 91 91 03 	lds	r19, 0x0391
     cf6:	40 91 92 03 	lds	r20, 0x0392
     cfa:	50 91 93 03 	lds	r21, 0x0393
     cfe:	7b e4       	ldi	r23, 0x4B	; 75
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 92 1c 	call	0x3924	; 0x3924 <nrk_wait>

  n = rf_rx_packet_nonblock ();
     d06:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	e9 f0       	breq	.+58     	; 0xd48 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
     d0e:	80 91 a8 03 	lds	r24, 0x03A8
     d12:	90 91 a9 03 	lds	r25, 0x03A9
     d16:	a0 91 aa 03 	lds	r26, 0x03AA
     d1a:	b0 91 ab 03 	lds	r27, 0x03AB
     d1e:	8f 3f       	cpi	r24, 0xFF	; 255
     d20:	2f ef       	ldi	r18, 0xFF	; 255
     d22:	92 07       	cpc	r25, r18
     d24:	a1 05       	cpc	r26, r1
     d26:	b1 05       	cpc	r27, r1
     d28:	58 f4       	brcc	.+22     	; 0xd40 <_bmac_rx+0x7c>
      rx_failure_cnt++;
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	a1 1d       	adc	r26, r1
     d2e:	b1 1d       	adc	r27, r1
     d30:	80 93 a8 03 	sts	0x03A8, r24
     d34:	90 93 a9 03 	sts	0x03A9, r25
     d38:	a0 93 aa 03 	sts	0x03AA, r26
     d3c:	b0 93 ab 03 	sts	0x03AB, r27
    rf_rx_off ();
     d40:	0e 94 ef 08 	call	0x11de	; 0x11de <rf_rx_off>
    return 0;
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
     d48:	10 92 a6 03 	sts	0x03A6, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
     d4c:	0e 94 ef 08 	call	0x11de	; 0x11de <rf_rx_off>
  return 1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
}
     d52:	08 95       	ret

00000d54 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
     d54:	80 91 a8 03 	lds	r24, 0x03A8
     d58:	90 91 a9 03 	lds	r25, 0x03A9
     d5c:	08 95       	ret

00000d5e <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
     d5e:	10 92 a8 03 	sts	0x03A8, r1
     d62:	10 92 a9 03 	sts	0x03A9, r1
     d66:	10 92 aa 03 	sts	0x03AA, r1
     d6a:	10 92 ab 03 	sts	0x03AB, r1
  return NRK_OK;
}
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	08 95       	ret

00000d72 <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	58 f0       	brcs	.+22     	; 0xd8c <_b_pow+0x1a>
    return 1;
  if (in > 7)
     d76:	88 30       	cpi	r24, 0x08	; 8
     d78:	08 f0       	brcs	.+2      	; 0xd7c <_b_pow+0xa>
    in = 6;                     // cap it at 128 
     d7a:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
     d7c:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
     d7e:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
     d80:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	28 13       	cpse	r18, r24
     d86:	fc cf       	rjmp	.-8      	; 0xd80 <_b_pow+0xe>
    result = result * 2;
  return result;
     d88:	89 2f       	mov	r24, r25
     d8a:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
     d8e:	08 95       	ret

00000d90 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
     d9c:	80 91 99 03 	lds	r24, 0x0399
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <_bmac_tx+0x16>
     da4:	43 c0       	rjmp	.+134    	; 0xe2c <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
     da6:	8a e9       	ldi	r24, 0x9A	; 154
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_nrk_time_to_ticks>
     dae:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
     db0:	0e 94 10 2b 	call	0x5620	; 0x5620 <rand>
     db4:	6a e0       	ldi	r22, 0x0A	; 10
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divmodhi4>
     dbc:	bc 01       	movw	r22, r24
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	ce 01       	movw	r24, r28
     dc4:	0e 94 07 2a 	call	0x540e	; 0x540e <__udivmodhi4>
     dc8:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
     dca:	0e 94 3d 1c 	call	0x387a	; 0x387a <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
     dce:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
     dd0:	0a e0       	ldi	r16, 0x0A	; 10
     dd2:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
     dd4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_bmac_channel_check>
     dd8:	d8 2f       	mov	r29, r24
      if (v == 1)
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	39 f1       	breq	.+78     	; 0xe2c <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
     dde:	0e 94 10 2b 	call	0x5620	; 0x5620 <rand>
     de2:	7c 01       	movw	r14, r24
     de4:	8c 2f       	mov	r24, r28
     de6:	0e 94 b9 06 	call	0xd72	; 0xd72 <_b_pow>
     dea:	68 2f       	mov	r22, r24
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	c7 01       	movw	r24, r14
     df0:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
     df4:	99 27       	eor	r25, r25
     df6:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <nrk_wait_until_next_n_periods>
      backoff_count++;
     dfa:	cf 5f       	subi	r28, 0xFF	; 255
     dfc:	c7 30       	cpi	r28, 0x07	; 7
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <_bmac_tx+0x72>
     e00:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
     e02:	8a e9       	ldi	r24, 0x9A	; 154
     e04:	93 e0       	ldi	r25, 0x03	; 3
     e06:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_nrk_time_to_ticks>
     e0a:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
     e0c:	0e 94 10 2b 	call	0x5620	; 0x5620 <rand>
     e10:	b8 01       	movw	r22, r16
     e12:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divmodhi4>
     e16:	bc 01       	movw	r22, r24
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	c7 01       	movw	r24, r14
     e1e:	0e 94 07 2a 	call	0x540e	; 0x540e <__udivmodhi4>
     e22:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
     e24:	0e 94 3d 1c 	call	0x387a	; 0x387a <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
     e28:	dd 23       	and	r29, r29
     e2a:	a1 f2       	breq	.-88     	; 0xdd4 <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
     e2c:	10 92 6f 05 	sts	0x056F, r1
  bmac_rfTxInfo.ackRequest = 0;
     e30:	10 92 70 05 	sts	0x0570, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
     e34:	20 91 9a 03 	lds	r18, 0x039A
     e38:	30 91 9b 03 	lds	r19, 0x039B
     e3c:	88 ee       	ldi	r24, 0xE8	; 232
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	28 9f       	mul	r18, r24
     e42:	e0 01       	movw	r28, r0
     e44:	29 9f       	mul	r18, r25
     e46:	d0 0d       	add	r29, r0
     e48:	38 9f       	mul	r19, r24
     e4a:	d0 0d       	add	r29, r0
     e4c:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
     e4e:	60 91 9e 03 	lds	r22, 0x039E
     e52:	70 91 9f 03 	lds	r23, 0x039F
     e56:	80 91 a0 03 	lds	r24, 0x03A0
     e5a:	90 91 a1 03 	lds	r25, 0x03A1
     e5e:	20 e4       	ldi	r18, 0x40	; 64
     e60:	32 e4       	ldi	r19, 0x42	; 66
     e62:	4f e0       	ldi	r20, 0x0F	; 15
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
     e6a:	c2 0f       	add	r28, r18
     e6c:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
     e6e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
     e72:	be 01       	movw	r22, r28
     e74:	8a e6       	ldi	r24, 0x6A	; 106
     e76:	95 e0       	ldi	r25, 0x05	; 5
     e78:	0e 94 f5 08 	call	0x11ea	; 0x11ea <rf_tx_packet_repeat>
     e7c:	80 93 a4 03 	sts	0x03A4, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
     e80:	0e 94 ef 08 	call	0x11de	; 0x11de <rf_rx_off>
  tx_data_ready = 0;
     e84:	10 92 a7 03 	sts	0x03A7, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
     e88:	80 91 33 07 	lds	r24, 0x0733
     e8c:	0e 94 21 18 	call	0x3042	; 0x3042 <nrk_event_signal>
  return NRK_OK;
}
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	08 95       	ret

00000ea0 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
     ea0:	80 91 a5 03 	lds	r24, 0x03A5
     ea4:	81 11       	cpse	r24, r1
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
     ea8:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_wait_until_next_period>
     eac:	f9 cf       	rjmp	.-14     	; 0xea0 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
     eae:	80 91 e9 04 	lds	r24, 0x04E9
     eb2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
  if (v == NRK_ERROR)
     eb6:	8f 3f       	cpi	r24, 0xFF	; 255
     eb8:	21 f4       	brne	.+8      	; 0xec2 <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
     eba:	8f e0       	ldi	r24, 0x0F	; 15
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
     ec2:	c1 2c       	mov	r12, r1
     ec4:	d1 2c       	mov	r13, r1
     ec6:	76 01       	movw	r14, r12
     ec8:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
     eca:	0e 94 21 08 	call	0x1042	; 0x1042 <rf_power_up>
    if (is_enabled) {
     ece:	80 91 a2 03 	lds	r24, 0x03A2
     ed2:	88 23       	and	r24, r24
     ed4:	69 f1       	breq	.+90     	; 0xf30 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
     ed6:	80 91 a6 03 	lds	r24, 0x03A6
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	41 f4       	brne	.+16     	; 0xeee <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
     ede:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
     ee2:	81 11       	cpse	r24, r1
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
     ee6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_bmac_rx>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	21 f4       	brne	.+8      	; 0xef6 <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
     eee:	80 91 75 05 	lds	r24, 0x0575
     ef2:	0e 94 21 18 	call	0x3042	; 0x3042 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
     ef6:	80 91 a7 03 	lds	r24, 0x03A7
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	11 f4       	brne	.+4      	; 0xf02 <bmac_nw_task+0x62>
        _bmac_tx ();
     efe:	0e 94 c8 06 	call	0xd90	; 0xd90 <_bmac_tx>
      }
      rf_rx_off ();
     f02:	0e 94 ef 08 	call	0x11de	; 0x11de <rf_rx_off>
      rf_power_down ();
     f06:	0e 94 fb 07 	call	0xff6	; 0xff6 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
     f0a:	20 91 9a 03 	lds	r18, 0x039A
     f0e:	30 91 9b 03 	lds	r19, 0x039B
     f12:	40 91 9c 03 	lds	r20, 0x039C
     f16:	50 91 9d 03 	lds	r21, 0x039D
     f1a:	60 91 9e 03 	lds	r22, 0x039E
     f1e:	70 91 9f 03 	lds	r23, 0x039F
     f22:	80 91 a0 03 	lds	r24, 0x03A0
     f26:	90 91 a1 03 	lds	r25, 0x03A1
     f2a:	0e 94 92 1c 	call	0x3924	; 0x3924 <nrk_wait>
     f2e:	cd cf       	rjmp	.-102    	; 0xeca <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
     f30:	80 91 e9 04 	lds	r24, 0x04E9
     f34:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	00 90 e9 04 	lds	r0, 0x04E9
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <bmac_nw_task+0xaa>
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	88 1f       	adc	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	d2 f7       	brpl	.-12     	; 0xf42 <bmac_nw_task+0xa2>
     f4e:	0e 94 92 18 	call	0x3124	; 0x3124 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	00 90 e9 04 	lds	r0, 0x04E9
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <bmac_nw_task+0xc4>
     f5c:	b6 95       	lsr	r27
     f5e:	a7 95       	ror	r26
     f60:	97 95       	ror	r25
     f62:	87 95       	ror	r24
     f64:	0a 94       	dec	r0
     f66:	d2 f7       	brpl	.-12     	; 0xf5c <bmac_nw_task+0xbc>
     f68:	80 ff       	sbrs	r24, 0
     f6a:	e2 cf       	rjmp	.-60     	; 0xf30 <bmac_nw_task+0x90>
     f6c:	ae cf       	rjmp	.-164    	; 0xeca <bmac_nw_task+0x2a>

00000f6e <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
     f6e:	60 e5       	ldi	r22, 0x50	; 80
     f70:	77 e0       	ldi	r23, 0x07	; 7
     f72:	8c e2       	ldi	r24, 0x2C	; 44
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	6c ea       	ldi	r22, 0xAC	; 172
     f80:	73 e0       	ldi	r23, 0x03	; 3
     f82:	8c e2       	ldi	r24, 0x2C	; 44
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
     f8a:	ec e2       	ldi	r30, 0x2C	; 44
     f8c:	f4 e0       	ldi	r31, 0x04	; 4
     f8e:	84 e1       	ldi	r24, 0x14	; 20
     f90:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
     f96:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
     f98:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
     f9a:	13 86       	std	Z+11, r1	; 0x0b
     f9c:	14 86       	std	Z+12, r1	; 0x0c
     f9e:	15 86       	std	Z+13, r1	; 0x0d
     fa0:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	9d e2       	ldi	r25, 0x2D	; 45
     fa6:	a1 e3       	ldi	r26, 0x31	; 49
     fa8:	b1 e0       	ldi	r27, 0x01	; 1
     faa:	87 87       	std	Z+15, r24	; 0x0f
     fac:	90 8b       	std	Z+16, r25	; 0x10
     fae:	a1 8b       	std	Z+17, r26	; 0x11
     fb0:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
     fb2:	13 8a       	std	Z+19, r1	; 0x13
     fb4:	14 8a       	std	Z+20, r1	; 0x14
     fb6:	15 8a       	std	Z+21, r1	; 0x15
     fb8:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
     fba:	17 8a       	std	Z+23, r1	; 0x17
     fbc:	10 8e       	std	Z+24, r1	; 0x18
     fbe:	11 8e       	std	Z+25, r1	; 0x19
     fc0:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
     fc2:	13 8e       	std	Z+27, r1	; 0x1b
     fc4:	14 8e       	std	Z+28, r1	; 0x1c
     fc6:	15 8e       	std	Z+29, r1	; 0x1d
     fc8:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
     fca:	17 8e       	std	Z+31, r1	; 0x1f
     fcc:	10 a2       	std	Z+32, r1	; 0x20
     fce:	11 a2       	std	Z+33, r1	; 0x21
     fd0:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
     fd2:	cf 01       	movw	r24, r30
     fd4:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <nrk_activate_task>

00000fd8 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     fd8:	90 91 41 01 	lds	r25, 0x0141
     fdc:	9f 71       	andi	r25, 0x1F	; 31
     fde:	9f 31       	cpi	r25, 0x1F	; 31
     fe0:	d9 f3       	breq	.-10     	; 0xfd8 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     fe2:	80 93 42 01 	sts	0x0142, r24
     fe6:	08 95       	ret

00000fe8 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 3f 07 	sts	0x073F, r24
     fee:	08 95       	ret

00000ff0 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     ff0:	10 92 3f 07 	sts	0x073F, r1
     ff4:	08 95       	ret

00000ff6 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     ff6:	80 91 41 01 	lds	r24, 0x0141
     ffa:	8f 71       	andi	r24, 0x1F	; 31
     ffc:	8f 31       	cpi	r24, 0x1F	; 31
     ffe:	d9 f3       	breq	.-10     	; 0xff6 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1000:	80 91 41 01 	lds	r24, 0x0141
    1004:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1006:	e1 f0       	breq	.+56     	; 0x1040 <rf_power_down+0x4a>
    1008:	8f 30       	cpi	r24, 0x0F	; 15
    100a:	d1 f0       	breq	.+52     	; 0x1040 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    100c:	80 91 41 01 	lds	r24, 0x0141
    1010:	8f 71       	andi	r24, 0x1F	; 31
    1012:	88 30       	cpi	r24, 0x08	; 8
    1014:	31 f4       	brne	.+12     	; 0x1022 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1016:	80 91 39 01 	lds	r24, 0x0139
    101a:	82 60       	ori	r24, 0x02	; 2
    101c:	80 93 39 01 	sts	0x0139, r24
    1020:	0b c0       	rjmp	.+22     	; 0x1038 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    1022:	88 e0       	ldi	r24, 0x08	; 8
    1024:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1028:	80 91 41 01 	lds	r24, 0x0141
    102c:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	d9 f7       	brne	.-10     	; 0x1028 <rf_power_down+0x32>
    1032:	f1 cf       	rjmp	.-30     	; 0x1016 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1034:	8f 30       	cpi	r24, 0x0F	; 15
    1036:	21 f0       	breq	.+8      	; 0x1040 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1038:	80 91 41 01 	lds	r24, 0x0141
    103c:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    103e:	d1 f7       	brne	.-12     	; 0x1034 <rf_power_down+0x3e>
    1040:	08 95       	ret

00001042 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1042:	80 91 41 01 	lds	r24, 0x0141
    1046:	8f 71       	andi	r24, 0x1F	; 31
    1048:	8f 31       	cpi	r24, 0x1F	; 31
    104a:	d9 f3       	breq	.-10     	; 0x1042 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    104c:	80 91 41 01 	lds	r24, 0x0141
    1050:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1052:	11 f0       	breq	.+4      	; 0x1058 <rf_power_up+0x16>
    1054:	8f 30       	cpi	r24, 0x0F	; 15
    1056:	51 f4       	brne	.+20     	; 0x106c <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    1058:	80 91 39 01 	lds	r24, 0x0139
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1062:	80 91 41 01 	lds	r24, 0x0141
    1066:	8f 71       	andi	r24, 0x1F	; 31
    1068:	88 30       	cpi	r24, 0x08	; 8
    106a:	d9 f7       	brne	.-10     	; 0x1062 <rf_power_up+0x20>
    106c:	08 95       	ret

0000106e <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    106e:	e5 e4       	ldi	r30, 0x45	; 69
    1070:	f1 e0       	ldi	r31, 0x01	; 1
    1072:	90 81       	ld	r25, Z
    1074:	90 7f       	andi	r25, 0xF0	; 240
    1076:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1078:	90 81       	ld	r25, Z
    107a:	8f 70       	andi	r24, 0x0F	; 15
    107c:	98 2b       	or	r25, r24
    107e:	90 83       	st	Z, r25
    1080:	08 95       	ret

00001082 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1082:	e7 e5       	ldi	r30, 0x57	; 87
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	80 81       	ld	r24, Z
    1088:	8d 7f       	andi	r24, 0xFD	; 253
    108a:	80 83       	st	Z, r24
    108c:	08 95       	ret

0000108e <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    108e:	e7 e5       	ldi	r30, 0x57	; 87
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	80 81       	ld	r24, Z
    1094:	82 60       	ori	r24, 0x02	; 2
    1096:	80 83       	st	Z, r24
    1098:	08 95       	ret

0000109a <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    109a:	ee e6       	ldi	r30, 0x6E	; 110
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	80 81       	ld	r24, Z
    10a0:	8f 7e       	andi	r24, 0xEF	; 239
    10a2:	80 83       	st	Z, r24
    10a4:	08 95       	ret

000010a6 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    10a6:	ee e6       	ldi	r30, 0x6E	; 110
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	80 81       	ld	r24, Z
    10ac:	80 61       	ori	r24, 0x10	; 16
    10ae:	80 83       	st	Z, r24
    10b0:	08 95       	ret

000010b2 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    10b2:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    10b6:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    10ba:	90 93 49 07 	sts	0x0749, r25
    10be:	80 93 48 07 	sts	0x0748, r24
    10c2:	08 95       	ret

000010c4 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    10c4:	90 93 43 07 	sts	0x0743, r25
    10c8:	80 93 42 07 	sts	0x0742, r24
	PHY_CC_CCA &= ~(0x1F);
    10cc:	e8 e4       	ldi	r30, 0x48	; 72
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	80 81       	ld	r24, Z
    10d2:	80 7e       	andi	r24, 0xE0	; 224
    10d4:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    10d6:	80 81       	ld	r24, Z
    10d8:	68 2b       	or	r22, r24
    10da:	60 83       	st	Z, r22
    10dc:	08 95       	ret

000010de <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    10de:	90 93 52 04 	sts	0x0452, r25
    10e2:	80 93 51 04 	sts	0x0451, r24
    10e6:	08 95       	ret

000010e8 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    10e8:	90 93 50 04 	sts	0x0450, r25
    10ec:	80 93 4f 04 	sts	0x044F, r24
    10f0:	08 95       	ret

000010f2 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	fc 01       	movw	r30, r24
    10fc:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1104:	80 ec       	ldi	r24, 0xC0	; 192
    1106:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    110a:	60 62       	ori	r22, 0x20	; 32
    110c:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1110:	85 ec       	ldi	r24, 0xC5	; 197
    1112:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1116:	87 ea       	ldi	r24, 0xA7	; 167
    1118:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    111c:	80 e8       	ldi	r24, 0x80	; 128
    111e:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1122:	20 93 60 01 	sts	0x0160, r18
    1126:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    112a:	40 93 62 01 	sts	0x0162, r20
    112e:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1132:	c6 e4       	ldi	r28, 0x46	; 70
    1134:	d1 e0       	ldi	r29, 0x01	; 1
    1136:	08 81       	ld	r16, Y
    1138:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    113a:	98 81       	ld	r25, Y
    113c:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    113e:	30 2f       	mov	r19, r16
    1140:	32 95       	swap	r19
    1142:	36 95       	lsr	r19
    1144:	37 70       	andi	r19, 0x07	; 7
    1146:	60 e4       	ldi	r22, 0x40	; 64
    1148:	36 9f       	mul	r19, r22
    114a:	80 01       	movw	r16, r0
    114c:	11 24       	eor	r1, r1
    114e:	22 95       	swap	r18
    1150:	26 95       	lsr	r18
    1152:	23 70       	andi	r18, 0x03	; 3
    1154:	62 2f       	mov	r22, r18
    1156:	60 2b       	or	r22, r16
    1158:	82 95       	swap	r24
    115a:	86 95       	lsr	r24
    115c:	83 70       	andi	r24, 0x03	; 3
    115e:	70 e1       	ldi	r23, 0x10	; 16
    1160:	87 9f       	mul	r24, r23
    1162:	90 01       	movw	r18, r0
    1164:	11 24       	eor	r1, r1
    1166:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1168:	92 95       	swap	r25
    116a:	96 95       	lsr	r25
    116c:	93 70       	andi	r25, 0x03	; 3
    116e:	84 e0       	ldi	r24, 0x04	; 4
    1170:	98 9f       	mul	r25, r24
    1172:	b0 01       	movw	r22, r0
    1174:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1176:	62 2b       	or	r22, r18
    1178:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    117c:	88 81       	ld	r24, Y
    117e:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1180:	92 95       	swap	r25
    1182:	96 95       	lsr	r25
    1184:	93 70       	andi	r25, 0x03	; 3
    1186:	39 2f       	mov	r19, r25
    1188:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    118a:	98 2f       	mov	r25, r24
    118c:	92 95       	swap	r25
    118e:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1190:	93 2b       	or	r25, r19
    1192:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1196:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    11a0:	c2 e4       	ldi	r28, 0x42	; 66
    11a2:	d7 e0       	ldi	r29, 0x07	; 7
    11a4:	f9 83       	std	Y+1, r31	; 0x01
    11a6:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    11a8:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    11aa:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    11ac:	5d 83       	std	Y+5, r21	; 0x05
    11ae:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    11b0:	bf 83       	std	Y+7, r27	; 0x07
    11b2:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    11b4:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	80 93 64 07 	sts	0x0764, r24
	rx_ready = 0;
    11bc:	10 92 83 07 	sts	0x0783, r1
	tx_done = 0;
    11c0:	10 92 53 07 	sts	0x0753, r1

	use_glossy = 0;
    11c4:	10 92 3f 07 	sts	0x073F, r1

} // rf_init() 
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    11d2:	86 e1       	ldi	r24, 0x16	; 22
    11d4:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <rf_cmd>

000011d8 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    11d8:	86 e1       	ldi	r24, 0x16	; 22
    11da:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <rf_cmd>

000011de <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    11de:	88 e0       	ldi	r24, 0x08	; 8
    11e0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>
	rx_ready = 0;
    11e4:	10 92 83 07 	sts	0x0783, r1
    11e8:	08 95       	ret

000011ea <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    11ea:	3f 92       	push	r3
    11ec:	4f 92       	push	r4
    11ee:	5f 92       	push	r5
    11f0:	6f 92       	push	r6
    11f2:	7f 92       	push	r7
    11f4:	8f 92       	push	r8
    11f6:	9f 92       	push	r9
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    120e:	80 91 64 07 	lds	r24, 0x0764
    1212:	81 11       	cpse	r24, r1
    1214:	02 c0       	rjmp	.+4      	; 0x121a <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	26 c1       	rjmp	.+588    	; 0x1466 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    121a:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    121c:	80 91 44 07 	lds	r24, 0x0744
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	80 93 44 07 	sts	0x0744, r24
	machead->fcf = fcf;
    1226:	90 91 81 01 	lds	r25, 0x0181
    122a:	90 7e       	andi	r25, 0xE0	; 224
    122c:	91 60       	ori	r25, 0x01	; 1
    122e:	20 fb       	bst	r18, 0
    1230:	95 f9       	bld	r25, 5
    1232:	9f 73       	andi	r25, 0x3F	; 63
    1234:	90 64       	ori	r25, 0x40	; 64
    1236:	90 93 81 01 	sts	0x0181, r25
    123a:	88 e8       	ldi	r24, 0x88	; 136
    123c:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    1240:	80 91 3f 07 	lds	r24, 0x073F
    1244:	88 23       	and	r24, r24
    1246:	d1 f0       	breq	.+52     	; 0x127c <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    124e:	8a ea       	ldi	r24, 0xAA	; 170
    1250:	9a ea       	ldi	r25, 0xAA	; 170
    1252:	90 93 89 01 	sts	0x0189, r25
    1256:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	9f ef       	ldi	r25, 0xFF	; 255
    125e:	90 93 87 01 	sts	0x0187, r25
    1262:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1266:	20 91 63 01 	lds	r18, 0x0163
    126a:	80 91 62 01 	lds	r24, 0x0162
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	92 2b       	or	r25, r18
    1272:	90 93 85 01 	sts	0x0185, r25
    1276:	80 93 84 01 	sts	0x0184, r24
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    127c:	80 91 44 07 	lds	r24, 0x0744
    1280:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1284:	80 91 61 01 	lds	r24, 0x0161
    1288:	20 91 60 01 	lds	r18, 0x0160
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	38 2b       	or	r19, r24
    1290:	30 93 89 01 	sts	0x0189, r19
    1294:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    1298:	88 81       	ld	r24, Y
    129a:	99 81       	ldd	r25, Y+1	; 0x01
    129c:	90 93 87 01 	sts	0x0187, r25
    12a0:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    12a4:	80 91 63 01 	lds	r24, 0x0163
    12a8:	20 91 62 01 	lds	r18, 0x0162
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	38 2b       	or	r19, r24
    12b0:	30 93 85 01 	sts	0x0185, r19
    12b4:	20 93 84 01 	sts	0x0184, r18
    12b8:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    12ba:	4a 81       	ldd	r20, Y+2	; 0x02
    12bc:	55 27       	eor	r21, r21
    12be:	47 fd       	sbrc	r20, 7
    12c0:	50 95       	com	r21
    12c2:	6b 81       	ldd	r22, Y+3	; 0x03
    12c4:	7c 81       	ldd	r23, Y+4	; 0x04
    12c6:	8a e8       	ldi	r24, 0x8A	; 138
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 2a 2b 	call	0x5654	; 0x5654 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	85 5f       	subi	r24, 0xF5	; 245
    12d2:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    12d6:	80 91 41 01 	lds	r24, 0x0141
    12da:	98 2f       	mov	r25, r24
    12dc:	9f 71       	andi	r25, 0x1F	; 31
    12de:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    12e0:	9f ef       	ldi	r25, 0xFF	; 255
    12e2:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    12e4:	92 30       	cpi	r25, 0x02	; 2
    12e6:	b8 f3       	brcs	.-18     	; 0x12d6 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    12e8:	91 e1       	ldi	r25, 0x11	; 17
    12ea:	39 16       	cp	r3, r25
    12ec:	a1 f3       	breq	.-24     	; 0x12d6 <rf_tx_packet_repeat+0xec>
    12ee:	92 e1       	ldi	r25, 0x12	; 18
    12f0:	39 16       	cp	r3, r25
    12f2:	89 f3       	breq	.-30     	; 0x12d6 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    12f4:	9f e1       	ldi	r25, 0x1F	; 31
    12f6:	39 16       	cp	r3, r25
    12f8:	71 f3       	breq	.-36     	; 0x12d6 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    12fa:	98 ef       	ldi	r25, 0xF8	; 248
    12fc:	93 0d       	add	r25, r3
    12fe:	92 30       	cpi	r25, 0x02	; 2
    1300:	20 f0       	brcs	.+8      	; 0x130a <rf_tx_packet_repeat+0x120>
    1302:	8f 70       	andi	r24, 0x0F	; 15
    1304:	86 30       	cpi	r24, 0x06	; 6
    1306:	09 f0       	breq	.+2      	; 0x130a <rf_tx_packet_repeat+0x120>
    1308:	86 cf       	rjmp	.-244    	; 0x1216 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    130a:	86 e1       	ldi	r24, 0x16	; 22
    130c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	81 11       	cpse	r24, r1
    1314:	0a c0       	rjmp	.+20     	; 0x132a <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1316:	89 e0       	ldi	r24, 0x09	; 9
    1318:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>
	if(pRTI->ackRequest)
    131c:	8e 81       	ldd	r24, Y+6	; 0x06
    131e:	88 23       	and	r24, r24
    1320:	91 f0       	breq	.+36     	; 0x1346 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    1322:	89 e1       	ldi	r24, 0x19	; 25
    1324:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>
    1328:	0e c0       	rjmp	.+28     	; 0x1346 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    132a:	80 91 48 01 	lds	r24, 0x0148
    132e:	80 68       	ori	r24, 0x80	; 128
    1330:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1334:	80 91 41 01 	lds	r24, 0x0141
    1338:	87 ff       	sbrs	r24, 7
    133a:	fc cf       	rjmp	.-8      	; 0x1334 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    133c:	80 91 41 01 	lds	r24, 0x0141
    1340:	86 ff       	sbrs	r24, 6
    1342:	69 cf       	rjmp	.-302    	; 0x1216 <rf_tx_packet_repeat+0x2c>
    1344:	e8 cf       	rjmp	.-48     	; 0x1316 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    1346:	61 14       	cp	r6, r1
    1348:	71 04       	cpc	r7, r1
    134a:	a9 f1       	breq	.+106    	; 0x13b6 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    134c:	8b e4       	ldi	r24, 0x4B	; 75
    134e:	97 e0       	ldi	r25, 0x07	; 7
    1350:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <nrk_time_get>
		target_t.secs = curr_t.secs;
    1354:	80 91 4b 07 	lds	r24, 0x074B
    1358:	90 91 4c 07 	lds	r25, 0x074C
    135c:	a0 91 4d 07 	lds	r26, 0x074D
    1360:	b0 91 4e 07 	lds	r27, 0x074E
    1364:	80 93 65 07 	sts	0x0765, r24
    1368:	90 93 66 07 	sts	0x0766, r25
    136c:	a0 93 67 07 	sts	0x0767, r26
    1370:	b0 93 68 07 	sts	0x0768, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    1374:	d3 01       	movw	r26, r6
    1376:	20 e4       	ldi	r18, 0x40	; 64
    1378:	32 e4       	ldi	r19, 0x42	; 66
    137a:	4f e0       	ldi	r20, 0x0F	; 15
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    1382:	00 91 4f 07 	lds	r16, 0x074F
    1386:	10 91 50 07 	lds	r17, 0x0750
    138a:	20 91 51 07 	lds	r18, 0x0751
    138e:	30 91 52 07 	lds	r19, 0x0752
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	80 0f       	add	r24, r16
    1398:	91 1f       	adc	r25, r17
    139a:	a2 1f       	adc	r26, r18
    139c:	b3 1f       	adc	r27, r19
    139e:	80 93 69 07 	sts	0x0769, r24
    13a2:	90 93 6a 07 	sts	0x076A, r25
    13a6:	a0 93 6b 07 	sts	0x076B, r26
    13aa:	b0 93 6c 07 	sts	0x076C, r27
		nrk_time_compact_nanos(&target_t);
    13ae:	85 e6       	ldi	r24, 0x65	; 101
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    13b6:	10 92 53 07 	sts	0x0753, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    13c0:	41 2c       	mov	r4, r1
    13c2:	51 2c       	mov	r5, r1
    13c4:	80 91 53 07 	lds	r24, 0x0753
    13c8:	81 11       	cpse	r24, r1
    13ca:	08 c0       	rjmp	.+16     	; 0x13dc <rf_tx_packet_repeat+0x1f2>
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	48 1a       	sub	r4, r24
    13d0:	58 0a       	sbc	r5, r24
    13d2:	98 ee       	ldi	r25, 0xE8	; 232
    13d4:	49 16       	cp	r4, r25
    13d6:	9d ef       	ldi	r25, 0xFD	; 253
    13d8:	59 06       	cpc	r5, r25
    13da:	a1 f7       	brne	.-24     	; 0x13c4 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    13dc:	61 14       	cp	r6, r1
    13de:	71 04       	cpc	r7, r1
    13e0:	21 f4       	brne	.+8      	; 0x13ea <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    13e2:	8e 81       	ldd	r24, Y+6	; 0x06
    13e4:	81 11       	cpse	r24, r1
    13e6:	2d c0       	rjmp	.+90     	; 0x1442 <rf_tx_packet_repeat+0x258>
    13e8:	32 c0       	rjmp	.+100    	; 0x144e <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    13ea:	8b e4       	ldi	r24, 0x4B	; 75
    13ec:	97 e0       	ldi	r25, 0x07	; 7
    13ee:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    13f2:	80 90 4b 07 	lds	r8, 0x074B
    13f6:	90 90 4c 07 	lds	r9, 0x074C
    13fa:	a0 90 4d 07 	lds	r10, 0x074D
    13fe:	b0 90 4e 07 	lds	r11, 0x074E
    1402:	c0 90 4f 07 	lds	r12, 0x074F
    1406:	d0 90 50 07 	lds	r13, 0x0750
    140a:	e0 90 51 07 	lds	r14, 0x0751
    140e:	f0 90 52 07 	lds	r15, 0x0752
    1412:	00 91 65 07 	lds	r16, 0x0765
    1416:	10 91 66 07 	lds	r17, 0x0766
    141a:	20 91 67 07 	lds	r18, 0x0767
    141e:	30 91 68 07 	lds	r19, 0x0768
    1422:	40 91 69 07 	lds	r20, 0x0769
    1426:	50 91 6a 07 	lds	r21, 0x076A
    142a:	60 91 6b 07 	lds	r22, 0x076B
    142e:	70 91 6c 07 	lds	r23, 0x076C
    1432:	84 e8       	ldi	r24, 0x84	; 132
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <nrk_time_sub>
    143a:	8f 3f       	cpi	r24, 0xFF	; 255
    143c:	09 f0       	breq	.+2      	; 0x1440 <rf_tx_packet_repeat+0x256>
    143e:	bb cf       	rjmp	.-138    	; 0x13b6 <rf_tx_packet_repeat+0x1cc>
    1440:	d0 cf       	rjmp	.-96     	; 0x13e2 <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1442:	80 91 42 01 	lds	r24, 0x0142
    1446:	82 95       	swap	r24
    1448:	86 95       	lsr	r24
    144a:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    144c:	39 f4       	brne	.+14     	; 0x145c <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    144e:	88 ee       	ldi	r24, 0xE8	; 232
    1450:	48 16       	cp	r4, r24
    1452:	8d ef       	ldi	r24, 0xFD	; 253
    1454:	58 06       	cpc	r5, r24
    1456:	11 f0       	breq	.+4      	; 0x145c <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1458:	c1 e0       	ldi	r28, 0x01	; 1
    145a:	01 c0       	rjmp	.+2      	; 0x145e <rf_tx_packet_repeat+0x274>
    145c:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    145e:	83 2d       	mov	r24, r3
    1460:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1464:	8c 2f       	mov	r24, r28
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	4f 90       	pop	r4
    1486:	3f 90       	pop	r3
    1488:	08 95       	ret

0000148a <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <rf_tx_packet_repeat>

00001492 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    1496:	80 91 64 07 	lds	r24, 0x0764
    149a:	88 23       	and	r24, r24
    149c:	41 f1       	breq	.+80     	; 0x14ee <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    149e:	80 91 41 01 	lds	r24, 0x0141
    14a2:	c8 2f       	mov	r28, r24
    14a4:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    14aa:	92 30       	cpi	r25, 0x02	; 2
    14ac:	c0 f3       	brcs	.-16     	; 0x149e <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    14ae:	c1 31       	cpi	r28, 0x11	; 17
    14b0:	b1 f3       	breq	.-20     	; 0x149e <rf_cca_check+0xc>
    14b2:	c2 31       	cpi	r28, 0x12	; 18
    14b4:	a1 f3       	breq	.-24     	; 0x149e <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    14b6:	cf 31       	cpi	r28, 0x1F	; 31
    14b8:	91 f3       	breq	.-28     	; 0x149e <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    14ba:	c8 30       	cpi	r28, 0x08	; 8
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <rf_cca_check+0x32>
    14be:	8f 70       	andi	r24, 0x0F	; 15
    14c0:	86 30       	cpi	r24, 0x06	; 6
    14c2:	a9 f4       	brne	.+42     	; 0x14ee <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    14c4:	86 e1       	ldi	r24, 0x16	; 22
    14c6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    14ca:	80 91 48 01 	lds	r24, 0x0148
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    14d4:	80 91 41 01 	lds	r24, 0x0141
    14d8:	87 ff       	sbrs	r24, 7
    14da:	fc cf       	rjmp	.-8      	; 0x14d4 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    14dc:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    14e0:	8c 2f       	mov	r24, r28
    14e2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    14e6:	d6 fb       	bst	r29, 6
    14e8:	88 27       	eor	r24, r24
    14ea:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    14f6:	80 91 64 07 	lds	r24, 0x0764
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <rf_rx_packet_nonblock+0xa>
    14fe:	a0 c0       	rjmp	.+320    	; 0x1640 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    1500:	80 91 83 07 	lds	r24, 0x0783
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <rf_rx_packet_nonblock+0x14>
    1508:	99 c0       	rjmp	.+306    	; 0x163c <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    150a:	80 91 7b 01 	lds	r24, 0x017B
    150e:	e0 91 42 07 	lds	r30, 0x0742
    1512:	f0 91 43 07 	lds	r31, 0x0743
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 97       	sbiw	r24, 0x02	; 2
    151a:	24 81       	ldd	r18, Z+4	; 0x04
    151c:	33 27       	eor	r19, r19
    151e:	27 fd       	sbrc	r18, 7
    1520:	30 95       	com	r19
    1522:	28 17       	cp	r18, r24
    1524:	39 07       	cpc	r19, r25
    1526:	0c f4       	brge	.+2      	; 0x152a <rf_rx_packet_nonblock+0x34>
    1528:	8b c0       	rjmp	.+278    	; 0x1640 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    152a:	e0 91 42 07 	lds	r30, 0x0742
    152e:	f0 91 43 07 	lds	r31, 0x0743
    1532:	80 91 82 01 	lds	r24, 0x0182
    1536:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1538:	e0 91 42 07 	lds	r30, 0x0742
    153c:	f0 91 43 07 	lds	r31, 0x0743
    1540:	80 91 87 01 	lds	r24, 0x0187
    1544:	90 91 88 01 	lds	r25, 0x0188
    1548:	92 83       	std	Z+2, r25	; 0x02
    154a:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    154c:	e0 91 42 07 	lds	r30, 0x0742
    1550:	f0 91 43 07 	lds	r31, 0x0743
    1554:	80 91 7b 01 	lds	r24, 0x017B
    1558:	8b 50       	subi	r24, 0x0B	; 11
    155a:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    155c:	a0 91 42 07 	lds	r26, 0x0742
    1560:	b0 91 43 07 	lds	r27, 0x0743
    1564:	e0 91 42 07 	lds	r30, 0x0742
    1568:	f0 91 43 07 	lds	r31, 0x0743
    156c:	13 96       	adiw	r26, 0x03	; 3
    156e:	9c 91       	ld	r25, X
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	89 17       	cp	r24, r25
    1574:	3c f0       	brlt	.+14     	; 0x1584 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    1576:	e0 91 42 07 	lds	r30, 0x0742
    157a:	f0 91 43 07 	lds	r31, 0x0743
    157e:	83 81       	ldd	r24, Z+3	; 0x03
    1580:	87 ff       	sbrs	r24, 7
    1582:	0d c0       	rjmp	.+26     	; 0x159e <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    1584:	10 92 83 07 	sts	0x0783, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1588:	80 91 4c 01 	lds	r24, 0x014C
    158c:	8f 77       	andi	r24, 0x7F	; 127
    158e:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1592:	80 91 4c 01 	lds	r24, 0x014C
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	80 93 4c 01 	sts	0x014C, r24
    159c:	51 c0       	rjmp	.+162    	; 0x1640 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    159e:	a0 91 42 07 	lds	r26, 0x0742
    15a2:	b0 91 43 07 	lds	r27, 0x0743
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    15a6:	e0 91 42 07 	lds	r30, 0x0742
    15aa:	f0 91 43 07 	lds	r31, 0x0743
    15ae:	13 96       	adiw	r26, 0x03	; 3
    15b0:	4c 91       	ld	r20, X
    15b2:	55 27       	eor	r21, r21
    15b4:	47 fd       	sbrc	r20, 7
    15b6:	50 95       	com	r21
    15b8:	69 e8       	ldi	r22, 0x89	; 137
    15ba:	71 e0       	ldi	r23, 0x01	; 1
    15bc:	85 81       	ldd	r24, Z+5	; 0x05
    15be:	96 81       	ldd	r25, Z+6	; 0x06
    15c0:	0e 94 2a 2b 	call	0x5654	; 0x5654 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    15c4:	e0 91 42 07 	lds	r30, 0x0742
    15c8:	f0 91 43 07 	lds	r31, 0x0743
    15cc:	80 91 80 01 	lds	r24, 0x0180
    15d0:	85 fb       	bst	r24, 5
    15d2:	88 27       	eor	r24, r24
    15d4:	80 f9       	bld	r24, 0
    15d6:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    15d8:	e0 91 42 07 	lds	r30, 0x0742
    15dc:	f0 91 43 07 	lds	r31, 0x0743
    15e0:	80 91 47 01 	lds	r24, 0x0147
    15e4:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    15e6:	e0 91 42 07 	lds	r30, 0x0742
    15ea:	f0 91 43 07 	lds	r31, 0x0743
    15ee:	80 91 46 01 	lds	r24, 0x0146
    15f2:	86 95       	lsr	r24
    15f4:	86 95       	lsr	r24
    15f6:	86 95       	lsr	r24
    15f8:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    15fa:	e0 91 42 07 	lds	r30, 0x0742
    15fe:	f0 91 43 07 	lds	r31, 0x0743
    1602:	80 91 47 01 	lds	r24, 0x0147
    1606:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1608:	a0 91 42 07 	lds	r26, 0x0742
    160c:	b0 91 43 07 	lds	r27, 0x0743
    1610:	e0 91 7b 01 	lds	r30, 0x017B
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	e0 58       	subi	r30, 0x80	; 128
    1618:	fe 4f       	sbci	r31, 0xFE	; 254
    161a:	80 81       	ld	r24, Z
    161c:	1b 96       	adiw	r26, 0x0b	; 11
    161e:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    1620:	10 92 83 07 	sts	0x0783, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1624:	80 91 4c 01 	lds	r24, 0x014C
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    162e:	80 91 4c 01 	lds	r24, 0x014C
    1632:	80 68       	ori	r24, 0x80	; 128
    1634:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1640:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1642:	08 95       	ret

00001644 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1644:	1f 92       	push	r1
    1646:	0f 92       	push	r0
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	0f 92       	push	r0
    164c:	11 24       	eor	r1, r1
    164e:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1650:	80 e8       	ldi	r24, 0x80	; 128
    1652:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1656:	8f 91       	pop	r24
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	80 93 53 07 	sts	0x0753, r24
	IRQ_STATUS = (1 << TX_END);
    1674:	80 e4       	ldi	r24, 0x40	; 64
    1676:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    167a:	8f 91       	pop	r24
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1692:	80 e2       	ldi	r24, 0x20	; 32
    1694:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1698:	8f 91       	pop	r24
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f 90       	pop	r0
    16a0:	1f 90       	pop	r1
    16a2:	18 95       	reti

000016a4 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    16b0:	80 e1       	ldi	r24, 0x10	; 16
    16b2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    16b6:	8f 91       	pop	r24
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	0b b6       	in	r0, 0x3b	; 59
    16ce:	0f 92       	push	r0
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	7f 93       	push	r23
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	af 93       	push	r26
    16e2:	bf 93       	push	r27
    16e4:	ef 93       	push	r30
    16e6:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    16ee:	e0 91 51 04 	lds	r30, 0x0451
    16f2:	f0 91 52 04 	lds	r31, 0x0452
    16f6:	30 97       	sbiw	r30, 0x00	; 0
    16f8:	09 f0       	breq	.+2      	; 0x16fc <__vector_59+0x3a>
		rx_start_func();
    16fa:	09 95       	icall

	return;
}
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0b be       	out	0x3b, r0	; 59
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1734:	8f 91       	pop	r24
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1752:	8f 91       	pop	r24
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    175e:	e9 e4       	ldi	r30, 0x49	; 73
    1760:	f1 e0       	ldi	r31, 0x01	; 1
    1762:	90 81       	ld	r25, Z
    1764:	90 7f       	andi	r25, 0xF0	; 240
    1766:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1768:	90 81       	ld	r25, Z
    176a:	8f 70       	andi	r24, 0x0F	; 15
    176c:	98 2b       	or	r25, r24
    176e:	90 83       	st	Z, r25
    1770:	08 95       	ret

00001772 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	08 95       	ret

00001776 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1776:	08 95       	ret

00001778 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1778:	08 95       	ret

0000177a <rf_security_disable>:
}



void rf_security_disable()
{
    177a:	08 95       	ret

0000177c <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	08 95       	ret

00001780 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1780:	80 91 3d 07 	lds	r24, 0x073D
    1784:	90 91 3e 07 	lds	r25, 0x073E
    1788:	08 95       	ret

0000178a <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	08 95       	ret

0000178e <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    178e:	08 95       	ret

00001790 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	08 95       	ret

00001794 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	08 95       	ret

00001798 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	08 95       	ret

0000179c <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    179c:	08 95       	ret

0000179e <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    179e:	08 95       	ret

000017a0 <rf_test_mode>:
}



void rf_test_mode()
{
    17a0:	08 95       	ret

000017a2 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    17a2:	08 95       	ret

000017a4 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    17a4:	08 95       	ret

000017a6 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    17a6:	08 95       	ret

000017a8 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    17a8:	08 95       	ret

000017aa <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    17aa:	08 95       	ret

000017ac <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    17ac:	e7 e3       	ldi	r30, 0x37	; 55
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	80 81       	ld	r24, Z
    17b2:	83 60       	ori	r24, 0x03	; 3
    17b4:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    17b6:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    17b8:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    17ba:	8d b1       	in	r24, 0x0d	; 13
    17bc:	80 6e       	ori	r24, 0xE0	; 224
    17be:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    17c0:	8e b1       	in	r24, 0x0e	; 14
    17c2:	80 6e       	ori	r24, 0xE0	; 224
    17c4:	8e b9       	out	0x0e, r24	; 14
    17c6:	08 95       	ret

000017c8 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    17c8:	e7 e3       	ldi	r30, 0x37	; 55
    17ca:	f1 e0       	ldi	r31, 0x01	; 1
    17cc:	80 81       	ld	r24, Z
    17ce:	83 60       	ori	r24, 0x03	; 3
    17d0:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    17d2:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    17d4:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    17d6:	8d b1       	in	r24, 0x0d	; 13
    17d8:	80 6e       	ori	r24, 0xE0	; 224
    17da:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    17dc:	8e b1       	in	r24, 0x0e	; 14
    17de:	80 6e       	ori	r24, 0xE0	; 224
    17e0:	8e b9       	out	0x0e, r24	; 14
    17e2:	08 95       	ret

000017e4 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	27 97       	sbiw	r28, 0x07	; 7
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1804:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1808:	e0 91 42 07 	lds	r30, 0x0742
    180c:	f0 91 43 07 	lds	r31, 0x0743
    1810:	c0 80       	ld	r12, Z
    1812:	d3 80       	ldd	r13, Z+3	; 0x03
    1814:	e5 80       	ldd	r14, Z+5	; 0x05
    1816:	f6 80       	ldd	r15, Z+6	; 0x06
    1818:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    181a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <rf_rx_packet_nonblock>
	if (err < 1) {
    181e:	18 16       	cp	r1, r24
    1820:	1c f0       	brlt	.+6      	; 0x1828 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1822:	8b ec       	ldi	r24, 0xCB	; 203
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	06 c0       	rjmp	.+12     	; 0x1834 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1828:	f7 01       	movw	r30, r14
    182a:	10 81       	ld	r17, Z
	if (ttl == 0) {
    182c:	11 11       	cpse	r17, r1
    182e:	07 c0       	rjmp	.+14     	; 0x183e <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1830:	8a ee       	ldi	r24, 0xEA	; 234
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <puts>
#endif
		nrk_int_enable();
    1838:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
		return;
    183c:	31 c0       	rjmp	.+98     	; 0x18a0 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    183e:	15 30       	cpi	r17, 0x05	; 5
    1840:	21 f4       	brne	.+8      	; 0x184a <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    1842:	8a e0       	ldi	r24, 0x0A	; 10
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 ca 2b 	call	0x5794	; 0x5794 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    184a:	c7 01       	movw	r24, r14
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	9f 93       	push	r25
    1850:	8f 93       	push	r24
    1852:	80 2f       	mov	r24, r16
    1854:	99 27       	eor	r25, r25
    1856:	87 fd       	sbrc	r24, 7
    1858:	90 95       	com	r25
    185a:	9f 93       	push	r25
    185c:	0f 93       	push	r16
    185e:	1f 92       	push	r1
    1860:	1f 93       	push	r17
    1862:	1f 92       	push	r1
    1864:	cf 92       	push	r12
    1866:	8c e0       	ldi	r24, 0x0C	; 12
    1868:	93 e0       	ldi	r25, 0x03	; 3
    186a:	9f 93       	push	r25
    186c:	8f 93       	push	r24
    186e:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1872:	fd 82       	std	Y+5, r15	; 0x05
    1874:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1876:	11 50       	subi	r17, 0x01	; 1
    1878:	f7 01       	movw	r30, r14
    187a:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    187c:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    187e:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1880:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	9f ef       	ldi	r25, 0xFF	; 255
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    188a:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0e 94 45 0a 	call	0x148a	; 0x148a <rf_tx_packet>
#endif
	return;
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
}
    18a0:	27 96       	adiw	r28, 0x07	; 7
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	df 90       	pop	r13
    18ba:	cf 90       	pop	r12
    18bc:	08 95       	ret

000018be <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 91 7b 01 	lds	r25, 0x017B
    18ea:	89 17       	cp	r24, r25
    18ec:	10 f4       	brcc	.+4      	; 0x18f2 <__vector_60+0x34>
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	fa cf       	rjmp	.-12     	; 0x18e6 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    18f2:	80 91 46 01 	lds	r24, 0x0146
    18f6:	87 ff       	sbrs	r24, 7
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <__vector_60+0x44>
		rx_ready = 1;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 93 83 07 	sts	0x0783, r24
    1900:	04 c0       	rjmp	.+8      	; 0x190a <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1902:	85 e3       	ldi	r24, 0x35	; 53
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    190a:	88 e0       	ldi	r24, 0x08	; 8
    190c:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1910:	80 91 46 01 	lds	r24, 0x0146
    1914:	87 ff       	sbrs	r24, 7
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1918:	80 91 3f 07 	lds	r24, 0x073F
    191c:	81 11       	cpse	r24, r1
    191e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1922:	e0 91 4f 04 	lds	r30, 0x044F
    1926:	f0 91 50 04 	lds	r31, 0x0450
    192a:	30 97       	sbiw	r30, 0x00	; 0
    192c:	09 f0       	breq	.+2      	; 0x1930 <__vector_60+0x72>
		rx_end_func();
    192e:	09 95       	icall

	return;
}
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0b be       	out	0x3b, r0	; 59
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1956:	a4 e5       	ldi	r26, 0x54	; 84
    1958:	b7 e0       	ldi	r27, 0x07	; 7
    195a:	fc 01       	movw	r30, r24
    195c:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    195e:	20 81       	ld	r18, Z
    1960:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    1962:	21 91       	ld	r18, Z+
    1964:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1968:	e8 17       	cp	r30, r24
    196a:	f9 07       	cpc	r31, r25
    196c:	c1 f7       	brne	.-16     	; 0x195e <aes_setkey+0x8>
    196e:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1970:	10 92 3e 01 	sts	0x013E, r1
    1974:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1976:	e1 f7       	brne	.-8      	; 0x1970 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1978:	80 e8       	ldi	r24, 0x80	; 128
    197a:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    197e:	80 91 3d 01 	lds	r24, 0x013D
    1982:	80 ff       	sbrs	r24, 0
    1984:	fc cf       	rjmp	.-8      	; 0x197e <aes_setkey+0x28>
    1986:	ed e6       	ldi	r30, 0x6D	; 109
    1988:	f7 e0       	ldi	r31, 0x07	; 7
    198a:	80 e1       	ldi	r24, 0x10	; 16
    198c:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    198e:	90 91 3f 01 	lds	r25, 0x013F
    1992:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1994:	8e 13       	cpse	r24, r30
    1996:	fb cf       	rjmp	.-10     	; 0x198e <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    1998:	08 95       	ret

0000199a <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    19a0:	66 23       	and	r22, r22
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <aes_encrypt+0xc>
    19a4:	45 c0       	rjmp	.+138    	; 0x1a30 <aes_encrypt+0x96>
    19a6:	86 2f       	mov	r24, r22
    19a8:	8f 70       	andi	r24, 0x0F	; 15
    19aa:	09 f0       	breq	.+2      	; 0x19ae <aes_encrypt+0x14>
    19ac:	41 c0       	rjmp	.+130    	; 0x1a30 <aes_encrypt+0x96>
    19ae:	e4 e5       	ldi	r30, 0x54	; 84
    19b0:	f7 e0       	ldi	r31, 0x07	; 7
    19b2:	90 e1       	ldi	r25, 0x10	; 16
    19b4:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    19b6:	21 91       	ld	r18, Z+
    19b8:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    19bc:	9e 13       	cpse	r25, r30
    19be:	fb cf       	rjmp	.-10     	; 0x19b6 <aes_encrypt+0x1c>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    19c2:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    19c4:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    19c6:	40 e1       	ldi	r20, 0x10	; 16
    19c8:	94 9f       	mul	r25, r20
    19ca:	90 01       	movw	r18, r0
    19cc:	11 24       	eor	r1, r1
    19ce:	26 17       	cp	r18, r22
    19d0:	37 07       	cpc	r19, r23
    19d2:	7c f5       	brge	.+94     	; 0x1a32 <aes_encrypt+0x98>
      if(i==0)
    19d4:	91 11       	cpse	r25, r1
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    19d8:	10 92 3c 01 	sts	0x013C, r1
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    19de:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	2a 0f       	add	r18, r26
    19e8:	3b 1f       	adc	r19, r27
    19ea:	e9 01       	movw	r28, r18
    19ec:	c4 0f       	add	r28, r20
    19ee:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    19f0:	f8 81       	ld	r31, Y
    19f2:	f0 93 3e 01 	sts	0x013E, r31
    19f6:	4f 5f       	subi	r20, 0xFF	; 255
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    19fa:	40 31       	cpi	r20, 0x10	; 16
    19fc:	51 05       	cpc	r21, r1
    19fe:	a9 f7       	brne	.-22     	; 0x19ea <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1a00:	40 91 3c 01 	lds	r20, 0x013C
    1a04:	40 68       	ori	r20, 0x80	; 128
    1a06:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    1a0a:	40 91 3d 01 	lds	r20, 0x013D
    1a0e:	40 ff       	sbrs	r20, 0
    1a10:	fc cf       	rjmp	.-8      	; 0x1a0a <aes_encrypt+0x70>
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1a16:	f0 91 3e 01 	lds	r31, 0x013E
    1a1a:	e9 01       	movw	r28, r18
    1a1c:	c4 0f       	add	r28, r20
    1a1e:	d5 1f       	adc	r29, r21
    1a20:	f8 83       	st	Y, r31
    1a22:	4f 5f       	subi	r20, 0xFF	; 255
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1a26:	40 31       	cpi	r20, 0x10	; 16
    1a28:	51 05       	cpc	r21, r1
    1a2a:	a9 f7       	brne	.-22     	; 0x1a16 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	cb cf       	rjmp	.-106    	; 0x19c6 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	08 95       	ret

00001a38 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1a42:	61 30       	cpi	r22, 0x01	; 1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <aes_decrypt+0x10>
    1a46:	58 c0       	rjmp	.+176    	; 0x1af8 <aes_decrypt+0xc0>
    1a48:	86 2f       	mov	r24, r22
    1a4a:	8f 70       	andi	r24, 0x0F	; 15
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <aes_decrypt+0x18>
    1a4e:	54 c0       	rjmp	.+168    	; 0x1af8 <aes_decrypt+0xc0>
    1a50:	ed e6       	ldi	r30, 0x6D	; 109
    1a52:	f7 e0       	ldi	r31, 0x07	; 7
    1a54:	90 e1       	ldi	r25, 0x10	; 16
    1a56:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1a58:	21 91       	ld	r18, Z+
    1a5a:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1a5e:	9e 13       	cpse	r25, r30
    1a60:	fb cf       	rjmp	.-10     	; 0x1a58 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1a62:	62 95       	swap	r22
    1a64:	6f 70       	andi	r22, 0x0F	; 15
    1a66:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1a68:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1a6a:	6f 3f       	cpi	r22, 0xFF	; 255
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <aes_decrypt+0x38>
    1a6e:	45 c0       	rjmp	.+138    	; 0x1afa <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1a70:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1a74:	46 2f       	mov	r20, r22
    1a76:	55 27       	eor	r21, r21
    1a78:	47 fd       	sbrc	r20, 7
    1a7a:	50 95       	com	r21
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	ed 01       	movw	r28, r26
    1a82:	90 e1       	ldi	r25, 0x10	; 16
    1a84:	69 02       	muls	r22, r25
    1a86:	c0 0d       	add	r28, r0
    1a88:	d1 1d       	adc	r29, r1
    1a8a:	11 24       	eor	r1, r1
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e2 0f       	add	r30, r18
    1a90:	f3 1f       	adc	r31, r19
    1a92:	90 81       	ld	r25, Z
    1a94:	90 93 3e 01 	sts	0x013E, r25
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1a9c:	20 31       	cpi	r18, 0x10	; 16
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	a9 f7       	brne	.-22     	; 0x1a8c <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1aa2:	90 91 3c 01 	lds	r25, 0x013C
    1aa6:	90 68       	ori	r25, 0x80	; 128
    1aa8:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    1aac:	90 91 3d 01 	lds	r25, 0x013D
    1ab0:	90 ff       	sbrs	r25, 0
    1ab2:	fc cf       	rjmp	.-8      	; 0x1aac <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1ab4:	41 50       	subi	r20, 0x01	; 1
    1ab6:	51 09       	sbc	r21, r1
    1ab8:	94 e0       	ldi	r25, 0x04	; 4
    1aba:	44 0f       	add	r20, r20
    1abc:	55 1f       	adc	r21, r21
    1abe:	9a 95       	dec	r25
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <aes_decrypt+0x82>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1ac6:	90 91 3e 01 	lds	r25, 0x013E
    1aca:	8e 01       	movw	r16, r28
    1acc:	02 0f       	add	r16, r18
    1ace:	13 1f       	adc	r17, r19
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	90 83       	st	Z, r25
         if(i!=0)
    1ad4:	66 23       	and	r22, r22
    1ad6:	49 f0       	breq	.+18     	; 0x1aea <aes_decrypt+0xb2>
    1ad8:	f9 01       	movw	r30, r18
    1ada:	e4 0f       	add	r30, r20
    1adc:	f5 1f       	adc	r31, r21
    1ade:	ea 0f       	add	r30, r26
    1ae0:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    1ae2:	e0 81       	ld	r30, Z
    1ae4:	9e 27       	eor	r25, r30
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	90 83       	st	Z, r25
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1aee:	20 31       	cpi	r18, 0x10	; 16
    1af0:	31 05       	cpc	r19, r1
    1af2:	49 f7       	brne	.-46     	; 0x1ac6 <aes_decrypt+0x8e>
    1af4:	61 50       	subi	r22, 0x01	; 1
    1af6:	b9 cf       	rjmp	.-142    	; 0x1a6a <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1b04:	90 91 c0 00 	lds	r25, 0x00C0
    1b08:	95 ff       	sbrs	r25, 5
    1b0a:	fc cf       	rjmp	.-8      	; 0x1b04 <putc0>
    1b0c:	90 91 c0 00 	lds	r25, 0x00C0
    1b10:	9f 7d       	andi	r25, 0xDF	; 223
    1b12:	90 93 c0 00 	sts	0x00C0, r25
    1b16:	80 93 c6 00 	sts	0x00C6, r24
    1b1a:	08 95       	ret

00001b1c <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	0b b6       	in	r0, 0x3b	; 59
    1b28:	0f 92       	push	r0
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    1b42:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    1b46:	80 91 c0 00 	lds	r24, 0x00C0
    1b4a:	87 ff       	sbrs	r24, 7
    1b4c:	fc cf       	rjmp	.-8      	; 0x1b46 <__vector_25+0x2a>
    1b4e:	80 91 c0 00 	lds	r24, 0x00C0
    1b52:	8f 77       	andi	r24, 0x7F	; 127
    1b54:	80 93 c0 00 	sts	0x00C0, r24
    1b58:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    1b5c:	80 91 64 04 	lds	r24, 0x0464
    1b60:	90 91 65 04 	lds	r25, 0x0465
    1b64:	fc 01       	movw	r30, r24
    1b66:	ec 5a       	subi	r30, 0xAC	; 172
    1b68:	fb 4f       	sbci	r31, 0xFB	; 251
    1b6a:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1b6c:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    1b6e:	80 31       	cpi	r24, 0x10	; 16
    1b70:	91 05       	cpc	r25, r1
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1b74:	90 93 65 04 	sts	0x0465, r25
    1b78:	80 93 64 04 	sts	0x0464, r24
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    1b7e:	10 92 65 04 	sts	0x0465, r1
    1b82:	10 92 64 04 	sts	0x0464, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    1b86:	80 91 53 04 	lds	r24, 0x0453
    1b8a:	0e 94 21 18 	call	0x3042	; 0x3042 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    1b8e:	80 91 c0 00 	lds	r24, 0x00C0
    1b92:	8f 77       	andi	r24, 0x7F	; 127
    1b94:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    1b98:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
}
    1b9c:	ff 91       	pop	r31
    1b9e:	ef 91       	pop	r30
    1ba0:	bf 91       	pop	r27
    1ba2:	af 91       	pop	r26
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	7f 91       	pop	r23
    1baa:	6f 91       	pop	r22
    1bac:	5f 91       	pop	r21
    1bae:	4f 91       	pop	r20
    1bb0:	3f 91       	pop	r19
    1bb2:	2f 91       	pop	r18
    1bb4:	0f 90       	pop	r0
    1bb6:	0b be       	out	0x3b, r0	; 59
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	0d c0       	rjmp	.+26     	; 0x1be0 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	40 91 66 04 	lds	r20, 0x0466
    1bcc:	50 91 67 04 	lds	r21, 0x0467
    1bd0:	20 91 64 04 	lds	r18, 0x0464
    1bd4:	30 91 65 04 	lds	r19, 0x0465
    1bd8:	42 17       	cp	r20, r18
    1bda:	53 07       	cpc	r21, r19
    1bdc:	51 f4       	brne	.+20     	; 0x1bf2 <nrk_uart_data_ready+0x30>
    1bde:	08 c0       	rjmp	.+16     	; 0x1bf0 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	31 f4       	brne	.+12     	; 0x1bf0 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1be4:	80 91 c8 00 	lds	r24, 0x00C8
    1be8:	88 1f       	adc	r24, r24
    1bea:	88 27       	eor	r24, r24
    1bec:	88 1f       	adc	r24, r24
    1bee:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
}
    1bf2:	08 95       	ret

00001bf4 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1bf4:	80 91 53 04 	lds	r24, 0x0453
    1bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfa:	19 f4       	brne	.+6      	; 0x1c02 <nrk_uart_rx_signal_get+0xe>
    1bfc:	8e e0       	ldi	r24, 0x0E	; 14
    1bfe:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
   return uart_rx_signal;
}
    1c02:	80 91 53 04 	lds	r24, 0x0453
    1c06:	08 95       	ret

00001c08 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	24 91       	lpm	r18, Z
    1c10:	ec 01       	movw	r28, r24
    1c12:	21 96       	adiw	r28, 0x01	; 1
    1c14:	22 23       	and	r18, r18
    1c16:	51 f0       	breq	.+20     	; 0x1c2c <nrk_kprintf+0x24>
        putchar(c);
    1c18:	60 91 7a 08 	lds	r22, 0x087A
    1c1c:	70 91 7b 08 	lds	r23, 0x087B
    1c20:	82 2f       	mov	r24, r18
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	f0 cf       	rjmp	.-32     	; 0x1c0c <nrk_kprintf+0x4>
}
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    1c32:	20 91 66 04 	lds	r18, 0x0466
    1c36:	30 91 67 04 	lds	r19, 0x0467
    1c3a:	80 91 64 04 	lds	r24, 0x0464
    1c3e:	90 91 65 04 	lds	r25, 0x0465
    1c42:	28 17       	cp	r18, r24
    1c44:	39 07       	cpc	r19, r25
    1c46:	69 f4       	brne	.+26     	; 0x1c62 <getc0+0x30>
    1c48:	80 91 53 04 	lds	r24, 0x0453
    1c4c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <nrk_signal_register>
    1c50:	60 91 53 04 	lds	r22, 0x0453
    1c54:	77 27       	eor	r23, r23
    1c56:	67 fd       	sbrc	r22, 7
    1c58:	70 95       	com	r23
    1c5a:	87 2f       	mov	r24, r23
    1c5c:	97 2f       	mov	r25, r23
    1c5e:	0e 94 92 18 	call	0x3124	; 0x3124 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    1c62:	6f 3f       	cpi	r22, 0xFF	; 255
    1c64:	21 f4       	brne	.+8      	; 0x1c6e <getc0+0x3c>
    1c66:	8e ee       	ldi	r24, 0xEE	; 238
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    1c6e:	20 91 66 04 	lds	r18, 0x0466
    1c72:	30 91 67 04 	lds	r19, 0x0467
    1c76:	f9 01       	movw	r30, r18
    1c78:	ec 5a       	subi	r30, 0xAC	; 172
    1c7a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c7c:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    1c7e:	2f 5f       	subi	r18, 0xFF	; 255
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    1c82:	20 31       	cpi	r18, 0x10	; 16
    1c84:	31 05       	cpc	r19, r1
    1c86:	28 f4       	brcc	.+10     	; 0x1c92 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    1c88:	30 93 67 04 	sts	0x0467, r19
    1c8c:	20 93 66 04 	sts	0x0466, r18
    1c90:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    1c92:	10 92 67 04 	sts	0x0467, r1
    1c96:	10 92 66 04 	sts	0x0466, r1

   return tmp;
}
    1c9a:	08 95       	ret

00001c9c <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1c9c:	86 e0       	ldi	r24, 0x06	; 6
    1c9e:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    1ca0:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    1ca2:	88 ef       	ldi	r24, 0xF8	; 248
    1ca4:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1ca6:	80 ef       	ldi	r24, 0xF0	; 240
    1ca8:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	8d b9       	out	0x0d, r24	; 13
    1cae:	08 95       	ret

00001cb0 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1cb0:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <PORT_INIT>

00001cb4 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1cb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <nrk_gpio_set+0x6>
    1cb8:	6c c0       	rjmp	.+216    	; 0x1d92 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    1cba:	e8 2f       	mov	r30, r24
    1cbc:	e7 70       	andi	r30, 0x07	; 7
    1cbe:	4e 2f       	mov	r20, r30
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	47 30       	cpi	r20, 0x07	; 7
    1cc4:	51 05       	cpc	r21, r1
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <nrk_gpio_set+0x16>
    1cc8:	64 c0       	rjmp	.+200    	; 0x1d92 <nrk_gpio_set+0xde>
    1cca:	fa 01       	movw	r30, r20
    1ccc:	e0 57       	subi	r30, 0x70	; 112
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	86 95       	lsr	r24
    1cd2:	86 95       	lsr	r24
    1cd4:	86 95       	lsr	r24
    1cd6:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1cda:	42 b1       	in	r20, 0x02	; 2
    1cdc:	21 e0       	ldi	r18, 0x01	; 1
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <nrk_gpio_set+0x34>
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <nrk_gpio_set+0x30>
    1cec:	cb 01       	movw	r24, r22
    1cee:	84 2b       	or	r24, r20
    1cf0:	82 b9       	out	0x02, r24	; 2
    1cf2:	4d c0       	rjmp	.+154    	; 0x1d8e <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1cf4:	45 b1       	in	r20, 0x05	; 5
    1cf6:	21 e0       	ldi	r18, 0x01	; 1
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <nrk_gpio_set+0x4e>
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	8a 95       	dec	r24
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <nrk_gpio_set+0x4a>
    1d06:	cb 01       	movw	r24, r22
    1d08:	84 2b       	or	r24, r20
    1d0a:	85 b9       	out	0x05, r24	; 5
    1d0c:	40 c0       	rjmp	.+128    	; 0x1d8e <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d0e:	48 b1       	in	r20, 0x08	; 8
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	b9 01       	movw	r22, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <nrk_gpio_set+0x68>
    1d18:	66 0f       	add	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	8a 95       	dec	r24
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <nrk_gpio_set+0x64>
    1d20:	cb 01       	movw	r24, r22
    1d22:	84 2b       	or	r24, r20
    1d24:	88 b9       	out	0x08, r24	; 8
    1d26:	33 c0       	rjmp	.+102    	; 0x1d8e <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d28:	4b b1       	in	r20, 0x0b	; 11
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	b9 01       	movw	r22, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <nrk_gpio_set+0x82>
    1d32:	66 0f       	add	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	8a 95       	dec	r24
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <nrk_gpio_set+0x7e>
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	84 2b       	or	r24, r20
    1d3e:	8b b9       	out	0x0b, r24	; 11
    1d40:	26 c0       	rjmp	.+76     	; 0x1d8e <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d42:	4e b1       	in	r20, 0x0e	; 14
    1d44:	21 e0       	ldi	r18, 0x01	; 1
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	b9 01       	movw	r22, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <nrk_gpio_set+0x9c>
    1d4c:	66 0f       	add	r22, r22
    1d4e:	77 1f       	adc	r23, r23
    1d50:	8a 95       	dec	r24
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <nrk_gpio_set+0x98>
    1d54:	cb 01       	movw	r24, r22
    1d56:	84 2b       	or	r24, r20
    1d58:	8e b9       	out	0x0e, r24	; 14
    1d5a:	19 c0       	rjmp	.+50     	; 0x1d8e <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d5c:	41 b3       	in	r20, 0x11	; 17
    1d5e:	21 e0       	ldi	r18, 0x01	; 1
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	b9 01       	movw	r22, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <nrk_gpio_set+0xb6>
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	8a 95       	dec	r24
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <nrk_gpio_set+0xb2>
    1d6e:	cb 01       	movw	r24, r22
    1d70:	84 2b       	or	r24, r20
    1d72:	81 bb       	out	0x11, r24	; 17
    1d74:	0c c0       	rjmp	.+24     	; 0x1d8e <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d76:	44 b3       	in	r20, 0x14	; 20
    1d78:	21 e0       	ldi	r18, 0x01	; 1
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	b9 01       	movw	r22, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <nrk_gpio_set+0xd0>
    1d80:	66 0f       	add	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	8a 95       	dec	r24
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <nrk_gpio_set+0xcc>
    1d88:	cb 01       	movw	r24, r22
    1d8a:	84 2b       	or	r24, r20
    1d8c:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d90:	08 95       	ret
                default: return -1;
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1d94:	08 95       	ret

00001d96 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1d96:	8f 3f       	cpi	r24, 0xFF	; 255
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <nrk_gpio_clr+0x6>
    1d9a:	65 c0       	rjmp	.+202    	; 0x1e66 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    1d9c:	e8 2f       	mov	r30, r24
    1d9e:	e7 70       	andi	r30, 0x07	; 7
    1da0:	4e 2f       	mov	r20, r30
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	47 30       	cpi	r20, 0x07	; 7
    1da6:	51 05       	cpc	r21, r1
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <nrk_gpio_clr+0x16>
    1daa:	5d c0       	rjmp	.+186    	; 0x1e66 <nrk_gpio_clr+0xd0>
    1dac:	fa 01       	movw	r30, r20
    1dae:	e9 56       	subi	r30, 0x69	; 105
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	86 95       	lsr	r24
    1db4:	86 95       	lsr	r24
    1db6:	86 95       	lsr	r24
    1db8:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1dbc:	42 b1       	in	r20, 0x02	; 2
    1dbe:	21 e0       	ldi	r18, 0x01	; 1
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <nrk_gpio_clr+0x34>
    1dc6:	66 0f       	add	r22, r22
    1dc8:	77 1f       	adc	r23, r23
    1dca:	8a 95       	dec	r24
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <nrk_gpio_clr+0x30>
    1dce:	cb 01       	movw	r24, r22
    1dd0:	80 95       	com	r24
    1dd2:	84 23       	and	r24, r20
    1dd4:	82 b9       	out	0x02, r24	; 2
    1dd6:	45 c0       	rjmp	.+138    	; 0x1e62 <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1dd8:	45 b1       	in	r20, 0x05	; 5
    1dda:	21 e0       	ldi	r18, 0x01	; 1
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	b9 01       	movw	r22, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <nrk_gpio_clr+0x50>
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	8a 95       	dec	r24
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <nrk_gpio_clr+0x4c>
    1dea:	cb 01       	movw	r24, r22
    1dec:	80 95       	com	r24
    1dee:	84 23       	and	r24, r20
    1df0:	85 b9       	out	0x05, r24	; 5
    1df2:	37 c0       	rjmp	.+110    	; 0x1e62 <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1df4:	48 b1       	in	r20, 0x08	; 8
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	b9 01       	movw	r22, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <nrk_gpio_clr+0x6c>
    1dfe:	66 0f       	add	r22, r22
    1e00:	77 1f       	adc	r23, r23
    1e02:	8a 95       	dec	r24
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <nrk_gpio_clr+0x68>
    1e06:	cb 01       	movw	r24, r22
    1e08:	80 95       	com	r24
    1e0a:	84 23       	and	r24, r20
    1e0c:	88 b9       	out	0x08, r24	; 8
    1e0e:	29 c0       	rjmp	.+82     	; 0x1e62 <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1e10:	4b b1       	in	r20, 0x0b	; 11
    1e12:	21 e0       	ldi	r18, 0x01	; 1
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	b9 01       	movw	r22, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <nrk_gpio_clr+0x88>
    1e1a:	66 0f       	add	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	8a 95       	dec	r24
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <nrk_gpio_clr+0x84>
    1e22:	cb 01       	movw	r24, r22
    1e24:	80 95       	com	r24
    1e26:	84 23       	and	r24, r20
    1e28:	8b b9       	out	0x0b, r24	; 11
    1e2a:	1b c0       	rjmp	.+54     	; 0x1e62 <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1e2c:	4e b1       	in	r20, 0x0e	; 14
    1e2e:	21 e0       	ldi	r18, 0x01	; 1
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	b9 01       	movw	r22, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <nrk_gpio_clr+0xa4>
    1e36:	66 0f       	add	r22, r22
    1e38:	77 1f       	adc	r23, r23
    1e3a:	8a 95       	dec	r24
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <nrk_gpio_clr+0xa0>
    1e3e:	cb 01       	movw	r24, r22
    1e40:	80 95       	com	r24
    1e42:	84 23       	and	r24, r20
    1e44:	8e b9       	out	0x0e, r24	; 14
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1e48:	41 b3       	in	r20, 0x11	; 17
    1e4a:	21 e0       	ldi	r18, 0x01	; 1
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	b9 01       	movw	r22, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <nrk_gpio_clr+0xc0>
    1e52:	66 0f       	add	r22, r22
    1e54:	77 1f       	adc	r23, r23
    1e56:	8a 95       	dec	r24
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <nrk_gpio_clr+0xbc>
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1e64:	08 95       	ret
                default: return -1;
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1e68:	08 95       	ret

00001e6a <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6c:	31 f1       	breq	.+76     	; 0x1eba <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    1e6e:	e8 2f       	mov	r30, r24
    1e70:	e7 70       	andi	r30, 0x07	; 7
    1e72:	4e 2f       	mov	r20, r30
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	47 30       	cpi	r20, 0x07	; 7
    1e78:	51 05       	cpc	r21, r1
    1e7a:	f8 f4       	brcc	.+62     	; 0x1eba <nrk_gpio_get+0x50>
    1e7c:	fa 01       	movw	r30, r20
    1e7e:	e2 56       	subi	r30, 0x62	; 98
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	28 2f       	mov	r18, r24
    1e84:	26 95       	lsr	r18
    1e86:	26 95       	lsr	r18
    1e88:	26 95       	lsr	r18
    1e8a:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1e8e:	90 b1       	in	r25, 0x00	; 0
    1e90:	0b c0       	rjmp	.+22     	; 0x1ea8 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1e92:	93 b1       	in	r25, 0x03	; 3
    1e94:	09 c0       	rjmp	.+18     	; 0x1ea8 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1e96:	96 b1       	in	r25, 0x06	; 6
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1e9a:	99 b1       	in	r25, 0x09	; 9
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1e9e:	9c b1       	in	r25, 0x0c	; 12
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1ea2:	9f b1       	in	r25, 0x0f	; 15
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1ea6:	92 b3       	in	r25, 0x12	; 18
    1ea8:	89 2f       	mov	r24, r25
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <nrk_gpio_get+0x48>
    1eae:	95 95       	asr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	2a 95       	dec	r18
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <nrk_gpio_get+0x44>
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	08 95       	ret
                default: return -1;
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1ebc:	08 95       	ret

00001ebe <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <nrk_gpio_toggle+0x6>
    1ec2:	06 c1       	rjmp	.+524    	; 0x20d0 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    1ec4:	e8 2f       	mov	r30, r24
    1ec6:	e7 70       	andi	r30, 0x07	; 7
    1ec8:	4e 2f       	mov	r20, r30
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	47 30       	cpi	r20, 0x07	; 7
    1ece:	51 05       	cpc	r21, r1
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <nrk_gpio_toggle+0x16>
    1ed2:	fe c0       	rjmp	.+508    	; 0x20d0 <nrk_gpio_toggle+0x212>
    1ed4:	fa 01       	movw	r30, r20
    1ed6:	eb 55       	subi	r30, 0x5B	; 91
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	86 95       	lsr	r24
    1edc:	86 95       	lsr	r24
    1ede:	86 95       	lsr	r24
    1ee0:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1ee4:	20 b1       	in	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	08 2e       	mov	r0, r24
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <nrk_gpio_toggle+0x32>
    1eec:	35 95       	asr	r19
    1eee:	27 95       	ror	r18
    1ef0:	0a 94       	dec	r0
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1ef4:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1ef6:	20 fd       	sbrc	r18, 0
    1ef8:	0b c0       	rjmp	.+22     	; 0x1f10 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1efa:	21 e0       	ldi	r18, 0x01	; 1
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	b9 01       	movw	r22, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <nrk_gpio_toggle+0x48>
    1f02:	66 0f       	add	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <nrk_gpio_toggle+0x44>
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	84 2b       	or	r24, r20
    1f0e:	0b c0       	rjmp	.+22     	; 0x1f26 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	b9 01       	movw	r22, r18
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <nrk_gpio_toggle+0x5e>
    1f18:	66 0f       	add	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	8a 95       	dec	r24
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <nrk_gpio_toggle+0x5a>
    1f20:	cb 01       	movw	r24, r22
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	82 b9       	out	0x02, r24	; 2
    1f28:	16 c0       	rjmp	.+44     	; 0x1f56 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1f2a:	23 b1       	in	r18, 0x03	; 3
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	08 2e       	mov	r0, r24
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <nrk_gpio_toggle+0x78>
    1f32:	35 95       	asr	r19
    1f34:	27 95       	ror	r18
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1f3a:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1f3c:	20 fd       	sbrc	r18, 0
    1f3e:	0d c0       	rjmp	.+26     	; 0x1f5a <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	b9 01       	movw	r22, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <nrk_gpio_toggle+0x8e>
    1f48:	66 0f       	add	r22, r22
    1f4a:	77 1f       	adc	r23, r23
    1f4c:	8a 95       	dec	r24
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <nrk_gpio_toggle+0x8a>
    1f50:	cb 01       	movw	r24, r22
    1f52:	84 2b       	or	r24, r20
    1f54:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1f5a:	21 e0       	ldi	r18, 0x01	; 1
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	b9 01       	movw	r22, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <nrk_gpio_toggle+0xa8>
    1f62:	66 0f       	add	r22, r22
    1f64:	77 1f       	adc	r23, r23
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <nrk_gpio_toggle+0xa4>
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	80 95       	com	r24
    1f6e:	84 23       	and	r24, r20
    1f70:	f1 cf       	rjmp	.-30     	; 0x1f54 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1f72:	26 b1       	in	r18, 0x06	; 6
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	08 2e       	mov	r0, r24
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <nrk_gpio_toggle+0xc0>
    1f7a:	35 95       	asr	r19
    1f7c:	27 95       	ror	r18
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1f82:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1f84:	20 fd       	sbrc	r18, 0
    1f86:	0b c0       	rjmp	.+22     	; 0x1f9e <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <nrk_gpio_toggle+0xd6>
    1f90:	66 0f       	add	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	8a 95       	dec	r24
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <nrk_gpio_toggle+0xd2>
    1f98:	cb 01       	movw	r24, r22
    1f9a:	84 2b       	or	r24, r20
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1f9e:	21 e0       	ldi	r18, 0x01	; 1
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	b9 01       	movw	r22, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <nrk_gpio_toggle+0xec>
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	8a 95       	dec	r24
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <nrk_gpio_toggle+0xe8>
    1fae:	cb 01       	movw	r24, r22
    1fb0:	80 95       	com	r24
    1fb2:	84 23       	and	r24, r20
    1fb4:	88 b9       	out	0x08, r24	; 8
    1fb6:	cf cf       	rjmp	.-98     	; 0x1f56 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1fb8:	29 b1       	in	r18, 0x09	; 9
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <nrk_gpio_toggle+0x106>
    1fc0:	35 95       	asr	r19
    1fc2:	27 95       	ror	r18
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1fc8:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1fca:	20 fd       	sbrc	r18, 0
    1fcc:	0b c0       	rjmp	.+22     	; 0x1fe4 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1fce:	21 e0       	ldi	r18, 0x01	; 1
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <nrk_gpio_toggle+0x11c>
    1fd6:	66 0f       	add	r22, r22
    1fd8:	77 1f       	adc	r23, r23
    1fda:	8a 95       	dec	r24
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <nrk_gpio_toggle+0x118>
    1fde:	cb 01       	movw	r24, r22
    1fe0:	84 2b       	or	r24, r20
    1fe2:	0b c0       	rjmp	.+22     	; 0x1ffa <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1fe4:	21 e0       	ldi	r18, 0x01	; 1
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	b9 01       	movw	r22, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <nrk_gpio_toggle+0x132>
    1fec:	66 0f       	add	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	8a 95       	dec	r24
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <nrk_gpio_toggle+0x12e>
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	80 95       	com	r24
    1ff8:	84 23       	and	r24, r20
    1ffa:	8b b9       	out	0x0b, r24	; 11
    1ffc:	ac cf       	rjmp	.-168    	; 0x1f56 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1ffe:	2c b1       	in	r18, 0x0c	; 12
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	08 2e       	mov	r0, r24
    2004:	02 c0       	rjmp	.+4      	; 0x200a <nrk_gpio_toggle+0x14c>
    2006:	35 95       	asr	r19
    2008:	27 95       	ror	r18
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    200e:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2010:	20 fd       	sbrc	r18, 0
    2012:	0b c0       	rjmp	.+22     	; 0x202a <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2014:	21 e0       	ldi	r18, 0x01	; 1
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	b9 01       	movw	r22, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <nrk_gpio_toggle+0x162>
    201c:	66 0f       	add	r22, r22
    201e:	77 1f       	adc	r23, r23
    2020:	8a 95       	dec	r24
    2022:	e2 f7       	brpl	.-8      	; 0x201c <nrk_gpio_toggle+0x15e>
    2024:	cb 01       	movw	r24, r22
    2026:	84 2b       	or	r24, r20
    2028:	0b c0       	rjmp	.+22     	; 0x2040 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    202a:	21 e0       	ldi	r18, 0x01	; 1
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	b9 01       	movw	r22, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <nrk_gpio_toggle+0x178>
    2032:	66 0f       	add	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	8a 95       	dec	r24
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <nrk_gpio_toggle+0x174>
    203a:	cb 01       	movw	r24, r22
    203c:	80 95       	com	r24
    203e:	84 23       	and	r24, r20
    2040:	8e b9       	out	0x0e, r24	; 14
    2042:	89 cf       	rjmp	.-238    	; 0x1f56 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2044:	2f b1       	in	r18, 0x0f	; 15
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	08 2e       	mov	r0, r24
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <nrk_gpio_toggle+0x192>
    204c:	35 95       	asr	r19
    204e:	27 95       	ror	r18
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2054:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2056:	20 fd       	sbrc	r18, 0
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    205a:	21 e0       	ldi	r18, 0x01	; 1
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	b9 01       	movw	r22, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <nrk_gpio_toggle+0x1a8>
    2062:	66 0f       	add	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	8a 95       	dec	r24
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <nrk_gpio_toggle+0x1a4>
    206a:	cb 01       	movw	r24, r22
    206c:	84 2b       	or	r24, r20
    206e:	0b c0       	rjmp	.+22     	; 0x2086 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	b9 01       	movw	r22, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <nrk_gpio_toggle+0x1be>
    2078:	66 0f       	add	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	8a 95       	dec	r24
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <nrk_gpio_toggle+0x1ba>
    2080:	cb 01       	movw	r24, r22
    2082:	80 95       	com	r24
    2084:	84 23       	and	r24, r20
    2086:	81 bb       	out	0x11, r24	; 17
    2088:	66 cf       	rjmp	.-308    	; 0x1f56 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    208a:	22 b3       	in	r18, 0x12	; 18
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	08 2e       	mov	r0, r24
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <nrk_gpio_toggle+0x1d8>
    2092:	35 95       	asr	r19
    2094:	27 95       	ror	r18
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    209a:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    209c:	20 fd       	sbrc	r18, 0
    209e:	0b c0       	rjmp	.+22     	; 0x20b6 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    20a0:	21 e0       	ldi	r18, 0x01	; 1
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	b9 01       	movw	r22, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <nrk_gpio_toggle+0x1ee>
    20a8:	66 0f       	add	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	8a 95       	dec	r24
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <nrk_gpio_toggle+0x1ea>
    20b0:	cb 01       	movw	r24, r22
    20b2:	84 2b       	or	r24, r20
    20b4:	0b c0       	rjmp	.+22     	; 0x20cc <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    20b6:	21 e0       	ldi	r18, 0x01	; 1
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	b9 01       	movw	r22, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <nrk_gpio_toggle+0x204>
    20be:	66 0f       	add	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	8a 95       	dec	r24
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <nrk_gpio_toggle+0x200>
    20c6:	cb 01       	movw	r24, r22
    20c8:	80 95       	com	r24
    20ca:	84 23       	and	r24, r20
    20cc:	84 bb       	out	0x14, r24	; 20
    20ce:	43 cf       	rjmp	.-378    	; 0x1f56 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    20d0:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    20d2:	08 95       	ret

000020d4 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    20d4:	8f 3f       	cpi	r24, 0xFF	; 255
    20d6:	09 f4       	brne	.+2      	; 0x20da <nrk_gpio_direction+0x6>
    20d8:	d5 c0       	rjmp	.+426    	; 0x2284 <nrk_gpio_direction+0x1b0>
    20da:	e8 2f       	mov	r30, r24
    20dc:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    20de:	4e 2f       	mov	r20, r30
    20e0:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    20e2:	61 11       	cpse	r22, r1
    20e4:	67 c0       	rjmp	.+206    	; 0x21b4 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    20e6:	47 30       	cpi	r20, 0x07	; 7
    20e8:	51 05       	cpc	r21, r1
    20ea:	08 f0       	brcs	.+2      	; 0x20ee <nrk_gpio_direction+0x1a>
    20ec:	cb c0       	rjmp	.+406    	; 0x2284 <nrk_gpio_direction+0x1b0>
    20ee:	fa 01       	movw	r30, r20
    20f0:	e4 55       	subi	r30, 0x54	; 84
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	86 95       	lsr	r24
    20f6:	86 95       	lsr	r24
    20f8:	86 95       	lsr	r24
    20fa:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    20fe:	41 b1       	in	r20, 0x01	; 1
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	b9 01       	movw	r22, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <nrk_gpio_direction+0x38>
    2108:	66 0f       	add	r22, r22
    210a:	77 1f       	adc	r23, r23
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <nrk_gpio_direction+0x34>
    2110:	cb 01       	movw	r24, r22
    2112:	80 95       	com	r24
    2114:	84 23       	and	r24, r20
    2116:	65 c0       	rjmp	.+202    	; 0x21e2 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    2118:	44 b1       	in	r20, 0x04	; 4
    211a:	21 e0       	ldi	r18, 0x01	; 1
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	b9 01       	movw	r22, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <nrk_gpio_direction+0x52>
    2122:	66 0f       	add	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	8a 95       	dec	r24
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <nrk_gpio_direction+0x4e>
    212a:	cb 01       	movw	r24, r22
    212c:	80 95       	com	r24
    212e:	84 23       	and	r24, r20
    2130:	65 c0       	rjmp	.+202    	; 0x21fc <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    2132:	47 b1       	in	r20, 0x07	; 7
    2134:	21 e0       	ldi	r18, 0x01	; 1
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	b9 01       	movw	r22, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <nrk_gpio_direction+0x6c>
    213c:	66 0f       	add	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	8a 95       	dec	r24
    2142:	e2 f7       	brpl	.-8      	; 0x213c <nrk_gpio_direction+0x68>
    2144:	cb 01       	movw	r24, r22
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	65 c0       	rjmp	.+202    	; 0x2216 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    214c:	4a b1       	in	r20, 0x0a	; 10
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	b9 01       	movw	r22, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <nrk_gpio_direction+0x86>
    2156:	66 0f       	add	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	8a 95       	dec	r24
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <nrk_gpio_direction+0x82>
    215e:	cb 01       	movw	r24, r22
    2160:	80 95       	com	r24
    2162:	84 23       	and	r24, r20
    2164:	65 c0       	rjmp	.+202    	; 0x2230 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2166:	4d b1       	in	r20, 0x0d	; 13
    2168:	21 e0       	ldi	r18, 0x01	; 1
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	b9 01       	movw	r22, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <nrk_gpio_direction+0xa0>
    2170:	66 0f       	add	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	8a 95       	dec	r24
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <nrk_gpio_direction+0x9c>
    2178:	cb 01       	movw	r24, r22
    217a:	80 95       	com	r24
    217c:	84 23       	and	r24, r20
    217e:	65 c0       	rjmp	.+202    	; 0x224a <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2180:	40 b3       	in	r20, 0x10	; 16
    2182:	21 e0       	ldi	r18, 0x01	; 1
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	b9 01       	movw	r22, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <nrk_gpio_direction+0xba>
    218a:	66 0f       	add	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	8a 95       	dec	r24
    2190:	e2 f7       	brpl	.-8      	; 0x218a <nrk_gpio_direction+0xb6>
    2192:	cb 01       	movw	r24, r22
    2194:	80 95       	com	r24
    2196:	84 23       	and	r24, r20
    2198:	65 c0       	rjmp	.+202    	; 0x2264 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    219a:	43 b3       	in	r20, 0x13	; 19
    219c:	21 e0       	ldi	r18, 0x01	; 1
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	b9 01       	movw	r22, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <nrk_gpio_direction+0xd4>
    21a4:	66 0f       	add	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	8a 95       	dec	r24
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <nrk_gpio_direction+0xd0>
    21ac:	cb 01       	movw	r24, r22
    21ae:	80 95       	com	r24
    21b0:	84 23       	and	r24, r20
    21b2:	65 c0       	rjmp	.+202    	; 0x227e <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    21b4:	47 30       	cpi	r20, 0x07	; 7
    21b6:	51 05       	cpc	r21, r1
    21b8:	08 f0       	brcs	.+2      	; 0x21bc <nrk_gpio_direction+0xe8>
    21ba:	64 c0       	rjmp	.+200    	; 0x2284 <nrk_gpio_direction+0x1b0>
    21bc:	fa 01       	movw	r30, r20
    21be:	ed 54       	subi	r30, 0x4D	; 77
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	86 95       	lsr	r24
    21c4:	86 95       	lsr	r24
    21c6:	86 95       	lsr	r24
    21c8:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    21cc:	41 b1       	in	r20, 0x01	; 1
    21ce:	21 e0       	ldi	r18, 0x01	; 1
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	b9 01       	movw	r22, r18
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <nrk_gpio_direction+0x106>
    21d6:	66 0f       	add	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	8a 95       	dec	r24
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <nrk_gpio_direction+0x102>
    21de:	cb 01       	movw	r24, r22
    21e0:	84 2b       	or	r24, r20
    21e2:	81 b9       	out	0x01, r24	; 1
    21e4:	4d c0       	rjmp	.+154    	; 0x2280 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    21e6:	44 b1       	in	r20, 0x04	; 4
    21e8:	21 e0       	ldi	r18, 0x01	; 1
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	b9 01       	movw	r22, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <nrk_gpio_direction+0x120>
    21f0:	66 0f       	add	r22, r22
    21f2:	77 1f       	adc	r23, r23
    21f4:	8a 95       	dec	r24
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <nrk_gpio_direction+0x11c>
    21f8:	cb 01       	movw	r24, r22
    21fa:	84 2b       	or	r24, r20
    21fc:	84 b9       	out	0x04, r24	; 4
    21fe:	40 c0       	rjmp	.+128    	; 0x2280 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2200:	47 b1       	in	r20, 0x07	; 7
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	b9 01       	movw	r22, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <nrk_gpio_direction+0x13a>
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	8a 95       	dec	r24
    2210:	e2 f7       	brpl	.-8      	; 0x220a <nrk_gpio_direction+0x136>
    2212:	cb 01       	movw	r24, r22
    2214:	84 2b       	or	r24, r20
    2216:	87 b9       	out	0x07, r24	; 7
    2218:	33 c0       	rjmp	.+102    	; 0x2280 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    221a:	4a b1       	in	r20, 0x0a	; 10
    221c:	21 e0       	ldi	r18, 0x01	; 1
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	b9 01       	movw	r22, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <nrk_gpio_direction+0x154>
    2224:	66 0f       	add	r22, r22
    2226:	77 1f       	adc	r23, r23
    2228:	8a 95       	dec	r24
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <nrk_gpio_direction+0x150>
    222c:	cb 01       	movw	r24, r22
    222e:	84 2b       	or	r24, r20
    2230:	8a b9       	out	0x0a, r24	; 10
    2232:	26 c0       	rjmp	.+76     	; 0x2280 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2234:	4d b1       	in	r20, 0x0d	; 13
    2236:	21 e0       	ldi	r18, 0x01	; 1
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	b9 01       	movw	r22, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <nrk_gpio_direction+0x16e>
    223e:	66 0f       	add	r22, r22
    2240:	77 1f       	adc	r23, r23
    2242:	8a 95       	dec	r24
    2244:	e2 f7       	brpl	.-8      	; 0x223e <nrk_gpio_direction+0x16a>
    2246:	cb 01       	movw	r24, r22
    2248:	84 2b       	or	r24, r20
    224a:	8d b9       	out	0x0d, r24	; 13
    224c:	19 c0       	rjmp	.+50     	; 0x2280 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    224e:	40 b3       	in	r20, 0x10	; 16
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	b9 01       	movw	r22, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <nrk_gpio_direction+0x188>
    2258:	66 0f       	add	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	8a 95       	dec	r24
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <nrk_gpio_direction+0x184>
    2260:	cb 01       	movw	r24, r22
    2262:	84 2b       	or	r24, r20
    2264:	80 bb       	out	0x10, r24	; 16
    2266:	0c c0       	rjmp	.+24     	; 0x2280 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2268:	43 b3       	in	r20, 0x13	; 19
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	b9 01       	movw	r22, r18
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <nrk_gpio_direction+0x1a2>
    2272:	66 0f       	add	r22, r22
    2274:	77 1f       	adc	r23, r23
    2276:	8a 95       	dec	r24
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <nrk_gpio_direction+0x19e>
    227a:	cb 01       	movw	r24, r22
    227c:	84 2b       	or	r24, r20
    227e:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2282:	08 95       	ret
                        default: return -1;
    2284:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2286:	08 95       	ret

00002288 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2288:	81 11       	cpse	r24, r1
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    228c:	80 b1       	in	r24, 0x00	; 0
    228e:	86 95       	lsr	r24
    2290:	81 70       	andi	r24, 0x01	; 1
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	89 27       	eor	r24, r25
    2296:	08 95       	ret
	} 
return -1;
    2298:	8f ef       	ldi	r24, 0xFF	; 255
}
    229a:	08 95       	ret

0000229c <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	11 f4       	brne	.+4      	; 0x22a4 <nrk_led_toggle+0x8>
    22a0:	83 e2       	ldi	r24, 0x23	; 35
    22a2:	0d c0       	rjmp	.+26     	; 0x22be <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	91 05       	cpc	r25, r1
    22a8:	11 f4       	brne	.+4      	; 0x22ae <nrk_led_toggle+0x12>
    22aa:	8b e2       	ldi	r24, 0x2B	; 43
    22ac:	08 c0       	rjmp	.+16     	; 0x22be <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	91 05       	cpc	r25, r1
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <nrk_led_toggle+0x1c>
    22b4:	83 e3       	ldi	r24, 0x33	; 51
    22b6:	03 c0       	rjmp	.+6      	; 0x22be <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    22b8:	03 97       	sbiw	r24, 0x03	; 3
    22ba:	29 f4       	brne	.+10     	; 0x22c6 <nrk_led_toggle+0x2a>
    22bc:	8b e3       	ldi	r24, 0x3B	; 59
    22be:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <nrk_gpio_toggle>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	08 95       	ret
return -1;
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    22c8:	08 95       	ret

000022ca <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <nrk_led_clr+0x8>
    22ce:	83 e2       	ldi	r24, 0x23	; 35
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	11 f4       	brne	.+4      	; 0x22dc <nrk_led_clr+0x12>
    22d8:	8b e2       	ldi	r24, 0x2B	; 43
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    22dc:	82 30       	cpi	r24, 0x02	; 2
    22de:	91 05       	cpc	r25, r1
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <nrk_led_clr+0x1c>
    22e2:	83 e3       	ldi	r24, 0x33	; 51
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    22e6:	03 97       	sbiw	r24, 0x03	; 3
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <nrk_led_clr+0x2a>
    22ea:	8b e3       	ldi	r24, 0x3B	; 59
    22ec:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <nrk_gpio_set>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	08 95       	ret
return -1;
    22f4:	8f ef       	ldi	r24, 0xFF	; 255
}
    22f6:	08 95       	ret

000022f8 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	11 f4       	brne	.+4      	; 0x2300 <nrk_led_set+0x8>
    22fc:	83 e2       	ldi	r24, 0x23	; 35
    22fe:	0d c0       	rjmp	.+26     	; 0x231a <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	91 05       	cpc	r25, r1
    2304:	11 f4       	brne	.+4      	; 0x230a <nrk_led_set+0x12>
    2306:	8b e2       	ldi	r24, 0x2B	; 43
    2308:	08 c0       	rjmp	.+16     	; 0x231a <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    230a:	82 30       	cpi	r24, 0x02	; 2
    230c:	91 05       	cpc	r25, r1
    230e:	11 f4       	brne	.+4      	; 0x2314 <nrk_led_set+0x1c>
    2310:	83 e3       	ldi	r24, 0x33	; 51
    2312:	03 c0       	rjmp	.+6      	; 0x231a <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2314:	03 97       	sbiw	r24, 0x03	; 3
    2316:	29 f4       	brne	.+10     	; 0x2322 <nrk_led_set+0x2a>
    2318:	8b e3       	ldi	r24, 0x3B	; 59
    231a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <nrk_gpio_clr>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	08 95       	ret
return -1;
    2322:	8f ef       	ldi	r24, 0xFF	; 255
}
    2324:	08 95       	ret

00002326 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2326:	88 23       	and	r24, r24
    2328:	19 f0       	breq	.+6      	; 0x2330 <nrk_gpio_pullups+0xa>
    232a:	85 b7       	in	r24, 0x35	; 53
    232c:	8f 7e       	andi	r24, 0xEF	; 239
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2330:	85 b7       	in	r24, 0x35	; 53
    2332:	80 61       	ori	r24, 0x10	; 16
    2334:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	08 95       	ret

0000233a <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    233a:	90 91 c8 00 	lds	r25, 0x00C8
    233e:	95 ff       	sbrs	r25, 5
    2340:	fc cf       	rjmp	.-8      	; 0x233a <putc1>
    2342:	80 93 ce 00 	sts	0x00CE, r24
    2346:	08 95       	ret

00002348 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2348:	90 93 c5 00 	sts	0x00C5, r25
    234c:	80 93 c4 00 	sts	0x00C4, r24
    2350:	86 e0       	ldi	r24, 0x06	; 6
    2352:	80 93 c2 00 	sts	0x00C2, r24
    2356:	e1 ec       	ldi	r30, 0xC1	; 193
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8b 7f       	andi	r24, 0xFB	; 251
    235e:	80 83       	st	Z, r24
    2360:	a0 ec       	ldi	r26, 0xC0	; 192
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	8c 91       	ld	r24, X
    2366:	82 60       	ori	r24, 0x02	; 2
    2368:	8c 93       	st	X, r24
ENABLE_UART0();
    236a:	80 81       	ld	r24, Z
    236c:	88 61       	ori	r24, 0x18	; 24
    236e:	80 83       	st	Z, r24
    2370:	08 95       	ret

00002372 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2372:	90 93 cd 00 	sts	0x00CD, r25
    2376:	80 93 cc 00 	sts	0x00CC, r24
    237a:	86 e0       	ldi	r24, 0x06	; 6
    237c:	80 93 ca 00 	sts	0x00CA, r24
    2380:	e9 ec       	ldi	r30, 0xC9	; 201
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	8b 7f       	andi	r24, 0xFB	; 251
    2388:	80 83       	st	Z, r24
    238a:	a8 ec       	ldi	r26, 0xC8	; 200
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	8c 91       	ld	r24, X
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	8c 93       	st	X, r24
ENABLE_UART1();
    2394:	80 81       	ld	r24, Z
    2396:	88 61       	ori	r24, 0x18	; 24
    2398:	80 83       	st	Z, r24
    239a:	08 95       	ret

0000239c <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    239c:	0e 94 a4 11 	call	0x2348	; 0x2348 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    23a0:	69 e1       	ldi	r22, 0x19	; 25
    23a2:	7e e0       	ldi	r23, 0x0E	; 14
    23a4:	82 e8       	ldi	r24, 0x82	; 130
    23a6:	9d e0       	ldi	r25, 0x0D	; 13
    23a8:	0e 94 33 2b 	call	0x5666	; 0x5666 <fdevopen>
    23ac:	90 93 7b 08 	sts	0x087B, r25
    23b0:	80 93 7a 08 	sts	0x087A, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    23b4:	69 e1       	ldi	r22, 0x19	; 25
    23b6:	7e e0       	ldi	r23, 0x0E	; 14
    23b8:	82 e8       	ldi	r24, 0x82	; 130
    23ba:	9d e0       	ldi	r25, 0x0D	; 13
    23bc:	0e 94 33 2b 	call	0x5666	; 0x5666 <fdevopen>
    23c0:	90 93 79 08 	sts	0x0879, r25
    23c4:	80 93 78 08 	sts	0x0878, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    23c8:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <nrk_signal_create>
    23cc:	80 93 53 04 	sts	0x0453, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    23d0:	8f 3f       	cpi	r24, 0xFF	; 255
    23d2:	19 f4       	brne	.+6      	; 0x23da <nrk_setup_uart+0x3e>
    23d4:	8e e0       	ldi	r24, 0x0E	; 14
    23d6:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
   uart_rx_buf_start=0;
    23da:	10 92 67 04 	sts	0x0467, r1
    23de:	10 92 66 04 	sts	0x0466, r1
   uart_rx_buf_end=0;
    23e2:	10 92 65 04 	sts	0x0465, r1
    23e6:	10 92 64 04 	sts	0x0464, r1
   ENABLE_UART0_RX_INT();
    23ea:	80 91 c1 00 	lds	r24, 0x00C1
    23ee:	80 68       	ori	r24, 0x80	; 128
    23f0:	80 93 c1 00 	sts	0x00C1, r24
    23f4:	08 95       	ret

000023f6 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    23f6:	80 91 c8 00 	lds	r24, 0x00C8
    23fa:	87 ff       	sbrs	r24, 7
    23fc:	fc cf       	rjmp	.-8      	; 0x23f6 <getc1>
    23fe:	80 91 c8 00 	lds	r24, 0x00C8
    2402:	8f 77       	andi	r24, 0x7F	; 127
    2404:	80 93 c8 00 	sts	0x00C8, r24
    2408:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    240c:	08 95       	ret

0000240e <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	d1 f7       	brne	.-12     	; 0x240e <halWait>

} // halWait
    241a:	08 95       	ret

0000241c <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    241c:	0c 94 8e 2c 	jmp	0x591c	; 0x591c <__eerd_byte_m128rfa1>

00002420 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2420:	0e 94 96 2c 	call	0x592c	; 0x592c <__eewr_byte_m128rfa1>
}
    2424:	08 95       	ret

00002426 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    243c:	18 2f       	mov	r17, r24
    243e:	f7 01       	movw	r30, r14
    2440:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    244a:	08 2f       	mov	r16, r24
    244c:	f7 01       	movw	r30, r14
    244e:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    2458:	d8 2f       	mov	r29, r24
    245a:	f7 01       	movw	r30, r14
    245c:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    2466:	c8 2f       	mov	r28, r24
    2468:	f7 01       	movw	r30, r14
    246a:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    2474:	10 0f       	add	r17, r16
    2476:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2478:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    247a:	8c 17       	cp	r24, r28
    247c:	11 f0       	breq	.+4      	; 0x2482 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2482:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	08 95       	ret

00002492 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2498:	85 e0       	ldi	r24, 0x05	; 5
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    24a0:	88 83       	st	Y, r24
return NRK_OK;
}
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	08 95       	ret

000024aa <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    24aa:	fc 01       	movw	r30, r24
    24ac:	60 81       	ld	r22, Z
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 96 2c 	call	0x592c	; 0x592c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	08 95       	ret

000024ba <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    24c0:	86 e0       	ldi	r24, 0x06	; 6
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    24c8:	88 83       	st	Y, r24
  return NRK_OK;
}
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	8c 01       	movw	r16, r24
    24dc:	c0 e0       	ldi	r28, 0x00	; 0
    24de:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    24e0:	ce 01       	movw	r24, r28
    24e2:	08 96       	adiw	r24, 0x08	; 8
    24e4:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    24e8:	f8 01       	movw	r30, r16
    24ea:	81 93       	st	Z+, r24
    24ec:	8f 01       	movw	r16, r30
    24ee:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    24f0:	c0 31       	cpi	r28, 0x10	; 16
    24f2:	d1 05       	cpc	r29, r1
    24f4:	a9 f7       	brne	.-22     	; 0x24e0 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

00002502 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	8c 01       	movw	r16, r24
    250c:	c0 e0       	ldi	r28, 0x00	; 0
    250e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2510:	f8 01       	movw	r30, r16
    2512:	61 91       	ld	r22, Z+
    2514:	8f 01       	movw	r16, r30
    2516:	ce 01       	movw	r24, r28
    2518:	08 96       	adiw	r24, 0x08	; 8
    251a:	0e 94 96 2c 	call	0x592c	; 0x592c <__eewr_byte_m128rfa1>
    251e:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2520:	c0 31       	cpi	r28, 0x10	; 16
    2522:	d1 05       	cpc	r29, r1
    2524:	a9 f7       	brne	.-22     	; 0x2510 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	08 95       	ret

00002532 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2538:	87 e0       	ldi	r24, 0x07	; 7
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 8e 2c 	call	0x591c	; 0x591c <__eerd_byte_m128rfa1>
    2540:	88 83       	st	Y, r24
  return NRK_OK;
}
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    254a:	fc 01       	movw	r30, r24
    254c:	60 81       	ld	r22, Z
    254e:	87 e0       	ldi	r24, 0x07	; 7
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 96 2c 	call	0x592c	; 0x592c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	08 95       	ret

0000255a <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    255a:	f8 94       	cli
    255c:	08 95       	ret

0000255e <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    255e:	78 94       	sei
    2560:	08 95       	ret

00002562 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2562:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
while(1);
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <nrk_halt+0x4>

00002568 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	a3 97       	sbiw	r28, 0x23	; 35
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    257e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <nrk_signal_create>
    2582:	80 93 43 08 	sts	0x0843, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2586:	8f 3f       	cpi	r24, 0xFF	; 255
    2588:	21 f4       	brne	.+8      	; 0x2592 <nrk_init+0x2a>
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	8e e0       	ldi	r24, 0x0E	; 14
    258e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2592:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_nrk_startup_error>
    2596:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2598:	80 ff       	sbrs	r24, 0
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <nrk_init+0x3c>
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	86 e0       	ldi	r24, 0x06	; 6
    25a0:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    25a4:	11 ff       	sbrs	r17, 1
    25a6:	04 c0       	rjmp	.+8      	; 0x25b0 <nrk_init+0x48>
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	84 e1       	ldi	r24, 0x14	; 20
    25ac:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    25b0:	12 ff       	sbrs	r17, 2
    25b2:	04 c0       	rjmp	.+8      	; 0x25bc <nrk_init+0x54>
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	83 e1       	ldi	r24, 0x13	; 19
    25b8:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    25bc:	10 92 46 08 	sts	0x0846, r1
    nrk_cur_task_TCB = NULL;
    25c0:	10 92 54 08 	sts	0x0854, r1
    25c4:	10 92 53 08 	sts	0x0853, r1
    
    nrk_high_ready_TCB = NULL;
    25c8:	10 92 45 08 	sts	0x0845, r1
    25cc:	10 92 44 08 	sts	0x0844, r1
    nrk_high_ready_prio = 0; 
    25d0:	10 92 55 08 	sts	0x0855, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    25d4:	10 92 52 08 	sts	0x0852, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    25d8:	8f ef       	ldi	r24, 0xFF	; 255
    25da:	80 93 3c 08 	sts	0x083C, r24
    nrk_sem_list[i].value=-1;
    25de:	80 93 3e 08 	sts	0x083E, r24
    nrk_sem_list[i].resource_ceiling=-1;
    25e2:	80 93 3d 08 	sts	0x083D, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    25e6:	80 93 3f 08 	sts	0x083F, r24
    nrk_sem_list[i].value=-1;
    25ea:	80 93 41 08 	sts	0x0841, r24
    nrk_sem_list[i].resource_ceiling=-1;
    25ee:	80 93 40 08 	sts	0x0840, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    25f2:	93 e6       	ldi	r25, 0x63	; 99
    25f4:	90 93 98 07 	sts	0x0798, r25
        nrk_task_TCB[i].task_ID = -1; 
    25f8:	80 93 96 07 	sts	0x0796, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    25fc:	90 93 c3 07 	sts	0x07C3, r25
        nrk_task_TCB[i].task_ID = -1; 
    2600:	80 93 c1 07 	sts	0x07C1, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2604:	90 93 ee 07 	sts	0x07EE, r25
        nrk_task_TCB[i].task_ID = -1; 
    2608:	80 93 ec 07 	sts	0x07EC, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    260c:	90 93 19 08 	sts	0x0819, r25
        nrk_task_TCB[i].task_ID = -1; 
    2610:	80 93 17 08 	sts	0x0817, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2614:	86 e5       	ldi	r24, 0x56	; 86
    2616:	98 e0       	ldi	r25, 0x08	; 8
    2618:	2b e5       	ldi	r18, 0x5B	; 91
    261a:	38 e0       	ldi	r19, 0x08	; 8
    261c:	30 93 5a 08 	sts	0x085A, r19
    2620:	20 93 59 08 	sts	0x0859, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2624:	90 93 5d 08 	sts	0x085D, r25
    2628:	80 93 5c 08 	sts	0x085C, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    262c:	40 e6       	ldi	r20, 0x60	; 96
    262e:	58 e0       	ldi	r21, 0x08	; 8
    2630:	50 93 5f 08 	sts	0x085F, r21
    2634:	40 93 5e 08 	sts	0x085E, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2638:	30 93 62 08 	sts	0x0862, r19
    263c:	20 93 61 08 	sts	0x0861, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2640:	25 e6       	ldi	r18, 0x65	; 101
    2642:	38 e0       	ldi	r19, 0x08	; 8
    2644:	30 93 64 08 	sts	0x0864, r19
    2648:	20 93 63 08 	sts	0x0863, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    264c:	50 93 67 08 	sts	0x0867, r21
    2650:	40 93 66 08 	sts	0x0866, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2654:	4a e6       	ldi	r20, 0x6A	; 106
    2656:	58 e0       	ldi	r21, 0x08	; 8
    2658:	50 93 69 08 	sts	0x0869, r21
    265c:	40 93 68 08 	sts	0x0868, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2660:	30 93 6c 08 	sts	0x086C, r19
    2664:	20 93 6b 08 	sts	0x086B, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2668:	10 92 58 08 	sts	0x0858, r1
    266c:	10 92 57 08 	sts	0x0857, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2670:	10 92 6e 08 	sts	0x086E, r1
    2674:	10 92 6d 08 	sts	0x086D, r1
	_head_node = NULL;
    2678:	10 92 49 08 	sts	0x0849, r1
    267c:	10 92 48 08 	sts	0x0848, r1
	_free_node = &_nrk_readyQ[0];
    2680:	90 93 8d 07 	sts	0x078D, r25
    2684:	80 93 8c 07 	sts	0x078C, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2688:	6f ec       	ldi	r22, 0xCF	; 207
    268a:	7f e1       	ldi	r23, 0x1F	; 31
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	63 eb       	ldi	r22, 0xB3	; 179
    269a:	76 e0       	ldi	r23, 0x06	; 6
    269c:	ce 01       	movw	r24, r28
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    26a4:	85 e5       	ldi	r24, 0x55	; 85
    26a6:	80 93 b3 06 	sts	0x06B3, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    26aa:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    26ac:	1c 86       	std	Y+12, r1	; 0x0c
    26ae:	1d 86       	std	Y+13, r1	; 0x0d
    26b0:	1e 86       	std	Y+14, r1	; 0x0e
    26b2:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    26b4:	18 8a       	std	Y+16, r1	; 0x10
    26b6:	19 8a       	std	Y+17, r1	; 0x11
    26b8:	1a 8a       	std	Y+18, r1	; 0x12
    26ba:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    26bc:	1c 8a       	std	Y+20, r1	; 0x14
    26be:	1d 8a       	std	Y+21, r1	; 0x15
    26c0:	1e 8a       	std	Y+22, r1	; 0x16
    26c2:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    26c4:	18 8e       	std	Y+24, r1	; 0x18
    26c6:	19 8e       	std	Y+25, r1	; 0x19
    26c8:	1a 8e       	std	Y+26, r1	; 0x1a
    26ca:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    26cc:	1c 8e       	std	Y+28, r1	; 0x1c
    26ce:	1d 8e       	std	Y+29, r1	; 0x1d
    26d0:	1e 8e       	std	Y+30, r1	; 0x1e
    26d2:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    26d4:	18 a2       	std	Y+32, r1	; 0x20
    26d6:	19 a2       	std	Y+33, r1	; 0x21
    26d8:	1a a2       	std	Y+34, r1	; 0x22
    26da:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    26e0:	92 e0       	ldi	r25, 0x02	; 2
    26e2:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    26e4:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    26e6:	ce 01       	movw	r24, r28
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	0e 94 04 1b 	call	0x3608	; 0x3608 <nrk_activate_task>
	
}
    26ee:	a3 96       	adiw	r28, 0x23	; 35
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	08 95       	ret

00002702 <nrk_start>:




void nrk_start (void)
{
    2702:	06 e9       	ldi	r16, 0x96	; 150
    2704:	17 e0       	ldi	r17, 0x07	; 7
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2706:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2708:	f8 01       	movw	r30, r16
    270a:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    270c:	ff ef       	ldi	r31, 0xFF	; 255
    270e:	df 12       	cpse	r13, r31
    2710:	22 c0       	rjmp	.+68     	; 0x2756 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2712:	cf 5f       	subi	r28, 0xFF	; 255
    2714:	05 5d       	subi	r16, 0xD5	; 213
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	c4 30       	cpi	r28, 0x04	; 4
    271a:	b1 f7       	brne	.-20     	; 0x2708 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    271c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2720:	2b e2       	ldi	r18, 0x2B	; 43
    2722:	82 02       	muls	r24, r18
    2724:	c0 01       	movw	r24, r0
    2726:	11 24       	eor	r1, r1
    2728:	fc 01       	movw	r30, r24
    272a:	e2 57       	subi	r30, 0x72	; 114
    272c:	f8 4f       	sbci	r31, 0xF8	; 248
    272e:	82 85       	ldd	r24, Z+10	; 0x0a
    2730:	80 93 55 08 	sts	0x0855, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2734:	f0 93 54 08 	sts	0x0854, r31
    2738:	e0 93 53 08 	sts	0x0853, r30
    273c:	f0 93 45 08 	sts	0x0845, r31
    2740:	e0 93 44 08 	sts	0x0844, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2744:	80 93 46 08 	sts	0x0846, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2748:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <nrk_target_start>
    nrk_stack_pointer_init(); 
    274c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2750:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <nrk_start_high_ready_task>
    2754:	16 c0       	rjmp	.+44     	; 0x2782 <nrk_start+0x80>
    2756:	86 e9       	ldi	r24, 0x96	; 150
    2758:	e8 2e       	mov	r14, r24
    275a:	87 e0       	ldi	r24, 0x07	; 7
    275c:	f8 2e       	mov	r15, r24
    275e:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2760:	cd 17       	cp	r28, r29
    2762:	41 f0       	breq	.+16     	; 0x2774 <nrk_start+0x72>
    2764:	f7 01       	movw	r30, r14
    2766:	80 81       	ld	r24, Z
    2768:	d8 12       	cpse	r13, r24
    276a:	04 c0       	rjmp	.+8      	; 0x2774 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    276c:	6d 2d       	mov	r22, r13
    276e:	85 e0       	ldi	r24, 0x05	; 5
    2770:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2774:	df 5f       	subi	r29, 0xFF	; 255
    2776:	fb e2       	ldi	r31, 0x2B	; 43
    2778:	ef 0e       	add	r14, r31
    277a:	f1 1c       	adc	r15, r1
    277c:	d4 30       	cpi	r29, 0x04	; 4
    277e:	81 f7       	brne	.-32     	; 0x2760 <nrk_start+0x5e>
    2780:	c8 cf       	rjmp	.-112    	; 0x2712 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2782:	ff cf       	rjmp	.-2      	; 0x2782 <nrk_start+0x80>

00002784 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2784:	cf 92       	push	r12
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	ec 01       	movw	r28, r24
    2796:	8b 01       	movw	r16, r22
    2798:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	82 30       	cpi	r24, 0x02	; 2
    279e:	21 f0       	breq	.+8      	; 0x27a8 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    27a0:	80 91 42 08 	lds	r24, 0x0842
    27a4:	88 83       	st	Y, r24
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    27a8:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    27aa:	80 91 42 08 	lds	r24, 0x0842
    27ae:	84 30       	cpi	r24, 0x04	; 4
    27b0:	20 f0       	brcs	.+8      	; 0x27ba <nrk_TCB_init+0x36>
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	87 e0       	ldi	r24, 0x07	; 7
    27b6:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	29 f0       	breq	.+10     	; 0x27ca <nrk_TCB_init+0x46>
    27c0:	80 91 42 08 	lds	r24, 0x0842
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	80 93 42 08 	sts	0x0842, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    27ca:	80 91 42 08 	lds	r24, 0x0842
    27ce:	81 11       	cpse	r24, r1
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <nrk_TCB_init+0x54>
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	80 93 42 08 	sts	0x0842, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    27d8:	38 81       	ld	r19, Y
    27da:	2b e2       	ldi	r18, 0x2B	; 43
    27dc:	32 03       	mulsu	r19, r18
    27de:	f0 01       	movw	r30, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	e2 57       	subi	r30, 0x72	; 114
    27e4:	f8 4f       	sbci	r31, 0xF8	; 248
    27e6:	11 83       	std	Z+1, r17	; 0x01
    27e8:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    27ea:	88 85       	ldd	r24, Y+8	; 0x08
    27ec:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    27ee:	38 81       	ld	r19, Y
    27f0:	32 03       	mulsu	r19, r18
    27f2:	f0 01       	movw	r30, r0
    27f4:	11 24       	eor	r1, r1
    27f6:	e2 57       	subi	r30, 0x72	; 114
    27f8:	f8 4f       	sbci	r31, 0xF8	; 248
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    27fe:	38 81       	ld	r19, Y
    2800:	32 03       	mulsu	r19, r18
    2802:	f0 01       	movw	r30, r0
    2804:	11 24       	eor	r1, r1
    2806:	e2 57       	subi	r30, 0x72	; 114
    2808:	f8 4f       	sbci	r31, 0xF8	; 248
    280a:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    280c:	08 81       	ld	r16, Y
    280e:	02 03       	mulsu	r16, r18
    2810:	80 01       	movw	r16, r0
    2812:	11 24       	eor	r1, r1
    2814:	02 57       	subi	r16, 0x72	; 114
    2816:	18 4f       	sbci	r17, 0xF8	; 248
    2818:	f8 01       	movw	r30, r16
    281a:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    281c:	ce 01       	movw	r24, r28
    281e:	0b 96       	adiw	r24, 0x0b	; 11
    2820:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_time_to_ticks_long>
    2824:	f8 01       	movw	r30, r16
    2826:	61 a3       	std	Z+33, r22	; 0x21
    2828:	72 a3       	std	Z+34, r23	; 0x22
    282a:	83 a3       	std	Z+35, r24	; 0x23
    282c:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    282e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2830:	9c 85       	ldd	r25, Y+12	; 0x0c
    2832:	ad 85       	ldd	r26, Y+13	; 0x0d
    2834:	be 85       	ldd	r27, Y+14	; 0x0e
    2836:	88 33       	cpi	r24, 0x38	; 56
    2838:	99 48       	sbci	r25, 0x89	; 137
    283a:	a1 44       	sbci	r26, 0x41	; 65
    283c:	b1 05       	cpc	r27, r1
    283e:	20 f0       	brcs	.+8      	; 0x2848 <nrk_TCB_init+0xc4>
    2840:	68 81       	ld	r22, Y
    2842:	86 e1       	ldi	r24, 0x16	; 22
    2844:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2848:	c8 80       	ld	r12, Y
    284a:	dd 24       	eor	r13, r13
    284c:	c7 fc       	sbrc	r12, 7
    284e:	d0 94       	com	r13
    2850:	ce 01       	movw	r24, r28
    2852:	4b 96       	adiw	r24, 0x1b	; 27
    2854:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_time_to_ticks_long>
    2858:	1b e2       	ldi	r17, 0x2B	; 43
    285a:	1c 9d       	mul	r17, r12
    285c:	f0 01       	movw	r30, r0
    285e:	1d 9d       	mul	r17, r13
    2860:	f0 0d       	add	r31, r0
    2862:	11 24       	eor	r1, r1
    2864:	e2 57       	subi	r30, 0x72	; 114
    2866:	f8 4f       	sbci	r31, 0xF8	; 248
    2868:	65 8b       	std	Z+21, r22	; 0x15
    286a:	76 8b       	std	Z+22, r23	; 0x16
    286c:	87 8b       	std	Z+23, r24	; 0x17
    286e:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2870:	28 81       	ld	r18, Y
    2872:	21 03       	mulsu	r18, r17
    2874:	c0 01       	movw	r24, r0
    2876:	11 24       	eor	r1, r1
    2878:	9c 01       	movw	r18, r24
    287a:	22 57       	subi	r18, 0x72	; 114
    287c:	38 4f       	sbci	r19, 0xF8	; 248
    287e:	69 01       	movw	r12, r18
    2880:	f9 01       	movw	r30, r18
    2882:	45 89       	ldd	r20, Z+21	; 0x15
    2884:	56 89       	ldd	r21, Z+22	; 0x16
    2886:	67 89       	ldd	r22, Z+23	; 0x17
    2888:	70 8d       	ldd	r23, Z+24	; 0x18
    288a:	81 a1       	ldd	r24, Z+33	; 0x21
    288c:	92 a1       	ldd	r25, Z+34	; 0x22
    288e:	a3 a1       	ldd	r26, Z+35	; 0x23
    2890:	b4 a1       	ldd	r27, Z+36	; 0x24
    2892:	84 0f       	add	r24, r20
    2894:	95 1f       	adc	r25, r21
    2896:	a6 1f       	adc	r26, r22
    2898:	b7 1f       	adc	r27, r23
    289a:	81 8f       	std	Z+25, r24	; 0x19
    289c:	92 8f       	std	Z+26, r25	; 0x1a
    289e:	a3 8f       	std	Z+27, r26	; 0x1b
    28a0:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    28a2:	ce 01       	movw	r24, r28
    28a4:	43 96       	adiw	r24, 0x13	; 19
    28a6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_time_to_ticks_long>
    28aa:	f6 01       	movw	r30, r12
    28ac:	65 a3       	std	Z+37, r22	; 0x25
    28ae:	76 a3       	std	Z+38, r23	; 0x26
    28b0:	87 a3       	std	Z+39, r24	; 0x27
    28b2:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    28b4:	28 81       	ld	r18, Y
    28b6:	21 03       	mulsu	r18, r17
    28b8:	f0 01       	movw	r30, r0
    28ba:	11 24       	eor	r1, r1
    28bc:	e2 57       	subi	r30, 0x72	; 114
    28be:	f8 4f       	sbci	r31, 0xF8	; 248
    28c0:	85 a1       	ldd	r24, Z+37	; 0x25
    28c2:	96 a1       	ldd	r25, Z+38	; 0x26
    28c4:	a7 a1       	ldd	r26, Z+39	; 0x27
    28c6:	b0 a5       	ldd	r27, Z+40	; 0x28
    28c8:	85 8f       	std	Z+29, r24	; 0x1d
    28ca:	96 8f       	std	Z+30, r25	; 0x1e
    28cc:	a7 8f       	std	Z+31, r26	; 0x1f
    28ce:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	92 a7       	std	Z+42, r25	; 0x2a
    28d6:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    28d8:	f3 82       	std	Z+3, r15	; 0x03
    28da:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    28dc:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	df 90       	pop	r13
    28ec:	cf 90       	pop	r12
    28ee:	08 95       	ret

000028f0 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    28f0:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <_nrk_scheduler>

000028f4 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    28f4:	85 e6       	ldi	r24, 0x65	; 101
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	08 95       	ret

000028fa <_nrk_errno_set>:
    28fa:	e0 91 53 08 	lds	r30, 0x0853
    28fe:	f0 91 54 08 	lds	r31, 0x0854
    2902:	84 87       	std	Z+12, r24	; 0x0c
    2904:	08 95       	ret

00002906 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2906:	e0 91 53 08 	lds	r30, 0x0853
    290a:	f0 91 54 08 	lds	r31, 0x0854
}
    290e:	84 85       	ldd	r24, Z+12	; 0x0c
    2910:	08 95       	ret

00002912 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    2912:	fc 01       	movw	r30, r24
    if (error_num == 0)
    2914:	80 91 b2 06 	lds	r24, 0x06B2
    2918:	88 23       	and	r24, r24
    291a:	31 f0       	breq	.+12     	; 0x2928 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    291c:	db 01       	movw	r26, r22
    291e:	8c 93       	st	X, r24
    *task_id = error_task;
    2920:	80 91 e8 04 	lds	r24, 0x04E8
    2924:	80 83       	st	Z, r24
    return 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
}
    2928:	08 95       	ret

0000292a <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    292a:	80 91 b2 06 	lds	r24, 0x06B2
    292e:	88 23       	and	r24, r24
    2930:	09 f4       	brne	.+2      	; 0x2934 <nrk_error_print+0xa>
    2932:	84 c0       	rjmp	.+264    	; 0x2a3c <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2934:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2938:	8f e2       	ldi	r24, 0x2F	; 47
    293a:	95 e0       	ldi	r25, 0x05	; 5
    293c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
        printf ("%d", error_task);
    2940:	80 91 e8 04 	lds	r24, 0x04E8
    2944:	1f 92       	push	r1
    2946:	8f 93       	push	r24
    2948:	8b e7       	ldi	r24, 0x7B	; 123
    294a:	92 e0       	ldi	r25, 0x02	; 2
    294c:	9f 93       	push	r25
    294e:	8f 93       	push	r24
    2950:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
        nrk_kprintf (PSTR ("): "));
    2954:	8b e2       	ldi	r24, 0x2B	; 43
    2956:	95 e0       	ldi	r25, 0x05	; 5
    2958:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	80 91 b2 06 	lds	r24, 0x06B2
    2968:	88 31       	cpi	r24, 0x18	; 24
    296a:	10 f0       	brcs	.+4      	; 0x2970 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    296c:	10 92 b2 06 	sts	0x06B2, r1
        switch (error_num)
    2970:	e0 91 b2 06 	lds	r30, 0x06B2
    2974:	8e 2f       	mov	r24, r30
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	fc 01       	movw	r30, r24
    297a:	31 97       	sbiw	r30, 0x01	; 1
    297c:	e6 31       	cpi	r30, 0x16	; 22
    297e:	f1 05       	cpc	r31, r1
    2980:	08 f0       	brcs	.+2      	; 0x2984 <nrk_error_print+0x5a>
    2982:	46 c0       	rjmp	.+140    	; 0x2a10 <nrk_error_print+0xe6>
    2984:	e6 54       	subi	r30, 0x46	; 70
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    298c:	8f ee       	ldi	r24, 0xEF	; 239
    298e:	94 e0       	ldi	r25, 0x04	; 4
    2990:	41 c0       	rjmp	.+130    	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2992:	88 ec       	ldi	r24, 0xC8	; 200
    2994:	94 e0       	ldi	r25, 0x04	; 4
    2996:	3e c0       	rjmp	.+124    	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2998:	84 eb       	ldi	r24, 0xB4	; 180
    299a:	94 e0       	ldi	r25, 0x04	; 4
    299c:	3b c0       	rjmp	.+118    	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    299e:	8e e9       	ldi	r24, 0x9E	; 158
    29a0:	94 e0       	ldi	r25, 0x04	; 4
    29a2:	38 c0       	rjmp	.+112    	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    29a4:	83 e8       	ldi	r24, 0x83	; 131
    29a6:	94 e0       	ldi	r25, 0x04	; 4
    29a8:	35 c0       	rjmp	.+106    	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    29aa:	8d e6       	ldi	r24, 0x6D	; 109
    29ac:	94 e0       	ldi	r25, 0x04	; 4
    29ae:	32 c0       	rjmp	.+100    	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    29b0:	85 e5       	ldi	r24, 0x55	; 85
    29b2:	94 e0       	ldi	r25, 0x04	; 4
    29b4:	2f c0       	rjmp	.+94     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    29b6:	82 e4       	ldi	r24, 0x42	; 66
    29b8:	94 e0       	ldi	r25, 0x04	; 4
    29ba:	2c c0       	rjmp	.+88     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    29bc:	8f e2       	ldi	r24, 0x2F	; 47
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	29 c0       	rjmp	.+82     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    29c2:	81 e1       	ldi	r24, 0x11	; 17
    29c4:	94 e0       	ldi	r25, 0x04	; 4
    29c6:	26 c0       	rjmp	.+76     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    29c8:	8c ee       	ldi	r24, 0xEC	; 236
    29ca:	93 e0       	ldi	r25, 0x03	; 3
    29cc:	23 c0       	rjmp	.+70     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    29ce:	80 ee       	ldi	r24, 0xE0	; 224
    29d0:	93 e0       	ldi	r25, 0x03	; 3
    29d2:	20 c0       	rjmp	.+64     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    29d4:	85 ec       	ldi	r24, 0xC5	; 197
    29d6:	93 e0       	ldi	r25, 0x03	; 3
    29d8:	1d c0       	rjmp	.+58     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    29da:	86 eb       	ldi	r24, 0xB6	; 182
    29dc:	93 e0       	ldi	r25, 0x03	; 3
    29de:	1a c0       	rjmp	.+52     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    29e0:	82 ea       	ldi	r24, 0xA2	; 162
    29e2:	93 e0       	ldi	r25, 0x03	; 3
    29e4:	17 c0       	rjmp	.+46     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    29e6:	81 e9       	ldi	r24, 0x91	; 145
    29e8:	93 e0       	ldi	r25, 0x03	; 3
    29ea:	14 c0       	rjmp	.+40     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    29ec:	8d e7       	ldi	r24, 0x7D	; 125
    29ee:	93 e0       	ldi	r25, 0x03	; 3
    29f0:	11 c0       	rjmp	.+34     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    29f2:	8d e5       	ldi	r24, 0x5D	; 93
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	0e c0       	rjmp	.+28     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    29f8:	85 e4       	ldi	r24, 0x45	; 69
    29fa:	93 e0       	ldi	r25, 0x03	; 3
    29fc:	0b c0       	rjmp	.+22     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    29fe:	8a e2       	ldi	r24, 0x2A	; 42
    2a00:	93 e0       	ldi	r25, 0x03	; 3
    2a02:	08 c0       	rjmp	.+16     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2a04:	89 e1       	ldi	r24, 0x19	; 25
    2a06:	93 e0       	ldi	r25, 0x03	; 3
    2a08:	05 c0       	rjmp	.+10     	; 0x2a14 <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2a0a:	8a e0       	ldi	r24, 0x0A	; 10
    2a0c:	93 e0       	ldi	r25, 0x03	; 3
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	93 e0       	ldi	r25, 0x03	; 3
    2a14:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>
        }
        putchar ('\r');
    2a18:	60 91 7a 08 	lds	r22, 0x087A
    2a1c:	70 91 7b 08 	lds	r23, 0x087B
    2a20:	8d e0       	ldi	r24, 0x0D	; 13
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
        putchar ('\n');
    2a28:	60 91 7a 08 	lds	r22, 0x087A
    2a2c:	70 91 7b 08 	lds	r23, 0x087B
    2a30:	8a e0       	ldi	r24, 0x0A	; 10
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2a38:	10 92 b2 06 	sts	0x06B2, r1
    return t;
}
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	08 95       	ret

00002a40 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2a40:	80 93 b2 06 	sts	0x06B2, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2a44:	e0 91 53 08 	lds	r30, 0x0853
    2a48:	f0 91 54 08 	lds	r31, 0x0854
    2a4c:	80 85       	ldd	r24, Z+8	; 0x08
    2a4e:	80 93 e8 04 	sts	0x04E8, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2a52:	0c 94 95 14 	jmp	0x292a	; 0x292a <nrk_error_print>

00002a56 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    2a56:	80 93 b2 06 	sts	0x06B2, r24
    error_task = task;
    2a5a:	60 93 e8 04 	sts	0x04E8, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2a5e:	0c 94 95 14 	jmp	0x292a	; 0x292a <nrk_error_print>

00002a62 <pause>:
    }

}

void pause()
{
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	1f 92       	push	r1
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2a6c:	19 82       	std	Y+1, r1	; 0x01
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	84 36       	cpi	r24, 0x64	; 100
    2a72:	40 f4       	brcc	.+16     	; 0x2a84 <pause+0x22>
        nrk_spin_wait_us (2000);
    2a74:	80 ed       	ldi	r24, 0xD0	; 208
    2a76:	97 e0       	ldi	r25, 0x07	; 7
    2a78:	0e 94 ae 22 	call	0x455c	; 0x455c <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	f5 cf       	rjmp	.-22     	; 0x2a6e <pause+0xc>
        nrk_spin_wait_us (2000);
}
    2a84:	0f 90       	pop	r0
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	08 95       	ret

00002a8c <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <nrk_led_set>
    pause();
    2a94:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
    pause();
    2a98:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
    pause();
    2a9c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
    nrk_led_clr(GREEN_LED);
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
    pause();
    2aa8:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <pause>

00002aac <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <nrk_led_set>
    pause();
    2ab4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
    nrk_led_clr(GREEN_LED);
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
    pause();
    2ac0:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <pause>

00002ac4 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <blink_morse_code_error+0xc>
    2ad0:	1f 92       	push	r1
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2ad6:	1f 92       	push	r1
    2ad8:	8f 93       	push	r24
    2ada:	8b e7       	ldi	r24, 0x7B	; 123
    2adc:	92 e0       	ldi	r25, 0x02	; 2
    2ade:	9f 93       	push	r25
    2ae0:	8f 93       	push	r24
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0f 5f       	subi	r16, 0xFF	; 255
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	1f 93       	push	r17
    2aea:	0f 93       	push	r16
    2aec:	0e 94 00 2c 	call	0x5800	; 0x5800 <sprintf>

    for(i=0; i<strlen(str); i++ )
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	f1 2c       	mov	r15, r1
    2afe:	f8 01       	movw	r30, r16
    2b00:	01 90       	ld	r0, Z+
    2b02:	00 20       	and	r0, r0
    2b04:	e9 f7       	brne	.-6      	; 0x2b00 <blink_morse_code_error+0x3c>
    2b06:	31 97       	sbiw	r30, 0x01	; 1
    2b08:	e0 1b       	sub	r30, r16
    2b0a:	f1 0b       	sbc	r31, r17
    2b0c:	8f 2d       	mov	r24, r15
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	8e 17       	cp	r24, r30
    2b12:	9f 07       	cpc	r25, r31
    2b14:	08 f0       	brcs	.+2      	; 0x2b18 <blink_morse_code_error+0x54>
    2b16:	5d c0       	rjmp	.+186    	; 0x2bd2 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    2b18:	f8 01       	movw	r30, r16
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f9 1f       	adc	r31, r25
    2b1e:	e0 81       	ld	r30, Z
    2b20:	8e 2f       	mov	r24, r30
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	fc 01       	movw	r30, r24
    2b26:	f0 97       	sbiw	r30, 0x30	; 48
    2b28:	ea 30       	cpi	r30, 0x0A	; 10
    2b2a:	f1 05       	cpc	r31, r1
    2b2c:	08 f0       	brcs	.+2      	; 0x2b30 <blink_morse_code_error+0x6c>
    2b2e:	49 c0       	rjmp	.+146    	; 0x2bc2 <blink_morse_code_error+0xfe>
    2b30:	e0 53       	subi	r30, 0x30	; 48
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__tablejump2__>
        {
        case '0':
            blink_dash();
    2b38:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2b3e:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dash();
    2b42:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2b46:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2b4a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2b4e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            break;
    2b52:	37 c0       	rjmp	.+110    	; 0x2bc2 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    2b54:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dot();
    2b58:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2b5c:	f4 cf       	rjmp	.-24     	; 0x2b46 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2b5e:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dot();
    2b62:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dot();
    2b66:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2b6a:	ef cf       	rjmp	.-34     	; 0x2b4a <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2b6c:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dot();
    2b70:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dot();
    2b74:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            blink_dot();
    2b78:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2b7c:	e8 cf       	rjmp	.-48     	; 0x2b4e <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2b7e:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2b84:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dot();
    2b88:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2b8e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2b92:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dot();
    2b96:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2b9a:	06 c0       	rjmp	.+12     	; 0x2ba8 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2b9c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2ba0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2ba4:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dot();
    2ba8:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
    2bac:	08 c0       	rjmp	.+16     	; 0x2bbe <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2bae:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2bb2:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2bb6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dash();
    2bba:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <blink_dash>
            blink_dot();
    2bbe:	0e 94 56 15 	call	0x2aac	; 0x2aac <blink_dot>
            break;
        }
        pause();
    2bc2:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
        pause();
    2bc6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
        pause();
    2bca:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2bce:	f3 94       	inc	r15
    2bd0:	96 cf       	rjmp	.-212    	; 0x2afe <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ff 90       	pop	r15
    2be2:	08 95       	ret

00002be4 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2be4:	6f 92       	push	r6
    2be6:	7f 92       	push	r7
    2be8:	8f 92       	push	r8
    2bea:	9f 92       	push	r9
    2bec:	af 92       	push	r10
    2bee:	bf 92       	push	r11
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2c00:	8b e3       	ldi	r24, 0x3B	; 59
    2c02:	95 e0       	ldi	r25, 0x05	; 5
    2c04:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2c08:	e0 91 53 08 	lds	r30, 0x0853
    2c0c:	f0 91 54 08 	lds	r31, 0x0854
    2c10:	80 85       	ldd	r24, Z+8	; 0x08
    2c12:	28 2f       	mov	r18, r24
    2c14:	33 27       	eor	r19, r19
    2c16:	27 fd       	sbrc	r18, 7
    2c18:	30 95       	com	r19
    2c1a:	3f 93       	push	r19
    2c1c:	8f 93       	push	r24
    2c1e:	8e e4       	ldi	r24, 0x4E	; 78
    2c20:	93 e0       	ldi	r25, 0x03	; 3
    2c22:	9f 93       	push	r25
    2c24:	8f 93       	push	r24
    2c26:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2c2a:	e0 91 53 08 	lds	r30, 0x0853
    2c2e:	f0 91 54 08 	lds	r31, 0x0854
    2c32:	c2 81       	ldd	r28, Z+2	; 0x02
    2c34:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	82 e8       	ldi	r24, 0x82	; 130
    2c3c:	93 e0       	ldi	r25, 0x03	; 3
    2c3e:	9f 93       	push	r25
    2c40:	8f 93       	push	r24
    2c42:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    printf( "canary = %x ",*stkc );
    2c46:	88 81       	ld	r24, Y
    2c48:	1f 92       	push	r1
    2c4a:	8f 93       	push	r24
    2c4c:	87 e5       	ldi	r24, 0x57	; 87
    2c4e:	93 e0       	ldi	r25, 0x03	; 3
    2c50:	9f 93       	push	r25
    2c52:	8f 93       	push	r24
    2c54:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2c58:	e0 91 53 08 	lds	r30, 0x0853
    2c5c:	f0 91 54 08 	lds	r31, 0x0854
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2c60:	81 81       	ldd	r24, Z+1	; 0x01
    2c62:	8f 93       	push	r24
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 93       	push	r24
    2c68:	84 e6       	ldi	r24, 0x64	; 100
    2c6a:	93 e0       	ldi	r25, 0x03	; 3
    2c6c:	9f 93       	push	r25
    2c6e:	8f 93       	push	r24
    2c70:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2c74:	80 91 54 08 	lds	r24, 0x0854
    2c78:	8f 93       	push	r24
    2c7a:	80 91 53 08 	lds	r24, 0x0853
    2c7e:	8f 93       	push	r24
    2c80:	8e e6       	ldi	r24, 0x6E	; 110
    2c82:	93 e0       	ldi	r25, 0x03	; 3
    2c84:	9f 93       	push	r25
    2c86:	8f 93       	push	r24
    2c88:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    2c8c:	ce e8       	ldi	r28, 0x8E	; 142
    2c8e:	d7 e0       	ldi	r29, 0x07	; 7
    2c90:	ed b7       	in	r30, 0x3d	; 61
    2c92:	fe b7       	in	r31, 0x3e	; 62
    2c94:	74 96       	adiw	r30, 0x14	; 20
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	fe bf       	out	0x3e, r31	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	ed bf       	out	0x3d, r30	; 61
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2ca4:	8e e7       	ldi	r24, 0x7E	; 126
    2ca6:	68 2e       	mov	r6, r24
    2ca8:	83 e0       	ldi	r24, 0x03	; 3
    2caa:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2cac:	97 e5       	ldi	r25, 0x57	; 87
    2cae:	89 2e       	mov	r8, r25
    2cb0:	93 e0       	ldi	r25, 0x03	; 3
    2cb2:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2cb4:	24 e6       	ldi	r18, 0x64	; 100
    2cb6:	a2 2e       	mov	r10, r18
    2cb8:	23 e0       	ldi	r18, 0x03	; 3
    2cba:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2cbc:	3e e6       	ldi	r19, 0x6E	; 110
    2cbe:	c3 2e       	mov	r12, r19
    2cc0:	33 e0       	ldi	r19, 0x03	; 3
    2cc2:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2cc4:	ea 80       	ldd	r14, Y+2	; 0x02
    2cc6:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2cc8:	ff 92       	push	r15
    2cca:	ef 92       	push	r14
    2ccc:	1f 93       	push	r17
    2cce:	0f 93       	push	r16
    2cd0:	7f 92       	push	r7
    2cd2:	6f 92       	push	r6
    2cd4:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
        printf( "canary = %x ",*stkc );
    2cd8:	f7 01       	movw	r30, r14
    2cda:	80 81       	ld	r24, Z
    2cdc:	1f 92       	push	r1
    2cde:	8f 93       	push	r24
    2ce0:	9f 92       	push	r9
    2ce2:	8f 92       	push	r8
    2ce4:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	8f 93       	push	r24
    2cec:	88 81       	ld	r24, Y
    2cee:	8f 93       	push	r24
    2cf0:	bf 92       	push	r11
    2cf2:	af 92       	push	r10
    2cf4:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	df 92       	push	r13
    2cfe:	cf 92       	push	r12
    2d00:	0e 94 b6 2b 	call	0x576c	; 0x576c <printf>
    2d04:	0f 5f       	subi	r16, 0xFF	; 255
    2d06:	1f 4f       	sbci	r17, 0xFF	; 255
    2d08:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2d0a:	ed b7       	in	r30, 0x3d	; 61
    2d0c:	fe b7       	in	r31, 0x3e	; 62
    2d0e:	72 96       	adiw	r30, 0x12	; 18
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	fe bf       	out	0x3e, r31	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	ed bf       	out	0x3d, r30	; 61
    2d1a:	04 30       	cpi	r16, 0x04	; 4
    2d1c:	11 05       	cpc	r17, r1
    2d1e:	91 f6       	brne	.-92     	; 0x2cc4 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	1f 91       	pop	r17
    2d26:	0f 91       	pop	r16
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	7f 90       	pop	r7
    2d3a:	6f 90       	pop	r6
    2d3c:	08 95       	ret

00002d3e <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2d42:	e0 91 53 08 	lds	r30, 0x0853
    2d46:	f0 91 54 08 	lds	r31, 0x0854
    2d4a:	c2 81       	ldd	r28, Z+2	; 0x02
    2d4c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2d4e:	88 81       	ld	r24, Y
    2d50:	85 35       	cpi	r24, 0x55	; 85
    2d52:	39 f0       	breq	.+14     	; 0x2d62 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2d54:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2d5e:	85 e5       	ldi	r24, 0x55	; 85
    2d60:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2d62:	e0 91 53 08 	lds	r30, 0x0853
    2d66:	f0 91 54 08 	lds	r31, 0x0854
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	81 15       	cp	r24, r1
    2d70:	92 44       	sbci	r25, 0x42	; 66
    2d72:	38 f0       	brcs	.+14     	; 0x2d82 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2d74:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2d78:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2d7e:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <nrk_error_add>




#endif
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2d88:	2b e2       	ldi	r18, 0x2B	; 43
    2d8a:	82 02       	muls	r24, r18
    2d8c:	c0 01       	movw	r24, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	fc 01       	movw	r30, r24
    2d92:	e2 57       	subi	r30, 0x72	; 114
    2d94:	f8 4f       	sbci	r31, 0xF8	; 248
    2d96:	a2 81       	ldd	r26, Z+2	; 0x02
    2d98:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2d9a:	8c 91       	ld	r24, X
    2d9c:	85 35       	cpi	r24, 0x55	; 85
    2d9e:	19 f0       	breq	.+6      	; 0x2da6 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    2da0:	85 e5       	ldi	r24, 0x55	; 85
    2da2:	8c 93       	st	X, r24
    2da4:	08 c0       	rjmp	.+16     	; 0x2db6 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	81 15       	cp	r24, r1
    2dac:	92 44       	sbci	r25, 0x42	; 66
    2dae:	28 f0       	brcs	.+10     	; 0x2dba <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2db0:	82 e1       	ldi	r24, 0x12	; 18
    2db2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
        return NRK_ERROR;
    2db6:	8f ef       	ldi	r24, 0xFF	; 255
    2db8:	08 95       	ret
    }
#endif
    return NRK_OK;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
}
    2dbc:	08 95       	ret

00002dbe <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2dc2:	40 91 71 05 	lds	r20, 0x0571
    2dc6:	50 91 72 05 	lds	r21, 0x0572
    2dca:	60 91 73 05 	lds	r22, 0x0573
    2dce:	70 91 74 05 	lds	r23, 0x0574
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	8a 01       	movw	r16, r20
    2dd8:	9b 01       	movw	r18, r22
    2dda:	08 2e       	mov	r0, r24
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <nrk_signal_create+0x28>
    2dde:	36 95       	lsr	r19
    2de0:	27 95       	ror	r18
    2de2:	17 95       	ror	r17
    2de4:	07 95       	ror	r16
    2de6:	0a 94       	dec	r0
    2de8:	d2 f7       	brpl	.-12     	; 0x2dde <nrk_signal_create+0x20>
    2dea:	00 fd       	sbrc	r16, 0
    2dec:	19 c0       	rjmp	.+50     	; 0x2e20 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2dee:	01 e0       	ldi	r16, 0x01	; 1
    2df0:	10 e0       	ldi	r17, 0x00	; 0
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	08 2e       	mov	r0, r24
    2df8:	04 c0       	rjmp	.+8      	; 0x2e02 <nrk_signal_create+0x44>
    2dfa:	00 0f       	add	r16, r16
    2dfc:	11 1f       	adc	r17, r17
    2dfe:	22 1f       	adc	r18, r18
    2e00:	33 1f       	adc	r19, r19
    2e02:	0a 94       	dec	r0
    2e04:	d2 f7       	brpl	.-12     	; 0x2dfa <nrk_signal_create+0x3c>
    2e06:	40 2b       	or	r20, r16
    2e08:	51 2b       	or	r21, r17
    2e0a:	62 2b       	or	r22, r18
    2e0c:	73 2b       	or	r23, r19
    2e0e:	40 93 71 05 	sts	0x0571, r20
    2e12:	50 93 72 05 	sts	0x0572, r21
    2e16:	60 93 73 05 	sts	0x0573, r22
    2e1a:	70 93 74 05 	sts	0x0574, r23
			return i;
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <nrk_signal_create+0x6c>
    2e20:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2e22:	80 32       	cpi	r24, 0x20	; 32
    2e24:	91 05       	cpc	r25, r1
    2e26:	b9 f6       	brne	.-82     	; 0x2dd6 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2e28:	8f ef       	ldi	r24, 0xFF	; 255


}
    2e2a:	1f 91       	pop	r17
    2e2c:	0f 91       	pop	r16
    2e2e:	08 95       	ret

00002e30 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2e30:	e0 91 53 08 	lds	r30, 0x0853
    2e34:	f0 91 54 08 	lds	r31, 0x0854
    2e38:	65 85       	ldd	r22, Z+13	; 0x0d
    2e3a:	76 85       	ldd	r23, Z+14	; 0x0e
    2e3c:	87 85       	ldd	r24, Z+15	; 0x0f
    2e3e:	90 89       	ldd	r25, Z+16	; 0x10
}
    2e40:	08 95       	ret

00002e42 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2e52:	c1 2c       	mov	r12, r1
    2e54:	d1 2c       	mov	r13, r1
    2e56:	76 01       	movw	r14, r12
    2e58:	c3 94       	inc	r12
    2e5a:	08 2e       	mov	r0, r24
    2e5c:	04 c0       	rjmp	.+8      	; 0x2e66 <nrk_signal_delete+0x24>
    2e5e:	cc 0c       	add	r12, r12
    2e60:	dd 1c       	adc	r13, r13
    2e62:	ee 1c       	adc	r14, r14
    2e64:	ff 1c       	adc	r15, r15
    2e66:	0a 94       	dec	r0
    2e68:	d2 f7       	brpl	.-12     	; 0x2e5e <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2e6a:	40 91 71 05 	lds	r20, 0x0571
    2e6e:	50 91 72 05 	lds	r21, 0x0572
    2e72:	60 91 73 05 	lds	r22, 0x0573
    2e76:	70 91 74 05 	lds	r23, 0x0574
    2e7a:	4c 21       	and	r20, r12
    2e7c:	5d 21       	and	r21, r13
    2e7e:	6e 21       	and	r22, r14
    2e80:	7f 21       	and	r23, r15
    2e82:	45 2b       	or	r20, r21
    2e84:	46 2b       	or	r20, r22
    2e86:	47 2b       	or	r20, r23
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <nrk_signal_delete+0x4a>
    2e8a:	60 c0       	rjmp	.+192    	; 0x2f4c <nrk_signal_delete+0x10a>
    2e8c:	08 2f       	mov	r16, r24

	nrk_int_disable();
    2e8e:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    2e92:	e7 e9       	ldi	r30, 0x97	; 151
    2e94:	f7 e0       	ldi	r31, 0x07	; 7
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e96:	b7 01       	movw	r22, r14
    2e98:	a6 01       	movw	r20, r12
    2e9a:	40 95       	com	r20
    2e9c:	50 95       	com	r21
    2e9e:	60 95       	com	r22
    2ea0:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2ea2:	13 e0       	ldi	r17, 0x03	; 3
    2ea4:	df 01       	movw	r26, r30
    2ea6:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2ea8:	8c 91       	ld	r24, X
    2eaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2eac:	39 f1       	breq	.+78     	; 0x2efc <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2eae:	84 81       	ldd	r24, Z+4	; 0x04
    2eb0:	95 81       	ldd	r25, Z+5	; 0x05
    2eb2:	a6 81       	ldd	r26, Z+6	; 0x06
    2eb4:	b7 81       	ldd	r27, Z+7	; 0x07
    2eb6:	8c 15       	cp	r24, r12
    2eb8:	9d 05       	cpc	r25, r13
    2eba:	ae 05       	cpc	r26, r14
    2ebc:	bf 05       	cpc	r27, r15
    2ebe:	51 f4       	brne	.+20     	; 0x2ed4 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2ec0:	10 86       	std	Z+8, r1	; 0x08
    2ec2:	11 86       	std	Z+9, r1	; 0x09
    2ec4:	12 86       	std	Z+10, r1	; 0x0a
    2ec6:	13 86       	std	Z+11, r1	; 0x0b
    2ec8:	9f 01       	movw	r18, r30
    2eca:	22 50       	subi	r18, 0x02	; 2
    2ecc:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    2ece:	e9 01       	movw	r28, r18
    2ed0:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2ed2:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2ed4:	84 23       	and	r24, r20
    2ed6:	95 23       	and	r25, r21
    2ed8:	a6 23       	and	r26, r22
    2eda:	b7 23       	and	r27, r23
    2edc:	84 83       	std	Z+4, r24	; 0x04
    2ede:	95 83       	std	Z+5, r25	; 0x05
    2ee0:	a6 83       	std	Z+6, r26	; 0x06
    2ee2:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2ee4:	80 85       	ldd	r24, Z+8	; 0x08
    2ee6:	91 85       	ldd	r25, Z+9	; 0x09
    2ee8:	a2 85       	ldd	r26, Z+10	; 0x0a
    2eea:	b3 85       	ldd	r27, Z+11	; 0x0b
    2eec:	84 23       	and	r24, r20
    2eee:	95 23       	and	r25, r21
    2ef0:	a6 23       	and	r26, r22
    2ef2:	b7 23       	and	r27, r23
    2ef4:	80 87       	std	Z+8, r24	; 0x08
    2ef6:	91 87       	std	Z+9, r25	; 0x09
    2ef8:	a2 87       	std	Z+10, r26	; 0x0a
    2efa:	b3 87       	std	Z+11, r27	; 0x0b
    2efc:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2efe:	d8 e0       	ldi	r29, 0x08	; 8
    2f00:	e3 34       	cpi	r30, 0x43	; 67
    2f02:	fd 07       	cpc	r31, r29
    2f04:	79 f6       	brne	.-98     	; 0x2ea4 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2f06:	8e ef       	ldi	r24, 0xFE	; 254
    2f08:	9f ef       	ldi	r25, 0xFF	; 255
    2f0a:	af ef       	ldi	r26, 0xFF	; 255
    2f0c:	bf ef       	ldi	r27, 0xFF	; 255
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <nrk_signal_delete+0xd6>
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	aa 1f       	adc	r26, r26
    2f16:	bb 1f       	adc	r27, r27
    2f18:	0a 95       	dec	r16
    2f1a:	d2 f7       	brpl	.-12     	; 0x2f10 <nrk_signal_delete+0xce>
    2f1c:	40 91 71 05 	lds	r20, 0x0571
    2f20:	50 91 72 05 	lds	r21, 0x0572
    2f24:	60 91 73 05 	lds	r22, 0x0573
    2f28:	70 91 74 05 	lds	r23, 0x0574
    2f2c:	84 23       	and	r24, r20
    2f2e:	95 23       	and	r25, r21
    2f30:	a6 23       	and	r26, r22
    2f32:	b7 23       	and	r27, r23
    2f34:	80 93 71 05 	sts	0x0571, r24
    2f38:	90 93 72 05 	sts	0x0572, r25
    2f3c:	a0 93 73 05 	sts	0x0573, r26
    2f40:	b0 93 74 05 	sts	0x0574, r27
	nrk_int_enable();
    2f44:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>

	return NRK_OK;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	01 c0       	rjmp	.+2      	; 0x2f4e <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2f4c:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	df 90       	pop	r13
    2f5c:	cf 90       	pop	r12
    2f5e:	08 95       	ret

00002f60 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2f64:	41 e0       	ldi	r20, 0x01	; 1
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	8a 01       	movw	r16, r20
    2f6e:	9b 01       	movw	r18, r22
    2f70:	04 c0       	rjmp	.+8      	; 0x2f7a <nrk_signal_unregister+0x1a>
    2f72:	00 0f       	add	r16, r16
    2f74:	11 1f       	adc	r17, r17
    2f76:	22 1f       	adc	r18, r18
    2f78:	33 1f       	adc	r19, r19
    2f7a:	8a 95       	dec	r24
    2f7c:	d2 f7       	brpl	.-12     	; 0x2f72 <nrk_signal_unregister+0x12>
    2f7e:	d9 01       	movw	r26, r18
    2f80:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2f82:	e0 91 53 08 	lds	r30, 0x0853
    2f86:	f0 91 54 08 	lds	r31, 0x0854
    2f8a:	45 85       	ldd	r20, Z+13	; 0x0d
    2f8c:	56 85       	ldd	r21, Z+14	; 0x0e
    2f8e:	67 85       	ldd	r22, Z+15	; 0x0f
    2f90:	70 89       	ldd	r23, Z+16	; 0x10
    2f92:	04 23       	and	r16, r20
    2f94:	15 23       	and	r17, r21
    2f96:	26 23       	and	r18, r22
    2f98:	37 23       	and	r19, r23
    2f9a:	01 2b       	or	r16, r17
    2f9c:	02 2b       	or	r16, r18
    2f9e:	03 2b       	or	r16, r19
    2fa0:	d1 f0       	breq	.+52     	; 0x2fd6 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2fa2:	80 95       	com	r24
    2fa4:	90 95       	com	r25
    2fa6:	a0 95       	com	r26
    2fa8:	b0 95       	com	r27
    2faa:	48 23       	and	r20, r24
    2fac:	59 23       	and	r21, r25
    2fae:	6a 23       	and	r22, r26
    2fb0:	7b 23       	and	r23, r27
    2fb2:	45 87       	std	Z+13, r20	; 0x0d
    2fb4:	56 87       	std	Z+14, r21	; 0x0e
    2fb6:	67 87       	std	Z+15, r22	; 0x0f
    2fb8:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2fba:	41 89       	ldd	r20, Z+17	; 0x11
    2fbc:	52 89       	ldd	r21, Z+18	; 0x12
    2fbe:	63 89       	ldd	r22, Z+19	; 0x13
    2fc0:	74 89       	ldd	r23, Z+20	; 0x14
    2fc2:	84 23       	and	r24, r20
    2fc4:	95 23       	and	r25, r21
    2fc6:	a6 23       	and	r26, r22
    2fc8:	b7 23       	and	r27, r23
    2fca:	81 8b       	std	Z+17, r24	; 0x11
    2fcc:	92 8b       	std	Z+18, r25	; 0x12
    2fce:	a3 8b       	std	Z+19, r26	; 0x13
    2fd0:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	01 c0       	rjmp	.+2      	; 0x2fd8 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2fd6:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	08 95       	ret

00002fde <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    2fde:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2fe0:	40 91 71 05 	lds	r20, 0x0571
    2fe4:	50 91 72 05 	lds	r21, 0x0572
    2fe8:	60 91 73 05 	lds	r22, 0x0573
    2fec:	70 91 74 05 	lds	r23, 0x0574
    2ff0:	08 2e       	mov	r0, r24
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <nrk_signal_register+0x1e>
    2ff4:	76 95       	lsr	r23
    2ff6:	67 95       	ror	r22
    2ff8:	57 95       	ror	r21
    2ffa:	47 95       	ror	r20
    2ffc:	0a 94       	dec	r0
    2ffe:	d2 f7       	brpl	.-12     	; 0x2ff4 <nrk_signal_register+0x16>
    3000:	40 ff       	sbrs	r20, 0
    3002:	1d c0       	rjmp	.+58     	; 0x303e <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3004:	e0 91 53 08 	lds	r30, 0x0853
    3008:	f0 91 54 08 	lds	r31, 0x0854
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	a0 e0       	ldi	r26, 0x00	; 0
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	04 c0       	rjmp	.+8      	; 0x301e <nrk_signal_register+0x40>
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	aa 1f       	adc	r26, r26
    301c:	bb 1f       	adc	r27, r27
    301e:	2a 95       	dec	r18
    3020:	d2 f7       	brpl	.-12     	; 0x3016 <nrk_signal_register+0x38>
    3022:	45 85       	ldd	r20, Z+13	; 0x0d
    3024:	56 85       	ldd	r21, Z+14	; 0x0e
    3026:	67 85       	ldd	r22, Z+15	; 0x0f
    3028:	70 89       	ldd	r23, Z+16	; 0x10
    302a:	84 2b       	or	r24, r20
    302c:	95 2b       	or	r25, r21
    302e:	a6 2b       	or	r26, r22
    3030:	b7 2b       	or	r27, r23
    3032:	85 87       	std	Z+13, r24	; 0x0d
    3034:	96 87       	std	Z+14, r25	; 0x0e
    3036:	a7 87       	std	Z+15, r26	; 0x0f
    3038:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	08 95       	ret
	}
            
	return NRK_ERROR;
    303e:	8f ef       	ldi	r24, 0xFF	; 255
}
    3040:	08 95       	ret

00003042 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3042:	cf 92       	push	r12
    3044:	df 92       	push	r13
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    304c:	c1 2c       	mov	r12, r1
    304e:	d1 2c       	mov	r13, r1
    3050:	76 01       	movw	r14, r12
    3052:	c3 94       	inc	r12
    3054:	04 c0       	rjmp	.+8      	; 0x305e <nrk_event_signal+0x1c>
    3056:	cc 0c       	add	r12, r12
    3058:	dd 1c       	adc	r13, r13
    305a:	ee 1c       	adc	r14, r14
    305c:	ff 1c       	adc	r15, r15
    305e:	8a 95       	dec	r24
    3060:	d2 f7       	brpl	.-12     	; 0x3056 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3062:	80 91 71 05 	lds	r24, 0x0571
    3066:	90 91 72 05 	lds	r25, 0x0572
    306a:	a0 91 73 05 	lds	r26, 0x0573
    306e:	b0 91 74 05 	lds	r27, 0x0574
    3072:	8c 21       	and	r24, r12
    3074:	9d 21       	and	r25, r13
    3076:	ae 21       	and	r26, r14
    3078:	bf 21       	and	r27, r15
    307a:	89 2b       	or	r24, r25
    307c:	8a 2b       	or	r24, r26
    307e:	8b 2b       	or	r24, r27
    3080:	11 f4       	brne	.+4      	; 0x3086 <nrk_event_signal+0x44>
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	44 c0       	rjmp	.+136    	; 0x310e <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3086:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    308a:	e5 e9       	ldi	r30, 0x95	; 149
    308c:	f7 e0       	ldi	r31, 0x07	; 7
    308e:	a7 e9       	ldi	r26, 0x97	; 151
    3090:	b7 e0       	ldi	r27, 0x07	; 7

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3092:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3094:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3096:	90 81       	ld	r25, Z
    3098:	91 30       	cpi	r25, 0x01	; 1
    309a:	b9 f4       	brne	.+46     	; 0x30ca <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    309c:	42 85       	ldd	r20, Z+10	; 0x0a
    309e:	53 85       	ldd	r21, Z+11	; 0x0b
    30a0:	64 85       	ldd	r22, Z+12	; 0x0c
    30a2:	75 85       	ldd	r23, Z+13	; 0x0d
    30a4:	4c 21       	and	r20, r12
    30a6:	5d 21       	and	r21, r13
    30a8:	6e 21       	and	r22, r14
    30aa:	7f 21       	and	r23, r15
    30ac:	45 2b       	or	r20, r21
    30ae:	46 2b       	or	r20, r22
    30b0:	47 2b       	or	r20, r23
    30b2:	59 f0       	breq	.+22     	; 0x30ca <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    30b4:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    30b6:	16 86       	std	Z+14, r1	; 0x0e
    30b8:	17 86       	std	Z+15, r1	; 0x0f
    30ba:	10 8a       	std	Z+16, r1	; 0x10
    30bc:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    30be:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    30c0:	c2 86       	std	Z+10, r12	; 0x0a
    30c2:	d3 86       	std	Z+11, r13	; 0x0b
    30c4:	e4 86       	std	Z+12, r14	; 0x0c
    30c6:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    30c8:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    30ca:	90 81       	ld	r25, Z
    30cc:	92 30       	cpi	r25, 0x02	; 2
    30ce:	a1 f4       	brne	.+40     	; 0x30f8 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    30d0:	42 85       	ldd	r20, Z+10	; 0x0a
    30d2:	53 85       	ldd	r21, Z+11	; 0x0b
    30d4:	64 85       	ldd	r22, Z+12	; 0x0c
    30d6:	75 85       	ldd	r23, Z+13	; 0x0d
    30d8:	4c 15       	cp	r20, r12
    30da:	5d 05       	cpc	r21, r13
    30dc:	6e 05       	cpc	r22, r14
    30de:	7f 05       	cpc	r23, r15
    30e0:	59 f4       	brne	.+22     	; 0x30f8 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    30e2:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    30e4:	16 86       	std	Z+14, r1	; 0x0e
    30e6:	17 86       	std	Z+15, r1	; 0x0f
    30e8:	10 8a       	std	Z+16, r1	; 0x10
    30ea:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    30ec:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    30ee:	12 86       	std	Z+10, r1	; 0x0a
    30f0:	13 86       	std	Z+11, r1	; 0x0b
    30f2:	14 86       	std	Z+12, r1	; 0x0c
    30f4:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    30f6:	c1 e0       	ldi	r28, 0x01	; 1
    30f8:	bb 96       	adiw	r30, 0x2b	; 43
    30fa:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    30fc:	98 e0       	ldi	r25, 0x08	; 8
    30fe:	e1 34       	cpi	r30, 0x41	; 65
    3100:	f9 07       	cpc	r31, r25
    3102:	49 f6       	brne	.-110    	; 0x3096 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3104:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
	if(event_occured)
    3108:	c1 11       	cpse	r28, r1
    310a:	05 c0       	rjmp	.+10     	; 0x3116 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    310c:	82 e0       	ldi	r24, 0x02	; 2
    310e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_nrk_errno_set>
	return NRK_ERROR;
    3112:	8f ef       	ldi	r24, 0xFF	; 255
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    3116:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3118:	cf 91       	pop	r28
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	08 95       	ret

00003124 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3128:	e0 91 53 08 	lds	r30, 0x0853
    312c:	f0 91 54 08 	lds	r31, 0x0854
    3130:	05 85       	ldd	r16, Z+13	; 0x0d
    3132:	16 85       	ldd	r17, Z+14	; 0x0e
    3134:	27 85       	ldd	r18, Z+15	; 0x0f
    3136:	30 89       	ldd	r19, Z+16	; 0x10
    3138:	06 23       	and	r16, r22
    313a:	17 23       	and	r17, r23
    313c:	28 23       	and	r18, r24
    313e:	39 23       	and	r19, r25
    3140:	01 15       	cp	r16, r1
    3142:	11 05       	cpc	r17, r1
    3144:	21 05       	cpc	r18, r1
    3146:	31 05       	cpc	r19, r1
    3148:	11 f1       	breq	.+68     	; 0x318e <nrk_event_wait+0x6a>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    314e:	81 8b       	std	Z+17, r24	; 0x11
    3150:	92 8b       	std	Z+18, r25	; 0x12
    3152:	a3 8b       	std	Z+19, r26	; 0x13
    3154:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3156:	21 e0       	ldi	r18, 0x01	; 1
    3158:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    315a:	00 90 43 08 	lds	r0, 0x0843
    315e:	04 c0       	rjmp	.+8      	; 0x3168 <nrk_event_wait+0x44>
    3160:	b6 95       	lsr	r27
    3162:	a7 95       	ror	r26
    3164:	97 95       	ror	r25
    3166:	87 95       	ror	r24
    3168:	0a 94       	dec	r0
    316a:	d2 f7       	brpl	.-12     	; 0x3160 <nrk_event_wait+0x3c>
    316c:	80 ff       	sbrs	r24, 0
    316e:	03 c0       	rjmp	.+6      	; 0x3176 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3170:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <nrk_wait_until_nw>
    3174:	04 c0       	rjmp	.+8      	; 0x317e <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0e 94 3d 1c 	call	0x387a	; 0x387a <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    317e:	e0 91 53 08 	lds	r30, 0x0853
    3182:	f0 91 54 08 	lds	r31, 0x0854
    3186:	01 89       	ldd	r16, Z+17	; 0x11
    3188:	12 89       	ldd	r17, Z+18	; 0x12
    318a:	23 89       	ldd	r18, Z+19	; 0x13
    318c:	34 89       	ldd	r19, Z+20	; 0x14
}
    318e:	c9 01       	movw	r24, r18
    3190:	b8 01       	movw	r22, r16
    3192:	1f 91       	pop	r17
    3194:	0f 91       	pop	r16
    3196:	08 95       	ret

00003198 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    3198:	90 91 52 08 	lds	r25, 0x0852
    319c:	91 11       	cpse	r25, r1
    319e:	1d c0       	rjmp	.+58     	; 0x31da <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    31a0:	90 91 3c 08 	lds	r25, 0x083C
    31a4:	9f 3f       	cpi	r25, 0xFF	; 255
    31a6:	31 f0       	breq	.+12     	; 0x31b4 <nrk_sem_create+0x1c>
    31a8:	90 91 3f 08 	lds	r25, 0x083F
    31ac:	9f 3f       	cpi	r25, 0xFF	; 255
    31ae:	21 f0       	breq	.+8      	; 0x31b8 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    31b0:	e2 e0       	ldi	r30, 0x02	; 2
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    31b4:	e0 e0       	ldi	r30, 0x00	; 0
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    31b8:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	9f 01       	movw	r18, r30
    31be:	22 0f       	add	r18, r18
    31c0:	33 1f       	adc	r19, r19
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	e4 5c       	subi	r30, 0xC4	; 196
    31c8:	f7 4f       	sbci	r31, 0xF7	; 247
    31ca:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    31cc:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    31ce:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	80 93 52 08 	sts	0x0852, r24
	return	&nrk_sem_list[i];
    31d6:	cf 01       	movw	r24, r30
    31d8:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    31de:	08 95       	ret

000031e0 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    31e0:	28 e0       	ldi	r18, 0x08	; 8
    31e2:	8c 33       	cpi	r24, 0x3C	; 60
    31e4:	92 07       	cpc	r25, r18
    31e6:	29 f0       	breq	.+10     	; 0x31f2 <nrk_get_resource_index+0x12>
    31e8:	8f 53       	subi	r24, 0x3F	; 63
    31ea:	98 40       	sbci	r25, 0x08	; 8
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	08 95       	ret
    31f2:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    31f4:	08 95       	ret
	return NRK_ERROR;
    31f6:	8f ef       	ldi	r24, 0xFF	; 255
}
    31f8:	08 95       	ret

000031fa <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    31fa:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    31fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3200:	11 f4       	brne	.+4      	; 0x3206 <nrk_sem_query+0xc>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	02 c0       	rjmp	.+4      	; 0x320a <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3206:	82 30       	cpi	r24, 0x02	; 2
    3208:	21 f4       	brne	.+8      	; 0x3212 <nrk_sem_query+0x18>
    320a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_nrk_errno_set>
    320e:	8f ef       	ldi	r24, 0xFF	; 255
    3210:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3212:	99 27       	eor	r25, r25
    3214:	87 fd       	sbrc	r24, 7
    3216:	90 95       	com	r25
    3218:	fc 01       	movw	r30, r24
    321a:	ee 0f       	add	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	8e 0f       	add	r24, r30
    3220:	9f 1f       	adc	r25, r31
    3222:	fc 01       	movw	r30, r24
    3224:	e4 5c       	subi	r30, 0xC4	; 196
    3226:	f7 4f       	sbci	r31, 0xF7	; 247
    3228:	82 81       	ldd	r24, Z+2	; 0x02
}
    322a:	08 95       	ret

0000322c <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	1f 92       	push	r1
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    323e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3242:	8f 3f       	cpi	r24, 0xFF	; 255
    3244:	11 f4       	brne	.+4      	; 0x324a <nrk_sem_pend+0x1e>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	02 c0       	rjmp	.+4      	; 0x324e <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    324a:	82 30       	cpi	r24, 0x02	; 2
    324c:	21 f4       	brne	.+8      	; 0x3256 <nrk_sem_pend+0x2a>
    324e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_nrk_errno_set>
    3252:	8f ef       	ldi	r24, 0xFF	; 255
    3254:	41 c0       	rjmp	.+130    	; 0x32d8 <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    3256:	89 83       	std	Y+1, r24	; 0x01
    3258:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	e8 2e       	mov	r14, r24
    3260:	ff 24       	eor	r15, r15
    3262:	e7 fc       	sbrc	r14, 7
    3264:	f0 94       	com	r15
    3266:	87 01       	movw	r16, r14
    3268:	00 0f       	add	r16, r16
    326a:	11 1f       	adc	r17, r17
    326c:	f8 01       	movw	r30, r16
    326e:	ee 0d       	add	r30, r14
    3270:	ff 1d       	adc	r31, r15
    3272:	e4 5c       	subi	r30, 0xC4	; 196
    3274:	f7 4f       	sbci	r31, 0xF7	; 247
    3276:	92 81       	ldd	r25, Z+2	; 0x02
    3278:	91 11       	cpse	r25, r1
    327a:	16 c0       	rjmp	.+44     	; 0x32a8 <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    327c:	e0 91 53 08 	lds	r30, 0x0853
    3280:	f0 91 54 08 	lds	r31, 0x0854
    3284:	97 81       	ldd	r25, Z+7	; 0x07
    3286:	92 60       	ori	r25, 0x02	; 2
    3288:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    328a:	99 27       	eor	r25, r25
    328c:	87 fd       	sbrc	r24, 7
    328e:	90 95       	com	r25
    3290:	a9 2f       	mov	r26, r25
    3292:	b9 2f       	mov	r27, r25
    3294:	81 8b       	std	Z+17, r24	; 0x11
    3296:	92 8b       	std	Z+18, r25	; 0x12
    3298:	a3 8b       	std	Z+19, r26	; 0x13
    329a:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    329c:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
		nrk_wait_until_ticks(0);
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 3d 1c 	call	0x387a	; 0x387a <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    32a8:	0e 0d       	add	r16, r14
    32aa:	1f 1d       	adc	r17, r15
    32ac:	d8 01       	movw	r26, r16
    32ae:	a4 5c       	subi	r26, 0xC4	; 196
    32b0:	b7 4f       	sbci	r27, 0xF7	; 247
    32b2:	12 96       	adiw	r26, 0x02	; 2
    32b4:	8c 91       	ld	r24, X
    32b6:	12 97       	sbiw	r26, 0x02	; 2
    32b8:	81 50       	subi	r24, 0x01	; 1
    32ba:	12 96       	adiw	r26, 0x02	; 2
    32bc:	8c 93       	st	X, r24
    32be:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    32c0:	e0 91 53 08 	lds	r30, 0x0853
    32c4:	f0 91 54 08 	lds	r31, 0x0854
    32c8:	11 96       	adiw	r26, 0x01	; 1
    32ca:	8c 91       	ld	r24, X
    32cc:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    32d2:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>

	return NRK_OK;
    32d6:	81 e0       	ldi	r24, 0x01	; 1
}
    32d8:	0f 90       	pop	r0
    32da:	df 91       	pop	r29
    32dc:	cf 91       	pop	r28
    32de:	1f 91       	pop	r17
    32e0:	0f 91       	pop	r16
    32e2:	ff 90       	pop	r15
    32e4:	ef 90       	pop	r14
    32e6:	08 95       	ret

000032e8 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	1f 92       	push	r1
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    32f6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    32fa:	8f 3f       	cpi	r24, 0xFF	; 255
    32fc:	11 f4       	brne	.+4      	; 0x3302 <nrk_sem_post+0x1a>
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3302:	82 30       	cpi	r24, 0x02	; 2
    3304:	21 f4       	brne	.+8      	; 0x330e <nrk_sem_post+0x26>
    3306:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_nrk_errno_set>
    330a:	8f ef       	ldi	r24, 0xFF	; 255
    330c:	44 c0       	rjmp	.+136    	; 0x3396 <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    330e:	48 2f       	mov	r20, r24
    3310:	55 27       	eor	r21, r21
    3312:	47 fd       	sbrc	r20, 7
    3314:	50 95       	com	r21
    3316:	9a 01       	movw	r18, r20
    3318:	22 0f       	add	r18, r18
    331a:	33 1f       	adc	r19, r19
    331c:	24 0f       	add	r18, r20
    331e:	35 1f       	adc	r19, r21
    3320:	89 01       	movw	r16, r18
    3322:	04 5c       	subi	r16, 0xC4	; 196
    3324:	17 4f       	sbci	r17, 0xF7	; 247
    3326:	f8 01       	movw	r30, r16
    3328:	22 81       	ldd	r18, Z+2	; 0x02
    332a:	90 81       	ld	r25, Z
    332c:	29 17       	cp	r18, r25
    332e:	94 f5       	brge	.+100    	; 0x3394 <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>

		nrk_sem_list[id].value++;
    3336:	f8 01       	movw	r30, r16
    3338:	92 81       	ldd	r25, Z+2	; 0x02
    333a:	9f 5f       	subi	r25, 0xFF	; 255
    333c:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    333e:	e0 91 53 08 	lds	r30, 0x0853
    3342:	f0 91 54 08 	lds	r31, 0x0854
    3346:	14 82       	std	Z+4, r1	; 0x04
    3348:	e5 e9       	ldi	r30, 0x95	; 149
    334a:	f7 e0       	ldi	r31, 0x07	; 7

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	99 27       	eor	r25, r25
    3350:	87 fd       	sbrc	r24, 7
    3352:	90 95       	com	r25
    3354:	a9 2f       	mov	r26, r25
    3356:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3358:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    335a:	30 81       	ld	r19, Z
    335c:	32 30       	cpi	r19, 0x02	; 2
    335e:	99 f4       	brne	.+38     	; 0x3386 <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3360:	42 85       	ldd	r20, Z+10	; 0x0a
    3362:	53 85       	ldd	r21, Z+11	; 0x0b
    3364:	64 85       	ldd	r22, Z+12	; 0x0c
    3366:	75 85       	ldd	r23, Z+13	; 0x0d
    3368:	48 17       	cp	r20, r24
    336a:	59 07       	cpc	r21, r25
    336c:	6a 07       	cpc	r22, r26
    336e:	7b 07       	cpc	r23, r27
    3370:	51 f4       	brne	.+20     	; 0x3386 <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3372:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3374:	16 86       	std	Z+14, r1	; 0x0e
    3376:	17 86       	std	Z+15, r1	; 0x0f
    3378:	10 8a       	std	Z+16, r1	; 0x10
    337a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    337c:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    337e:	12 86       	std	Z+10, r1	; 0x0a
    3380:	13 86       	std	Z+11, r1	; 0x0b
    3382:	14 86       	std	Z+12, r1	; 0x0c
    3384:	15 86       	std	Z+13, r1	; 0x0d
    3386:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3388:	38 e0       	ldi	r19, 0x08	; 8
    338a:	e1 34       	cpi	r30, 0x41	; 65
    338c:	f3 07       	cpc	r31, r19
    338e:	29 f7       	brne	.-54     	; 0x335a <nrk_sem_post+0x72>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    3390:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
	}
		
return NRK_OK;
    3394:	81 e0       	ldi	r24, 0x01	; 1
}
    3396:	0f 90       	pop	r0
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	08 95       	ret

000033a2 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    33a2:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    33a6:	8f 3f       	cpi	r24, 0xFF	; 255
    33a8:	11 f4       	brne	.+4      	; 0x33ae <nrk_sem_delete+0xc>
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    33ae:	82 30       	cpi	r24, 0x02	; 2
    33b0:	21 f4       	brne	.+8      	; 0x33ba <nrk_sem_delete+0x18>
    33b2:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_nrk_errno_set>
    33b6:	8f ef       	ldi	r24, 0xFF	; 255
    33b8:	08 95       	ret

	nrk_sem_list[id].count=-1;
    33ba:	99 27       	eor	r25, r25
    33bc:	87 fd       	sbrc	r24, 7
    33be:	90 95       	com	r25
    33c0:	fc 01       	movw	r30, r24
    33c2:	ee 0f       	add	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	8e 0f       	add	r24, r30
    33c8:	9f 1f       	adc	r25, r31
    33ca:	fc 01       	movw	r30, r24
    33cc:	e4 5c       	subi	r30, 0xC4	; 196
    33ce:	f7 4f       	sbci	r31, 0xF7	; 247
    33d0:	8f ef       	ldi	r24, 0xFF	; 255
    33d2:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    33d4:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    33d6:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    33d8:	80 91 52 08 	lds	r24, 0x0852
    33dc:	81 50       	subi	r24, 0x01	; 1
    33de:	80 93 52 08 	sts	0x0852, r24
return NRK_OK;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
}
    33e4:	08 95       	ret

000033e6 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    33e6:	e0 91 48 08 	lds	r30, 0x0848
    33ea:	f0 91 49 08 	lds	r31, 0x0849
}
    33ee:	80 81       	ld	r24, Z
    33f0:	08 95       	ret

000033f2 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    33f2:	e0 91 48 08 	lds	r30, 0x0848
    33f6:	f0 91 49 08 	lds	r31, 0x0849
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    33fa:	30 97       	sbiw	r30, 0x00	; 0
    33fc:	21 f0       	breq	.+8      	; 0x3406 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    33fe:	03 80       	ldd	r0, Z+3	; 0x03
    3400:	f4 81       	ldd	r31, Z+4	; 0x04
    3402:	e0 2d       	mov	r30, r0
    3404:	fa cf       	rjmp	.-12     	; 0x33fa <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3406:	08 95       	ret

00003408 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3408:	af 92       	push	r10
    340a:	bf 92       	push	r11
    340c:	cf 92       	push	r12
    340e:	df 92       	push	r13
    3410:	ef 92       	push	r14
    3412:	ff 92       	push	r15
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    341c:	e0 91 8c 07 	lds	r30, 0x078C
    3420:	f0 91 8d 07 	lds	r31, 0x078D
    3424:	30 97       	sbiw	r30, 0x00	; 0
    3426:	09 f4       	brne	.+2      	; 0x342a <nrk_add_to_readyQ+0x22>
    3428:	94 c0       	rjmp	.+296    	; 0x3552 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    342a:	00 91 48 08 	lds	r16, 0x0848
    342e:	10 91 49 08 	lds	r17, 0x0849
    CurNode = _free_node;

    if (_head_node != NULL)
    3432:	01 15       	cp	r16, r1
    3434:	11 05       	cpc	r17, r1
    3436:	09 f4       	brne	.+2      	; 0x343a <nrk_add_to_readyQ+0x32>
    3438:	4c c0       	rjmp	.+152    	; 0x34d2 <nrk_add_to_readyQ+0xca>
    343a:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    343c:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    343e:	58 2f       	mov	r21, r24
    3440:	54 03       	mulsu	r21, r20
    3442:	90 01       	movw	r18, r0
    3444:	11 24       	eor	r1, r1
    3446:	22 57       	subi	r18, 0x72	; 114
    3448:	38 4f       	sbci	r19, 0xF8	; 248
    344a:	79 01       	movw	r14, r18
    344c:	9a e0       	ldi	r25, 0x0A	; 10
    344e:	e9 0e       	add	r14, r25
    3450:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3452:	69 01       	movw	r12, r18
    3454:	c4 e0       	ldi	r28, 0x04	; 4
    3456:	cc 0e       	add	r12, r28
    3458:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    345a:	59 01       	movw	r10, r18
    345c:	db e0       	ldi	r29, 0x0B	; 11
    345e:	ad 0e       	add	r10, r29
    3460:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3462:	2c 91       	ld	r18, X
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	42 9f       	mul	r20, r18
    3468:	b0 01       	movw	r22, r0
    346a:	43 9f       	mul	r20, r19
    346c:	70 0d       	add	r23, r0
    346e:	11 24       	eor	r1, r1
    3470:	62 57       	subi	r22, 0x72	; 114
    3472:	78 4f       	sbci	r23, 0xF8	; 248
    3474:	eb 01       	movw	r28, r22
    3476:	9c 81       	ldd	r25, Y+4	; 0x04
    3478:	99 23       	and	r25, r25
    347a:	29 f0       	breq	.+10     	; 0x3486 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    347c:	5b 85       	ldd	r21, Y+11	; 0x0b
    347e:	e7 01       	movw	r28, r14
    3480:	98 81       	ld	r25, Y
    3482:	59 17       	cp	r21, r25
    3484:	40 f1       	brcs	.+80     	; 0x34d6 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3486:	e6 01       	movw	r28, r12
    3488:	98 81       	ld	r25, Y
    348a:	99 23       	and	r25, r25
    348c:	69 f0       	breq	.+26     	; 0x34a8 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    348e:	42 9f       	mul	r20, r18
    3490:	b0 01       	movw	r22, r0
    3492:	43 9f       	mul	r20, r19
    3494:	70 0d       	add	r23, r0
    3496:	11 24       	eor	r1, r1
    3498:	62 57       	subi	r22, 0x72	; 114
    349a:	78 4f       	sbci	r23, 0xF8	; 248
    349c:	eb 01       	movw	r28, r22
    349e:	5a 85       	ldd	r21, Y+10	; 0x0a
    34a0:	e5 01       	movw	r28, r10
    34a2:	98 81       	ld	r25, Y
    34a4:	59 17       	cp	r21, r25
    34a6:	b8 f0       	brcs	.+46     	; 0x34d6 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    34a8:	42 9f       	mul	r20, r18
    34aa:	b0 01       	movw	r22, r0
    34ac:	43 9f       	mul	r20, r19
    34ae:	70 0d       	add	r23, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	9b 01       	movw	r18, r22
    34b4:	22 57       	subi	r18, 0x72	; 114
    34b6:	38 4f       	sbci	r19, 0xF8	; 248
    34b8:	e9 01       	movw	r28, r18
    34ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    34bc:	e7 01       	movw	r28, r14
    34be:	98 81       	ld	r25, Y
    34c0:	29 17       	cp	r18, r25
    34c2:	48 f0       	brcs	.+18     	; 0x34d6 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    34c4:	13 96       	adiw	r26, 0x03	; 3
    34c6:	0d 90       	ld	r0, X+
    34c8:	bc 91       	ld	r27, X
    34ca:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    34cc:	10 97       	sbiw	r26, 0x00	; 0
    34ce:	49 f6       	brne	.-110    	; 0x3462 <nrk_add_to_readyQ+0x5a>
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <nrk_add_to_readyQ+0xce>
    34d2:	a0 e0       	ldi	r26, 0x00	; 0
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    34d6:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    34d8:	c3 81       	ldd	r28, Z+3	; 0x03
    34da:	d4 81       	ldd	r29, Z+4	; 0x04
    34dc:	d0 93 8d 07 	sts	0x078D, r29
    34e0:	c0 93 8c 07 	sts	0x078C, r28

    if (NextNode == _head_node)
    34e4:	a0 17       	cp	r26, r16
    34e6:	b1 07       	cpc	r27, r17
    34e8:	b1 f4       	brne	.+44     	; 0x3516 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    34ea:	10 97       	sbiw	r26, 0x00	; 0
    34ec:	49 f0       	breq	.+18     	; 0x3500 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    34ee:	b4 83       	std	Z+4, r27	; 0x04
    34f0:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    34f2:	12 82       	std	Z+2, r1	; 0x02
    34f4:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    34f6:	12 96       	adiw	r26, 0x02	; 2
    34f8:	fc 93       	st	X, r31
    34fa:	ee 93       	st	-X, r30
    34fc:	11 97       	sbiw	r26, 0x01	; 1
    34fe:	06 c0       	rjmp	.+12     	; 0x350c <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    3500:	14 82       	std	Z+4, r1	; 0x04
    3502:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3504:	12 82       	std	Z+2, r1	; 0x02
    3506:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3508:	fa 83       	std	Y+2, r31	; 0x02
    350a:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    350c:	f0 93 49 08 	sts	0x0849, r31
    3510:	e0 93 48 08 	sts	0x0848, r30
    3514:	1e c0       	rjmp	.+60     	; 0x3552 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    3516:	ac 17       	cp	r26, r28
    3518:	bd 07       	cpc	r27, r29
    351a:	79 f0       	breq	.+30     	; 0x353a <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    351c:	11 96       	adiw	r26, 0x01	; 1
    351e:	8d 91       	ld	r24, X+
    3520:	9c 91       	ld	r25, X
    3522:	12 97       	sbiw	r26, 0x02	; 2
    3524:	92 83       	std	Z+2, r25	; 0x02
    3526:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3528:	b4 83       	std	Z+4, r27	; 0x04
    352a:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    352c:	11 96       	adiw	r26, 0x01	; 1
    352e:	cd 91       	ld	r28, X+
    3530:	dc 91       	ld	r29, X
    3532:	12 97       	sbiw	r26, 0x02	; 2
    3534:	fc 83       	std	Y+4, r31	; 0x04
    3536:	eb 83       	std	Y+3, r30	; 0x03
    3538:	08 c0       	rjmp	.+16     	; 0x354a <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    353a:	14 82       	std	Z+4, r1	; 0x04
    353c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    353e:	11 96       	adiw	r26, 0x01	; 1
    3540:	8d 91       	ld	r24, X+
    3542:	9c 91       	ld	r25, X
    3544:	12 97       	sbiw	r26, 0x02	; 2
    3546:	92 83       	std	Z+2, r25	; 0x02
    3548:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    354a:	12 96       	adiw	r26, 0x02	; 2
    354c:	fc 93       	st	X, r31
    354e:	ee 93       	st	-X, r30
    3550:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	ef 90       	pop	r14
    355e:	df 90       	pop	r13
    3560:	cf 90       	pop	r12
    3562:	bf 90       	pop	r11
    3564:	af 90       	pop	r10
    3566:	08 95       	ret

00003568 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    356c:	e0 91 48 08 	lds	r30, 0x0848
    3570:	f0 91 49 08 	lds	r31, 0x0849
    3574:	30 97       	sbiw	r30, 0x00	; 0
    3576:	09 f4       	brne	.+2      	; 0x357a <nrk_rem_from_readyQ+0x12>
    3578:	44 c0       	rjmp	.+136    	; 0x3602 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    357a:	99 27       	eor	r25, r25
    357c:	87 fd       	sbrc	r24, 7
    357e:	90 95       	com	r25
    3580:	20 81       	ld	r18, Z
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	28 17       	cp	r18, r24
    3586:	39 07       	cpc	r19, r25
    3588:	81 f4       	brne	.+32     	; 0x35aa <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    358a:	a3 81       	ldd	r26, Z+3	; 0x03
    358c:	b4 81       	ldd	r27, Z+4	; 0x04
    358e:	b0 93 49 08 	sts	0x0849, r27
    3592:	a0 93 48 08 	sts	0x0848, r26
        _head_node->Prev = NULL;
    3596:	12 96       	adiw	r26, 0x02	; 2
    3598:	1c 92       	st	X, r1
    359a:	1e 92       	st	-X, r1
    359c:	11 97       	sbiw	r26, 0x01	; 1
    359e:	18 c0       	rjmp	.+48     	; 0x35d0 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    35a0:	03 80       	ldd	r0, Z+3	; 0x03
    35a2:	f4 81       	ldd	r31, Z+4	; 0x04
    35a4:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    35a6:	30 97       	sbiw	r30, 0x00	; 0
    35a8:	61 f1       	breq	.+88     	; 0x3602 <nrk_rem_from_readyQ+0x9a>
    35aa:	20 81       	ld	r18, Z
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	28 17       	cp	r18, r24
    35b0:	39 07       	cpc	r19, r25
    35b2:	b1 f7       	brne	.-20     	; 0x35a0 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    35b4:	c1 81       	ldd	r28, Z+1	; 0x01
    35b6:	d2 81       	ldd	r29, Z+2	; 0x02
    35b8:	83 81       	ldd	r24, Z+3	; 0x03
    35ba:	94 81       	ldd	r25, Z+4	; 0x04
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    35c0:	a3 81       	ldd	r26, Z+3	; 0x03
    35c2:	b4 81       	ldd	r27, Z+4	; 0x04
    35c4:	10 97       	sbiw	r26, 0x00	; 0
    35c6:	21 f0       	breq	.+8      	; 0x35d0 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    35c8:	12 96       	adiw	r26, 0x02	; 2
    35ca:	dc 93       	st	X, r29
    35cc:	ce 93       	st	-X, r28
    35ce:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    35d0:	a0 91 8c 07 	lds	r26, 0x078C
    35d4:	b0 91 8d 07 	lds	r27, 0x078D
    35d8:	10 97       	sbiw	r26, 0x00	; 0
    35da:	39 f4       	brne	.+14     	; 0x35ea <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    35dc:	f0 93 8d 07 	sts	0x078D, r31
    35e0:	e0 93 8c 07 	sts	0x078C, r30
        _free_node->Next = NULL;
    35e4:	14 82       	std	Z+4, r1	; 0x04
    35e6:	13 82       	std	Z+3, r1	; 0x03
    35e8:	0a c0       	rjmp	.+20     	; 0x35fe <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    35ea:	b4 83       	std	Z+4, r27	; 0x04
    35ec:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    35ee:	12 96       	adiw	r26, 0x02	; 2
    35f0:	fc 93       	st	X, r31
    35f2:	ee 93       	st	-X, r30
    35f4:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    35f6:	f0 93 8d 07 	sts	0x078D, r31
    35fa:	e0 93 8c 07 	sts	0x078C, r30
    }
    _free_node->Prev = NULL;
    35fe:	12 82       	std	Z+2, r1	; 0x02
    3600:	11 82       	std	Z+1, r1	; 0x01
}
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	08 95       	ret

00003608 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3616:	4b 81       	ldd	r20, Y+3	; 0x03
    3618:	5c 81       	ldd	r21, Y+4	; 0x04
    361a:	69 81       	ldd	r22, Y+1	; 0x01
    361c:	7a 81       	ldd	r23, Y+2	; 0x02
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3626:	2f 81       	ldd	r18, Y+7	; 0x07
    3628:	22 23       	and	r18, r18
    362a:	71 f0       	breq	.+28     	; 0x3648 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    362c:	4b 81       	ldd	r20, Y+3	; 0x03
    362e:	5c 81       	ldd	r21, Y+4	; 0x04
    3630:	e1 2c       	mov	r14, r1
    3632:	f1 2c       	mov	r15, r1
    3634:	00 e0       	ldi	r16, 0x00	; 0
    3636:	10 e0       	ldi	r17, 0x00	; 0
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	bc 01       	movw	r22, r24
    363e:	ce 01       	movw	r24, r28
    3640:	0e 94 c2 13 	call	0x2784	; 0x2784 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3644:	1f 82       	std	Y+7, r1	; 0x07
    3646:	0c c0       	rjmp	.+24     	; 0x3660 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3648:	e8 81       	ld	r30, Y
    364a:	2b e2       	ldi	r18, 0x2B	; 43
    364c:	e2 02       	muls	r30, r18
    364e:	f0 01       	movw	r30, r0
    3650:	11 24       	eor	r1, r1
    3652:	e2 57       	subi	r30, 0x72	; 114
    3654:	f8 4f       	sbci	r31, 0xF8	; 248
    3656:	21 85       	ldd	r18, Z+9	; 0x09
    3658:	23 30       	cpi	r18, 0x03	; 3
    365a:	b9 f4       	brne	.+46     	; 0x368a <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3660:	e8 81       	ld	r30, Y
    3662:	8b e2       	ldi	r24, 0x2B	; 43
    3664:	e8 02       	muls	r30, r24
    3666:	f0 01       	movw	r30, r0
    3668:	11 24       	eor	r1, r1
    366a:	e2 57       	subi	r30, 0x72	; 114
    366c:	f8 4f       	sbci	r31, 0xF8	; 248
    366e:	85 89       	ldd	r24, Z+21	; 0x15
    3670:	96 89       	ldd	r25, Z+22	; 0x16
    3672:	a7 89       	ldd	r26, Z+23	; 0x17
    3674:	b0 8d       	ldd	r27, Z+24	; 0x18
    3676:	89 2b       	or	r24, r25
    3678:	8a 2b       	or	r24, r26
    367a:	8b 2b       	or	r24, r27
    367c:	41 f4       	brne	.+16     	; 0x368e <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    367e:	82 e0       	ldi	r24, 0x02	; 2
    3680:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3682:	88 81       	ld	r24, Y
    3684:	0e 94 04 1a 	call	0x3408	; 0x3408 <nrk_add_to_readyQ>
    3688:	02 c0       	rjmp	.+4      	; 0x368e <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    368a:	8f ef       	ldi	r24, 0xFF	; 255
    368c:	01 c0       	rjmp	.+2      	; 0x3690 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    368e:	81 e0       	ldi	r24, 0x01	; 1
}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	08 95       	ret

0000369e <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    369e:	1f 93       	push	r17
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	28 97       	sbiw	r28, 0x08	; 8
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	29 83       	std	Y+1, r18	; 0x01
    36b6:	3a 83       	std	Y+2, r19	; 0x02
    36b8:	4b 83       	std	Y+3, r20	; 0x03
    36ba:	5c 83       	std	Y+4, r21	; 0x04
    36bc:	6d 83       	std	Y+5, r22	; 0x05
    36be:	7e 83       	std	Y+6, r23	; 0x06
    36c0:	8f 83       	std	Y+7, r24	; 0x07
    36c2:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    36c4:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    36c8:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    36cc:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    36ce:	ce 01       	movw	r24, r28
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    36d6:	63 30       	cpi	r22, 0x03	; 3
    36d8:	71 05       	cpc	r23, r1
    36da:	98 f0       	brcs	.+38     	; 0x3702 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    36dc:	e0 91 53 08 	lds	r30, 0x0853
    36e0:	f0 91 54 08 	lds	r31, 0x0854
    36e4:	21 2f       	mov	r18, r17
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	62 0f       	add	r22, r18
    36ea:	73 1f       	adc	r23, r19
    36ec:	cb 01       	movw	r24, r22
    36ee:	a0 e0       	ldi	r26, 0x00	; 0
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	85 8b       	std	Z+21, r24	; 0x15
    36f4:	96 8b       	std	Z+22, r25	; 0x16
    36f6:	a7 8b       	std	Z+23, r26	; 0x17
    36f8:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    36fa:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>

    return NRK_OK;
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3702:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3704:	28 96       	adiw	r28, 0x08	; 8
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	1f 91       	pop	r17
    3716:	08 95       	ret

00003718 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3718:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    371c:	e0 91 53 08 	lds	r30, 0x0853
    3720:	f0 91 54 08 	lds	r31, 0x0854
    3724:	85 81       	ldd	r24, Z+5	; 0x05
    3726:	81 11       	cpse	r24, r1
    3728:	f7 cf       	rjmp	.-18     	; 0x3718 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    372a:	08 95       	ret

0000372c <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    372c:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    372e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3732:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3736:	e0 91 53 08 	lds	r30, 0x0853
    373a:	f0 91 54 08 	lds	r31, 0x0854
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	92 a7       	std	Z+42, r25	; 0x2a
    3744:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3746:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3748:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    374c:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    374e:	88 3f       	cpi	r24, 0xF8	; 248
    3750:	80 f4       	brcc	.+32     	; 0x3772 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3752:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    3756:	2c 2f       	mov	r18, r28
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	2f 5f       	subi	r18, 0xFF	; 255
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	28 17       	cp	r18, r24
    3762:	39 07       	cpc	r19, r25
    3764:	34 f4       	brge	.+12     	; 0x3772 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    376a:	80 93 38 07 	sts	0x0738, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    376e:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3772:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3776:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3780:	e0 91 53 08 	lds	r30, 0x0853
    3784:	f0 91 54 08 	lds	r31, 0x0854
    3788:	80 85       	ldd	r24, Z+8	; 0x08
    378a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    378e:	e0 91 53 08 	lds	r30, 0x0853
    3792:	f0 91 54 08 	lds	r31, 0x0854
    3796:	84 e0       	ldi	r24, 0x04	; 4
    3798:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    379a:	0e 94 96 1b 	call	0x372c	; 0x372c <nrk_wait_until_next_period>
    return NRK_OK;
}
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	08 95       	ret

000037a2 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    37a8:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <nrk_stack_check>

    if (p == 0)
    37ac:	20 97       	sbiw	r28, 0x00	; 0
    37ae:	11 f4       	brne	.+4      	; 0x37b4 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    37b0:	c1 e0       	ldi	r28, 0x01	; 1
    37b2:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    37b4:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    37b8:	e0 91 53 08 	lds	r30, 0x0853
    37bc:	f0 91 54 08 	lds	r31, 0x0854
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    37c4:	d2 a7       	std	Z+42, r29	; 0x2a
    37c6:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    37c8:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    37cc:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    37ce:	88 3f       	cpi	r24, 0xF8	; 248
    37d0:	80 f4       	brcc	.+32     	; 0x37f2 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    37d2:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    37d6:	2c 2f       	mov	r18, r28
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	2f 5f       	subi	r18, 0xFF	; 255
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	28 17       	cp	r18, r24
    37e2:	39 07       	cpc	r19, r25
    37e4:	34 f4       	brge	.+12     	; 0x37f2 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    37ea:	80 93 38 07 	sts	0x0738, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    37ee:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    37f2:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    37f6:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    380e:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3812:	e0 91 53 08 	lds	r30, 0x0853
    3816:	f0 91 54 08 	lds	r31, 0x0854
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    381e:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    3822:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3824:	e0 91 53 08 	lds	r30, 0x0853
    3828:	f0 91 54 08 	lds	r31, 0x0854
    382c:	e8 2e       	mov	r14, r24
    382e:	f1 2c       	mov	r15, r1
    3830:	c7 01       	movw	r24, r14
    3832:	80 0f       	add	r24, r16
    3834:	91 1f       	adc	r25, r17
    3836:	a0 e0       	ldi	r26, 0x00	; 0
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	85 8b       	std	Z+21, r24	; 0x15
    383c:	96 8b       	std	Z+22, r25	; 0x16
    383e:	a7 8b       	std	Z+23, r26	; 0x17
    3840:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3842:	c8 3f       	cpi	r28, 0xF8	; 248
    3844:	78 f4       	brcc	.+30     	; 0x3864 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3846:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    384a:	9f ef       	ldi	r25, 0xFF	; 255
    384c:	e9 1a       	sub	r14, r25
    384e:	f9 0a       	sbc	r15, r25
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	e8 16       	cp	r14, r24
    3854:	f9 06       	cpc	r15, r25
    3856:	34 f4       	brge	.+12     	; 0x3864 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    3858:	82 e0       	ldi	r24, 0x02	; 2
    385a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    385c:	80 93 38 07 	sts	0x0738, r24
            _nrk_set_next_wakeup (timer);
    3860:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3864:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3868:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	cf 91       	pop	r28
    3870:	1f 91       	pop	r17
    3872:	0f 91       	pop	r16
    3874:	ff 90       	pop	r15
    3876:	ef 90       	pop	r14
    3878:	08 95       	ret

0000387a <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3880:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3884:	e0 91 53 08 	lds	r30, 0x0853
    3888:	f0 91 54 08 	lds	r31, 0x0854
    388c:	21 e0       	ldi	r18, 0x01	; 1
    388e:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    3890:	ce 01       	movw	r24, r28
    3892:	a0 e0       	ldi	r26, 0x00	; 0
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	85 8b       	std	Z+21, r24	; 0x15
    3898:	96 8b       	std	Z+22, r25	; 0x16
    389a:	a7 8b       	std	Z+23, r26	; 0x17
    389c:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    389e:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    38a2:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    38a4:	88 3f       	cpi	r24, 0xF8	; 248
    38a6:	80 f4       	brcc	.+32     	; 0x38c8 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    38a8:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    38ac:	2c 2f       	mov	r18, r28
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	2f 5f       	subi	r18, 0xFF	; 255
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	28 17       	cp	r18, r24
    38b8:	39 07       	cpc	r19, r25
    38ba:	34 f4       	brge	.+12     	; 0x38c8 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    38bc:	82 e0       	ldi	r24, 0x02	; 2
    38be:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    38c0:	80 93 38 07 	sts	0x0738, r24
            _nrk_set_next_wakeup (timer);
    38c4:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    38c8:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    38cc:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	08 95       	ret

000038d8 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    38d8:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    38da:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    38de:	e0 91 53 08 	lds	r30, 0x0853
    38e2:	f0 91 54 08 	lds	r31, 0x0854
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    38ea:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    38ec:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    38f0:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    38f2:	88 3f       	cpi	r24, 0xF8	; 248
    38f4:	80 f4       	brcc	.+32     	; 0x3916 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    38f6:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    38fa:	2c 2f       	mov	r18, r28
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	2f 5f       	subi	r18, 0xFF	; 255
    3900:	3f 4f       	sbci	r19, 0xFF	; 255
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	28 17       	cp	r18, r24
    3906:	39 07       	cpc	r19, r25
    3908:	34 f4       	brge	.+12     	; 0x3916 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    390a:	82 e0       	ldi	r24, 0x02	; 2
    390c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    390e:	80 93 38 07 	sts	0x0738, r24
            _nrk_set_next_wakeup (timer);
    3912:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3916:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    391a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	cf 91       	pop	r28
    3922:	08 95       	ret

00003924 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	28 97       	sbiw	r28, 0x08	; 8
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	29 83       	std	Y+1, r18	; 0x01
    393c:	3a 83       	std	Y+2, r19	; 0x02
    393e:	4b 83       	std	Y+3, r20	; 0x03
    3940:	5c 83       	std	Y+4, r21	; 0x04
    3942:	6d 83       	std	Y+5, r22	; 0x05
    3944:	7e 83       	std	Y+6, r23	; 0x06
    3946:	8f 83       	std	Y+7, r24	; 0x07
    3948:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    394a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <nrk_stack_check>

    nrk_int_disable ();
    394e:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3952:	e0 91 53 08 	lds	r30, 0x0853
    3956:	f0 91 54 08 	lds	r31, 0x0854
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	92 a7       	std	Z+42, r25	; 0x2a
    3964:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    3966:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    396a:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    396c:	ce 01       	movw	r24, r28
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3974:	e0 91 53 08 	lds	r30, 0x0853
    3978:	f0 91 54 08 	lds	r31, 0x0854
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	81 0f       	add	r24, r17
    3982:	91 1d       	adc	r25, r1
    3984:	a1 1d       	adc	r26, r1
    3986:	b1 1d       	adc	r27, r1
    3988:	85 8b       	std	Z+21, r24	; 0x15
    398a:	96 8b       	std	Z+22, r25	; 0x16
    398c:	a7 8b       	std	Z+23, r26	; 0x17
    398e:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3990:	18 3f       	cpi	r17, 0xF8	; 248
    3992:	80 f4       	brcc	.+32     	; 0x39b4 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3994:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    3998:	21 2f       	mov	r18, r17
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	2f 5f       	subi	r18, 0xFF	; 255
    399e:	3f 4f       	sbci	r19, 0xFF	; 255
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	28 17       	cp	r18, r24
    39a4:	39 07       	cpc	r19, r25
    39a6:	34 f4       	brge	.+12     	; 0x39b4 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    39a8:	82 e0       	ldi	r24, 0x02	; 2
    39aa:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    39ac:	80 93 38 07 	sts	0x0738, r24
            _nrk_set_next_wakeup (timer);
    39b0:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    39b4:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    39b8:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	28 96       	adiw	r28, 0x08	; 8
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	1f 91       	pop	r17
    39d0:	08 95       	ret

000039d2 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    39d2:	8f 92       	push	r8
    39d4:	9f 92       	push	r9
    39d6:	af 92       	push	r10
    39d8:	bf 92       	push	r11
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	60 97       	sbiw	r28, 0x10	; 16
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	29 87       	std	Y+9, r18	; 0x09
    39fc:	3a 87       	std	Y+10, r19	; 0x0a
    39fe:	4b 87       	std	Y+11, r20	; 0x0b
    3a00:	5c 87       	std	Y+12, r21	; 0x0c
    3a02:	6d 87       	std	Y+13, r22	; 0x0d
    3a04:	7e 87       	std	Y+14, r23	; 0x0e
    3a06:	8f 87       	std	Y+15, r24	; 0x0f
    3a08:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3a12:	89 80       	ldd	r8, Y+1	; 0x01
    3a14:	9a 80       	ldd	r9, Y+2	; 0x02
    3a16:	ab 80       	ldd	r10, Y+3	; 0x03
    3a18:	bc 80       	ldd	r11, Y+4	; 0x04
    3a1a:	cd 80       	ldd	r12, Y+5	; 0x05
    3a1c:	de 80       	ldd	r13, Y+6	; 0x06
    3a1e:	ef 80       	ldd	r14, Y+7	; 0x07
    3a20:	f8 84       	ldd	r15, Y+8	; 0x08
    3a22:	09 85       	ldd	r16, Y+9	; 0x09
    3a24:	1a 85       	ldd	r17, Y+10	; 0x0a
    3a26:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a28:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a2a:	4d 85       	ldd	r20, Y+13	; 0x0d
    3a2c:	5e 85       	ldd	r21, Y+14	; 0x0e
    3a2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a30:	78 89       	ldd	r23, Y+16	; 0x10
    3a32:	ce 01       	movw	r24, r28
    3a34:	09 96       	adiw	r24, 0x09	; 9
    3a36:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a3c:	61 f0       	breq	.+24     	; 0x3a56 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3a3e:	29 85       	ldd	r18, Y+9	; 0x09
    3a40:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a42:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a44:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a46:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a48:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a4c:	98 89       	ldd	r25, Y+16	; 0x10
    3a4e:	0e 94 92 1c 	call	0x3924	; 0x3924 <nrk_wait>

    return NRK_OK;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	01 c0       	rjmp	.+2      	; 0x3a58 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3a56:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3a58:	60 96       	adiw	r28, 0x10	; 16
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	de bf       	out	0x3e, r29	; 62
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	cd bf       	out	0x3d, r28	; 61
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	1f 91       	pop	r17
    3a6a:	0f 91       	pop	r16
    3a6c:	ff 90       	pop	r15
    3a6e:	ef 90       	pop	r14
    3a70:	df 90       	pop	r13
    3a72:	cf 90       	pop	r12
    3a74:	bf 90       	pop	r11
    3a76:	af 90       	pop	r10
    3a78:	9f 90       	pop	r9
    3a7a:	8f 90       	pop	r8
    3a7c:	08 95       	ret

00003a7e <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3a7e:	e0 91 53 08 	lds	r30, 0x0853
    3a82:	f0 91 54 08 	lds	r31, 0x0854
}
    3a86:	80 85       	ldd	r24, Z+8	; 0x08
    3a88:	08 95       	ret

00003a8a <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3a94:	1c 82       	std	Y+4, r1	; 0x04
    3a96:	1d 82       	std	Y+5, r1	; 0x05
    3a98:	1e 82       	std	Y+6, r1	; 0x06
    3a9a:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3a9c:	80 91 4a 08 	lds	r24, 0x084A
    3aa0:	90 91 4b 08 	lds	r25, 0x084B
    3aa4:	a0 91 4c 08 	lds	r26, 0x084C
    3aa8:	b0 91 4d 08 	lds	r27, 0x084D
    3aac:	88 83       	st	Y, r24
    3aae:	99 83       	std	Y+1, r25	; 0x01
    3ab0:	aa 83       	std	Y+2, r26	; 0x02
    3ab2:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3ab4:	80 91 4e 08 	lds	r24, 0x084E
    3ab8:	90 91 4f 08 	lds	r25, 0x084F
    3abc:	a0 91 50 08 	lds	r26, 0x0850
    3ac0:	b0 91 51 08 	lds	r27, 0x0851
    3ac4:	8c 83       	std	Y+4, r24	; 0x04
    3ac6:	9d 83       	std	Y+5, r25	; 0x05
    3ac8:	ae 83       	std	Y+6, r26	; 0x06
    3aca:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3acc:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    3ad0:	a8 2f       	mov	r26, r24
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	23 eb       	ldi	r18, 0xB3	; 179
    3ad6:	36 ee       	ldi	r19, 0xE6	; 230
    3ad8:	4e e0       	ldi	r20, 0x0E	; 14
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    3ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    3ae2:	1d 81       	ldd	r17, Y+5	; 0x05
    3ae4:	2e 81       	ldd	r18, Y+6	; 0x06
    3ae6:	3f 81       	ldd	r19, Y+7	; 0x07
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	80 0f       	add	r24, r16
    3aee:	91 1f       	adc	r25, r17
    3af0:	a2 1f       	adc	r26, r18
    3af2:	b3 1f       	adc	r27, r19
    3af4:	8c 83       	std	Y+4, r24	; 0x04
    3af6:	9d 83       	std	Y+5, r25	; 0x05
    3af8:	ae 83       	std	Y+6, r26	; 0x06
    3afa:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3afc:	8c 81       	ldd	r24, Y+4	; 0x04
    3afe:	9d 81       	ldd	r25, Y+5	; 0x05
    3b00:	ae 81       	ldd	r26, Y+6	; 0x06
    3b02:	bf 81       	ldd	r27, Y+7	; 0x07
    3b04:	81 15       	cp	r24, r1
    3b06:	2a ec       	ldi	r18, 0xCA	; 202
    3b08:	92 07       	cpc	r25, r18
    3b0a:	2a e9       	ldi	r18, 0x9A	; 154
    3b0c:	a2 07       	cpc	r26, r18
    3b0e:	2b e3       	ldi	r18, 0x3B	; 59
    3b10:	b2 07       	cpc	r27, r18
    3b12:	98 f0       	brcs	.+38     	; 0x3b3a <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3b14:	9a 5c       	subi	r25, 0xCA	; 202
    3b16:	aa 49       	sbci	r26, 0x9A	; 154
    3b18:	bb 43       	sbci	r27, 0x3B	; 59
    3b1a:	8c 83       	std	Y+4, r24	; 0x04
    3b1c:	9d 83       	std	Y+5, r25	; 0x05
    3b1e:	ae 83       	std	Y+6, r26	; 0x06
    3b20:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3b22:	88 81       	ld	r24, Y
    3b24:	99 81       	ldd	r25, Y+1	; 0x01
    3b26:	aa 81       	ldd	r26, Y+2	; 0x02
    3b28:	bb 81       	ldd	r27, Y+3	; 0x03
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	a1 1d       	adc	r26, r1
    3b2e:	b1 1d       	adc	r27, r1
    3b30:	88 83       	st	Y, r24
    3b32:	99 83       	std	Y+1, r25	; 0x01
    3b34:	aa 83       	std	Y+2, r26	; 0x02
    3b36:	bb 83       	std	Y+3, r27	; 0x03
    3b38:	e1 cf       	rjmp	.-62     	; 0x3afc <nrk_time_get+0x72>
    }

}
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	08 95       	ret

00003b44 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3b44:	8f 92       	push	r8
    3b46:	9f 92       	push	r9
    3b48:	af 92       	push	r10
    3b4a:	bf 92       	push	r11
    3b4c:	cf 92       	push	r12
    3b4e:	df 92       	push	r13
    3b50:	ef 92       	push	r14
    3b52:	ff 92       	push	r15
    3b54:	0f 93       	push	r16
    3b56:	1f 93       	push	r17
    3b58:	cf 93       	push	r28
    3b5a:	df 93       	push	r29
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
    3b60:	60 97       	sbiw	r28, 0x10	; 16
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	09 83       	std	Y+1, r16	; 0x01
    3b70:	1a 83       	std	Y+2, r17	; 0x02
    3b72:	2b 83       	std	Y+3, r18	; 0x03
    3b74:	3c 83       	std	Y+4, r19	; 0x04
    3b76:	4d 83       	std	Y+5, r20	; 0x05
    3b78:	5e 83       	std	Y+6, r21	; 0x06
    3b7a:	6f 83       	std	Y+7, r22	; 0x07
    3b7c:	78 87       	std	Y+8, r23	; 0x08
    3b7e:	89 86       	std	Y+9, r8	; 0x09
    3b80:	9a 86       	std	Y+10, r9	; 0x0a
    3b82:	ab 86       	std	Y+11, r10	; 0x0b
    3b84:	bc 86       	std	Y+12, r11	; 0x0c
    3b86:	cd 86       	std	Y+13, r12	; 0x0d
    3b88:	de 86       	std	Y+14, r13	; 0x0e
    3b8a:	ef 86       	std	Y+15, r14	; 0x0f
    3b8c:	f8 8a       	std	Y+16, r15	; 0x10
    3b8e:	09 81       	ldd	r16, Y+1	; 0x01
    3b90:	1a 81       	ldd	r17, Y+2	; 0x02
    3b92:	2b 81       	ldd	r18, Y+3	; 0x03
    3b94:	3c 81       	ldd	r19, Y+4	; 0x04
    3b96:	4d 81       	ldd	r20, Y+5	; 0x05
    3b98:	5e 81       	ldd	r21, Y+6	; 0x06
    3b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9c:	78 85       	ldd	r23, Y+8	; 0x08
    3b9e:	c9 84       	ldd	r12, Y+9	; 0x09
    3ba0:	da 84       	ldd	r13, Y+10	; 0x0a
    3ba2:	eb 84       	ldd	r14, Y+11	; 0x0b
    3ba4:	fc 84       	ldd	r15, Y+12	; 0x0c
    3ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3baa:	af 85       	ldd	r26, Y+15	; 0x0f
    3bac:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3bae:	0c 15       	cp	r16, r12
    3bb0:	1d 05       	cpc	r17, r13
    3bb2:	2e 05       	cpc	r18, r14
    3bb4:	3f 05       	cpc	r19, r15
    3bb6:	f0 f1       	brcs	.+124    	; 0x3c34 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    3bb8:	c0 16       	cp	r12, r16
    3bba:	d1 06       	cpc	r13, r17
    3bbc:	e2 06       	cpc	r14, r18
    3bbe:	f3 06       	cpc	r15, r19
    3bc0:	91 f4       	brne	.+36     	; 0x3be6 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3bc2:	48 17       	cp	r20, r24
    3bc4:	59 07       	cpc	r21, r25
    3bc6:	6a 07       	cpc	r22, r26
    3bc8:	7b 07       	cpc	r23, r27
    3bca:	a0 f1       	brcs	.+104    	; 0x3c34 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3bcc:	48 1b       	sub	r20, r24
    3bce:	59 0b       	sbc	r21, r25
    3bd0:	6a 0b       	sbc	r22, r26
    3bd2:	7b 0b       	sbc	r23, r27
    3bd4:	44 83       	std	Z+4, r20	; 0x04
    3bd6:	55 83       	std	Z+5, r21	; 0x05
    3bd8:	66 83       	std	Z+6, r22	; 0x06
    3bda:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    3bdc:	10 82       	st	Z, r1
    3bde:	11 82       	std	Z+1, r1	; 0x01
    3be0:	12 82       	std	Z+2, r1	; 0x02
    3be2:	13 82       	std	Z+3, r1	; 0x03
    3be4:	25 c0       	rjmp	.+74     	; 0x3c30 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3be6:	48 17       	cp	r20, r24
    3be8:	59 07       	cpc	r21, r25
    3bea:	6a 07       	cpc	r22, r26
    3bec:	7b 07       	cpc	r23, r27
    3bee:	80 f4       	brcc	.+32     	; 0x3c10 <nrk_time_sub+0xcc>
{
	high.secs--;
    3bf0:	01 50       	subi	r16, 0x01	; 1
    3bf2:	11 09       	sbc	r17, r1
    3bf4:	21 09       	sbc	r18, r1
    3bf6:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3bf8:	0c 19       	sub	r16, r12
    3bfa:	1d 09       	sbc	r17, r13
    3bfc:	2e 09       	sbc	r18, r14
    3bfe:	3f 09       	sbc	r19, r15
    3c00:	00 83       	st	Z, r16
    3c02:	11 83       	std	Z+1, r17	; 0x01
    3c04:	22 83       	std	Z+2, r18	; 0x02
    3c06:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3c08:	56 53       	subi	r21, 0x36	; 54
    3c0a:	65 46       	sbci	r22, 0x65	; 101
    3c0c:	74 4c       	sbci	r23, 0xC4	; 196
    3c0e:	08 c0       	rjmp	.+16     	; 0x3c20 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3c10:	0c 19       	sub	r16, r12
    3c12:	1d 09       	sbc	r17, r13
    3c14:	2e 09       	sbc	r18, r14
    3c16:	3f 09       	sbc	r19, r15
    3c18:	00 83       	st	Z, r16
    3c1a:	11 83       	std	Z+1, r17	; 0x01
    3c1c:	22 83       	std	Z+2, r18	; 0x02
    3c1e:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3c20:	48 1b       	sub	r20, r24
    3c22:	59 0b       	sbc	r21, r25
    3c24:	6a 0b       	sbc	r22, r26
    3c26:	7b 0b       	sbc	r23, r27
    3c28:	44 83       	std	Z+4, r20	; 0x04
    3c2a:	55 83       	std	Z+5, r21	; 0x05
    3c2c:	66 83       	std	Z+6, r22	; 0x06
    3c2e:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	01 c0       	rjmp	.+2      	; 0x3c36 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3c34:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3c36:	60 96       	adiw	r28, 0x10	; 16
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	df 90       	pop	r13
    3c50:	cf 90       	pop	r12
    3c52:	bf 90       	pop	r11
    3c54:	af 90       	pop	r10
    3c56:	9f 90       	pop	r9
    3c58:	8f 90       	pop	r8
    3c5a:	08 95       	ret

00003c5c <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3c5c:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3c5e:	44 81       	ldd	r20, Z+4	; 0x04
    3c60:	55 81       	ldd	r21, Z+5	; 0x05
    3c62:	66 81       	ldd	r22, Z+6	; 0x06
    3c64:	77 81       	ldd	r23, Z+7	; 0x07
    3c66:	41 15       	cp	r20, r1
    3c68:	8a ec       	ldi	r24, 0xCA	; 202
    3c6a:	58 07       	cpc	r21, r24
    3c6c:	8a e9       	ldi	r24, 0x9A	; 154
    3c6e:	68 07       	cpc	r22, r24
    3c70:	8b e3       	ldi	r24, 0x3B	; 59
    3c72:	78 07       	cpc	r23, r24
    3c74:	98 f0       	brcs	.+38     	; 0x3c9c <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3c76:	5a 5c       	subi	r21, 0xCA	; 202
    3c78:	6a 49       	sbci	r22, 0x9A	; 154
    3c7a:	7b 43       	sbci	r23, 0x3B	; 59
    3c7c:	44 83       	std	Z+4, r20	; 0x04
    3c7e:	55 83       	std	Z+5, r21	; 0x05
    3c80:	66 83       	std	Z+6, r22	; 0x06
    3c82:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3c84:	80 81       	ld	r24, Z
    3c86:	91 81       	ldd	r25, Z+1	; 0x01
    3c88:	a2 81       	ldd	r26, Z+2	; 0x02
    3c8a:	b3 81       	ldd	r27, Z+3	; 0x03
    3c8c:	01 96       	adiw	r24, 0x01	; 1
    3c8e:	a1 1d       	adc	r26, r1
    3c90:	b1 1d       	adc	r27, r1
    3c92:	80 83       	st	Z, r24
    3c94:	91 83       	std	Z+1, r25	; 0x01
    3c96:	a2 83       	std	Z+2, r26	; 0x02
    3c98:	b3 83       	std	Z+3, r27	; 0x03
    3c9a:	e1 cf       	rjmp	.-62     	; 0x3c5e <nrk_time_compact_nanos+0x2>
    }
}
    3c9c:	08 95       	ret

00003c9e <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3c9e:	8f 92       	push	r8
    3ca0:	9f 92       	push	r9
    3ca2:	af 92       	push	r10
    3ca4:	bf 92       	push	r11
    3ca6:	cf 92       	push	r12
    3ca8:	df 92       	push	r13
    3caa:	ef 92       	push	r14
    3cac:	ff 92       	push	r15
    3cae:	0f 93       	push	r16
    3cb0:	1f 93       	push	r17
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	60 97       	sbiw	r28, 0x10	; 16
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	09 83       	std	Y+1, r16	; 0x01
    3cc8:	1a 83       	std	Y+2, r17	; 0x02
    3cca:	2b 83       	std	Y+3, r18	; 0x03
    3ccc:	3c 83       	std	Y+4, r19	; 0x04
    3cce:	4d 83       	std	Y+5, r20	; 0x05
    3cd0:	5e 83       	std	Y+6, r21	; 0x06
    3cd2:	6f 83       	std	Y+7, r22	; 0x07
    3cd4:	78 87       	std	Y+8, r23	; 0x08
    3cd6:	89 86       	std	Y+9, r8	; 0x09
    3cd8:	9a 86       	std	Y+10, r9	; 0x0a
    3cda:	ab 86       	std	Y+11, r10	; 0x0b
    3cdc:	bc 86       	std	Y+12, r11	; 0x0c
    3cde:	cd 86       	std	Y+13, r12	; 0x0d
    3ce0:	de 86       	std	Y+14, r13	; 0x0e
    3ce2:	ef 86       	std	Y+15, r14	; 0x0f
    3ce4:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3ce6:	09 85       	ldd	r16, Y+9	; 0x09
    3ce8:	1a 85       	ldd	r17, Y+10	; 0x0a
    3cea:	2b 85       	ldd	r18, Y+11	; 0x0b
    3cec:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cee:	49 81       	ldd	r20, Y+1	; 0x01
    3cf0:	5a 81       	ldd	r21, Y+2	; 0x02
    3cf2:	6b 81       	ldd	r22, Y+3	; 0x03
    3cf4:	7c 81       	ldd	r23, Y+4	; 0x04
    3cf6:	40 0f       	add	r20, r16
    3cf8:	51 1f       	adc	r21, r17
    3cfa:	62 1f       	adc	r22, r18
    3cfc:	73 1f       	adc	r23, r19
    3cfe:	fc 01       	movw	r30, r24
    3d00:	40 83       	st	Z, r20
    3d02:	51 83       	std	Z+1, r21	; 0x01
    3d04:	62 83       	std	Z+2, r22	; 0x02
    3d06:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3d08:	0d 85       	ldd	r16, Y+13	; 0x0d
    3d0a:	1e 85       	ldd	r17, Y+14	; 0x0e
    3d0c:	2f 85       	ldd	r18, Y+15	; 0x0f
    3d0e:	38 89       	ldd	r19, Y+16	; 0x10
    3d10:	4d 81       	ldd	r20, Y+5	; 0x05
    3d12:	5e 81       	ldd	r21, Y+6	; 0x06
    3d14:	6f 81       	ldd	r22, Y+7	; 0x07
    3d16:	78 85       	ldd	r23, Y+8	; 0x08
    3d18:	40 0f       	add	r20, r16
    3d1a:	51 1f       	adc	r21, r17
    3d1c:	62 1f       	adc	r22, r18
    3d1e:	73 1f       	adc	r23, r19
    3d20:	44 83       	std	Z+4, r20	; 0x04
    3d22:	55 83       	std	Z+5, r21	; 0x05
    3d24:	66 83       	std	Z+6, r22	; 0x06
    3d26:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3d28:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_time_compact_nanos>
return NRK_OK;
}
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	60 96       	adiw	r28, 0x10	; 16
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	ff 90       	pop	r15
    3d44:	ef 90       	pop	r14
    3d46:	df 90       	pop	r13
    3d48:	cf 90       	pop	r12
    3d4a:	bf 90       	pop	r11
    3d4c:	af 90       	pop	r10
    3d4e:	9f 90       	pop	r9
    3d50:	8f 90       	pop	r8
    3d52:	08 95       	ret

00003d54 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3d54:	ea e4       	ldi	r30, 0x4A	; 74
    3d56:	f8 e0       	ldi	r31, 0x08	; 8
    3d58:	60 83       	st	Z, r22
    3d5a:	71 83       	std	Z+1, r23	; 0x01
    3d5c:	82 83       	std	Z+2, r24	; 0x02
    3d5e:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    3d60:	24 83       	std	Z+4, r18	; 0x04
    3d62:	35 83       	std	Z+5, r19	; 0x05
    3d64:	46 83       	std	Z+6, r20	; 0x06
    3d66:	57 83       	std	Z+7, r21	; 0x07
    3d68:	08 95       	ret

00003d6a <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3d6a:	2f 92       	push	r2
    3d6c:	3f 92       	push	r3
    3d6e:	4f 92       	push	r4
    3d70:	5f 92       	push	r5
    3d72:	6f 92       	push	r6
    3d74:	7f 92       	push	r7
    3d76:	8f 92       	push	r8
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	bf 92       	push	r11
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3d8c:	c0 80       	ld	r12, Z
    3d8e:	d1 80       	ldd	r13, Z+1	; 0x01
    3d90:	e2 80       	ldd	r14, Z+2	; 0x02
    3d92:	f3 80       	ldd	r15, Z+3	; 0x03
    3d94:	c1 14       	cp	r12, r1
    3d96:	d1 04       	cpc	r13, r1
    3d98:	e1 04       	cpc	r14, r1
    3d9a:	f1 04       	cpc	r15, r1
    3d9c:	e1 f1       	breq	.+120    	; 0x3e16 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    3d9e:	84 81       	ldd	r24, Z+4	; 0x04
    3da0:	95 81       	ldd	r25, Z+5	; 0x05
    3da2:	a6 81       	ldd	r26, Z+6	; 0x06
    3da4:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    3da6:	22 e4       	ldi	r18, 0x42	; 66
    3da8:	c2 16       	cp	r12, r18
    3daa:	d1 04       	cpc	r13, r1
    3dac:	e1 04       	cpc	r14, r1
    3dae:	f1 04       	cpc	r15, r1
    3db0:	f0 f5       	brcc	.+124    	; 0x3e2e <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3db2:	1c 01       	movw	r2, r24
    3db4:	2d 01       	movw	r4, r26
    3db6:	61 2c       	mov	r6, r1
    3db8:	71 2c       	mov	r7, r1
    3dba:	43 01       	movw	r8, r6
    3dbc:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3dbe:	8e 2f       	mov	r24, r30
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	a0 e0       	ldi	r26, 0x00	; 0
    3dc4:	b0 e0       	ldi	r27, 0x00	; 0
    3dc6:	8c 15       	cp	r24, r12
    3dc8:	9d 05       	cpc	r25, r13
    3dca:	ae 05       	cpc	r26, r14
    3dcc:	bf 05       	cpc	r27, r15
    3dce:	88 f4       	brcc	.+34     	; 0x3df2 <_nrk_time_to_ticks+0x88>
    3dd0:	91 01       	movw	r18, r2
    3dd2:	a2 01       	movw	r20, r4
    3dd4:	b3 01       	movw	r22, r6
    3dd6:	c4 01       	movw	r24, r8
    3dd8:	36 53       	subi	r19, 0x36	; 54
    3dda:	45 46       	sbci	r20, 0x65	; 101
    3ddc:	54 4c       	sbci	r21, 0xC4	; 196
    3dde:	6f 4f       	sbci	r22, 0xFF	; 255
    3de0:	7f 4f       	sbci	r23, 0xFF	; 255
    3de2:	8f 4f       	sbci	r24, 0xFF	; 255
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255
    3de6:	19 01       	movw	r2, r18
    3de8:	2a 01       	movw	r4, r20
    3dea:	3b 01       	movw	r6, r22
    3dec:	4c 01       	movw	r8, r24
    3dee:	ef 5f       	subi	r30, 0xFF	; 255
    3df0:	e6 cf       	rjmp	.-52     	; 0x3dbe <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3df2:	83 eb       	ldi	r24, 0xB3	; 179
    3df4:	a8 2e       	mov	r10, r24
    3df6:	96 ee       	ldi	r25, 0xE6	; 230
    3df8:	b9 2e       	mov	r11, r25
    3dfa:	2e e0       	ldi	r18, 0x0E	; 14
    3dfc:	c2 2e       	mov	r12, r18
    3dfe:	d1 2c       	mov	r13, r1
    3e00:	e1 2c       	mov	r14, r1
    3e02:	f1 2c       	mov	r15, r1
    3e04:	00 e0       	ldi	r16, 0x00	; 0
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	91 01       	movw	r18, r2
    3e0a:	a2 01       	movw	r20, r4
    3e0c:	b3 01       	movw	r22, r6
    3e0e:	c4 01       	movw	r24, r8
    3e10:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <__udivdi3>
    3e14:	0a c0       	rjmp	.+20     	; 0x3e2a <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3e16:	64 81       	ldd	r22, Z+4	; 0x04
    3e18:	75 81       	ldd	r23, Z+5	; 0x05
    3e1a:	86 81       	ldd	r24, Z+6	; 0x06
    3e1c:	97 81       	ldd	r25, Z+7	; 0x07
    3e1e:	23 eb       	ldi	r18, 0xB3	; 179
    3e20:	36 ee       	ldi	r19, 0xE6	; 230
    3e22:	4e e0       	ldi	r20, 0x0E	; 14
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
    3e2a:	c9 01       	movw	r24, r18
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	ff 90       	pop	r15
    3e38:	ef 90       	pop	r14
    3e3a:	df 90       	pop	r13
    3e3c:	cf 90       	pop	r12
    3e3e:	bf 90       	pop	r11
    3e40:	af 90       	pop	r10
    3e42:	9f 90       	pop	r9
    3e44:	8f 90       	pop	r8
    3e46:	7f 90       	pop	r7
    3e48:	6f 90       	pop	r6
    3e4a:	5f 90       	pop	r5
    3e4c:	4f 90       	pop	r4
    3e4e:	3f 90       	pop	r3
    3e50:	2f 90       	pop	r2
    3e52:	08 95       	ret

00003e54 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3e54:	cf 92       	push	r12
    3e56:	df 92       	push	r13
    3e58:	ef 92       	push	r14
    3e5a:	ff 92       	push	r15
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	cd b7       	in	r28, 0x3d	; 61
    3e62:	de b7       	in	r29, 0x3e	; 62
    3e64:	28 97       	sbiw	r28, 0x08	; 8
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3e70:	6b 01       	movw	r12, r22
    3e72:	7c 01       	movw	r14, r24
    3e74:	2a e0       	ldi	r18, 0x0A	; 10
    3e76:	f6 94       	lsr	r15
    3e78:	e7 94       	ror	r14
    3e7a:	d7 94       	ror	r13
    3e7c:	c7 94       	ror	r12
    3e7e:	2a 95       	dec	r18
    3e80:	d1 f7       	brne	.-12     	; 0x3e76 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3e82:	c9 82       	std	Y+1, r12	; 0x01
    3e84:	da 82       	std	Y+2, r13	; 0x02
    3e86:	eb 82       	std	Y+3, r14	; 0x03
    3e88:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3e8a:	9b 01       	movw	r18, r22
    3e8c:	ac 01       	movw	r20, r24
    3e8e:	33 70       	andi	r19, 0x03	; 3
    3e90:	44 27       	eor	r20, r20
    3e92:	55 27       	eor	r21, r21
    3e94:	63 eb       	ldi	r22, 0xB3	; 179
    3e96:	76 ee       	ldi	r23, 0xE6	; 230
    3e98:	8e e0       	ldi	r24, 0x0E	; 14
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__mulsi3>

return t;
    3ea0:	2c 2d       	mov	r18, r12
    3ea2:	3a 81       	ldd	r19, Y+2	; 0x02
    3ea4:	4b 81       	ldd	r20, Y+3	; 0x03
    3ea6:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3ea8:	28 96       	adiw	r28, 0x08	; 8
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	df 91       	pop	r29
    3eb6:	cf 91       	pop	r28
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	df 90       	pop	r13
    3ebe:	cf 90       	pop	r12
    3ec0:	08 95       	ret

00003ec2 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3ec2:	2f 92       	push	r2
    3ec4:	3f 92       	push	r3
    3ec6:	4f 92       	push	r4
    3ec8:	5f 92       	push	r5
    3eca:	6f 92       	push	r6
    3ecc:	7f 92       	push	r7
    3ece:	8f 92       	push	r8
    3ed0:	9f 92       	push	r9
    3ed2:	af 92       	push	r10
    3ed4:	bf 92       	push	r11
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3ee4:	c0 80       	ld	r12, Z
    3ee6:	d1 80       	ldd	r13, Z+1	; 0x01
    3ee8:	e2 80       	ldd	r14, Z+2	; 0x02
    3eea:	f3 80       	ldd	r15, Z+3	; 0x03
    3eec:	c1 14       	cp	r12, r1
    3eee:	d1 04       	cpc	r13, r1
    3ef0:	e1 04       	cpc	r14, r1
    3ef2:	f1 04       	cpc	r15, r1
    3ef4:	b9 f1       	breq	.+110    	; 0x3f64 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    3ef6:	84 81       	ldd	r24, Z+4	; 0x04
    3ef8:	95 81       	ldd	r25, Z+5	; 0x05
    3efa:	a6 81       	ldd	r26, Z+6	; 0x06
    3efc:	b7 81       	ldd	r27, Z+7	; 0x07
    3efe:	1c 01       	movw	r2, r24
    3f00:	2d 01       	movw	r4, r26
    3f02:	61 2c       	mov	r6, r1
    3f04:	71 2c       	mov	r7, r1
    3f06:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3f08:	e0 e0       	ldi	r30, 0x00	; 0
    3f0a:	8e 2f       	mov	r24, r30
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	a0 e0       	ldi	r26, 0x00	; 0
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
    3f12:	8c 15       	cp	r24, r12
    3f14:	9d 05       	cpc	r25, r13
    3f16:	ae 05       	cpc	r26, r14
    3f18:	bf 05       	cpc	r27, r15
    3f1a:	88 f4       	brcc	.+34     	; 0x3f3e <_nrk_time_to_ticks_long+0x7c>
    3f1c:	91 01       	movw	r18, r2
    3f1e:	a2 01       	movw	r20, r4
    3f20:	b3 01       	movw	r22, r6
    3f22:	c4 01       	movw	r24, r8
    3f24:	36 53       	subi	r19, 0x36	; 54
    3f26:	45 46       	sbci	r20, 0x65	; 101
    3f28:	54 4c       	sbci	r21, 0xC4	; 196
    3f2a:	6f 4f       	sbci	r22, 0xFF	; 255
    3f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f30:	9f 4f       	sbci	r25, 0xFF	; 255
    3f32:	19 01       	movw	r2, r18
    3f34:	2a 01       	movw	r4, r20
    3f36:	3b 01       	movw	r6, r22
    3f38:	4c 01       	movw	r8, r24
    3f3a:	ef 5f       	subi	r30, 0xFF	; 255
    3f3c:	e6 cf       	rjmp	.-52     	; 0x3f0a <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3f3e:	83 eb       	ldi	r24, 0xB3	; 179
    3f40:	a8 2e       	mov	r10, r24
    3f42:	96 ee       	ldi	r25, 0xE6	; 230
    3f44:	b9 2e       	mov	r11, r25
    3f46:	2e e0       	ldi	r18, 0x0E	; 14
    3f48:	c2 2e       	mov	r12, r18
    3f4a:	d1 2c       	mov	r13, r1
    3f4c:	e1 2c       	mov	r14, r1
    3f4e:	f1 2c       	mov	r15, r1
    3f50:	00 e0       	ldi	r16, 0x00	; 0
    3f52:	10 e0       	ldi	r17, 0x00	; 0
    3f54:	91 01       	movw	r18, r2
    3f56:	a2 01       	movw	r20, r4
    3f58:	b3 01       	movw	r22, r6
    3f5a:	c4 01       	movw	r24, r8
    3f5c:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <__udivdi3>
    3f60:	ca 01       	movw	r24, r20
    3f62:	0b c0       	rjmp	.+22     	; 0x3f7a <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3f64:	64 81       	ldd	r22, Z+4	; 0x04
    3f66:	75 81       	ldd	r23, Z+5	; 0x05
    3f68:	86 81       	ldd	r24, Z+6	; 0x06
    3f6a:	97 81       	ldd	r25, Z+7	; 0x07
    3f6c:	23 eb       	ldi	r18, 0xB3	; 179
    3f6e:	36 ee       	ldi	r19, 0xE6	; 230
    3f70:	4e e0       	ldi	r20, 0x0E	; 14
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
    3f78:	ca 01       	movw	r24, r20
}
return ticks;
}
    3f7a:	b9 01       	movw	r22, r18
    3f7c:	1f 91       	pop	r17
    3f7e:	0f 91       	pop	r16
    3f80:	ff 90       	pop	r15
    3f82:	ef 90       	pop	r14
    3f84:	df 90       	pop	r13
    3f86:	cf 90       	pop	r12
    3f88:	bf 90       	pop	r11
    3f8a:	af 90       	pop	r10
    3f8c:	9f 90       	pop	r9
    3f8e:	8f 90       	pop	r8
    3f90:	7f 90       	pop	r7
    3f92:	6f 90       	pop	r6
    3f94:	5f 90       	pop	r5
    3f96:	4f 90       	pop	r4
    3f98:	3f 90       	pop	r3
    3f9a:	2f 90       	pop	r2
    3f9c:	08 95       	ret

00003f9e <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    3f9e:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3fa0:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3fa2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3fa6:	0e 94 96 23 	call	0x472c	; 0x472c <_nrk_get_next_wakeup>
    3faa:	84 30       	cpi	r24, 0x04	; 4
    3fac:	28 f4       	brcc	.+10     	; 0x3fb8 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3fae:	d0 93 47 08 	sts	0x0847, r29
	    nrk_idle();
    3fb2:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <nrk_idle>
    3fb6:	08 c0       	rjmp	.+16     	; 0x3fc8 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    3fb8:	8a e0       	ldi	r24, 0x0A	; 10
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 ae 22 	call	0x455c	; 0x455c <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    3fc0:	c0 93 47 08 	sts	0x0847, r28
	    nrk_sleep();
    3fc4:	0e 94 99 26 	call	0x4d32	; 0x4d32 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3fc8:	80 91 b3 06 	lds	r24, 0x06B3
    3fcc:	85 35       	cpi	r24, 0x55	; 85
    3fce:	19 f0       	breq	.+6      	; 0x3fd6 <nrk_idle_task+0x38>
    3fd0:	88 e0       	ldi	r24, 0x08	; 8
    3fd2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3fd6:	80 91 7e 41 	lds	r24, 0x417E
    3fda:	85 35       	cpi	r24, 0x55	; 85
    3fdc:	11 f3       	breq	.-60     	; 0x3fa2 <nrk_idle_task+0x4>
    3fde:	88 e0       	ldi	r24, 0x08	; 8
    3fe0:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
    3fe4:	de cf       	rjmp	.-68     	; 0x3fa2 <nrk_idle_task+0x4>

00003fe6 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3fe6:	2f 92       	push	r2
    3fe8:	3f 92       	push	r3
    3fea:	4f 92       	push	r4
    3fec:	5f 92       	push	r5
    3fee:	6f 92       	push	r6
    3ff0:	7f 92       	push	r7
    3ff2:	8f 92       	push	r8
    3ff4:	9f 92       	push	r9
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	00 d0       	rcall	.+0      	; 0x400c <_nrk_scheduler+0x26>
    400c:	1f 92       	push	r1
    400e:	cd b7       	in	r28, 0x3d	; 61
    4010:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4012:	0e 94 ca 22 	call	0x4594	; 0x4594 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4016:	0e 94 af 12 	call	0x255e	; 0x255e <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    401a:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    401e:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_nrk_high_speed_timer_get>
    4022:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4024:	8a ef       	ldi	r24, 0xFA	; 250
    4026:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    402a:	a0 91 38 07 	lds	r26, 0x0738
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	23 eb       	ldi	r18, 0xB3	; 179
    4032:	36 ee       	ldi	r19, 0xE6	; 230
    4034:	4e e0       	ldi	r20, 0x0E	; 14
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    403c:	00 91 4e 08 	lds	r16, 0x084E
    4040:	10 91 4f 08 	lds	r17, 0x084F
    4044:	20 91 50 08 	lds	r18, 0x0850
    4048:	30 91 51 08 	lds	r19, 0x0851
    404c:	6b 01       	movw	r12, r22
    404e:	7c 01       	movw	r14, r24
    4050:	c0 0e       	add	r12, r16
    4052:	d1 1e       	adc	r13, r17
    4054:	e2 1e       	adc	r14, r18
    4056:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4058:	c7 01       	movw	r24, r14
    405a:	b6 01       	movw	r22, r12
    405c:	23 eb       	ldi	r18, 0xB3	; 179
    405e:	36 ee       	ldi	r19, 0xE6	; 230
    4060:	4e e0       	ldi	r20, 0x0E	; 14
    4062:	50 e0       	ldi	r21, 0x00	; 0
    4064:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
    4068:	26 01       	movw	r4, r12
    406a:	37 01       	movw	r6, r14
    406c:	46 1a       	sub	r4, r22
    406e:	57 0a       	sbc	r5, r23
    4070:	68 0a       	sbc	r6, r24
    4072:	79 0a       	sbc	r7, r25
    4074:	d3 01       	movw	r26, r6
    4076:	c2 01       	movw	r24, r4
    4078:	00 91 4a 08 	lds	r16, 0x084A
    407c:	10 91 4b 08 	lds	r17, 0x084B
    4080:	20 91 4c 08 	lds	r18, 0x084C
    4084:	30 91 4d 08 	lds	r19, 0x084D

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4088:	43 eb       	ldi	r20, 0xB3	; 179
    408a:	84 2e       	mov	r8, r20
    408c:	46 ee       	ldi	r20, 0xE6	; 230
    408e:	94 2e       	mov	r9, r20
    4090:	4e e0       	ldi	r20, 0x0E	; 14
    4092:	a4 2e       	mov	r10, r20
    4094:	b1 2c       	mov	r11, r1
    4096:	68 01       	movw	r12, r16
    4098:	79 01       	movw	r14, r18
    409a:	4f ef       	ldi	r20, 0xFF	; 255
    409c:	c4 1a       	sub	r12, r20
    409e:	d4 0a       	sbc	r13, r20
    40a0:	e4 0a       	sbc	r14, r20
    40a2:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    40a4:	81 15       	cp	r24, r1
    40a6:	5a ec       	ldi	r21, 0xCA	; 202
    40a8:	95 07       	cpc	r25, r21
    40aa:	5a e9       	ldi	r21, 0x9A	; 154
    40ac:	a5 07       	cpc	r26, r21
    40ae:	5b e3       	ldi	r21, 0x3B	; 59
    40b0:	b5 07       	cpc	r27, r21
    40b2:	c8 f0       	brcs	.+50     	; 0x40e6 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    40b4:	2c 01       	movw	r4, r24
    40b6:	3d 01       	movw	r6, r26
    40b8:	2a ec       	ldi	r18, 0xCA	; 202
    40ba:	52 1a       	sub	r5, r18
    40bc:	2a e9       	ldi	r18, 0x9A	; 154
    40be:	62 0a       	sbc	r6, r18
    40c0:	2b e3       	ldi	r18, 0x3B	; 59
    40c2:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    40c4:	c3 01       	movw	r24, r6
    40c6:	b2 01       	movw	r22, r4
    40c8:	a5 01       	movw	r20, r10
    40ca:	94 01       	movw	r18, r8
    40cc:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
    40d0:	a3 01       	movw	r20, r6
    40d2:	92 01       	movw	r18, r4
    40d4:	26 1b       	sub	r18, r22
    40d6:	37 0b       	sbc	r19, r23
    40d8:	48 0b       	sbc	r20, r24
    40da:	59 0b       	sbc	r21, r25
    40dc:	da 01       	movw	r26, r20
    40de:	c9 01       	movw	r24, r18
    40e0:	97 01       	movw	r18, r14
    40e2:	86 01       	movw	r16, r12
    40e4:	d8 cf       	rjmp	.-80     	; 0x4096 <_nrk_scheduler+0xb0>
    40e6:	80 93 4e 08 	sts	0x084E, r24
    40ea:	90 93 4f 08 	sts	0x084F, r25
    40ee:	a0 93 50 08 	sts	0x0850, r26
    40f2:	b0 93 51 08 	sts	0x0851, r27
    40f6:	00 93 4a 08 	sts	0x084A, r16
    40fa:	10 93 4b 08 	sts	0x084B, r17
    40fe:	20 93 4c 08 	sts	0x084C, r18
    4102:	30 93 4d 08 	sts	0x084D, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4106:	e0 91 53 08 	lds	r30, 0x0853
    410a:	f0 91 54 08 	lds	r31, 0x0854
    410e:	85 81       	ldd	r24, Z+5	; 0x05
    4110:	88 23       	and	r24, r24
    4112:	39 f1       	breq	.+78     	; 0x4162 <_nrk_scheduler+0x17c>
    4114:	81 85       	ldd	r24, Z+9	; 0x09
    4116:	84 30       	cpi	r24, 0x04	; 4
    4118:	21 f1       	breq	.+72     	; 0x4162 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    411a:	87 81       	ldd	r24, Z+7	; 0x07
    411c:	82 30       	cpi	r24, 0x02	; 2
    411e:	29 f0       	breq	.+10     	; 0x412a <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4120:	88 23       	and	r24, r24
    4122:	41 f0       	breq	.+16     	; 0x4134 <_nrk_scheduler+0x14e>
    4124:	86 81       	ldd	r24, Z+6	; 0x06
    4126:	81 11       	cpse	r24, r1
    4128:	02 c0       	rjmp	.+4      	; 0x412e <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    412a:	85 e0       	ldi	r24, 0x05	; 5
    412c:	01 c0       	rjmp	.+2      	; 0x4130 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	81 87       	std	Z+9, r24	; 0x09
    4132:	14 c0       	rjmp	.+40     	; 0x415c <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4134:	83 e0       	ldi	r24, 0x03	; 3
    4136:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4138:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    413a:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    413c:	85 89       	ldd	r24, Z+21	; 0x15
    413e:	96 89       	ldd	r25, Z+22	; 0x16
    4140:	a7 89       	ldd	r26, Z+23	; 0x17
    4142:	b0 8d       	ldd	r27, Z+24	; 0x18
    4144:	89 2b       	or	r24, r25
    4146:	8a 2b       	or	r24, r26
    4148:	8b 2b       	or	r24, r27
    414a:	41 f4       	brne	.+16     	; 0x415c <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    414c:	81 8d       	ldd	r24, Z+25	; 0x19
    414e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4150:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4152:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4154:	85 8b       	std	Z+21, r24	; 0x15
    4156:	96 8b       	std	Z+22, r25	; 0x16
    4158:	a7 8b       	std	Z+23, r26	; 0x17
    415a:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    415c:	80 85       	ldd	r24, Z+8	; 0x08
    415e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4162:	e0 91 53 08 	lds	r30, 0x0853
    4166:	f0 91 54 08 	lds	r31, 0x0854
    416a:	85 a1       	ldd	r24, Z+37	; 0x25
    416c:	96 a1       	ldd	r25, Z+38	; 0x26
    416e:	a7 a1       	ldd	r26, Z+39	; 0x27
    4170:	b0 a5       	ldd	r27, Z+40	; 0x28
    4172:	89 2b       	or	r24, r25
    4174:	8a 2b       	or	r24, r26
    4176:	8b 2b       	or	r24, r27
    4178:	09 f4       	brne	.+2      	; 0x417c <_nrk_scheduler+0x196>
    417a:	44 c0       	rjmp	.+136    	; 0x4204 <__stack+0x5>
    417c:	20 85       	ldd	r18, Z+8	; 0x08
    417e:	22 23       	and	r18, r18
    4180:	09 f4       	brne	.+2      	; 0x4184 <_nrk_scheduler+0x19e>
    4182:	40 c0       	rjmp	.+128    	; 0x4204 <__stack+0x5>
    4184:	81 85       	ldd	r24, Z+9	; 0x09
    4186:	84 30       	cpi	r24, 0x04	; 4
    4188:	e9 f1       	breq	.+122    	; 0x4204 <__stack+0x5>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    418a:	85 8d       	ldd	r24, Z+29	; 0x1d
    418c:	96 8d       	ldd	r25, Z+30	; 0x1e
    418e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4190:	b0 a1       	ldd	r27, Z+32	; 0x20
    4192:	40 91 38 07 	lds	r20, 0x0738
    4196:	50 e0       	ldi	r21, 0x00	; 0
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	84 17       	cp	r24, r20
    419e:	95 07       	cpc	r25, r21
    41a0:	a6 07       	cpc	r26, r22
    41a2:	b7 07       	cpc	r27, r23
    41a4:	68 f4       	brcc	.+26     	; 0x41c0 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    41a6:	62 2f       	mov	r22, r18
    41a8:	82 e0       	ldi	r24, 0x02	; 2
    41aa:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    41ae:	e0 91 53 08 	lds	r30, 0x0853
    41b2:	f0 91 54 08 	lds	r31, 0x0854
    41b6:	15 8e       	std	Z+29, r1	; 0x1d
    41b8:	16 8e       	std	Z+30, r1	; 0x1e
    41ba:	17 8e       	std	Z+31, r1	; 0x1f
    41bc:	10 a2       	std	Z+32, r1	; 0x20
    41be:	08 c0       	rjmp	.+16     	; 0x41d0 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    41c0:	84 1b       	sub	r24, r20
    41c2:	95 0b       	sbc	r25, r21
    41c4:	a6 0b       	sbc	r26, r22
    41c6:	b7 0b       	sbc	r27, r23
    41c8:	85 8f       	std	Z+29, r24	; 0x1d
    41ca:	96 8f       	std	Z+30, r25	; 0x1e
    41cc:	a7 8f       	std	Z+31, r26	; 0x1f
    41ce:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    41d0:	e0 91 53 08 	lds	r30, 0x0853
    41d4:	f0 91 54 08 	lds	r31, 0x0854
    41d8:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    41da:	85 8d       	ldd	r24, Z+29	; 0x1d
    41dc:	96 8d       	ldd	r25, Z+30	; 0x1e
    41de:	a7 8d       	ldd	r26, Z+31	; 0x1f
    41e0:	b0 a1       	ldd	r27, Z+32	; 0x20
    41e2:	89 2b       	or	r24, r25
    41e4:	8a 2b       	or	r24, r26
    41e6:	8b 2b       	or	r24, r27
    41e8:	69 f4       	brne	.+26     	; 0x4204 <__stack+0x5>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    41ea:	61 2f       	mov	r22, r17
    41ec:	83 e0       	ldi	r24, 0x03	; 3
    41ee:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    41f2:	e0 91 53 08 	lds	r30, 0x0853
    41f6:	f0 91 54 08 	lds	r31, 0x0854
    41fa:	83 e0       	ldi	r24, 0x03	; 3
    41fc:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    41fe:	81 2f       	mov	r24, r17
    4200:	0e 94 b4 1a 	call	0x3568	; 0x3568 <nrk_rem_from_readyQ>
    4204:	87 e9       	ldi	r24, 0x97	; 151
    4206:	97 e0       	ldi	r25, 0x07	; 7
    4208:	9b 83       	std	Y+3, r25	; 0x03
    420a:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    420c:	00 e6       	ldi	r16, 0x60	; 96
    420e:	1a ee       	ldi	r17, 0xEA	; 234
    4210:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4212:	2a ef       	ldi	r18, 0xFA	; 250
    4214:	c2 2e       	mov	r12, r18
    4216:	d1 2c       	mov	r13, r1
    4218:	e1 2c       	mov	r14, r1
    421a:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    421c:	81 2c       	mov	r8, r1
    421e:	91 2c       	mov	r9, r1
    4220:	54 01       	movw	r10, r8
    4222:	83 94       	inc	r8
    4224:	ea 81       	ldd	r30, Y+2	; 0x02
    4226:	fb 81       	ldd	r31, Y+3	; 0x03
    4228:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    422a:	80 81       	ld	r24, Z
    422c:	8f 3f       	cpi	r24, 0xFF	; 255
    422e:	09 f4       	brne	.+2      	; 0x4232 <__stack+0x33>
    4230:	04 c1       	rjmp	.+520    	; 0x443a <__stack+0x23b>
    4232:	ea 81       	ldd	r30, Y+2	; 0x02
    4234:	fb 81       	ldd	r31, Y+3	; 0x03
    4236:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    4238:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    423a:	88 23       	and	r24, r24
    423c:	09 f4       	brne	.+2      	; 0x4240 <__stack+0x41>
    423e:	67 c0       	rjmp	.+206    	; 0x430e <__stack+0x10f>
    4240:	ea 81       	ldd	r30, Y+2	; 0x02
    4242:	fb 81       	ldd	r31, Y+3	; 0x03
    4244:	80 81       	ld	r24, Z
    4246:	84 30       	cpi	r24, 0x04	; 4
    4248:	09 f4       	brne	.+2      	; 0x424c <__stack+0x4d>
    424a:	61 c0       	rjmp	.+194    	; 0x430e <__stack+0x10f>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    424c:	44 84       	ldd	r4, Z+12	; 0x0c
    424e:	55 84       	ldd	r5, Z+13	; 0x0d
    4250:	66 84       	ldd	r6, Z+14	; 0x0e
    4252:	77 84       	ldd	r7, Z+15	; 0x0f
    4254:	60 91 38 07 	lds	r22, 0x0738
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	46 16       	cp	r4, r22
    4260:	57 06       	cpc	r5, r23
    4262:	68 06       	cpc	r6, r24
    4264:	79 06       	cpc	r7, r25
    4266:	48 f0       	brcs	.+18     	; 0x427a <__stack+0x7b>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4268:	46 1a       	sub	r4, r22
    426a:	57 0a       	sbc	r5, r23
    426c:	68 0a       	sbc	r6, r24
    426e:	79 0a       	sbc	r7, r25
    4270:	44 86       	std	Z+12, r4	; 0x0c
    4272:	55 86       	std	Z+13, r5	; 0x0d
    4274:	66 86       	std	Z+14, r6	; 0x0e
    4276:	77 86       	std	Z+15, r7	; 0x0f
    4278:	06 c0       	rjmp	.+12     	; 0x4286 <__stack+0x87>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    427a:	ea 81       	ldd	r30, Y+2	; 0x02
    427c:	fb 81       	ldd	r31, Y+3	; 0x03
    427e:	14 86       	std	Z+12, r1	; 0x0c
    4280:	15 86       	std	Z+13, r1	; 0x0d
    4282:	16 86       	std	Z+14, r1	; 0x0e
    4284:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4286:	ea 81       	ldd	r30, Y+2	; 0x02
    4288:	fb 81       	ldd	r31, Y+3	; 0x03
    428a:	40 88       	ldd	r4, Z+16	; 0x10
    428c:	51 88       	ldd	r5, Z+17	; 0x11
    428e:	62 88       	ldd	r6, Z+18	; 0x12
    4290:	73 88       	ldd	r7, Z+19	; 0x13
    4292:	46 16       	cp	r4, r22
    4294:	57 06       	cpc	r5, r23
    4296:	68 06       	cpc	r6, r24
    4298:	79 06       	cpc	r7, r25
    429a:	48 f0       	brcs	.+18     	; 0x42ae <__stack+0xaf>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    429c:	46 1a       	sub	r4, r22
    429e:	57 0a       	sbc	r5, r23
    42a0:	68 0a       	sbc	r6, r24
    42a2:	79 0a       	sbc	r7, r25
    42a4:	40 8a       	std	Z+16, r4	; 0x10
    42a6:	51 8a       	std	Z+17, r5	; 0x11
    42a8:	62 8a       	std	Z+18, r6	; 0x12
    42aa:	73 8a       	std	Z+19, r7	; 0x13
    42ac:	1e c0       	rjmp	.+60     	; 0x42ea <__stack+0xeb>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    42ae:	ea 81       	ldd	r30, Y+2	; 0x02
    42b0:	fb 81       	ldd	r31, Y+3	; 0x03
    42b2:	20 8d       	ldd	r18, Z+24	; 0x18
    42b4:	31 8d       	ldd	r19, Z+25	; 0x19
    42b6:	42 8d       	ldd	r20, Z+26	; 0x1a
    42b8:	53 8d       	ldd	r21, Z+27	; 0x1b
    42ba:	62 17       	cp	r22, r18
    42bc:	73 07       	cpc	r23, r19
    42be:	84 07       	cpc	r24, r20
    42c0:	95 07       	cpc	r25, r21
    42c2:	58 f4       	brcc	.+22     	; 0x42da <__stack+0xdb>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    42c4:	29 01       	movw	r4, r18
    42c6:	3a 01       	movw	r6, r20
    42c8:	46 1a       	sub	r4, r22
    42ca:	57 0a       	sbc	r5, r23
    42cc:	68 0a       	sbc	r6, r24
    42ce:	79 0a       	sbc	r7, r25
    42d0:	40 8a       	std	Z+16, r4	; 0x10
    42d2:	51 8a       	std	Z+17, r5	; 0x11
    42d4:	62 8a       	std	Z+18, r6	; 0x12
    42d6:	73 8a       	std	Z+19, r7	; 0x13
    42d8:	08 c0       	rjmp	.+16     	; 0x42ea <__stack+0xeb>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    42da:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
    42de:	ea 81       	ldd	r30, Y+2	; 0x02
    42e0:	fb 81       	ldd	r31, Y+3	; 0x03
    42e2:	60 8b       	std	Z+16, r22	; 0x10
    42e4:	71 8b       	std	Z+17, r23	; 0x11
    42e6:	82 8b       	std	Z+18, r24	; 0x12
    42e8:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    42ea:	ea 81       	ldd	r30, Y+2	; 0x02
    42ec:	fb 81       	ldd	r31, Y+3	; 0x03
    42ee:	80 89       	ldd	r24, Z+16	; 0x10
    42f0:	91 89       	ldd	r25, Z+17	; 0x11
    42f2:	a2 89       	ldd	r26, Z+18	; 0x12
    42f4:	b3 89       	ldd	r27, Z+19	; 0x13
    42f6:	89 2b       	or	r24, r25
    42f8:	8a 2b       	or	r24, r26
    42fa:	8b 2b       	or	r24, r27
    42fc:	41 f4       	brne	.+16     	; 0x430e <__stack+0x10f>
    42fe:	80 8d       	ldd	r24, Z+24	; 0x18
    4300:	91 8d       	ldd	r25, Z+25	; 0x19
    4302:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4304:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4306:	80 8b       	std	Z+16, r24	; 0x10
    4308:	91 8b       	std	Z+17, r25	; 0x11
    430a:	a2 8b       	std	Z+18, r26	; 0x12
    430c:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    430e:	ea 81       	ldd	r30, Y+2	; 0x02
    4310:	fb 81       	ldd	r31, Y+3	; 0x03
    4312:	80 81       	ld	r24, Z
    4314:	83 30       	cpi	r24, 0x03	; 3
    4316:	09 f0       	breq	.+2      	; 0x431a <__stack+0x11b>
    4318:	90 c0       	rjmp	.+288    	; 0x443a <__stack+0x23b>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    431a:	84 85       	ldd	r24, Z+12	; 0x0c
    431c:	95 85       	ldd	r25, Z+13	; 0x0d
    431e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4320:	b7 85       	ldd	r27, Z+15	; 0x0f
    4322:	89 2b       	or	r24, r25
    4324:	8a 2b       	or	r24, r26
    4326:	8b 2b       	or	r24, r27
    4328:	09 f0       	breq	.+2      	; 0x432c <__stack+0x12d>
    432a:	74 c0       	rjmp	.+232    	; 0x4414 <__stack+0x215>
    432c:	df 01       	movw	r26, r30
    432e:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4330:	8c 91       	ld	r24, X
    4332:	9f 01       	movw	r18, r30
    4334:	23 50       	subi	r18, 0x03	; 3
    4336:	31 09       	sbc	r19, r1
    4338:	88 23       	and	r24, r24
    433a:	a9 f0       	breq	.+42     	; 0x4366 <__stack+0x167>
    433c:	f9 01       	movw	r30, r18
    433e:	80 81       	ld	r24, Z
    4340:	88 23       	and	r24, r24
    4342:	89 f0       	breq	.+34     	; 0x4366 <__stack+0x167>
    4344:	b5 01       	movw	r22, r10
    4346:	a4 01       	movw	r20, r8
    4348:	00 90 43 08 	lds	r0, 0x0843
    434c:	04 c0       	rjmp	.+8      	; 0x4356 <__stack+0x157>
    434e:	44 0f       	add	r20, r20
    4350:	55 1f       	adc	r21, r21
    4352:	66 1f       	adc	r22, r22
    4354:	77 1f       	adc	r23, r23
    4356:	0a 94       	dec	r0
    4358:	d2 f7       	brpl	.-12     	; 0x434e <__stack+0x14f>
    435a:	ea 81       	ldd	r30, Y+2	; 0x02
    435c:	fb 81       	ldd	r31, Y+3	; 0x03
    435e:	40 87       	std	Z+8, r20	; 0x08
    4360:	51 87       	std	Z+9, r21	; 0x09
    4362:	62 87       	std	Z+10, r22	; 0x0a
    4364:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4366:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4368:	f9 01       	movw	r30, r18
    436a:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    436c:	ea 81       	ldd	r30, Y+2	; 0x02
    436e:	fb 81       	ldd	r31, Y+3	; 0x03
    4370:	a0 a1       	ldd	r26, Z+32	; 0x20
    4372:	b1 a1       	ldd	r27, Z+33	; 0x21
    4374:	a1 30       	cpi	r26, 0x01	; 1
    4376:	b1 05       	cpc	r27, r1
    4378:	19 f5       	brne	.+70     	; 0x43c0 <__stack+0x1c1>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    437a:	84 8d       	ldd	r24, Z+28	; 0x1c
    437c:	95 8d       	ldd	r25, Z+29	; 0x1d
    437e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4380:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4382:	84 8b       	std	Z+20, r24	; 0x14
    4384:	95 8b       	std	Z+21, r25	; 0x15
    4386:	a6 8b       	std	Z+22, r26	; 0x16
    4388:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    438a:	92 e0       	ldi	r25, 0x02	; 2
    438c:	49 2e       	mov	r4, r25
    438e:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4390:	80 89       	ldd	r24, Z+16	; 0x10
    4392:	91 89       	ldd	r25, Z+17	; 0x11
    4394:	a2 89       	ldd	r26, Z+18	; 0x12
    4396:	b3 89       	ldd	r27, Z+19	; 0x13
    4398:	84 87       	std	Z+12, r24	; 0x0c
    439a:	95 87       	std	Z+13, r25	; 0x0d
    439c:	a6 87       	std	Z+14, r26	; 0x0e
    439e:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    43a0:	80 8d       	ldd	r24, Z+24	; 0x18
    43a2:	91 8d       	ldd	r25, Z+25	; 0x19
    43a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    43a6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    43a8:	89 2b       	or	r24, r25
    43aa:	8a 2b       	or	r24, r26
    43ac:	8b 2b       	or	r24, r27
    43ae:	21 f4       	brne	.+8      	; 0x43b8 <__stack+0x1b9>
    43b0:	c4 86       	std	Z+12, r12	; 0x0c
    43b2:	d5 86       	std	Z+13, r13	; 0x0d
    43b4:	e6 86       	std	Z+14, r14	; 0x0e
    43b6:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	0e 94 04 1a 	call	0x3408	; 0x3408 <nrk_add_to_readyQ>
    43be:	2a c0       	rjmp	.+84     	; 0x4414 <__stack+0x215>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    43c0:	ea 81       	ldd	r30, Y+2	; 0x02
    43c2:	fb 81       	ldd	r31, Y+3	; 0x03
    43c4:	44 8d       	ldd	r20, Z+28	; 0x1c
    43c6:	55 8d       	ldd	r21, Z+29	; 0x1d
    43c8:	66 8d       	ldd	r22, Z+30	; 0x1e
    43ca:	77 8d       	ldd	r23, Z+31	; 0x1f
    43cc:	44 8b       	std	Z+20, r20	; 0x14
    43ce:	55 8b       	std	Z+21, r21	; 0x15
    43d0:	66 8b       	std	Z+22, r22	; 0x16
    43d2:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    43d4:	40 8c       	ldd	r4, Z+24	; 0x18
    43d6:	51 8c       	ldd	r5, Z+25	; 0x19
    43d8:	62 8c       	ldd	r6, Z+26	; 0x1a
    43da:	73 8c       	ldd	r7, Z+27	; 0x1b
    43dc:	11 97       	sbiw	r26, 0x01	; 1
    43de:	a3 01       	movw	r20, r6
    43e0:	92 01       	movw	r18, r4
    43e2:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    43e6:	64 87       	std	Z+12, r22	; 0x0c
    43e8:	75 87       	std	Z+13, r23	; 0x0d
    43ea:	86 87       	std	Z+14, r24	; 0x0e
    43ec:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    43ee:	60 8b       	std	Z+16, r22	; 0x10
    43f0:	71 8b       	std	Z+17, r23	; 0x11
    43f2:	82 8b       	std	Z+18, r24	; 0x12
    43f4:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    43f6:	45 28       	or	r4, r5
    43f8:	46 28       	or	r4, r6
    43fa:	47 28       	or	r4, r7
    43fc:	21 f4       	brne	.+8      	; 0x4406 <__stack+0x207>
    43fe:	c4 86       	std	Z+12, r12	; 0x0c
    4400:	d5 86       	std	Z+13, r13	; 0x0d
    4402:	e6 86       	std	Z+14, r14	; 0x0e
    4404:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    4406:	44 24       	eor	r4, r4
    4408:	43 94       	inc	r4
    440a:	51 2c       	mov	r5, r1
    440c:	ea 81       	ldd	r30, Y+2	; 0x02
    440e:	fb 81       	ldd	r31, Y+3	; 0x03
    4410:	51 a2       	std	Z+33, r5	; 0x21
    4412:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4414:	ea 81       	ldd	r30, Y+2	; 0x02
    4416:	fb 81       	ldd	r31, Y+3	; 0x03
    4418:	84 85       	ldd	r24, Z+12	; 0x0c
    441a:	95 85       	ldd	r25, Z+13	; 0x0d
    441c:	a6 85       	ldd	r26, Z+14	; 0x0e
    441e:	b7 85       	ldd	r27, Z+15	; 0x0f
    4420:	00 97       	sbiw	r24, 0x00	; 0
    4422:	a1 05       	cpc	r26, r1
    4424:	b1 05       	cpc	r27, r1
    4426:	49 f0       	breq	.+18     	; 0x443a <__stack+0x23b>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4428:	a8 01       	movw	r20, r16
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    442e:	84 17       	cp	r24, r20
    4430:	95 07       	cpc	r25, r21
    4432:	a6 07       	cpc	r26, r22
    4434:	b7 07       	cpc	r27, r23
    4436:	08 f4       	brcc	.+2      	; 0x443a <__stack+0x23b>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4438:	8c 01       	movw	r16, r24
    443a:	f9 81       	ldd	r31, Y+1	; 0x01
    443c:	ff 5f       	subi	r31, 0xFF	; 255
    443e:	f9 83       	std	Y+1, r31	; 0x01
    4440:	2a 81       	ldd	r18, Y+2	; 0x02
    4442:	3b 81       	ldd	r19, Y+3	; 0x03
    4444:	25 5d       	subi	r18, 0xD5	; 213
    4446:	3f 4f       	sbci	r19, 0xFF	; 255
    4448:	3b 83       	std	Y+3, r19	; 0x03
    444a:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    444c:	f4 30       	cpi	r31, 0x04	; 4
    444e:	09 f0       	breq	.+2      	; 0x4452 <__stack+0x253>
    4450:	e9 ce       	rjmp	.-558    	; 0x4224 <__stack+0x25>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4452:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <nrk_get_high_ready_task_ID>
    4456:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4458:	3b e2       	ldi	r19, 0x2B	; 43
    445a:	83 02       	muls	r24, r19
    445c:	f0 01       	movw	r30, r0
    445e:	11 24       	eor	r1, r1
    4460:	e2 57       	subi	r30, 0x72	; 114
    4462:	f8 4f       	sbci	r31, 0xF8	; 248
    4464:	22 85       	ldd	r18, Z+10	; 0x0a
    4466:	20 93 55 08 	sts	0x0855, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    446a:	f0 93 45 08 	sts	0x0845, r31
    446e:	e0 93 44 08 	sts	0x0844, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4472:	88 23       	and	r24, r24
    4474:	f9 f0       	breq	.+62     	; 0x44b4 <__stack+0x2b5>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4476:	85 a1       	ldd	r24, Z+37	; 0x25
    4478:	96 a1       	ldd	r25, Z+38	; 0x26
    447a:	a7 a1       	ldd	r26, Z+39	; 0x27
    447c:	b0 a5       	ldd	r27, Z+40	; 0x28
    447e:	89 2b       	or	r24, r25
    4480:	8a 2b       	or	r24, r26
    4482:	8b 2b       	or	r24, r27
    4484:	99 f0       	breq	.+38     	; 0x44ac <__stack+0x2ad>
    4486:	85 8d       	ldd	r24, Z+29	; 0x1d
    4488:	96 8d       	ldd	r25, Z+30	; 0x1e
    448a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    448c:	b0 a1       	ldd	r27, Z+32	; 0x20
    448e:	8a 3f       	cpi	r24, 0xFA	; 250
    4490:	91 05       	cpc	r25, r1
    4492:	a1 05       	cpc	r26, r1
    4494:	b1 05       	cpc	r27, r1
    4496:	50 f4       	brcc	.+20     	; 0x44ac <__stack+0x2ad>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4498:	a8 01       	movw	r20, r16
    449a:	60 e0       	ldi	r22, 0x00	; 0
    449c:	70 e0       	ldi	r23, 0x00	; 0
    449e:	84 17       	cp	r24, r20
    44a0:	95 07       	cpc	r25, r21
    44a2:	a6 07       	cpc	r26, r22
    44a4:	b7 07       	cpc	r27, r23
    44a6:	e8 f4       	brcc	.+58     	; 0x44e2 <__stack+0x2e3>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    44a8:	8c 01       	movw	r16, r24
    44aa:	1b c0       	rjmp	.+54     	; 0x44e2 <__stack+0x2e3>
    44ac:	0b 3f       	cpi	r16, 0xFB	; 251
    44ae:	11 05       	cpc	r17, r1
    44b0:	c0 f0       	brcs	.+48     	; 0x44e2 <__stack+0x2e3>
    44b2:	12 c0       	rjmp	.+36     	; 0x44d8 <__stack+0x2d9>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    44b4:	04 30       	cpi	r16, 0x04	; 4
    44b6:	11 05       	cpc	r17, r1
    44b8:	a0 f0       	brcs	.+40     	; 0x44e2 <__stack+0x2e3>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    44ba:	c8 01       	movw	r24, r16
    44bc:	03 97       	sbiw	r24, 0x03	; 3
    44be:	8a 3f       	cpi	r24, 0xFA	; 250
    44c0:	91 05       	cpc	r25, r1
    44c2:	38 f4       	brcc	.+14     	; 0x44d2 <__stack+0x2d3>
    44c4:	8c 01       	movw	r16, r24
    44c6:	82 30       	cpi	r24, 0x02	; 2
    44c8:	91 05       	cpc	r25, r1
    44ca:	58 f4       	brcc	.+22     	; 0x44e2 <__stack+0x2e3>
    44cc:	02 e0       	ldi	r16, 0x02	; 2
    44ce:	10 e0       	ldi	r17, 0x00	; 0
    44d0:	08 c0       	rjmp	.+16     	; 0x44e2 <__stack+0x2e3>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    44d2:	0d 3f       	cpi	r16, 0xFD	; 253
    44d4:	11 05       	cpc	r17, r1
    44d6:	19 f0       	breq	.+6      	; 0x44de <__stack+0x2df>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    44d8:	0a ef       	ldi	r16, 0xFA	; 250
    44da:	10 e0       	ldi	r17, 0x00	; 0
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <__stack+0x2e3>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    44de:	07 ef       	ldi	r16, 0xF7	; 247
    44e0:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    44e2:	20 93 46 08 	sts	0x0846, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    44e6:	f0 93 54 08 	sts	0x0854, r31
    44ea:	e0 93 53 08 	sts	0x0853, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    44ee:	00 93 38 07 	sts	0x0738, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    44f2:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    44f6:	28 2f       	mov	r18, r24
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	2f 5f       	subi	r18, 0xFF	; 255
    44fc:	3f 4f       	sbci	r19, 0xFF	; 255
    44fe:	20 17       	cp	r18, r16
    4500:	31 07       	cpc	r19, r17
    4502:	40 f0       	brcs	.+16     	; 0x4514 <__stack+0x315>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4504:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <_nrk_os_timer_get>
    4508:	08 2f       	mov	r16, r24
    450a:	10 e0       	ldi	r17, 0x00	; 0
    450c:	0e 5f       	subi	r16, 0xFE	; 254
    450e:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4510:	00 93 38 07 	sts	0x0738, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4514:	f1 10       	cpse	r15, r1
    4516:	10 92 47 08 	sts	0x0847, r1

    _nrk_set_next_wakeup(next_wake);
    451a:	80 2f       	mov	r24, r16
    451c:	0e 94 9a 23 	call	0x4734	; 0x4734 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4520:	6c ed       	ldi	r22, 0xDC	; 220
    4522:	75 e0       	ldi	r23, 0x05	; 5
    4524:	c1 01       	movw	r24, r2
    4526:	0e 94 02 23 	call	0x4604	; 0x4604 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    452a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    452e:	0f 90       	pop	r0
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	ff 90       	pop	r15
    453e:	ef 90       	pop	r14
    4540:	df 90       	pop	r13
    4542:	cf 90       	pop	r12
    4544:	bf 90       	pop	r11
    4546:	af 90       	pop	r10
    4548:	9f 90       	pop	r9
    454a:	8f 90       	pop	r8
    454c:	7f 90       	pop	r7
    454e:	6f 90       	pop	r6
    4550:	5f 90       	pop	r5
    4552:	4f 90       	pop	r4
    4554:	3f 90       	pop	r3
    4556:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4558:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <nrk_start_high_ready_task>

0000455c <nrk_spin_wait_us>:
	...
    4574:	01 97       	sbiw	r24, 0x01	; 1
    4576:	91 f7       	brne	.-28     	; 0x455c <nrk_spin_wait_us>
    4578:	08 95       	ret

0000457a <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    457a:	10 92 21 01 	sts	0x0121, r1
    457e:	08 95       	ret

00004580 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4580:	89 e0       	ldi	r24, 0x09	; 9
    4582:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4586:	8d e8       	ldi	r24, 0x8D	; 141
    4588:	9c e3       	ldi	r25, 0x3C	; 60
    458a:	90 93 29 01 	sts	0x0129, r25
    458e:	80 93 28 01 	sts	0x0128, r24
    4592:	08 95       	ret

00004594 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4594:	10 92 25 01 	sts	0x0125, r1
    4598:	10 92 24 01 	sts	0x0124, r1
    459c:	08 95       	ret

0000459e <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	00 d0       	rcall	.+0      	; 0x45a4 <_nrk_precision_os_timer_get+0x6>
    45a4:	cd b7       	in	r28, 0x3d	; 61
    45a6:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    45a8:	80 91 24 01 	lds	r24, 0x0124
    45ac:	90 91 25 01 	lds	r25, 0x0125
    45b0:	9a 83       	std	Y+2, r25	; 0x02
    45b2:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    45b4:	89 81       	ldd	r24, Y+1	; 0x01
    45b6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	08 95       	ret

000045c2 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    45c2:	10 92 81 00 	sts	0x0081, r1
    45c6:	08 95       	ret

000045c8 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	80 93 81 00 	sts	0x0081, r24
    45ce:	08 95       	ret

000045d0 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    45d0:	83 b5       	in	r24, 0x23	; 35
    45d2:	81 60       	ori	r24, 0x01	; 1
    45d4:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    45d6:	10 92 85 00 	sts	0x0085, r1
    45da:	10 92 84 00 	sts	0x0084, r1
    45de:	08 95       	ret

000045e0 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    45e0:	cf 93       	push	r28
    45e2:	df 93       	push	r29
    45e4:	00 d0       	rcall	.+0      	; 0x45e6 <_nrk_high_speed_timer_get+0x6>
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    45ea:	80 91 84 00 	lds	r24, 0x0084
    45ee:	90 91 85 00 	lds	r25, 0x0085
    45f2:	9a 83       	std	Y+2, r25	; 0x02
    45f4:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    45fa:	0f 90       	pop	r0
    45fc:	0f 90       	pop	r0
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	08 95       	ret

00004604 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4604:	cf 92       	push	r12
    4606:	df 92       	push	r13
    4608:	ef 92       	push	r14
    460a:	ff 92       	push	r15
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4610:	ec 01       	movw	r28, r24
    4612:	cc 0f       	add	r28, r28
    4614:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4616:	c9 37       	cpi	r28, 0x79	; 121
    4618:	8f ef       	ldi	r24, 0xFF	; 255
    461a:	d8 07       	cpc	r29, r24
    461c:	10 f0       	brcs	.+4      	; 0x4622 <nrk_high_speed_timer_wait+0x1e>
    461e:	c0 e0       	ldi	r28, 0x00	; 0
    4620:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4622:	6b 01       	movw	r12, r22
    4624:	e1 2c       	mov	r14, r1
    4626:	f1 2c       	mov	r15, r1
    4628:	cc 0e       	add	r12, r28
    462a:	dd 1e       	adc	r13, r29
    462c:	e1 1c       	adc	r14, r1
    462e:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	c8 16       	cp	r12, r24
    4634:	d1 04       	cpc	r13, r1
    4636:	e8 06       	cpc	r14, r24
    4638:	f1 04       	cpc	r15, r1
    463a:	40 f0       	brcs	.+16     	; 0x464c <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	e8 1a       	sub	r14, r24
    4640:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    4642:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_nrk_high_speed_timer_get>
    4646:	c8 17       	cp	r28, r24
    4648:	d9 07       	cpc	r29, r25
    464a:	d8 f3       	brcs	.-10     	; 0x4642 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    464c:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_nrk_high_speed_timer_get>
    4650:	8c 15       	cp	r24, r12
    4652:	9d 05       	cpc	r25, r13
    4654:	d8 f3       	brcs	.-10     	; 0x464c <nrk_high_speed_timer_wait+0x48>
}
    4656:	df 91       	pop	r29
    4658:	cf 91       	pop	r28
    465a:	ff 90       	pop	r15
    465c:	ef 90       	pop	r14
    465e:	df 90       	pop	r13
    4660:	cf 90       	pop	r12
    4662:	08 95       	ret

00004664 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4664:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4668:	e0 e7       	ldi	r30, 0x70	; 112
    466a:	f0 e0       	ldi	r31, 0x00	; 0
    466c:	80 81       	ld	r24, Z
    466e:	8d 7f       	andi	r24, 0xFD	; 253
    4670:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4672:	80 81       	ld	r24, Z
    4674:	8e 7f       	andi	r24, 0xFE	; 254
    4676:	80 83       	st	Z, r24
    4678:	08 95       	ret

0000467a <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    467a:	80 93 b2 00 	sts	0x00B2, r24
    467e:	08 95       	ret

00004680 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4680:	e0 e7       	ldi	r30, 0x70	; 112
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	80 81       	ld	r24, Z
    4686:	83 60       	ori	r24, 0x03	; 3
    4688:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    468a:	83 e0       	ldi	r24, 0x03	; 3
    468c:	80 93 b1 00 	sts	0x00B1, r24
    4690:	08 95       	ret

00004692 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4692:	83 b5       	in	r24, 0x23	; 35
    4694:	82 60       	ori	r24, 0x02	; 2
    4696:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4698:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    469c:	10 92 36 07 	sts	0x0736, r1
    _nrk_prev_timer_val=0;
    46a0:	10 92 38 07 	sts	0x0738, r1
    46a4:	08 95       	ret

000046a6 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    46a6:	cf 93       	push	r28
    46a8:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    46aa:	8e ef       	ldi	r24, 0xFE	; 254
    46ac:	80 93 38 07 	sts	0x0738, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    46b0:	80 e2       	ldi	r24, 0x20	; 32
    46b2:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    46b6:	80 91 38 07 	lds	r24, 0x0738
    46ba:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    46be:	83 e0       	ldi	r24, 0x03	; 3
    46c0:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    46c2:	92 e0       	ldi	r25, 0x02	; 2
    46c4:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    46c8:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    46cc:	93 b5       	in	r25, 0x23	; 35
    46ce:	92 60       	ori	r25, 0x02	; 2
    46d0:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    46d2:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    46d4:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    46d6:	83 b5       	in	r24, 0x23	; 35
    46d8:	82 60       	ori	r24, 0x02	; 2
    46da:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    46dc:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    46e6:	10 92 85 00 	sts	0x0085, r1
    46ea:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    46ee:	83 b5       	in	r24, 0x23	; 35
    46f0:	82 60       	ori	r24, 0x02	; 2
    46f2:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    46f4:	83 b5       	in	r24, 0x23	; 35
    46f6:	81 60       	ori	r24, 0x01	; 1
    46f8:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    46fa:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    46fe:	c4 e2       	ldi	r28, 0x24	; 36
    4700:	d1 e0       	ldi	r29, 0x01	; 1
    4702:	19 82       	std	Y+1, r1	; 0x01
    4704:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4706:	83 b5       	in	r24, 0x23	; 35
    4708:	82 60       	ori	r24, 0x02	; 2
    470a:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    470c:	83 b5       	in	r24, 0x23	; 35
    470e:	81 60       	ori	r24, 0x01	; 1
    4710:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4712:	0e 94 49 23 	call	0x4692	; 0x4692 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4716:	19 82       	std	Y+1, r1	; 0x01
    4718:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    471a:	0e 94 40 23 	call	0x4680	; 0x4680 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    471e:	0e 94 c0 22 	call	0x4580	; 0x4580 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4722:	10 92 36 07 	sts	0x0736, r1
}
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	08 95       	ret

0000472c <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    472c:	80 91 b3 00 	lds	r24, 0x00B3
}
    4730:	8f 5f       	subi	r24, 0xFF	; 255
    4732:	08 95       	ret

00004734 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4734:	81 50       	subi	r24, 0x01	; 1
    4736:	80 93 b3 00 	sts	0x00B3, r24
    473a:	08 95       	ret

0000473c <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    473c:	81 11       	cpse	r24, r1
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4740:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4744:	8f ef       	ldi	r24, 0xFF	; 255
    4746:	08 95       	ret

00004748 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4748:	81 11       	cpse	r24, r1
    474a:	06 c0       	rjmp	.+12     	; 0x4758 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    474c:	10 92 95 00 	sts	0x0095, r1
    4750:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	08 95       	ret
	}
return NRK_ERROR;
    4758:	8f ef       	ldi	r24, 0xFF	; 255
}
    475a:	08 95       	ret

0000475c <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    475c:	81 11       	cpse	r24, r1
    475e:	05 c0       	rjmp	.+10     	; 0x476a <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4760:	80 91 94 00 	lds	r24, 0x0094
    4764:	90 91 95 00 	lds	r25, 0x0095
    4768:	08 95       	ret
	}
return 0;
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0

}
    476e:	08 95       	ret

00004770 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4770:	81 11       	cpse	r24, r1
    4772:	05 c0       	rjmp	.+10     	; 0x477e <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4774:	82 e0       	ldi	r24, 0x02	; 2
    4776:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	08 95       	ret
	}
return NRK_ERROR;
    477e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4780:	08 95       	ret

00004782 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4782:	81 11       	cpse	r24, r1
    4784:	35 c0       	rjmp	.+106    	; 0x47f0 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4786:	cb 01       	movw	r24, r22
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	05 97       	sbiw	r24, 0x05	; 5
    478c:	10 f4       	brcc	.+4      	; 0x4792 <nrk_timer_int_configure+0x10>
    478e:	60 93 37 07 	sts	0x0737, r22
	TCCR3A = 0;  
    4792:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4796:	88 e0       	ldi	r24, 0x08	; 8
    4798:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    479c:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    47a0:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    47a4:	30 93 35 07 	sts	0x0735, r19
    47a8:	20 93 34 07 	sts	0x0734, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    47ac:	80 91 37 07 	lds	r24, 0x0737
    47b0:	81 30       	cpi	r24, 0x01	; 1
    47b2:	21 f4       	brne	.+8      	; 0x47bc <nrk_timer_int_configure+0x3a>
    47b4:	80 91 91 00 	lds	r24, 0x0091
    47b8:	81 60       	ori	r24, 0x01	; 1
    47ba:	11 c0       	rjmp	.+34     	; 0x47de <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    47bc:	82 30       	cpi	r24, 0x02	; 2
    47be:	21 f4       	brne	.+8      	; 0x47c8 <nrk_timer_int_configure+0x46>
    47c0:	80 91 91 00 	lds	r24, 0x0091
    47c4:	82 60       	ori	r24, 0x02	; 2
    47c6:	0b c0       	rjmp	.+22     	; 0x47de <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    47c8:	83 30       	cpi	r24, 0x03	; 3
    47ca:	21 f4       	brne	.+8      	; 0x47d4 <nrk_timer_int_configure+0x52>
    47cc:	80 91 91 00 	lds	r24, 0x0091
    47d0:	83 60       	ori	r24, 0x03	; 3
    47d2:	05 c0       	rjmp	.+10     	; 0x47de <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    47d4:	84 30       	cpi	r24, 0x04	; 4
    47d6:	31 f4       	brne	.+12     	; 0x47e4 <nrk_timer_int_configure+0x62>
    47d8:	80 91 91 00 	lds	r24, 0x0091
    47dc:	84 60       	ori	r24, 0x04	; 4
    47de:	80 93 91 00 	sts	0x0091, r24
    47e2:	08 c0       	rjmp	.+16     	; 0x47f4 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    47e4:	85 30       	cpi	r24, 0x05	; 5
    47e6:	31 f4       	brne	.+12     	; 0x47f4 <nrk_timer_int_configure+0x72>
    47e8:	80 91 91 00 	lds	r24, 0x0091
    47ec:	85 60       	ori	r24, 0x05	; 5
    47ee:	f7 cf       	rjmp	.-18     	; 0x47de <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    47f0:	8f ef       	ldi	r24, 0xFF	; 255
    47f2:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    47f4:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    47f6:	08 95       	ret

000047f8 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    47f8:	80 91 b2 00 	lds	r24, 0x00B2
}
    47fc:	08 95       	ret

000047fe <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    47fe:	1f 92       	push	r1
    4800:	0f 92       	push	r0
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	0f 92       	push	r0
    4806:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4808:	60 e0       	ldi	r22, 0x00	; 0
    480a:	8a e0       	ldi	r24, 0x0A	; 10
    480c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
	while(1);
    4810:	ff cf       	rjmp	.-2      	; 0x4810 <__vector_default+0x12>

00004812 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    4812:	0f 92       	push	r0
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	0f 92       	push	r0
    4818:	1f 92       	push	r1
    481a:	2f 92       	push	r2
    481c:	3f 92       	push	r3
    481e:	4f 92       	push	r4
    4820:	5f 92       	push	r5
    4822:	6f 92       	push	r6
    4824:	7f 92       	push	r7
    4826:	8f 92       	push	r8
    4828:	9f 92       	push	r9
    482a:	af 92       	push	r10
    482c:	bf 92       	push	r11
    482e:	cf 92       	push	r12
    4830:	df 92       	push	r13
    4832:	ef 92       	push	r14
    4834:	ff 92       	push	r15
    4836:	0f 93       	push	r16
    4838:	1f 93       	push	r17
    483a:	2f 93       	push	r18
    483c:	3f 93       	push	r19
    483e:	4f 93       	push	r20
    4840:	5f 93       	push	r21
    4842:	6f 93       	push	r22
    4844:	7f 93       	push	r23
    4846:	8f 93       	push	r24
    4848:	9f 93       	push	r25
    484a:	af 93       	push	r26
    484c:	bf 93       	push	r27
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	ef 93       	push	r30
    4854:	ff 93       	push	r31
    4856:	a0 91 53 08 	lds	r26, 0x0853
    485a:	b0 91 54 08 	lds	r27, 0x0854
    485e:	0d b6       	in	r0, 0x3d	; 61
    4860:	0d 92       	st	X+, r0
    4862:	0e b6       	in	r0, 0x3e	; 62
    4864:	0d 92       	st	X+, r0
    4866:	1f 92       	push	r1
    4868:	a0 91 ea 05 	lds	r26, 0x05EA
    486c:	b0 91 eb 05 	lds	r27, 0x05EB
    4870:	1e 90       	ld	r1, -X
    4872:	be bf       	out	0x3e, r27	; 62
    4874:	ad bf       	out	0x3d, r26	; 61
    4876:	08 95       	ret

00004878 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4878:	1f 92       	push	r1
    487a:	0f 92       	push	r0
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	0f 92       	push	r0
    4880:	11 24       	eor	r1, r1
    4882:	0b b6       	in	r0, 0x3b	; 59
    4884:	0f 92       	push	r0
    4886:	2f 93       	push	r18
    4888:	3f 93       	push	r19
    488a:	4f 93       	push	r20
    488c:	5f 93       	push	r21
    488e:	6f 93       	push	r22
    4890:	7f 93       	push	r23
    4892:	8f 93       	push	r24
    4894:	9f 93       	push	r25
    4896:	af 93       	push	r26
    4898:	bf 93       	push	r27
    489a:	ef 93       	push	r30
    489c:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    489e:	e0 91 34 07 	lds	r30, 0x0734
    48a2:	f0 91 35 07 	lds	r31, 0x0735
    48a6:	30 97       	sbiw	r30, 0x00	; 0
    48a8:	11 f0       	breq	.+4      	; 0x48ae <__vector_32+0x36>
    48aa:	09 95       	icall
    48ac:	04 c0       	rjmp	.+8      	; 0x48b6 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    48ae:	60 e0       	ldi	r22, 0x00	; 0
    48b0:	8a e0       	ldi	r24, 0x0A	; 10
    48b2:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
	return;  	
}
    48b6:	ff 91       	pop	r31
    48b8:	ef 91       	pop	r30
    48ba:	bf 91       	pop	r27
    48bc:	af 91       	pop	r26
    48be:	9f 91       	pop	r25
    48c0:	8f 91       	pop	r24
    48c2:	7f 91       	pop	r23
    48c4:	6f 91       	pop	r22
    48c6:	5f 91       	pop	r21
    48c8:	4f 91       	pop	r20
    48ca:	3f 91       	pop	r19
    48cc:	2f 91       	pop	r18
    48ce:	0f 90       	pop	r0
    48d0:	0b be       	out	0x3b, r0	; 59
    48d2:	0f 90       	pop	r0
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	0f 90       	pop	r0
    48d8:	1f 90       	pop	r1
    48da:	18 95       	reti

000048dc <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    48dc:	1f 92       	push	r1
    48de:	0f 92       	push	r0
    48e0:	0f b6       	in	r0, 0x3f	; 63
    48e2:	0f 92       	push	r0
    48e4:	11 24       	eor	r1, r1

	return;  	
} 
    48e6:	0f 90       	pop	r0
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	0f 90       	pop	r0
    48ec:	1f 90       	pop	r1
    48ee:	18 95       	reti

000048f0 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    48f0:	04 b6       	in	r0, 0x34	; 52
    48f2:	03 fe       	sbrs	r0, 3
    48f4:	02 c0       	rjmp	.+4      	; 0x48fa <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    48f6:	80 e1       	ldi	r24, 0x10	; 16
    48f8:	01 c0       	rjmp	.+2      	; 0x48fc <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    48fa:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    48fc:	04 b6       	in	r0, 0x34	; 52
    48fe:	02 fe       	sbrs	r0, 2
    4900:	06 c0       	rjmp	.+12     	; 0x490e <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4902:	94 b7       	in	r25, 0x34	; 52
    4904:	9b 7f       	andi	r25, 0xFB	; 251
    4906:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4908:	04 b6       	in	r0, 0x34	; 52
    490a:	00 fe       	sbrs	r0, 0
		error|=0x04;
    490c:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    490e:	04 b6       	in	r0, 0x34	; 52
    4910:	01 fe       	sbrs	r0, 1
    4912:	05 c0       	rjmp	.+10     	; 0x491e <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4914:	94 b7       	in	r25, 0x34	; 52
    4916:	9d 7f       	andi	r25, 0xFD	; 253
    4918:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    491a:	82 60       	ori	r24, 0x02	; 2
    491c:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    491e:	81 11       	cpse	r24, r1
    4920:	0c c0       	rjmp	.+24     	; 0x493a <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4922:	04 b6       	in	r0, 0x34	; 52
    4924:	00 fe       	sbrs	r0, 0
    4926:	04 c0       	rjmp	.+8      	; 0x4930 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4928:	94 b7       	in	r25, 0x34	; 52
    492a:	9e 7f       	andi	r25, 0xFE	; 254
    492c:	94 bf       	out	0x34, r25	; 52
    492e:	01 c0       	rjmp	.+2      	; 0x4932 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4930:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4932:	90 91 b0 00 	lds	r25, 0x00B0
    4936:	91 11       	cpse	r25, r1
    4938:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    493a:	08 95       	ret

0000493c <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    493c:	81 11       	cpse	r24, r1
    493e:	02 c0       	rjmp	.+4      	; 0x4944 <nrk_ext_int_enable+0x8>
    4940:	e8 9a       	sbi	0x1d, 0	; 29
    4942:	39 c0       	rjmp	.+114    	; 0x49b6 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4944:	81 30       	cpi	r24, 0x01	; 1
    4946:	11 f4       	brne	.+4      	; 0x494c <nrk_ext_int_enable+0x10>
    4948:	e9 9a       	sbi	0x1d, 1	; 29
    494a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    494c:	82 30       	cpi	r24, 0x02	; 2
    494e:	11 f4       	brne	.+4      	; 0x4954 <nrk_ext_int_enable+0x18>
    4950:	ea 9a       	sbi	0x1d, 2	; 29
    4952:	31 c0       	rjmp	.+98     	; 0x49b6 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4954:	83 30       	cpi	r24, 0x03	; 3
    4956:	21 f4       	brne	.+8      	; 0x4960 <nrk_ext_int_enable+0x24>
    4958:	80 91 6b 00 	lds	r24, 0x006B
    495c:	81 60       	ori	r24, 0x01	; 1
    495e:	29 c0       	rjmp	.+82     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4960:	84 30       	cpi	r24, 0x04	; 4
    4962:	21 f4       	brne	.+8      	; 0x496c <nrk_ext_int_enable+0x30>
    4964:	80 91 6b 00 	lds	r24, 0x006B
    4968:	82 60       	ori	r24, 0x02	; 2
    496a:	23 c0       	rjmp	.+70     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    496c:	85 30       	cpi	r24, 0x05	; 5
    496e:	21 f4       	brne	.+8      	; 0x4978 <nrk_ext_int_enable+0x3c>
    4970:	80 91 6b 00 	lds	r24, 0x006B
    4974:	84 60       	ori	r24, 0x04	; 4
    4976:	1d c0       	rjmp	.+58     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4978:	86 30       	cpi	r24, 0x06	; 6
    497a:	21 f4       	brne	.+8      	; 0x4984 <nrk_ext_int_enable+0x48>
    497c:	80 91 6b 00 	lds	r24, 0x006B
    4980:	88 60       	ori	r24, 0x08	; 8
    4982:	17 c0       	rjmp	.+46     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4984:	87 30       	cpi	r24, 0x07	; 7
    4986:	21 f4       	brne	.+8      	; 0x4990 <nrk_ext_int_enable+0x54>
    4988:	80 91 6b 00 	lds	r24, 0x006B
    498c:	80 61       	ori	r24, 0x10	; 16
    498e:	11 c0       	rjmp	.+34     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4990:	88 30       	cpi	r24, 0x08	; 8
    4992:	21 f4       	brne	.+8      	; 0x499c <nrk_ext_int_enable+0x60>
    4994:	80 91 6b 00 	lds	r24, 0x006B
    4998:	80 62       	ori	r24, 0x20	; 32
    499a:	0b c0       	rjmp	.+22     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    499c:	89 30       	cpi	r24, 0x09	; 9
    499e:	21 f4       	brne	.+8      	; 0x49a8 <nrk_ext_int_enable+0x6c>
    49a0:	80 91 6b 00 	lds	r24, 0x006B
    49a4:	80 64       	ori	r24, 0x40	; 64
    49a6:	05 c0       	rjmp	.+10     	; 0x49b2 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    49a8:	8a 30       	cpi	r24, 0x0A	; 10
    49aa:	39 f4       	brne	.+14     	; 0x49ba <nrk_ext_int_enable+0x7e>
    49ac:	80 91 6b 00 	lds	r24, 0x006B
    49b0:	80 68       	ori	r24, 0x80	; 128
    49b2:	80 93 6b 00 	sts	0x006B, r24
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	08 95       	ret
return NRK_ERROR;
    49ba:	8f ef       	ldi	r24, 0xFF	; 255
}
    49bc:	08 95       	ret

000049be <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    49be:	81 11       	cpse	r24, r1
    49c0:	02 c0       	rjmp	.+4      	; 0x49c6 <nrk_ext_int_disable+0x8>
    49c2:	e8 98       	cbi	0x1d, 0	; 29
    49c4:	39 c0       	rjmp	.+114    	; 0x4a38 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    49c6:	81 30       	cpi	r24, 0x01	; 1
    49c8:	11 f4       	brne	.+4      	; 0x49ce <nrk_ext_int_disable+0x10>
    49ca:	e9 98       	cbi	0x1d, 1	; 29
    49cc:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    49ce:	82 30       	cpi	r24, 0x02	; 2
    49d0:	11 f4       	brne	.+4      	; 0x49d6 <nrk_ext_int_disable+0x18>
    49d2:	e9 98       	cbi	0x1d, 1	; 29
    49d4:	31 c0       	rjmp	.+98     	; 0x4a38 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    49d6:	83 30       	cpi	r24, 0x03	; 3
    49d8:	21 f4       	brne	.+8      	; 0x49e2 <nrk_ext_int_disable+0x24>
    49da:	80 91 6b 00 	lds	r24, 0x006B
    49de:	8e 7f       	andi	r24, 0xFE	; 254
    49e0:	29 c0       	rjmp	.+82     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    49e2:	84 30       	cpi	r24, 0x04	; 4
    49e4:	21 f4       	brne	.+8      	; 0x49ee <nrk_ext_int_disable+0x30>
    49e6:	80 91 6b 00 	lds	r24, 0x006B
    49ea:	8d 7f       	andi	r24, 0xFD	; 253
    49ec:	23 c0       	rjmp	.+70     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    49ee:	85 30       	cpi	r24, 0x05	; 5
    49f0:	21 f4       	brne	.+8      	; 0x49fa <nrk_ext_int_disable+0x3c>
    49f2:	80 91 6b 00 	lds	r24, 0x006B
    49f6:	8b 7f       	andi	r24, 0xFB	; 251
    49f8:	1d c0       	rjmp	.+58     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    49fa:	86 30       	cpi	r24, 0x06	; 6
    49fc:	21 f4       	brne	.+8      	; 0x4a06 <nrk_ext_int_disable+0x48>
    49fe:	80 91 6b 00 	lds	r24, 0x006B
    4a02:	87 7f       	andi	r24, 0xF7	; 247
    4a04:	17 c0       	rjmp	.+46     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4a06:	87 30       	cpi	r24, 0x07	; 7
    4a08:	21 f4       	brne	.+8      	; 0x4a12 <nrk_ext_int_disable+0x54>
    4a0a:	80 91 6b 00 	lds	r24, 0x006B
    4a0e:	8f 7e       	andi	r24, 0xEF	; 239
    4a10:	11 c0       	rjmp	.+34     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4a12:	88 30       	cpi	r24, 0x08	; 8
    4a14:	21 f4       	brne	.+8      	; 0x4a1e <nrk_ext_int_disable+0x60>
    4a16:	80 91 6b 00 	lds	r24, 0x006B
    4a1a:	8f 7d       	andi	r24, 0xDF	; 223
    4a1c:	0b c0       	rjmp	.+22     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4a1e:	89 30       	cpi	r24, 0x09	; 9
    4a20:	21 f4       	brne	.+8      	; 0x4a2a <nrk_ext_int_disable+0x6c>
    4a22:	80 91 6b 00 	lds	r24, 0x006B
    4a26:	8f 7b       	andi	r24, 0xBF	; 191
    4a28:	05 c0       	rjmp	.+10     	; 0x4a34 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4a2a:	8a 30       	cpi	r24, 0x0A	; 10
    4a2c:	39 f4       	brne	.+14     	; 0x4a3c <nrk_ext_int_disable+0x7e>
    4a2e:	80 91 6b 00 	lds	r24, 0x006B
    4a32:	8f 77       	andi	r24, 0x7F	; 127
    4a34:	80 93 6b 00 	sts	0x006B, r24
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	08 95       	ret
return NRK_ERROR;
    4a3c:	8f ef       	ldi	r24, 0xFF	; 255
}
    4a3e:	08 95       	ret

00004a40 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4a40:	81 11       	cpse	r24, r1
    4a42:	26 c0       	rjmp	.+76     	; 0x4a90 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4a44:	50 93 73 08 	sts	0x0873, r21
    4a48:	40 93 72 08 	sts	0x0872, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4a4c:	61 11       	cpse	r22, r1
    4a4e:	04 c0       	rjmp	.+8      	; 0x4a58 <nrk_ext_int_configure+0x18>
    4a50:	80 91 69 00 	lds	r24, 0x0069
    4a54:	8c 7f       	andi	r24, 0xFC	; 252
    4a56:	3d c0       	rjmp	.+122    	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4a58:	61 30       	cpi	r22, 0x01	; 1
    4a5a:	49 f4       	brne	.+18     	; 0x4a6e <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4a5c:	80 91 69 00 	lds	r24, 0x0069
    4a60:	8d 7f       	andi	r24, 0xFD	; 253
    4a62:	80 93 69 00 	sts	0x0069, r24
    4a66:	80 91 69 00 	lds	r24, 0x0069
    4a6a:	81 60       	ori	r24, 0x01	; 1
    4a6c:	32 c0       	rjmp	.+100    	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4a6e:	62 30       	cpi	r22, 0x02	; 2
    4a70:	49 f4       	brne	.+18     	; 0x4a84 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4a72:	80 91 69 00 	lds	r24, 0x0069
    4a76:	82 60       	ori	r24, 0x02	; 2
    4a78:	80 93 69 00 	sts	0x0069, r24
    4a7c:	80 91 69 00 	lds	r24, 0x0069
    4a80:	8e 7f       	andi	r24, 0xFE	; 254
    4a82:	27 c0       	rjmp	.+78     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4a84:	63 30       	cpi	r22, 0x03	; 3
    4a86:	39 f5       	brne	.+78     	; 0x4ad6 <nrk_ext_int_configure+0x96>
    4a88:	80 91 69 00 	lds	r24, 0x0069
    4a8c:	83 60       	ori	r24, 0x03	; 3
    4a8e:	21 c0       	rjmp	.+66     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4a90:	81 30       	cpi	r24, 0x01	; 1
    4a92:	49 f5       	brne	.+82     	; 0x4ae6 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4a94:	50 93 71 08 	sts	0x0871, r21
    4a98:	40 93 70 08 	sts	0x0870, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4a9c:	61 11       	cpse	r22, r1
    4a9e:	04 c0       	rjmp	.+8      	; 0x4aa8 <nrk_ext_int_configure+0x68>
    4aa0:	80 91 69 00 	lds	r24, 0x0069
    4aa4:	83 7f       	andi	r24, 0xF3	; 243
    4aa6:	15 c0       	rjmp	.+42     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4aa8:	61 30       	cpi	r22, 0x01	; 1
    4aaa:	49 f4       	brne	.+18     	; 0x4abe <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4aac:	80 91 69 00 	lds	r24, 0x0069
    4ab0:	87 7f       	andi	r24, 0xF7	; 247
    4ab2:	80 93 69 00 	sts	0x0069, r24
    4ab6:	80 91 69 00 	lds	r24, 0x0069
    4aba:	84 60       	ori	r24, 0x04	; 4
    4abc:	0a c0       	rjmp	.+20     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4abe:	62 30       	cpi	r22, 0x02	; 2
    4ac0:	61 f4       	brne	.+24     	; 0x4ada <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4ac2:	80 91 69 00 	lds	r24, 0x0069
    4ac6:	88 60       	ori	r24, 0x08	; 8
    4ac8:	80 93 69 00 	sts	0x0069, r24
    4acc:	80 91 69 00 	lds	r24, 0x0069
    4ad0:	8b 7f       	andi	r24, 0xFB	; 251
    4ad2:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4ada:	63 30       	cpi	r22, 0x03	; 3
    4adc:	e1 f7       	brne	.-8      	; 0x4ad6 <nrk_ext_int_configure+0x96>
    4ade:	80 91 69 00 	lds	r24, 0x0069
    4ae2:	8c 60       	ori	r24, 0x0C	; 12
    4ae4:	f6 cf       	rjmp	.-20     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4ae6:	82 30       	cpi	r24, 0x02	; 2
    4ae8:	31 f5       	brne	.+76     	; 0x4b36 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    4aea:	50 93 75 08 	sts	0x0875, r21
    4aee:	40 93 74 08 	sts	0x0874, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4af2:	61 11       	cpse	r22, r1
    4af4:	04 c0       	rjmp	.+8      	; 0x4afe <nrk_ext_int_configure+0xbe>
    4af6:	80 91 69 00 	lds	r24, 0x0069
    4afa:	8f 7c       	andi	r24, 0xCF	; 207
    4afc:	ea cf       	rjmp	.-44     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4afe:	61 30       	cpi	r22, 0x01	; 1
    4b00:	49 f4       	brne	.+18     	; 0x4b14 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4b02:	80 91 69 00 	lds	r24, 0x0069
    4b06:	8f 7d       	andi	r24, 0xDF	; 223
    4b08:	80 93 69 00 	sts	0x0069, r24
    4b0c:	80 91 69 00 	lds	r24, 0x0069
    4b10:	80 61       	ori	r24, 0x10	; 16
    4b12:	df cf       	rjmp	.-66     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4b14:	62 30       	cpi	r22, 0x02	; 2
    4b16:	49 f4       	brne	.+18     	; 0x4b2a <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4b18:	80 91 69 00 	lds	r24, 0x0069
    4b1c:	80 62       	ori	r24, 0x20	; 32
    4b1e:	80 93 69 00 	sts	0x0069, r24
    4b22:	80 91 69 00 	lds	r24, 0x0069
    4b26:	8f 7e       	andi	r24, 0xEF	; 239
    4b28:	d4 cf       	rjmp	.-88     	; 0x4ad2 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4b2a:	63 30       	cpi	r22, 0x03	; 3
    4b2c:	a1 f6       	brne	.-88     	; 0x4ad6 <nrk_ext_int_configure+0x96>
    4b2e:	80 91 69 00 	lds	r24, 0x0069
    4b32:	80 63       	ori	r24, 0x30	; 48
    4b34:	ce cf       	rjmp	.-100    	; 0x4ad2 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4b36:	83 50       	subi	r24, 0x03	; 3
    4b38:	88 30       	cpi	r24, 0x08	; 8
    4b3a:	50 f4       	brcc	.+20     	; 0x4b50 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    4b3c:	80 91 68 00 	lds	r24, 0x0068
    4b40:	81 60       	ori	r24, 0x01	; 1
    4b42:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4b46:	50 93 77 08 	sts	0x0877, r21
    4b4a:	40 93 76 08 	sts	0x0876, r20
    4b4e:	c3 cf       	rjmp	.-122    	; 0x4ad6 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    4b50:	8f ef       	ldi	r24, 0xFF	; 255
}
    4b52:	08 95       	ret

00004b54 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4b54:	1f 92       	push	r1
    4b56:	0f 92       	push	r0
    4b58:	0f b6       	in	r0, 0x3f	; 63
    4b5a:	0f 92       	push	r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	0b b6       	in	r0, 0x3b	; 59
    4b60:	0f 92       	push	r0
    4b62:	2f 93       	push	r18
    4b64:	3f 93       	push	r19
    4b66:	4f 93       	push	r20
    4b68:	5f 93       	push	r21
    4b6a:	6f 93       	push	r22
    4b6c:	7f 93       	push	r23
    4b6e:	8f 93       	push	r24
    4b70:	9f 93       	push	r25
    4b72:	af 93       	push	r26
    4b74:	bf 93       	push	r27
    4b76:	ef 93       	push	r30
    4b78:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4b7a:	e0 91 76 08 	lds	r30, 0x0876
    4b7e:	f0 91 77 08 	lds	r31, 0x0877
    4b82:	30 97       	sbiw	r30, 0x00	; 0
    4b84:	11 f0       	breq	.+4      	; 0x4b8a <__vector_9+0x36>
    4b86:	09 95       	icall
    4b88:	04 c0       	rjmp	.+8      	; 0x4b92 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	8a e0       	ldi	r24, 0x0A	; 10
    4b8e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
	return;  	
}
    4b92:	ff 91       	pop	r31
    4b94:	ef 91       	pop	r30
    4b96:	bf 91       	pop	r27
    4b98:	af 91       	pop	r26
    4b9a:	9f 91       	pop	r25
    4b9c:	8f 91       	pop	r24
    4b9e:	7f 91       	pop	r23
    4ba0:	6f 91       	pop	r22
    4ba2:	5f 91       	pop	r21
    4ba4:	4f 91       	pop	r20
    4ba6:	3f 91       	pop	r19
    4ba8:	2f 91       	pop	r18
    4baa:	0f 90       	pop	r0
    4bac:	0b be       	out	0x3b, r0	; 59
    4bae:	0f 90       	pop	r0
    4bb0:	0f be       	out	0x3f, r0	; 63
    4bb2:	0f 90       	pop	r0
    4bb4:	1f 90       	pop	r1
    4bb6:	18 95       	reti

00004bb8 <__vector_1>:


SIGNAL(INT0_vect) {
    4bb8:	1f 92       	push	r1
    4bba:	0f 92       	push	r0
    4bbc:	0f b6       	in	r0, 0x3f	; 63
    4bbe:	0f 92       	push	r0
    4bc0:	11 24       	eor	r1, r1
    4bc2:	0b b6       	in	r0, 0x3b	; 59
    4bc4:	0f 92       	push	r0
    4bc6:	2f 93       	push	r18
    4bc8:	3f 93       	push	r19
    4bca:	4f 93       	push	r20
    4bcc:	5f 93       	push	r21
    4bce:	6f 93       	push	r22
    4bd0:	7f 93       	push	r23
    4bd2:	8f 93       	push	r24
    4bd4:	9f 93       	push	r25
    4bd6:	af 93       	push	r26
    4bd8:	bf 93       	push	r27
    4bda:	ef 93       	push	r30
    4bdc:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4bde:	e0 91 72 08 	lds	r30, 0x0872
    4be2:	f0 91 73 08 	lds	r31, 0x0873
    4be6:	30 97       	sbiw	r30, 0x00	; 0
    4be8:	11 f0       	breq	.+4      	; 0x4bee <__vector_1+0x36>
    4bea:	09 95       	icall
    4bec:	04 c0       	rjmp	.+8      	; 0x4bf6 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4bee:	60 e0       	ldi	r22, 0x00	; 0
    4bf0:	8a e0       	ldi	r24, 0x0A	; 10
    4bf2:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
	return;  	
}
    4bf6:	ff 91       	pop	r31
    4bf8:	ef 91       	pop	r30
    4bfa:	bf 91       	pop	r27
    4bfc:	af 91       	pop	r26
    4bfe:	9f 91       	pop	r25
    4c00:	8f 91       	pop	r24
    4c02:	7f 91       	pop	r23
    4c04:	6f 91       	pop	r22
    4c06:	5f 91       	pop	r21
    4c08:	4f 91       	pop	r20
    4c0a:	3f 91       	pop	r19
    4c0c:	2f 91       	pop	r18
    4c0e:	0f 90       	pop	r0
    4c10:	0b be       	out	0x3b, r0	; 59
    4c12:	0f 90       	pop	r0
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	0f 90       	pop	r0
    4c18:	1f 90       	pop	r1
    4c1a:	18 95       	reti

00004c1c <__vector_2>:

SIGNAL(INT1_vect) {
    4c1c:	1f 92       	push	r1
    4c1e:	0f 92       	push	r0
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	0f 92       	push	r0
    4c24:	11 24       	eor	r1, r1
    4c26:	0b b6       	in	r0, 0x3b	; 59
    4c28:	0f 92       	push	r0
    4c2a:	2f 93       	push	r18
    4c2c:	3f 93       	push	r19
    4c2e:	4f 93       	push	r20
    4c30:	5f 93       	push	r21
    4c32:	6f 93       	push	r22
    4c34:	7f 93       	push	r23
    4c36:	8f 93       	push	r24
    4c38:	9f 93       	push	r25
    4c3a:	af 93       	push	r26
    4c3c:	bf 93       	push	r27
    4c3e:	ef 93       	push	r30
    4c40:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4c42:	e0 91 70 08 	lds	r30, 0x0870
    4c46:	f0 91 71 08 	lds	r31, 0x0871
    4c4a:	30 97       	sbiw	r30, 0x00	; 0
    4c4c:	11 f0       	breq	.+4      	; 0x4c52 <__vector_2+0x36>
    4c4e:	09 95       	icall
    4c50:	04 c0       	rjmp	.+8      	; 0x4c5a <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4c52:	60 e0       	ldi	r22, 0x00	; 0
    4c54:	8a e0       	ldi	r24, 0x0A	; 10
    4c56:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
	return;  	
}
    4c5a:	ff 91       	pop	r31
    4c5c:	ef 91       	pop	r30
    4c5e:	bf 91       	pop	r27
    4c60:	af 91       	pop	r26
    4c62:	9f 91       	pop	r25
    4c64:	8f 91       	pop	r24
    4c66:	7f 91       	pop	r23
    4c68:	6f 91       	pop	r22
    4c6a:	5f 91       	pop	r21
    4c6c:	4f 91       	pop	r20
    4c6e:	3f 91       	pop	r19
    4c70:	2f 91       	pop	r18
    4c72:	0f 90       	pop	r0
    4c74:	0b be       	out	0x3b, r0	; 59
    4c76:	0f 90       	pop	r0
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	0f 90       	pop	r0
    4c7c:	1f 90       	pop	r1
    4c7e:	18 95       	reti

00004c80 <__vector_3>:

SIGNAL(INT2_vect) {
    4c80:	1f 92       	push	r1
    4c82:	0f 92       	push	r0
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	0f 92       	push	r0
    4c88:	11 24       	eor	r1, r1
    4c8a:	0b b6       	in	r0, 0x3b	; 59
    4c8c:	0f 92       	push	r0
    4c8e:	2f 93       	push	r18
    4c90:	3f 93       	push	r19
    4c92:	4f 93       	push	r20
    4c94:	5f 93       	push	r21
    4c96:	6f 93       	push	r22
    4c98:	7f 93       	push	r23
    4c9a:	8f 93       	push	r24
    4c9c:	9f 93       	push	r25
    4c9e:	af 93       	push	r26
    4ca0:	bf 93       	push	r27
    4ca2:	ef 93       	push	r30
    4ca4:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4ca6:	e0 91 74 08 	lds	r30, 0x0874
    4caa:	f0 91 75 08 	lds	r31, 0x0875
    4cae:	30 97       	sbiw	r30, 0x00	; 0
    4cb0:	11 f0       	breq	.+4      	; 0x4cb6 <__vector_3+0x36>
    4cb2:	09 95       	icall
    4cb4:	04 c0       	rjmp	.+8      	; 0x4cbe <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4cb6:	60 e0       	ldi	r22, 0x00	; 0
    4cb8:	8a e0       	ldi	r24, 0x0A	; 10
    4cba:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_kernel_error_add>
	return;  	
}
    4cbe:	ff 91       	pop	r31
    4cc0:	ef 91       	pop	r30
    4cc2:	bf 91       	pop	r27
    4cc4:	af 91       	pop	r26
    4cc6:	9f 91       	pop	r25
    4cc8:	8f 91       	pop	r24
    4cca:	7f 91       	pop	r23
    4ccc:	6f 91       	pop	r22
    4cce:	5f 91       	pop	r21
    4cd0:	4f 91       	pop	r20
    4cd2:	3f 91       	pop	r19
    4cd4:	2f 91       	pop	r18
    4cd6:	0f 90       	pop	r0
    4cd8:	0b be       	out	0x3b, r0	; 59
    4cda:	0f 90       	pop	r0
    4cdc:	0f be       	out	0x3f, r0	; 63
    4cde:	0f 90       	pop	r0
    4ce0:	1f 90       	pop	r1
    4ce2:	18 95       	reti

00004ce4 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4ce4:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4ce8:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4cea:	84 b7       	in	r24, 0x34	; 52
    4cec:	87 7f       	andi	r24, 0xF7	; 247
    4cee:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4cf0:	e0 e6       	ldi	r30, 0x60	; 96
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	80 81       	ld	r24, Z
    4cf6:	88 61       	ori	r24, 0x18	; 24
    4cf8:	80 83       	st	Z, r24
WDTCSR = 0;
    4cfa:	10 82       	st	Z, r1
nrk_int_enable();
    4cfc:	0c 94 af 12 	jmp	0x255e	; 0x255e <nrk_int_enable>

00004d00 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4d00:	0e 94 ad 12 	call	0x255a	; 0x255a <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4d04:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4d06:	84 b7       	in	r24, 0x34	; 52
    4d08:	87 7f       	andi	r24, 0xF7	; 247
    4d0a:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4d0c:	e0 e6       	ldi	r30, 0x60	; 96
    4d0e:	f0 e0       	ldi	r31, 0x00	; 0
    4d10:	80 81       	ld	r24, Z
    4d12:	88 61       	ori	r24, 0x18	; 24
    4d14:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4d16:	8d e0       	ldi	r24, 0x0D	; 13
    4d18:	80 83       	st	Z, r24
nrk_int_enable();
    4d1a:	0c 94 af 12 	jmp	0x255e	; 0x255e <nrk_int_enable>

00004d1e <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4d1e:	04 b6       	in	r0, 0x34	; 52
    4d20:	03 fe       	sbrs	r0, 3
    4d22:	02 c0       	rjmp	.+4      	; 0x4d28 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    4d24:	8f ef       	ldi	r24, 0xFF	; 255
    4d26:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4d28:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4d2a:	08 95       	ret

00004d2c <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4d2c:	a8 95       	wdr
    4d2e:	08 95       	ret

00004d30 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    4d30:	08 95       	ret

00004d32 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4d32:	83 b7       	in	r24, 0x33	; 51
    4d34:	81 7f       	andi	r24, 0xF1	; 241
    4d36:	86 60       	ori	r24, 0x06	; 6
    4d38:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4d3a:	83 b7       	in	r24, 0x33	; 51
    4d3c:	81 60       	ori	r24, 0x01	; 1
    4d3e:	83 bf       	out	0x33, r24	; 51
    4d40:	88 95       	sleep
    4d42:	83 b7       	in	r24, 0x33	; 51
    4d44:	8e 7f       	andi	r24, 0xFE	; 254
    4d46:	83 bf       	out	0x33, r24	; 51
    4d48:	08 95       	ret

00004d4a <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4d4a:	83 b7       	in	r24, 0x33	; 51
    4d4c:	81 7f       	andi	r24, 0xF1	; 241
    4d4e:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4d50:	83 b7       	in	r24, 0x33	; 51
    4d52:	81 60       	ori	r24, 0x01	; 1
    4d54:	83 bf       	out	0x33, r24	; 51
    4d56:	88 95       	sleep
    4d58:	83 b7       	in	r24, 0x33	; 51
    4d5a:	8e 7f       	andi	r24, 0xFE	; 254
    4d5c:	83 bf       	out	0x33, r24	; 51
    4d5e:	08 95       	ret

00004d60 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4d60:	fc 01       	movw	r30, r24
    4d62:	76 83       	std	Z+6, r23	; 0x06
    4d64:	65 83       	std	Z+5, r22	; 0x05
    4d66:	08 95       	ret

00004d68 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	8c 01       	movw	r16, r24
    4d76:	7b 01       	movw	r14, r22
    4d78:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4d7a:	40 32       	cpi	r20, 0x20	; 32
    4d7c:	51 05       	cpc	r21, r1
    4d7e:	18 f4       	brcc	.+6      	; 0x4d86 <nrk_task_set_stk+0x1e>
    4d80:	81 e1       	ldi	r24, 0x11	; 17
    4d82:	0e 94 20 15 	call	0x2a40	; 0x2a40 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4d86:	21 97       	sbiw	r28, 0x01	; 1
    4d88:	ce 0d       	add	r28, r14
    4d8a:	df 1d       	adc	r29, r15
    4d8c:	f8 01       	movw	r30, r16
    4d8e:	d2 83       	std	Z+2, r29	; 0x02
    4d90:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    4d92:	f4 82       	std	Z+4, r15	; 0x04
    4d94:	e3 82       	std	Z+3, r14	; 0x03

}
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	1f 91       	pop	r17
    4d9c:	0f 91       	pop	r16
    4d9e:	ff 90       	pop	r15
    4da0:	ef 90       	pop	r14
    4da2:	08 95       	ret

00004da4 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4da4:	25 e5       	ldi	r18, 0x55	; 85
    4da6:	fa 01       	movw	r30, r20
    4da8:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4daa:	fb 01       	movw	r30, r22
    4dac:	32 97       	sbiw	r30, 0x02	; 2
    4dae:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4db0:	31 96       	adiw	r30, 0x01	; 1
    4db2:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    4db4:	33 97       	sbiw	r30, 0x03	; 3
    4db6:	11 82       	std	Z+1, r1	; 0x01
    4db8:	10 82       	st	Z, r1
    *(--stk) = 0;       
    4dba:	32 97       	sbiw	r30, 0x02	; 2
    4dbc:	11 82       	std	Z+1, r1	; 0x01
    4dbe:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4dc0:	32 97       	sbiw	r30, 0x02	; 2
    4dc2:	11 82       	std	Z+1, r1	; 0x01
    4dc4:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4dc6:	32 97       	sbiw	r30, 0x02	; 2
    4dc8:	11 82       	std	Z+1, r1	; 0x01
    4dca:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4dcc:	32 97       	sbiw	r30, 0x02	; 2
    4dce:	11 82       	std	Z+1, r1	; 0x01
    4dd0:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4dd2:	32 97       	sbiw	r30, 0x02	; 2
    4dd4:	11 82       	std	Z+1, r1	; 0x01
    4dd6:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4dd8:	32 97       	sbiw	r30, 0x02	; 2
    4dda:	11 82       	std	Z+1, r1	; 0x01
    4ddc:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4dde:	32 97       	sbiw	r30, 0x02	; 2
    4de0:	11 82       	std	Z+1, r1	; 0x01
    4de2:	10 82       	st	Z, r1

    *(--stk) = 0; 
    4de4:	32 97       	sbiw	r30, 0x02	; 2
    4de6:	11 82       	std	Z+1, r1	; 0x01
    4de8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4dea:	32 97       	sbiw	r30, 0x02	; 2
    4dec:	11 82       	std	Z+1, r1	; 0x01
    4dee:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4df0:	32 97       	sbiw	r30, 0x02	; 2
    4df2:	11 82       	std	Z+1, r1	; 0x01
    4df4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4df6:	32 97       	sbiw	r30, 0x02	; 2
    4df8:	11 82       	std	Z+1, r1	; 0x01
    4dfa:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4dfc:	32 97       	sbiw	r30, 0x02	; 2
    4dfe:	11 82       	std	Z+1, r1	; 0x01
    4e00:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4e02:	32 97       	sbiw	r30, 0x02	; 2
    4e04:	11 82       	std	Z+1, r1	; 0x01
    4e06:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4e08:	32 97       	sbiw	r30, 0x02	; 2
    4e0a:	11 82       	std	Z+1, r1	; 0x01
    4e0c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4e0e:	32 97       	sbiw	r30, 0x02	; 2
    4e10:	11 82       	std	Z+1, r1	; 0x01
    4e12:	10 82       	st	Z, r1
    *(--stk) = 0;
    4e14:	cb 01       	movw	r24, r22
    4e16:	84 97       	sbiw	r24, 0x24	; 36
    4e18:	fc 01       	movw	r30, r24
    4e1a:	11 82       	std	Z+1, r1	; 0x01
    4e1c:	10 82       	st	Z, r1


    return ((void *)stk);
}
    4e1e:	08 95       	ret

00004e20 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4e20:	85 e5       	ldi	r24, 0x55	; 85
    4e22:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4e26:	ee ef       	ldi	r30, 0xFE	; 254
    4e28:	f1 e4       	ldi	r31, 0x41	; 65
    4e2a:	f0 93 eb 05 	sts	0x05EB, r31
    4e2e:	e0 93 ea 05 	sts	0x05EA, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4e32:	88 e7       	ldi	r24, 0x78	; 120
    4e34:	94 e1       	ldi	r25, 0x14	; 20
    4e36:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4e38:	80 93 ff 41 	sts	0x41FF, r24
    4e3c:	08 95       	ret

00004e3e <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4e3e:	88 e7       	ldi	r24, 0x78	; 120
    4e40:	94 e1       	ldi	r25, 0x14	; 20
    4e42:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4e46:	80 93 ff 41 	sts	0x41FF, r24
    4e4a:	08 95       	ret

00004e4c <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4e4c:	0e 94 53 23 	call	0x46a6	; 0x46a6 <_nrk_setup_timer>
  nrk_int_enable();  
    4e50:	0c 94 af 12 	jmp	0x255e	; 0x255e <nrk_int_enable>

00004e54 <nrk_start_high_ready_task>:
    4e54:	a0 91 44 08 	lds	r26, 0x0844
    4e58:	b0 91 45 08 	lds	r27, 0x0845
    4e5c:	cd 91       	ld	r28, X+
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	dd 91       	ld	r29, X+
    4e62:	de bf       	out	0x3e, r29	; 62
    4e64:	ff 91       	pop	r31
    4e66:	ef 91       	pop	r30
    4e68:	df 91       	pop	r29
    4e6a:	cf 91       	pop	r28
    4e6c:	bf 91       	pop	r27
    4e6e:	af 91       	pop	r26
    4e70:	9f 91       	pop	r25
    4e72:	8f 91       	pop	r24
    4e74:	7f 91       	pop	r23
    4e76:	6f 91       	pop	r22
    4e78:	5f 91       	pop	r21
    4e7a:	4f 91       	pop	r20
    4e7c:	3f 91       	pop	r19
    4e7e:	2f 91       	pop	r18
    4e80:	1f 91       	pop	r17
    4e82:	0f 91       	pop	r16
    4e84:	ff 90       	pop	r15
    4e86:	ef 90       	pop	r14
    4e88:	df 90       	pop	r13
    4e8a:	cf 90       	pop	r12
    4e8c:	bf 90       	pop	r11
    4e8e:	af 90       	pop	r10
    4e90:	9f 90       	pop	r9
    4e92:	8f 90       	pop	r8
    4e94:	7f 90       	pop	r7
    4e96:	6f 90       	pop	r6
    4e98:	5f 90       	pop	r5
    4e9a:	4f 90       	pop	r4
    4e9c:	3f 90       	pop	r3
    4e9e:	2f 90       	pop	r2
    4ea0:	1f 90       	pop	r1
    4ea2:	0f 90       	pop	r0
    4ea4:	0f be       	out	0x3f, r0	; 63
    4ea6:	0f 90       	pop	r0
    4ea8:	18 95       	reti

00004eaa <main>:
void display_rssi(int8_t rssi);

int main ()
{
  uint16_t div;
  nrk_setup_ports ();
    4eaa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    4eae:	80 e1       	ldi	r24, 0x10	; 16
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	0e 94 ce 11 	call	0x239c	; 0x239c <nrk_setup_uart>

  nrk_init ();
    4eb6:	0e 94 b4 12 	call	0x2568	; 0x2568 <nrk_init>

  nrk_led_clr (0);
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
  nrk_led_clr (1);
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
  nrk_led_clr (2);
    4eca:	82 e0       	ldi	r24, 0x02	; 2
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>
  nrk_led_clr (3);
    4ed2:	83 e0       	ldi	r24, 0x03	; 3
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	0e 94 65 11 	call	0x22ca	; 0x22ca <nrk_led_clr>

  nrk_time_set (0, 0);
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	a9 01       	movw	r20, r18
    4ee0:	60 e0       	ldi	r22, 0x00	; 0
    4ee2:	70 e0       	ldi	r23, 0x00	; 0
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <nrk_time_set>

  bmac_task_config ();
    4eea:	0e 94 b7 07 	call	0xf6e	; 0xf6e <bmac_task_config>

  nrk_create_taskset ();
    4eee:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrk_create_taskset>
  nrk_start ();
    4ef2:	0e 94 81 13 	call	0x2702	; 0x2702 <nrk_start>

  return 0;
}
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	08 95       	ret

00004efc <vfprintf>:
    4efc:	6f 92       	push	r6
    4efe:	7f 92       	push	r7
    4f00:	8f 92       	push	r8
    4f02:	9f 92       	push	r9
    4f04:	af 92       	push	r10
    4f06:	bf 92       	push	r11
    4f08:	cf 92       	push	r12
    4f0a:	df 92       	push	r13
    4f0c:	ef 92       	push	r14
    4f0e:	ff 92       	push	r15
    4f10:	0f 93       	push	r16
    4f12:	1f 93       	push	r17
    4f14:	cf 93       	push	r28
    4f16:	df 93       	push	r29
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62
    4f1c:	2c 97       	sbiw	r28, 0x0c	; 12
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	6c 01       	movw	r12, r24
    4f2a:	5b 01       	movw	r10, r22
    4f2c:	7a 01       	movw	r14, r20
    4f2e:	fc 01       	movw	r30, r24
    4f30:	17 82       	std	Z+7, r1	; 0x07
    4f32:	16 82       	std	Z+6, r1	; 0x06
    4f34:	83 81       	ldd	r24, Z+3	; 0x03
    4f36:	81 ff       	sbrs	r24, 1
    4f38:	0e c1       	rjmp	.+540    	; 0x5156 <vfprintf+0x25a>
    4f3a:	ce 01       	movw	r24, r28
    4f3c:	01 96       	adiw	r24, 0x01	; 1
    4f3e:	4c 01       	movw	r8, r24
    4f40:	f6 01       	movw	r30, r12
    4f42:	03 81       	ldd	r16, Z+3	; 0x03
    4f44:	f5 01       	movw	r30, r10
    4f46:	03 fd       	sbrc	r16, 3
    4f48:	15 91       	lpm	r17, Z+
    4f4a:	03 ff       	sbrs	r16, 3
    4f4c:	11 91       	ld	r17, Z+
    4f4e:	5f 01       	movw	r10, r30
    4f50:	11 23       	and	r17, r17
    4f52:	09 f4       	brne	.+2      	; 0x4f56 <vfprintf+0x5a>
    4f54:	fc c0       	rjmp	.+504    	; 0x514e <vfprintf+0x252>
    4f56:	15 32       	cpi	r17, 0x25	; 37
    4f58:	49 f4       	brne	.+18     	; 0x4f6c <vfprintf+0x70>
    4f5a:	03 fd       	sbrc	r16, 3
    4f5c:	15 91       	lpm	r17, Z+
    4f5e:	03 ff       	sbrs	r16, 3
    4f60:	11 91       	ld	r17, Z+
    4f62:	5f 01       	movw	r10, r30
    4f64:	15 32       	cpi	r17, 0x25	; 37
    4f66:	11 f0       	breq	.+4      	; 0x4f6c <vfprintf+0x70>
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	1b c0       	rjmp	.+54     	; 0x4fa2 <vfprintf+0xa6>
    4f6c:	b6 01       	movw	r22, r12
    4f6e:	81 2f       	mov	r24, r17
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    4f76:	37 01       	movw	r6, r14
    4f78:	73 01       	movw	r14, r6
    4f7a:	e2 cf       	rjmp	.-60     	; 0x4f40 <vfprintf+0x44>
    4f7c:	11 23       	and	r17, r17
    4f7e:	09 f4       	brne	.+2      	; 0x4f82 <vfprintf+0x86>
    4f80:	e6 c0       	rjmp	.+460    	; 0x514e <vfprintf+0x252>
    4f82:	61 2f       	mov	r22, r17
    4f84:	70 e0       	ldi	r23, 0x00	; 0
    4f86:	81 e5       	ldi	r24, 0x51	; 81
    4f88:	95 e0       	ldi	r25, 0x05	; 5
    4f8a:	2c 87       	std	Y+12, r18	; 0x0c
    4f8c:	0e 94 1f 2b 	call	0x563e	; 0x563e <strchr_P>
    4f90:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f92:	89 2b       	or	r24, r25
    4f94:	49 f0       	breq	.+18     	; 0x4fa8 <vfprintf+0xac>
    4f96:	f5 01       	movw	r30, r10
    4f98:	03 fd       	sbrc	r16, 3
    4f9a:	15 91       	lpm	r17, Z+
    4f9c:	03 ff       	sbrs	r16, 3
    4f9e:	11 91       	ld	r17, Z+
    4fa0:	5f 01       	movw	r10, r30
    4fa2:	27 ff       	sbrs	r18, 7
    4fa4:	eb cf       	rjmp	.-42     	; 0x4f7c <vfprintf+0x80>
    4fa6:	09 c0       	rjmp	.+18     	; 0x4fba <vfprintf+0xbe>
    4fa8:	13 32       	cpi	r17, 0x23	; 35
    4faa:	29 f0       	breq	.+10     	; 0x4fb6 <vfprintf+0xba>
    4fac:	1c 36       	cpi	r17, 0x6C	; 108
    4fae:	09 f0       	breq	.+2      	; 0x4fb2 <vfprintf+0xb6>
    4fb0:	d5 c0       	rjmp	.+426    	; 0x515c <vfprintf+0x260>
    4fb2:	20 68       	ori	r18, 0x80	; 128
    4fb4:	f0 cf       	rjmp	.-32     	; 0x4f96 <vfprintf+0x9a>
    4fb6:	20 e1       	ldi	r18, 0x10	; 16
    4fb8:	ee cf       	rjmp	.-36     	; 0x4f96 <vfprintf+0x9a>
    4fba:	02 2f       	mov	r16, r18
    4fbc:	11 23       	and	r17, r17
    4fbe:	09 f4       	brne	.+2      	; 0x4fc2 <vfprintf+0xc6>
    4fc0:	c6 c0       	rjmp	.+396    	; 0x514e <vfprintf+0x252>
    4fc2:	61 2f       	mov	r22, r17
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	8a e4       	ldi	r24, 0x4A	; 74
    4fc8:	95 e0       	ldi	r25, 0x05	; 5
    4fca:	2c 87       	std	Y+12, r18	; 0x0c
    4fcc:	0e 94 1f 2b 	call	0x563e	; 0x563e <strchr_P>
    4fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4fd2:	89 2b       	or	r24, r25
    4fd4:	41 f0       	breq	.+16     	; 0x4fe6 <vfprintf+0xea>
    4fd6:	37 01       	movw	r6, r14
    4fd8:	f4 e0       	ldi	r31, 0x04	; 4
    4fda:	6f 0e       	add	r6, r31
    4fdc:	71 1c       	adc	r7, r1
    4fde:	b6 01       	movw	r22, r12
    4fe0:	8f e3       	ldi	r24, 0x3F	; 63
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	11 c0       	rjmp	.+34     	; 0x5008 <vfprintf+0x10c>
    4fe6:	13 36       	cpi	r17, 0x63	; 99
    4fe8:	39 f0       	breq	.+14     	; 0x4ff8 <vfprintf+0xfc>
    4fea:	13 37       	cpi	r17, 0x73	; 115
    4fec:	81 f0       	breq	.+32     	; 0x500e <vfprintf+0x112>
    4fee:	13 35       	cpi	r17, 0x53	; 83
    4ff0:	19 f5       	brne	.+70     	; 0x5038 <vfprintf+0x13c>
    4ff2:	02 2f       	mov	r16, r18
    4ff4:	01 60       	ori	r16, 0x01	; 1
    4ff6:	0b c0       	rjmp	.+22     	; 0x500e <vfprintf+0x112>
    4ff8:	37 01       	movw	r6, r14
    4ffa:	82 e0       	ldi	r24, 0x02	; 2
    4ffc:	68 0e       	add	r6, r24
    4ffe:	71 1c       	adc	r7, r1
    5000:	b6 01       	movw	r22, r12
    5002:	f7 01       	movw	r30, r14
    5004:	80 81       	ld	r24, Z
    5006:	91 81       	ldd	r25, Z+1	; 0x01
    5008:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    500c:	b5 cf       	rjmp	.-150    	; 0x4f78 <vfprintf+0x7c>
    500e:	37 01       	movw	r6, r14
    5010:	f2 e0       	ldi	r31, 0x02	; 2
    5012:	6f 0e       	add	r6, r31
    5014:	71 1c       	adc	r7, r1
    5016:	f7 01       	movw	r30, r14
    5018:	e0 80       	ld	r14, Z
    501a:	f1 80       	ldd	r15, Z+1	; 0x01
    501c:	f7 01       	movw	r30, r14
    501e:	00 fd       	sbrc	r16, 0
    5020:	85 91       	lpm	r24, Z+
    5022:	00 ff       	sbrs	r16, 0
    5024:	81 91       	ld	r24, Z+
    5026:	7f 01       	movw	r14, r30
    5028:	88 23       	and	r24, r24
    502a:	09 f4       	brne	.+2      	; 0x502e <vfprintf+0x132>
    502c:	a5 cf       	rjmp	.-182    	; 0x4f78 <vfprintf+0x7c>
    502e:	b6 01       	movw	r22, r12
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    5036:	f2 cf       	rjmp	.-28     	; 0x501c <vfprintf+0x120>
    5038:	14 36       	cpi	r17, 0x64	; 100
    503a:	11 f0       	breq	.+4      	; 0x5040 <vfprintf+0x144>
    503c:	19 36       	cpi	r17, 0x69	; 105
    503e:	29 f5       	brne	.+74     	; 0x508a <vfprintf+0x18e>
    5040:	37 01       	movw	r6, r14
    5042:	27 ff       	sbrs	r18, 7
    5044:	09 c0       	rjmp	.+18     	; 0x5058 <vfprintf+0x15c>
    5046:	f4 e0       	ldi	r31, 0x04	; 4
    5048:	6f 0e       	add	r6, r31
    504a:	71 1c       	adc	r7, r1
    504c:	f7 01       	movw	r30, r14
    504e:	60 81       	ld	r22, Z
    5050:	71 81       	ldd	r23, Z+1	; 0x01
    5052:	82 81       	ldd	r24, Z+2	; 0x02
    5054:	93 81       	ldd	r25, Z+3	; 0x03
    5056:	0a c0       	rjmp	.+20     	; 0x506c <vfprintf+0x170>
    5058:	f2 e0       	ldi	r31, 0x02	; 2
    505a:	6f 0e       	add	r6, r31
    505c:	71 1c       	adc	r7, r1
    505e:	f7 01       	movw	r30, r14
    5060:	60 81       	ld	r22, Z
    5062:	71 81       	ldd	r23, Z+1	; 0x01
    5064:	88 27       	eor	r24, r24
    5066:	77 fd       	sbrc	r23, 7
    5068:	80 95       	com	r24
    506a:	98 2f       	mov	r25, r24
    506c:	02 2f       	mov	r16, r18
    506e:	0f 7e       	andi	r16, 0xEF	; 239
    5070:	97 ff       	sbrs	r25, 7
    5072:	08 c0       	rjmp	.+16     	; 0x5084 <vfprintf+0x188>
    5074:	90 95       	com	r25
    5076:	80 95       	com	r24
    5078:	70 95       	com	r23
    507a:	61 95       	neg	r22
    507c:	7f 4f       	sbci	r23, 0xFF	; 255
    507e:	8f 4f       	sbci	r24, 0xFF	; 255
    5080:	9f 4f       	sbci	r25, 0xFF	; 255
    5082:	00 64       	ori	r16, 0x40	; 64
    5084:	2a e0       	ldi	r18, 0x0A	; 10
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	33 c0       	rjmp	.+102    	; 0x50f0 <vfprintf+0x1f4>
    508a:	10 37       	cpi	r17, 0x70	; 112
    508c:	99 f0       	breq	.+38     	; 0x50b4 <vfprintf+0x1b8>
    508e:	40 f4       	brcc	.+16     	; 0x50a0 <vfprintf+0x1a4>
    5090:	18 35       	cpi	r17, 0x58	; 88
    5092:	b1 f0       	breq	.+44     	; 0x50c0 <vfprintf+0x1c4>
    5094:	1f 36       	cpi	r17, 0x6F	; 111
    5096:	09 f0       	breq	.+2      	; 0x509a <vfprintf+0x19e>
    5098:	5a c0       	rjmp	.+180    	; 0x514e <vfprintf+0x252>
    509a:	28 e0       	ldi	r18, 0x08	; 8
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	14 c0       	rjmp	.+40     	; 0x50c8 <vfprintf+0x1cc>
    50a0:	15 37       	cpi	r17, 0x75	; 117
    50a2:	19 f0       	breq	.+6      	; 0x50aa <vfprintf+0x1ae>
    50a4:	18 37       	cpi	r17, 0x78	; 120
    50a6:	41 f0       	breq	.+16     	; 0x50b8 <vfprintf+0x1bc>
    50a8:	52 c0       	rjmp	.+164    	; 0x514e <vfprintf+0x252>
    50aa:	02 2f       	mov	r16, r18
    50ac:	0f 7e       	andi	r16, 0xEF	; 239
    50ae:	2a e0       	ldi	r18, 0x0A	; 10
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	0a c0       	rjmp	.+20     	; 0x50c8 <vfprintf+0x1cc>
    50b4:	02 2f       	mov	r16, r18
    50b6:	00 61       	ori	r16, 0x10	; 16
    50b8:	04 62       	ori	r16, 0x24	; 36
    50ba:	20 e1       	ldi	r18, 0x10	; 16
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	04 c0       	rjmp	.+8      	; 0x50c8 <vfprintf+0x1cc>
    50c0:	02 2f       	mov	r16, r18
    50c2:	04 60       	ori	r16, 0x04	; 4
    50c4:	20 e1       	ldi	r18, 0x10	; 16
    50c6:	32 e0       	ldi	r19, 0x02	; 2
    50c8:	37 01       	movw	r6, r14
    50ca:	07 ff       	sbrs	r16, 7
    50cc:	09 c0       	rjmp	.+18     	; 0x50e0 <vfprintf+0x1e4>
    50ce:	f4 e0       	ldi	r31, 0x04	; 4
    50d0:	6f 0e       	add	r6, r31
    50d2:	71 1c       	adc	r7, r1
    50d4:	f7 01       	movw	r30, r14
    50d6:	60 81       	ld	r22, Z
    50d8:	71 81       	ldd	r23, Z+1	; 0x01
    50da:	82 81       	ldd	r24, Z+2	; 0x02
    50dc:	93 81       	ldd	r25, Z+3	; 0x03
    50de:	08 c0       	rjmp	.+16     	; 0x50f0 <vfprintf+0x1f4>
    50e0:	f2 e0       	ldi	r31, 0x02	; 2
    50e2:	6f 0e       	add	r6, r31
    50e4:	71 1c       	adc	r7, r1
    50e6:	f7 01       	movw	r30, r14
    50e8:	60 81       	ld	r22, Z
    50ea:	71 81       	ldd	r23, Z+1	; 0x01
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	a4 01       	movw	r20, r8
    50f2:	0e 94 30 2c 	call	0x5860	; 0x5860 <__ultoa_invert>
    50f6:	18 2f       	mov	r17, r24
    50f8:	18 19       	sub	r17, r8
    50fa:	06 ff       	sbrs	r16, 6
    50fc:	05 c0       	rjmp	.+10     	; 0x5108 <vfprintf+0x20c>
    50fe:	b6 01       	movw	r22, r12
    5100:	8d e2       	ldi	r24, 0x2D	; 45
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    5108:	04 ff       	sbrs	r16, 4
    510a:	15 c0       	rjmp	.+42     	; 0x5136 <vfprintf+0x23a>
    510c:	fe 01       	movw	r30, r28
    510e:	e1 0f       	add	r30, r17
    5110:	f1 1d       	adc	r31, r1
    5112:	80 81       	ld	r24, Z
    5114:	80 33       	cpi	r24, 0x30	; 48
    5116:	79 f0       	breq	.+30     	; 0x5136 <vfprintf+0x23a>
    5118:	b6 01       	movw	r22, r12
    511a:	80 e3       	ldi	r24, 0x30	; 48
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    5122:	02 ff       	sbrs	r16, 2
    5124:	08 c0       	rjmp	.+16     	; 0x5136 <vfprintf+0x23a>
    5126:	00 72       	andi	r16, 0x20	; 32
    5128:	80 2f       	mov	r24, r16
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	b6 01       	movw	r22, r12
    512e:	88 5a       	subi	r24, 0xA8	; 168
    5130:	9f 4f       	sbci	r25, 0xFF	; 255
    5132:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    5136:	11 50       	subi	r17, 0x01	; 1
    5138:	f4 01       	movw	r30, r8
    513a:	e1 0f       	add	r30, r17
    513c:	f1 1d       	adc	r31, r1
    513e:	80 81       	ld	r24, Z
    5140:	b6 01       	movw	r22, r12
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <fputc>
    5148:	11 11       	cpse	r17, r1
    514a:	f5 cf       	rjmp	.-22     	; 0x5136 <vfprintf+0x23a>
    514c:	15 cf       	rjmp	.-470    	; 0x4f78 <vfprintf+0x7c>
    514e:	f6 01       	movw	r30, r12
    5150:	86 81       	ldd	r24, Z+6	; 0x06
    5152:	97 81       	ldd	r25, Z+7	; 0x07
    5154:	05 c0       	rjmp	.+10     	; 0x5160 <vfprintf+0x264>
    5156:	8f ef       	ldi	r24, 0xFF	; 255
    5158:	9f ef       	ldi	r25, 0xFF	; 255
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <vfprintf+0x264>
    515c:	02 2f       	mov	r16, r18
    515e:	31 cf       	rjmp	.-414    	; 0x4fc2 <vfprintf+0xc6>
    5160:	2c 96       	adiw	r28, 0x0c	; 12
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	1f 91       	pop	r17
    5172:	0f 91       	pop	r16
    5174:	ff 90       	pop	r15
    5176:	ef 90       	pop	r14
    5178:	df 90       	pop	r13
    517a:	cf 90       	pop	r12
    517c:	bf 90       	pop	r11
    517e:	af 90       	pop	r10
    5180:	9f 90       	pop	r9
    5182:	8f 90       	pop	r8
    5184:	7f 90       	pop	r7
    5186:	6f 90       	pop	r6
    5188:	08 95       	ret

0000518a <__divsf3>:
    518a:	0c d0       	rcall	.+24     	; 0x51a4 <__divsf3x>
    518c:	eb c0       	rjmp	.+470    	; 0x5364 <__fp_round>
    518e:	e3 d0       	rcall	.+454    	; 0x5356 <__fp_pscB>
    5190:	40 f0       	brcs	.+16     	; 0x51a2 <__divsf3+0x18>
    5192:	da d0       	rcall	.+436    	; 0x5348 <__fp_pscA>
    5194:	30 f0       	brcs	.+12     	; 0x51a2 <__divsf3+0x18>
    5196:	21 f4       	brne	.+8      	; 0x51a0 <__divsf3+0x16>
    5198:	5f 3f       	cpi	r21, 0xFF	; 255
    519a:	19 f0       	breq	.+6      	; 0x51a2 <__divsf3+0x18>
    519c:	cc c0       	rjmp	.+408    	; 0x5336 <__fp_inf>
    519e:	51 11       	cpse	r21, r1
    51a0:	15 c1       	rjmp	.+554    	; 0x53cc <__fp_szero>
    51a2:	cf c0       	rjmp	.+414    	; 0x5342 <__fp_nan>

000051a4 <__divsf3x>:
    51a4:	f0 d0       	rcall	.+480    	; 0x5386 <__fp_split3>
    51a6:	98 f3       	brcs	.-26     	; 0x518e <__divsf3+0x4>

000051a8 <__divsf3_pse>:
    51a8:	99 23       	and	r25, r25
    51aa:	c9 f3       	breq	.-14     	; 0x519e <__divsf3+0x14>
    51ac:	55 23       	and	r21, r21
    51ae:	b1 f3       	breq	.-20     	; 0x519c <__divsf3+0x12>
    51b0:	95 1b       	sub	r25, r21
    51b2:	55 0b       	sbc	r21, r21
    51b4:	bb 27       	eor	r27, r27
    51b6:	aa 27       	eor	r26, r26
    51b8:	62 17       	cp	r22, r18
    51ba:	73 07       	cpc	r23, r19
    51bc:	84 07       	cpc	r24, r20
    51be:	38 f0       	brcs	.+14     	; 0x51ce <__divsf3_pse+0x26>
    51c0:	9f 5f       	subi	r25, 0xFF	; 255
    51c2:	5f 4f       	sbci	r21, 0xFF	; 255
    51c4:	22 0f       	add	r18, r18
    51c6:	33 1f       	adc	r19, r19
    51c8:	44 1f       	adc	r20, r20
    51ca:	aa 1f       	adc	r26, r26
    51cc:	a9 f3       	breq	.-22     	; 0x51b8 <__divsf3_pse+0x10>
    51ce:	33 d0       	rcall	.+102    	; 0x5236 <__divsf3_pse+0x8e>
    51d0:	0e 2e       	mov	r0, r30
    51d2:	3a f0       	brmi	.+14     	; 0x51e2 <__divsf3_pse+0x3a>
    51d4:	e0 e8       	ldi	r30, 0x80	; 128
    51d6:	30 d0       	rcall	.+96     	; 0x5238 <__divsf3_pse+0x90>
    51d8:	91 50       	subi	r25, 0x01	; 1
    51da:	50 40       	sbci	r21, 0x00	; 0
    51dc:	e6 95       	lsr	r30
    51de:	00 1c       	adc	r0, r0
    51e0:	ca f7       	brpl	.-14     	; 0x51d4 <__divsf3_pse+0x2c>
    51e2:	29 d0       	rcall	.+82     	; 0x5236 <__divsf3_pse+0x8e>
    51e4:	fe 2f       	mov	r31, r30
    51e6:	27 d0       	rcall	.+78     	; 0x5236 <__divsf3_pse+0x8e>
    51e8:	66 0f       	add	r22, r22
    51ea:	77 1f       	adc	r23, r23
    51ec:	88 1f       	adc	r24, r24
    51ee:	bb 1f       	adc	r27, r27
    51f0:	26 17       	cp	r18, r22
    51f2:	37 07       	cpc	r19, r23
    51f4:	48 07       	cpc	r20, r24
    51f6:	ab 07       	cpc	r26, r27
    51f8:	b0 e8       	ldi	r27, 0x80	; 128
    51fa:	09 f0       	breq	.+2      	; 0x51fe <__divsf3_pse+0x56>
    51fc:	bb 0b       	sbc	r27, r27
    51fe:	80 2d       	mov	r24, r0
    5200:	bf 01       	movw	r22, r30
    5202:	ff 27       	eor	r31, r31
    5204:	93 58       	subi	r25, 0x83	; 131
    5206:	5f 4f       	sbci	r21, 0xFF	; 255
    5208:	2a f0       	brmi	.+10     	; 0x5214 <__divsf3_pse+0x6c>
    520a:	9e 3f       	cpi	r25, 0xFE	; 254
    520c:	51 05       	cpc	r21, r1
    520e:	68 f0       	brcs	.+26     	; 0x522a <__divsf3_pse+0x82>
    5210:	92 c0       	rjmp	.+292    	; 0x5336 <__fp_inf>
    5212:	dc c0       	rjmp	.+440    	; 0x53cc <__fp_szero>
    5214:	5f 3f       	cpi	r21, 0xFF	; 255
    5216:	ec f3       	brlt	.-6      	; 0x5212 <__divsf3_pse+0x6a>
    5218:	98 3e       	cpi	r25, 0xE8	; 232
    521a:	dc f3       	brlt	.-10     	; 0x5212 <__divsf3_pse+0x6a>
    521c:	86 95       	lsr	r24
    521e:	77 95       	ror	r23
    5220:	67 95       	ror	r22
    5222:	b7 95       	ror	r27
    5224:	f7 95       	ror	r31
    5226:	9f 5f       	subi	r25, 0xFF	; 255
    5228:	c9 f7       	brne	.-14     	; 0x521c <__divsf3_pse+0x74>
    522a:	88 0f       	add	r24, r24
    522c:	91 1d       	adc	r25, r1
    522e:	96 95       	lsr	r25
    5230:	87 95       	ror	r24
    5232:	97 f9       	bld	r25, 7
    5234:	08 95       	ret
    5236:	e1 e0       	ldi	r30, 0x01	; 1
    5238:	66 0f       	add	r22, r22
    523a:	77 1f       	adc	r23, r23
    523c:	88 1f       	adc	r24, r24
    523e:	bb 1f       	adc	r27, r27
    5240:	62 17       	cp	r22, r18
    5242:	73 07       	cpc	r23, r19
    5244:	84 07       	cpc	r24, r20
    5246:	ba 07       	cpc	r27, r26
    5248:	20 f0       	brcs	.+8      	; 0x5252 <__divsf3_pse+0xaa>
    524a:	62 1b       	sub	r22, r18
    524c:	73 0b       	sbc	r23, r19
    524e:	84 0b       	sbc	r24, r20
    5250:	ba 0b       	sbc	r27, r26
    5252:	ee 1f       	adc	r30, r30
    5254:	88 f7       	brcc	.-30     	; 0x5238 <__divsf3_pse+0x90>
    5256:	e0 95       	com	r30
    5258:	08 95       	ret

0000525a <__fixsfsi>:
    525a:	04 d0       	rcall	.+8      	; 0x5264 <__fixunssfsi>
    525c:	68 94       	set
    525e:	b1 11       	cpse	r27, r1
    5260:	b5 c0       	rjmp	.+362    	; 0x53cc <__fp_szero>
    5262:	08 95       	ret

00005264 <__fixunssfsi>:
    5264:	98 d0       	rcall	.+304    	; 0x5396 <__fp_splitA>
    5266:	88 f0       	brcs	.+34     	; 0x528a <__fixunssfsi+0x26>
    5268:	9f 57       	subi	r25, 0x7F	; 127
    526a:	90 f0       	brcs	.+36     	; 0x5290 <__fixunssfsi+0x2c>
    526c:	b9 2f       	mov	r27, r25
    526e:	99 27       	eor	r25, r25
    5270:	b7 51       	subi	r27, 0x17	; 23
    5272:	a0 f0       	brcs	.+40     	; 0x529c <__fixunssfsi+0x38>
    5274:	d1 f0       	breq	.+52     	; 0x52aa <__fixunssfsi+0x46>
    5276:	66 0f       	add	r22, r22
    5278:	77 1f       	adc	r23, r23
    527a:	88 1f       	adc	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	1a f0       	brmi	.+6      	; 0x5286 <__fixunssfsi+0x22>
    5280:	ba 95       	dec	r27
    5282:	c9 f7       	brne	.-14     	; 0x5276 <__fixunssfsi+0x12>
    5284:	12 c0       	rjmp	.+36     	; 0x52aa <__fixunssfsi+0x46>
    5286:	b1 30       	cpi	r27, 0x01	; 1
    5288:	81 f0       	breq	.+32     	; 0x52aa <__fixunssfsi+0x46>
    528a:	9f d0       	rcall	.+318    	; 0x53ca <__fp_zero>
    528c:	b1 e0       	ldi	r27, 0x01	; 1
    528e:	08 95       	ret
    5290:	9c c0       	rjmp	.+312    	; 0x53ca <__fp_zero>
    5292:	67 2f       	mov	r22, r23
    5294:	78 2f       	mov	r23, r24
    5296:	88 27       	eor	r24, r24
    5298:	b8 5f       	subi	r27, 0xF8	; 248
    529a:	39 f0       	breq	.+14     	; 0x52aa <__fixunssfsi+0x46>
    529c:	b9 3f       	cpi	r27, 0xF9	; 249
    529e:	cc f3       	brlt	.-14     	; 0x5292 <__fixunssfsi+0x2e>
    52a0:	86 95       	lsr	r24
    52a2:	77 95       	ror	r23
    52a4:	67 95       	ror	r22
    52a6:	b3 95       	inc	r27
    52a8:	d9 f7       	brne	.-10     	; 0x52a0 <__fixunssfsi+0x3c>
    52aa:	3e f4       	brtc	.+14     	; 0x52ba <__fixunssfsi+0x56>
    52ac:	90 95       	com	r25
    52ae:	80 95       	com	r24
    52b0:	70 95       	com	r23
    52b2:	61 95       	neg	r22
    52b4:	7f 4f       	sbci	r23, 0xFF	; 255
    52b6:	8f 4f       	sbci	r24, 0xFF	; 255
    52b8:	9f 4f       	sbci	r25, 0xFF	; 255
    52ba:	08 95       	ret

000052bc <__floatunsisf>:
    52bc:	e8 94       	clt
    52be:	09 c0       	rjmp	.+18     	; 0x52d2 <__floatsisf+0x12>

000052c0 <__floatsisf>:
    52c0:	97 fb       	bst	r25, 7
    52c2:	3e f4       	brtc	.+14     	; 0x52d2 <__floatsisf+0x12>
    52c4:	90 95       	com	r25
    52c6:	80 95       	com	r24
    52c8:	70 95       	com	r23
    52ca:	61 95       	neg	r22
    52cc:	7f 4f       	sbci	r23, 0xFF	; 255
    52ce:	8f 4f       	sbci	r24, 0xFF	; 255
    52d0:	9f 4f       	sbci	r25, 0xFF	; 255
    52d2:	99 23       	and	r25, r25
    52d4:	a9 f0       	breq	.+42     	; 0x5300 <__floatsisf+0x40>
    52d6:	f9 2f       	mov	r31, r25
    52d8:	96 e9       	ldi	r25, 0x96	; 150
    52da:	bb 27       	eor	r27, r27
    52dc:	93 95       	inc	r25
    52de:	f6 95       	lsr	r31
    52e0:	87 95       	ror	r24
    52e2:	77 95       	ror	r23
    52e4:	67 95       	ror	r22
    52e6:	b7 95       	ror	r27
    52e8:	f1 11       	cpse	r31, r1
    52ea:	f8 cf       	rjmp	.-16     	; 0x52dc <__floatsisf+0x1c>
    52ec:	fa f4       	brpl	.+62     	; 0x532c <__floatsisf+0x6c>
    52ee:	bb 0f       	add	r27, r27
    52f0:	11 f4       	brne	.+4      	; 0x52f6 <__floatsisf+0x36>
    52f2:	60 ff       	sbrs	r22, 0
    52f4:	1b c0       	rjmp	.+54     	; 0x532c <__floatsisf+0x6c>
    52f6:	6f 5f       	subi	r22, 0xFF	; 255
    52f8:	7f 4f       	sbci	r23, 0xFF	; 255
    52fa:	8f 4f       	sbci	r24, 0xFF	; 255
    52fc:	9f 4f       	sbci	r25, 0xFF	; 255
    52fe:	16 c0       	rjmp	.+44     	; 0x532c <__floatsisf+0x6c>
    5300:	88 23       	and	r24, r24
    5302:	11 f0       	breq	.+4      	; 0x5308 <__floatsisf+0x48>
    5304:	96 e9       	ldi	r25, 0x96	; 150
    5306:	11 c0       	rjmp	.+34     	; 0x532a <__floatsisf+0x6a>
    5308:	77 23       	and	r23, r23
    530a:	21 f0       	breq	.+8      	; 0x5314 <__floatsisf+0x54>
    530c:	9e e8       	ldi	r25, 0x8E	; 142
    530e:	87 2f       	mov	r24, r23
    5310:	76 2f       	mov	r23, r22
    5312:	05 c0       	rjmp	.+10     	; 0x531e <__floatsisf+0x5e>
    5314:	66 23       	and	r22, r22
    5316:	71 f0       	breq	.+28     	; 0x5334 <__floatsisf+0x74>
    5318:	96 e8       	ldi	r25, 0x86	; 134
    531a:	86 2f       	mov	r24, r22
    531c:	70 e0       	ldi	r23, 0x00	; 0
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	2a f0       	brmi	.+10     	; 0x532c <__floatsisf+0x6c>
    5322:	9a 95       	dec	r25
    5324:	66 0f       	add	r22, r22
    5326:	77 1f       	adc	r23, r23
    5328:	88 1f       	adc	r24, r24
    532a:	da f7       	brpl	.-10     	; 0x5322 <__floatsisf+0x62>
    532c:	88 0f       	add	r24, r24
    532e:	96 95       	lsr	r25
    5330:	87 95       	ror	r24
    5332:	97 f9       	bld	r25, 7
    5334:	08 95       	ret

00005336 <__fp_inf>:
    5336:	97 f9       	bld	r25, 7
    5338:	9f 67       	ori	r25, 0x7F	; 127
    533a:	80 e8       	ldi	r24, 0x80	; 128
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	08 95       	ret

00005342 <__fp_nan>:
    5342:	9f ef       	ldi	r25, 0xFF	; 255
    5344:	80 ec       	ldi	r24, 0xC0	; 192
    5346:	08 95       	ret

00005348 <__fp_pscA>:
    5348:	00 24       	eor	r0, r0
    534a:	0a 94       	dec	r0
    534c:	16 16       	cp	r1, r22
    534e:	17 06       	cpc	r1, r23
    5350:	18 06       	cpc	r1, r24
    5352:	09 06       	cpc	r0, r25
    5354:	08 95       	ret

00005356 <__fp_pscB>:
    5356:	00 24       	eor	r0, r0
    5358:	0a 94       	dec	r0
    535a:	12 16       	cp	r1, r18
    535c:	13 06       	cpc	r1, r19
    535e:	14 06       	cpc	r1, r20
    5360:	05 06       	cpc	r0, r21
    5362:	08 95       	ret

00005364 <__fp_round>:
    5364:	09 2e       	mov	r0, r25
    5366:	03 94       	inc	r0
    5368:	00 0c       	add	r0, r0
    536a:	11 f4       	brne	.+4      	; 0x5370 <__fp_round+0xc>
    536c:	88 23       	and	r24, r24
    536e:	52 f0       	brmi	.+20     	; 0x5384 <__fp_round+0x20>
    5370:	bb 0f       	add	r27, r27
    5372:	40 f4       	brcc	.+16     	; 0x5384 <__fp_round+0x20>
    5374:	bf 2b       	or	r27, r31
    5376:	11 f4       	brne	.+4      	; 0x537c <__fp_round+0x18>
    5378:	60 ff       	sbrs	r22, 0
    537a:	04 c0       	rjmp	.+8      	; 0x5384 <__fp_round+0x20>
    537c:	6f 5f       	subi	r22, 0xFF	; 255
    537e:	7f 4f       	sbci	r23, 0xFF	; 255
    5380:	8f 4f       	sbci	r24, 0xFF	; 255
    5382:	9f 4f       	sbci	r25, 0xFF	; 255
    5384:	08 95       	ret

00005386 <__fp_split3>:
    5386:	57 fd       	sbrc	r21, 7
    5388:	90 58       	subi	r25, 0x80	; 128
    538a:	44 0f       	add	r20, r20
    538c:	55 1f       	adc	r21, r21
    538e:	59 f0       	breq	.+22     	; 0x53a6 <__fp_splitA+0x10>
    5390:	5f 3f       	cpi	r21, 0xFF	; 255
    5392:	71 f0       	breq	.+28     	; 0x53b0 <__fp_splitA+0x1a>
    5394:	47 95       	ror	r20

00005396 <__fp_splitA>:
    5396:	88 0f       	add	r24, r24
    5398:	97 fb       	bst	r25, 7
    539a:	99 1f       	adc	r25, r25
    539c:	61 f0       	breq	.+24     	; 0x53b6 <__fp_splitA+0x20>
    539e:	9f 3f       	cpi	r25, 0xFF	; 255
    53a0:	79 f0       	breq	.+30     	; 0x53c0 <__fp_splitA+0x2a>
    53a2:	87 95       	ror	r24
    53a4:	08 95       	ret
    53a6:	12 16       	cp	r1, r18
    53a8:	13 06       	cpc	r1, r19
    53aa:	14 06       	cpc	r1, r20
    53ac:	55 1f       	adc	r21, r21
    53ae:	f2 cf       	rjmp	.-28     	; 0x5394 <__fp_split3+0xe>
    53b0:	46 95       	lsr	r20
    53b2:	f1 df       	rcall	.-30     	; 0x5396 <__fp_splitA>
    53b4:	08 c0       	rjmp	.+16     	; 0x53c6 <__fp_splitA+0x30>
    53b6:	16 16       	cp	r1, r22
    53b8:	17 06       	cpc	r1, r23
    53ba:	18 06       	cpc	r1, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	f1 cf       	rjmp	.-30     	; 0x53a2 <__fp_splitA+0xc>
    53c0:	86 95       	lsr	r24
    53c2:	71 05       	cpc	r23, r1
    53c4:	61 05       	cpc	r22, r1
    53c6:	08 94       	sec
    53c8:	08 95       	ret

000053ca <__fp_zero>:
    53ca:	e8 94       	clt

000053cc <__fp_szero>:
    53cc:	bb 27       	eor	r27, r27
    53ce:	66 27       	eor	r22, r22
    53d0:	77 27       	eor	r23, r23
    53d2:	cb 01       	movw	r24, r22
    53d4:	97 f9       	bld	r25, 7
    53d6:	08 95       	ret

000053d8 <__muluhisi3>:
    53d8:	0e 94 b6 2a 	call	0x556c	; 0x556c <__umulhisi3>
    53dc:	a5 9f       	mul	r26, r21
    53de:	90 0d       	add	r25, r0
    53e0:	b4 9f       	mul	r27, r20
    53e2:	90 0d       	add	r25, r0
    53e4:	a4 9f       	mul	r26, r20
    53e6:	80 0d       	add	r24, r0
    53e8:	91 1d       	adc	r25, r1
    53ea:	11 24       	eor	r1, r1
    53ec:	08 95       	ret

000053ee <__mulsi3>:
    53ee:	db 01       	movw	r26, r22
    53f0:	8f 93       	push	r24
    53f2:	9f 93       	push	r25
    53f4:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    53f8:	bf 91       	pop	r27
    53fa:	af 91       	pop	r26
    53fc:	a2 9f       	mul	r26, r18
    53fe:	80 0d       	add	r24, r0
    5400:	91 1d       	adc	r25, r1
    5402:	a3 9f       	mul	r26, r19
    5404:	90 0d       	add	r25, r0
    5406:	b2 9f       	mul	r27, r18
    5408:	90 0d       	add	r25, r0
    540a:	11 24       	eor	r1, r1
    540c:	08 95       	ret

0000540e <__udivmodhi4>:
    540e:	aa 1b       	sub	r26, r26
    5410:	bb 1b       	sub	r27, r27
    5412:	51 e1       	ldi	r21, 0x11	; 17
    5414:	07 c0       	rjmp	.+14     	; 0x5424 <__udivmodhi4_ep>

00005416 <__udivmodhi4_loop>:
    5416:	aa 1f       	adc	r26, r26
    5418:	bb 1f       	adc	r27, r27
    541a:	a6 17       	cp	r26, r22
    541c:	b7 07       	cpc	r27, r23
    541e:	10 f0       	brcs	.+4      	; 0x5424 <__udivmodhi4_ep>
    5420:	a6 1b       	sub	r26, r22
    5422:	b7 0b       	sbc	r27, r23

00005424 <__udivmodhi4_ep>:
    5424:	88 1f       	adc	r24, r24
    5426:	99 1f       	adc	r25, r25
    5428:	5a 95       	dec	r21
    542a:	a9 f7       	brne	.-22     	; 0x5416 <__udivmodhi4_loop>
    542c:	80 95       	com	r24
    542e:	90 95       	com	r25
    5430:	bc 01       	movw	r22, r24
    5432:	cd 01       	movw	r24, r26
    5434:	08 95       	ret

00005436 <__divmodhi4>:
    5436:	97 fb       	bst	r25, 7
    5438:	07 2e       	mov	r0, r23
    543a:	16 f4       	brtc	.+4      	; 0x5440 <__divmodhi4+0xa>
    543c:	00 94       	com	r0
    543e:	07 d0       	rcall	.+14     	; 0x544e <__divmodhi4_neg1>
    5440:	77 fd       	sbrc	r23, 7
    5442:	09 d0       	rcall	.+18     	; 0x5456 <__divmodhi4_neg2>
    5444:	0e 94 07 2a 	call	0x540e	; 0x540e <__udivmodhi4>
    5448:	07 fc       	sbrc	r0, 7
    544a:	05 d0       	rcall	.+10     	; 0x5456 <__divmodhi4_neg2>
    544c:	3e f4       	brtc	.+14     	; 0x545c <__divmodhi4_exit>

0000544e <__divmodhi4_neg1>:
    544e:	90 95       	com	r25
    5450:	81 95       	neg	r24
    5452:	9f 4f       	sbci	r25, 0xFF	; 255
    5454:	08 95       	ret

00005456 <__divmodhi4_neg2>:
    5456:	70 95       	com	r23
    5458:	61 95       	neg	r22
    545a:	7f 4f       	sbci	r23, 0xFF	; 255

0000545c <__divmodhi4_exit>:
    545c:	08 95       	ret

0000545e <__udivmodsi4>:
    545e:	a1 e2       	ldi	r26, 0x21	; 33
    5460:	1a 2e       	mov	r1, r26
    5462:	aa 1b       	sub	r26, r26
    5464:	bb 1b       	sub	r27, r27
    5466:	fd 01       	movw	r30, r26
    5468:	0d c0       	rjmp	.+26     	; 0x5484 <__udivmodsi4_ep>

0000546a <__udivmodsi4_loop>:
    546a:	aa 1f       	adc	r26, r26
    546c:	bb 1f       	adc	r27, r27
    546e:	ee 1f       	adc	r30, r30
    5470:	ff 1f       	adc	r31, r31
    5472:	a2 17       	cp	r26, r18
    5474:	b3 07       	cpc	r27, r19
    5476:	e4 07       	cpc	r30, r20
    5478:	f5 07       	cpc	r31, r21
    547a:	20 f0       	brcs	.+8      	; 0x5484 <__udivmodsi4_ep>
    547c:	a2 1b       	sub	r26, r18
    547e:	b3 0b       	sbc	r27, r19
    5480:	e4 0b       	sbc	r30, r20
    5482:	f5 0b       	sbc	r31, r21

00005484 <__udivmodsi4_ep>:
    5484:	66 1f       	adc	r22, r22
    5486:	77 1f       	adc	r23, r23
    5488:	88 1f       	adc	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	1a 94       	dec	r1
    548e:	69 f7       	brne	.-38     	; 0x546a <__udivmodsi4_loop>
    5490:	60 95       	com	r22
    5492:	70 95       	com	r23
    5494:	80 95       	com	r24
    5496:	90 95       	com	r25
    5498:	9b 01       	movw	r18, r22
    549a:	ac 01       	movw	r20, r24
    549c:	bd 01       	movw	r22, r26
    549e:	cf 01       	movw	r24, r30
    54a0:	08 95       	ret

000054a2 <__umoddi3>:
    54a2:	68 94       	set
    54a4:	01 c0       	rjmp	.+2      	; 0x54a8 <__udivdi3_umoddi3>

000054a6 <__udivdi3>:
    54a6:	e8 94       	clt

000054a8 <__udivdi3_umoddi3>:
    54a8:	8f 92       	push	r8
    54aa:	9f 92       	push	r9
    54ac:	cf 93       	push	r28
    54ae:	df 93       	push	r29
    54b0:	0e 94 5f 2a 	call	0x54be	; 0x54be <__udivmod64>
    54b4:	df 91       	pop	r29
    54b6:	cf 91       	pop	r28
    54b8:	9f 90       	pop	r9
    54ba:	8f 90       	pop	r8
    54bc:	08 95       	ret

000054be <__udivmod64>:
    54be:	88 24       	eor	r8, r8
    54c0:	99 24       	eor	r9, r9
    54c2:	f4 01       	movw	r30, r8
    54c4:	e4 01       	movw	r28, r8
    54c6:	b0 e4       	ldi	r27, 0x40	; 64
    54c8:	9f 93       	push	r25
    54ca:	aa 27       	eor	r26, r26
    54cc:	9a 15       	cp	r25, r10
    54ce:	8b 04       	cpc	r8, r11
    54d0:	9c 04       	cpc	r9, r12
    54d2:	ed 05       	cpc	r30, r13
    54d4:	fe 05       	cpc	r31, r14
    54d6:	cf 05       	cpc	r28, r15
    54d8:	d0 07       	cpc	r29, r16
    54da:	a1 07       	cpc	r26, r17
    54dc:	98 f4       	brcc	.+38     	; 0x5504 <__udivmod64+0x46>
    54de:	ad 2f       	mov	r26, r29
    54e0:	dc 2f       	mov	r29, r28
    54e2:	cf 2f       	mov	r28, r31
    54e4:	fe 2f       	mov	r31, r30
    54e6:	e9 2d       	mov	r30, r9
    54e8:	98 2c       	mov	r9, r8
    54ea:	89 2e       	mov	r8, r25
    54ec:	98 2f       	mov	r25, r24
    54ee:	87 2f       	mov	r24, r23
    54f0:	76 2f       	mov	r23, r22
    54f2:	65 2f       	mov	r22, r21
    54f4:	54 2f       	mov	r21, r20
    54f6:	43 2f       	mov	r20, r19
    54f8:	32 2f       	mov	r19, r18
    54fa:	22 27       	eor	r18, r18
    54fc:	b8 50       	subi	r27, 0x08	; 8
    54fe:	31 f7       	brne	.-52     	; 0x54cc <__udivmod64+0xe>
    5500:	bf 91       	pop	r27
    5502:	27 c0       	rjmp	.+78     	; 0x5552 <__udivmod64+0x94>
    5504:	1b 2e       	mov	r1, r27
    5506:	bf 91       	pop	r27
    5508:	bb 27       	eor	r27, r27
    550a:	22 0f       	add	r18, r18
    550c:	33 1f       	adc	r19, r19
    550e:	44 1f       	adc	r20, r20
    5510:	55 1f       	adc	r21, r21
    5512:	66 1f       	adc	r22, r22
    5514:	77 1f       	adc	r23, r23
    5516:	88 1f       	adc	r24, r24
    5518:	99 1f       	adc	r25, r25
    551a:	88 1c       	adc	r8, r8
    551c:	99 1c       	adc	r9, r9
    551e:	ee 1f       	adc	r30, r30
    5520:	ff 1f       	adc	r31, r31
    5522:	cc 1f       	adc	r28, r28
    5524:	dd 1f       	adc	r29, r29
    5526:	aa 1f       	adc	r26, r26
    5528:	bb 1f       	adc	r27, r27
    552a:	8a 14       	cp	r8, r10
    552c:	9b 04       	cpc	r9, r11
    552e:	ec 05       	cpc	r30, r12
    5530:	fd 05       	cpc	r31, r13
    5532:	ce 05       	cpc	r28, r14
    5534:	df 05       	cpc	r29, r15
    5536:	a0 07       	cpc	r26, r16
    5538:	b1 07       	cpc	r27, r17
    553a:	48 f0       	brcs	.+18     	; 0x554e <__udivmod64+0x90>
    553c:	8a 18       	sub	r8, r10
    553e:	9b 08       	sbc	r9, r11
    5540:	ec 09       	sbc	r30, r12
    5542:	fd 09       	sbc	r31, r13
    5544:	ce 09       	sbc	r28, r14
    5546:	df 09       	sbc	r29, r15
    5548:	a0 0b       	sbc	r26, r16
    554a:	b1 0b       	sbc	r27, r17
    554c:	21 60       	ori	r18, 0x01	; 1
    554e:	1a 94       	dec	r1
    5550:	e1 f6       	brne	.-72     	; 0x550a <__udivmod64+0x4c>
    5552:	2e f4       	brtc	.+10     	; 0x555e <__udivmod64+0xa0>
    5554:	94 01       	movw	r18, r8
    5556:	af 01       	movw	r20, r30
    5558:	be 01       	movw	r22, r28
    555a:	cd 01       	movw	r24, r26
    555c:	00 0c       	add	r0, r0
    555e:	08 95       	ret

00005560 <__tablejump2__>:
    5560:	ee 0f       	add	r30, r30
    5562:	ff 1f       	adc	r31, r31

00005564 <__tablejump__>:
    5564:	05 90       	lpm	r0, Z+
    5566:	f4 91       	lpm	r31, Z
    5568:	e0 2d       	mov	r30, r0
    556a:	09 94       	ijmp

0000556c <__umulhisi3>:
    556c:	a2 9f       	mul	r26, r18
    556e:	b0 01       	movw	r22, r0
    5570:	b3 9f       	mul	r27, r19
    5572:	c0 01       	movw	r24, r0
    5574:	a3 9f       	mul	r26, r19
    5576:	70 0d       	add	r23, r0
    5578:	81 1d       	adc	r24, r1
    557a:	11 24       	eor	r1, r1
    557c:	91 1d       	adc	r25, r1
    557e:	b2 9f       	mul	r27, r18
    5580:	70 0d       	add	r23, r0
    5582:	81 1d       	adc	r24, r1
    5584:	11 24       	eor	r1, r1
    5586:	91 1d       	adc	r25, r1
    5588:	08 95       	ret

0000558a <do_rand>:
    558a:	8f 92       	push	r8
    558c:	9f 92       	push	r9
    558e:	af 92       	push	r10
    5590:	bf 92       	push	r11
    5592:	cf 92       	push	r12
    5594:	df 92       	push	r13
    5596:	ef 92       	push	r14
    5598:	ff 92       	push	r15
    559a:	cf 93       	push	r28
    559c:	df 93       	push	r29
    559e:	ec 01       	movw	r28, r24
    55a0:	68 81       	ld	r22, Y
    55a2:	79 81       	ldd	r23, Y+1	; 0x01
    55a4:	8a 81       	ldd	r24, Y+2	; 0x02
    55a6:	9b 81       	ldd	r25, Y+3	; 0x03
    55a8:	61 15       	cp	r22, r1
    55aa:	71 05       	cpc	r23, r1
    55ac:	81 05       	cpc	r24, r1
    55ae:	91 05       	cpc	r25, r1
    55b0:	21 f4       	brne	.+8      	; 0x55ba <do_rand+0x30>
    55b2:	64 e2       	ldi	r22, 0x24	; 36
    55b4:	79 ed       	ldi	r23, 0xD9	; 217
    55b6:	8b e5       	ldi	r24, 0x5B	; 91
    55b8:	97 e0       	ldi	r25, 0x07	; 7
    55ba:	2d e1       	ldi	r18, 0x1D	; 29
    55bc:	33 ef       	ldi	r19, 0xF3	; 243
    55be:	41 e0       	ldi	r20, 0x01	; 1
    55c0:	50 e0       	ldi	r21, 0x00	; 0
    55c2:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__divmodsi4>
    55c6:	49 01       	movw	r8, r18
    55c8:	5a 01       	movw	r10, r20
    55ca:	9b 01       	movw	r18, r22
    55cc:	ac 01       	movw	r20, r24
    55ce:	a7 ea       	ldi	r26, 0xA7	; 167
    55d0:	b1 e4       	ldi	r27, 0x41	; 65
    55d2:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    55d6:	6b 01       	movw	r12, r22
    55d8:	7c 01       	movw	r14, r24
    55da:	ac ee       	ldi	r26, 0xEC	; 236
    55dc:	b4 ef       	ldi	r27, 0xF4	; 244
    55de:	a5 01       	movw	r20, r10
    55e0:	94 01       	movw	r18, r8
    55e2:	0e 94 f7 2d 	call	0x5bee	; 0x5bee <__mulohisi3>
    55e6:	dc 01       	movw	r26, r24
    55e8:	cb 01       	movw	r24, r22
    55ea:	8c 0d       	add	r24, r12
    55ec:	9d 1d       	adc	r25, r13
    55ee:	ae 1d       	adc	r26, r14
    55f0:	bf 1d       	adc	r27, r15
    55f2:	b7 ff       	sbrs	r27, 7
    55f4:	03 c0       	rjmp	.+6      	; 0x55fc <do_rand+0x72>
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	a1 09       	sbc	r26, r1
    55fa:	b0 48       	sbci	r27, 0x80	; 128
    55fc:	88 83       	st	Y, r24
    55fe:	99 83       	std	Y+1, r25	; 0x01
    5600:	aa 83       	std	Y+2, r26	; 0x02
    5602:	bb 83       	std	Y+3, r27	; 0x03
    5604:	9f 77       	andi	r25, 0x7F	; 127
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	ff 90       	pop	r15
    560c:	ef 90       	pop	r14
    560e:	df 90       	pop	r13
    5610:	cf 90       	pop	r12
    5612:	bf 90       	pop	r11
    5614:	af 90       	pop	r10
    5616:	9f 90       	pop	r9
    5618:	8f 90       	pop	r8
    561a:	08 95       	ret

0000561c <rand_r>:
    561c:	0c 94 c5 2a 	jmp	0x558a	; 0x558a <do_rand>

00005620 <rand>:
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	92 e0       	ldi	r25, 0x02	; 2
    5624:	0c 94 c5 2a 	jmp	0x558a	; 0x558a <do_rand>

00005628 <srand>:
    5628:	a0 e0       	ldi	r26, 0x00	; 0
    562a:	b0 e0       	ldi	r27, 0x00	; 0
    562c:	80 93 00 02 	sts	0x0200, r24
    5630:	90 93 01 02 	sts	0x0201, r25
    5634:	a0 93 02 02 	sts	0x0202, r26
    5638:	b0 93 03 02 	sts	0x0203, r27
    563c:	08 95       	ret

0000563e <strchr_P>:
    563e:	fc 01       	movw	r30, r24
    5640:	05 90       	lpm	r0, Z+
    5642:	06 16       	cp	r0, r22
    5644:	21 f0       	breq	.+8      	; 0x564e <strchr_P+0x10>
    5646:	00 20       	and	r0, r0
    5648:	d9 f7       	brne	.-10     	; 0x5640 <strchr_P+0x2>
    564a:	c0 01       	movw	r24, r0
    564c:	08 95       	ret
    564e:	31 97       	sbiw	r30, 0x01	; 1
    5650:	cf 01       	movw	r24, r30
    5652:	08 95       	ret

00005654 <memcpy>:
    5654:	fb 01       	movw	r30, r22
    5656:	dc 01       	movw	r26, r24
    5658:	02 c0       	rjmp	.+4      	; 0x565e <memcpy+0xa>
    565a:	01 90       	ld	r0, Z+
    565c:	0d 92       	st	X+, r0
    565e:	41 50       	subi	r20, 0x01	; 1
    5660:	50 40       	sbci	r21, 0x00	; 0
    5662:	d8 f7       	brcc	.-10     	; 0x565a <memcpy+0x6>
    5664:	08 95       	ret

00005666 <fdevopen>:
    5666:	0f 93       	push	r16
    5668:	1f 93       	push	r17
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	00 97       	sbiw	r24, 0x00	; 0
    5670:	31 f4       	brne	.+12     	; 0x567e <fdevopen+0x18>
    5672:	61 15       	cp	r22, r1
    5674:	71 05       	cpc	r23, r1
    5676:	19 f4       	brne	.+6      	; 0x567e <fdevopen+0x18>
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	3a c0       	rjmp	.+116    	; 0x56f2 <fdevopen+0x8c>
    567e:	8b 01       	movw	r16, r22
    5680:	ec 01       	movw	r28, r24
    5682:	6e e0       	ldi	r22, 0x0E	; 14
    5684:	70 e0       	ldi	r23, 0x00	; 0
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <calloc>
    568e:	fc 01       	movw	r30, r24
    5690:	00 97       	sbiw	r24, 0x00	; 0
    5692:	91 f3       	breq	.-28     	; 0x5678 <fdevopen+0x12>
    5694:	80 e8       	ldi	r24, 0x80	; 128
    5696:	83 83       	std	Z+3, r24	; 0x03
    5698:	01 15       	cp	r16, r1
    569a:	11 05       	cpc	r17, r1
    569c:	71 f0       	breq	.+28     	; 0x56ba <fdevopen+0x54>
    569e:	13 87       	std	Z+11, r17	; 0x0b
    56a0:	02 87       	std	Z+10, r16	; 0x0a
    56a2:	81 e8       	ldi	r24, 0x81	; 129
    56a4:	83 83       	std	Z+3, r24	; 0x03
    56a6:	80 91 78 08 	lds	r24, 0x0878
    56aa:	90 91 79 08 	lds	r25, 0x0879
    56ae:	89 2b       	or	r24, r25
    56b0:	21 f4       	brne	.+8      	; 0x56ba <fdevopen+0x54>
    56b2:	f0 93 79 08 	sts	0x0879, r31
    56b6:	e0 93 78 08 	sts	0x0878, r30
    56ba:	20 97       	sbiw	r28, 0x00	; 0
    56bc:	c9 f0       	breq	.+50     	; 0x56f0 <fdevopen+0x8a>
    56be:	d1 87       	std	Z+9, r29	; 0x09
    56c0:	c0 87       	std	Z+8, r28	; 0x08
    56c2:	83 81       	ldd	r24, Z+3	; 0x03
    56c4:	82 60       	ori	r24, 0x02	; 2
    56c6:	83 83       	std	Z+3, r24	; 0x03
    56c8:	80 91 7a 08 	lds	r24, 0x087A
    56cc:	90 91 7b 08 	lds	r25, 0x087B
    56d0:	89 2b       	or	r24, r25
    56d2:	71 f4       	brne	.+28     	; 0x56f0 <fdevopen+0x8a>
    56d4:	f0 93 7b 08 	sts	0x087B, r31
    56d8:	e0 93 7a 08 	sts	0x087A, r30
    56dc:	80 91 7c 08 	lds	r24, 0x087C
    56e0:	90 91 7d 08 	lds	r25, 0x087D
    56e4:	89 2b       	or	r24, r25
    56e6:	21 f4       	brne	.+8      	; 0x56f0 <fdevopen+0x8a>
    56e8:	f0 93 7d 08 	sts	0x087D, r31
    56ec:	e0 93 7c 08 	sts	0x087C, r30
    56f0:	cf 01       	movw	r24, r30
    56f2:	df 91       	pop	r29
    56f4:	cf 91       	pop	r28
    56f6:	1f 91       	pop	r17
    56f8:	0f 91       	pop	r16
    56fa:	08 95       	ret

000056fc <fputc>:
    56fc:	0f 93       	push	r16
    56fe:	1f 93       	push	r17
    5700:	cf 93       	push	r28
    5702:	df 93       	push	r29
    5704:	fb 01       	movw	r30, r22
    5706:	23 81       	ldd	r18, Z+3	; 0x03
    5708:	21 fd       	sbrc	r18, 1
    570a:	03 c0       	rjmp	.+6      	; 0x5712 <fputc+0x16>
    570c:	8f ef       	ldi	r24, 0xFF	; 255
    570e:	9f ef       	ldi	r25, 0xFF	; 255
    5710:	28 c0       	rjmp	.+80     	; 0x5762 <fputc+0x66>
    5712:	22 ff       	sbrs	r18, 2
    5714:	16 c0       	rjmp	.+44     	; 0x5742 <fputc+0x46>
    5716:	46 81       	ldd	r20, Z+6	; 0x06
    5718:	57 81       	ldd	r21, Z+7	; 0x07
    571a:	24 81       	ldd	r18, Z+4	; 0x04
    571c:	35 81       	ldd	r19, Z+5	; 0x05
    571e:	42 17       	cp	r20, r18
    5720:	53 07       	cpc	r21, r19
    5722:	44 f4       	brge	.+16     	; 0x5734 <fputc+0x38>
    5724:	a0 81       	ld	r26, Z
    5726:	b1 81       	ldd	r27, Z+1	; 0x01
    5728:	9d 01       	movw	r18, r26
    572a:	2f 5f       	subi	r18, 0xFF	; 255
    572c:	3f 4f       	sbci	r19, 0xFF	; 255
    572e:	31 83       	std	Z+1, r19	; 0x01
    5730:	20 83       	st	Z, r18
    5732:	8c 93       	st	X, r24
    5734:	26 81       	ldd	r18, Z+6	; 0x06
    5736:	37 81       	ldd	r19, Z+7	; 0x07
    5738:	2f 5f       	subi	r18, 0xFF	; 255
    573a:	3f 4f       	sbci	r19, 0xFF	; 255
    573c:	37 83       	std	Z+7, r19	; 0x07
    573e:	26 83       	std	Z+6, r18	; 0x06
    5740:	10 c0       	rjmp	.+32     	; 0x5762 <fputc+0x66>
    5742:	eb 01       	movw	r28, r22
    5744:	09 2f       	mov	r16, r25
    5746:	18 2f       	mov	r17, r24
    5748:	00 84       	ldd	r0, Z+8	; 0x08
    574a:	f1 85       	ldd	r31, Z+9	; 0x09
    574c:	e0 2d       	mov	r30, r0
    574e:	09 95       	icall
    5750:	89 2b       	or	r24, r25
    5752:	e1 f6       	brne	.-72     	; 0x570c <fputc+0x10>
    5754:	8e 81       	ldd	r24, Y+6	; 0x06
    5756:	9f 81       	ldd	r25, Y+7	; 0x07
    5758:	01 96       	adiw	r24, 0x01	; 1
    575a:	9f 83       	std	Y+7, r25	; 0x07
    575c:	8e 83       	std	Y+6, r24	; 0x06
    575e:	81 2f       	mov	r24, r17
    5760:	90 2f       	mov	r25, r16
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	1f 91       	pop	r17
    5768:	0f 91       	pop	r16
    576a:	08 95       	ret

0000576c <printf>:
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	cd b7       	in	r28, 0x3d	; 61
    5772:	de b7       	in	r29, 0x3e	; 62
    5774:	ae 01       	movw	r20, r28
    5776:	4b 5f       	subi	r20, 0xFB	; 251
    5778:	5f 4f       	sbci	r21, 0xFF	; 255
    577a:	fa 01       	movw	r30, r20
    577c:	61 91       	ld	r22, Z+
    577e:	71 91       	ld	r23, Z+
    5780:	af 01       	movw	r20, r30
    5782:	80 91 7a 08 	lds	r24, 0x087A
    5786:	90 91 7b 08 	lds	r25, 0x087B
    578a:	0e 94 7e 27 	call	0x4efc	; 0x4efc <vfprintf>
    578e:	df 91       	pop	r29
    5790:	cf 91       	pop	r28
    5792:	08 95       	ret

00005794 <putchar>:
    5794:	60 91 7a 08 	lds	r22, 0x087A
    5798:	70 91 7b 08 	lds	r23, 0x087B
    579c:	0c 94 7e 2b 	jmp	0x56fc	; 0x56fc <fputc>

000057a0 <puts>:
    57a0:	0f 93       	push	r16
    57a2:	1f 93       	push	r17
    57a4:	cf 93       	push	r28
    57a6:	df 93       	push	r29
    57a8:	e0 91 7a 08 	lds	r30, 0x087A
    57ac:	f0 91 7b 08 	lds	r31, 0x087B
    57b0:	23 81       	ldd	r18, Z+3	; 0x03
    57b2:	21 ff       	sbrs	r18, 1
    57b4:	1b c0       	rjmp	.+54     	; 0x57ec <puts+0x4c>
    57b6:	8c 01       	movw	r16, r24
    57b8:	d0 e0       	ldi	r29, 0x00	; 0
    57ba:	c0 e0       	ldi	r28, 0x00	; 0
    57bc:	f8 01       	movw	r30, r16
    57be:	81 91       	ld	r24, Z+
    57c0:	8f 01       	movw	r16, r30
    57c2:	60 91 7a 08 	lds	r22, 0x087A
    57c6:	70 91 7b 08 	lds	r23, 0x087B
    57ca:	db 01       	movw	r26, r22
    57cc:	18 96       	adiw	r26, 0x08	; 8
    57ce:	ed 91       	ld	r30, X+
    57d0:	fc 91       	ld	r31, X
    57d2:	19 97       	sbiw	r26, 0x09	; 9
    57d4:	88 23       	and	r24, r24
    57d6:	31 f0       	breq	.+12     	; 0x57e4 <puts+0x44>
    57d8:	09 95       	icall
    57da:	89 2b       	or	r24, r25
    57dc:	79 f3       	breq	.-34     	; 0x57bc <puts+0x1c>
    57de:	df ef       	ldi	r29, 0xFF	; 255
    57e0:	cf ef       	ldi	r28, 0xFF	; 255
    57e2:	ec cf       	rjmp	.-40     	; 0x57bc <puts+0x1c>
    57e4:	8a e0       	ldi	r24, 0x0A	; 10
    57e6:	09 95       	icall
    57e8:	89 2b       	or	r24, r25
    57ea:	19 f0       	breq	.+6      	; 0x57f2 <puts+0x52>
    57ec:	8f ef       	ldi	r24, 0xFF	; 255
    57ee:	9f ef       	ldi	r25, 0xFF	; 255
    57f0:	02 c0       	rjmp	.+4      	; 0x57f6 <puts+0x56>
    57f2:	8d 2f       	mov	r24, r29
    57f4:	9c 2f       	mov	r25, r28
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	1f 91       	pop	r17
    57fc:	0f 91       	pop	r16
    57fe:	08 95       	ret

00005800 <sprintf>:
    5800:	0f 93       	push	r16
    5802:	1f 93       	push	r17
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	cd b7       	in	r28, 0x3d	; 61
    580a:	de b7       	in	r29, 0x3e	; 62
    580c:	2e 97       	sbiw	r28, 0x0e	; 14
    580e:	0f b6       	in	r0, 0x3f	; 63
    5810:	f8 94       	cli
    5812:	de bf       	out	0x3e, r29	; 62
    5814:	0f be       	out	0x3f, r0	; 63
    5816:	cd bf       	out	0x3d, r28	; 61
    5818:	0d 89       	ldd	r16, Y+21	; 0x15
    581a:	1e 89       	ldd	r17, Y+22	; 0x16
    581c:	86 e0       	ldi	r24, 0x06	; 6
    581e:	8c 83       	std	Y+4, r24	; 0x04
    5820:	1a 83       	std	Y+2, r17	; 0x02
    5822:	09 83       	std	Y+1, r16	; 0x01
    5824:	8f ef       	ldi	r24, 0xFF	; 255
    5826:	9f e7       	ldi	r25, 0x7F	; 127
    5828:	9e 83       	std	Y+6, r25	; 0x06
    582a:	8d 83       	std	Y+5, r24	; 0x05
    582c:	ae 01       	movw	r20, r28
    582e:	47 5e       	subi	r20, 0xE7	; 231
    5830:	5f 4f       	sbci	r21, 0xFF	; 255
    5832:	6f 89       	ldd	r22, Y+23	; 0x17
    5834:	78 8d       	ldd	r23, Y+24	; 0x18
    5836:	ce 01       	movw	r24, r28
    5838:	01 96       	adiw	r24, 0x01	; 1
    583a:	0e 94 7e 27 	call	0x4efc	; 0x4efc <vfprintf>
    583e:	2f 81       	ldd	r18, Y+7	; 0x07
    5840:	38 85       	ldd	r19, Y+8	; 0x08
    5842:	f8 01       	movw	r30, r16
    5844:	e2 0f       	add	r30, r18
    5846:	f3 1f       	adc	r31, r19
    5848:	10 82       	st	Z, r1
    584a:	2e 96       	adiw	r28, 0x0e	; 14
    584c:	0f b6       	in	r0, 0x3f	; 63
    584e:	f8 94       	cli
    5850:	de bf       	out	0x3e, r29	; 62
    5852:	0f be       	out	0x3f, r0	; 63
    5854:	cd bf       	out	0x3d, r28	; 61
    5856:	df 91       	pop	r29
    5858:	cf 91       	pop	r28
    585a:	1f 91       	pop	r17
    585c:	0f 91       	pop	r16
    585e:	08 95       	ret

00005860 <__ultoa_invert>:
    5860:	fa 01       	movw	r30, r20
    5862:	aa 27       	eor	r26, r26
    5864:	28 30       	cpi	r18, 0x08	; 8
    5866:	51 f1       	breq	.+84     	; 0x58bc <__ultoa_invert+0x5c>
    5868:	20 31       	cpi	r18, 0x10	; 16
    586a:	81 f1       	breq	.+96     	; 0x58cc <__ultoa_invert+0x6c>
    586c:	e8 94       	clt
    586e:	6f 93       	push	r22
    5870:	6e 7f       	andi	r22, 0xFE	; 254
    5872:	6e 5f       	subi	r22, 0xFE	; 254
    5874:	7f 4f       	sbci	r23, 0xFF	; 255
    5876:	8f 4f       	sbci	r24, 0xFF	; 255
    5878:	9f 4f       	sbci	r25, 0xFF	; 255
    587a:	af 4f       	sbci	r26, 0xFF	; 255
    587c:	b1 e0       	ldi	r27, 0x01	; 1
    587e:	3e d0       	rcall	.+124    	; 0x58fc <__ultoa_invert+0x9c>
    5880:	b4 e0       	ldi	r27, 0x04	; 4
    5882:	3c d0       	rcall	.+120    	; 0x58fc <__ultoa_invert+0x9c>
    5884:	67 0f       	add	r22, r23
    5886:	78 1f       	adc	r23, r24
    5888:	89 1f       	adc	r24, r25
    588a:	9a 1f       	adc	r25, r26
    588c:	a1 1d       	adc	r26, r1
    588e:	68 0f       	add	r22, r24
    5890:	79 1f       	adc	r23, r25
    5892:	8a 1f       	adc	r24, r26
    5894:	91 1d       	adc	r25, r1
    5896:	a1 1d       	adc	r26, r1
    5898:	6a 0f       	add	r22, r26
    589a:	71 1d       	adc	r23, r1
    589c:	81 1d       	adc	r24, r1
    589e:	91 1d       	adc	r25, r1
    58a0:	a1 1d       	adc	r26, r1
    58a2:	20 d0       	rcall	.+64     	; 0x58e4 <__ultoa_invert+0x84>
    58a4:	09 f4       	brne	.+2      	; 0x58a8 <__ultoa_invert+0x48>
    58a6:	68 94       	set
    58a8:	3f 91       	pop	r19
    58aa:	2a e0       	ldi	r18, 0x0A	; 10
    58ac:	26 9f       	mul	r18, r22
    58ae:	11 24       	eor	r1, r1
    58b0:	30 19       	sub	r19, r0
    58b2:	30 5d       	subi	r19, 0xD0	; 208
    58b4:	31 93       	st	Z+, r19
    58b6:	de f6       	brtc	.-74     	; 0x586e <__ultoa_invert+0xe>
    58b8:	cf 01       	movw	r24, r30
    58ba:	08 95       	ret
    58bc:	46 2f       	mov	r20, r22
    58be:	47 70       	andi	r20, 0x07	; 7
    58c0:	40 5d       	subi	r20, 0xD0	; 208
    58c2:	41 93       	st	Z+, r20
    58c4:	b3 e0       	ldi	r27, 0x03	; 3
    58c6:	0f d0       	rcall	.+30     	; 0x58e6 <__ultoa_invert+0x86>
    58c8:	c9 f7       	brne	.-14     	; 0x58bc <__ultoa_invert+0x5c>
    58ca:	f6 cf       	rjmp	.-20     	; 0x58b8 <__ultoa_invert+0x58>
    58cc:	46 2f       	mov	r20, r22
    58ce:	4f 70       	andi	r20, 0x0F	; 15
    58d0:	40 5d       	subi	r20, 0xD0	; 208
    58d2:	4a 33       	cpi	r20, 0x3A	; 58
    58d4:	18 f0       	brcs	.+6      	; 0x58dc <__ultoa_invert+0x7c>
    58d6:	49 5d       	subi	r20, 0xD9	; 217
    58d8:	31 fd       	sbrc	r19, 1
    58da:	40 52       	subi	r20, 0x20	; 32
    58dc:	41 93       	st	Z+, r20
    58de:	02 d0       	rcall	.+4      	; 0x58e4 <__ultoa_invert+0x84>
    58e0:	a9 f7       	brne	.-22     	; 0x58cc <__ultoa_invert+0x6c>
    58e2:	ea cf       	rjmp	.-44     	; 0x58b8 <__ultoa_invert+0x58>
    58e4:	b4 e0       	ldi	r27, 0x04	; 4
    58e6:	a6 95       	lsr	r26
    58e8:	97 95       	ror	r25
    58ea:	87 95       	ror	r24
    58ec:	77 95       	ror	r23
    58ee:	67 95       	ror	r22
    58f0:	ba 95       	dec	r27
    58f2:	c9 f7       	brne	.-14     	; 0x58e6 <__ultoa_invert+0x86>
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	61 05       	cpc	r22, r1
    58f8:	71 05       	cpc	r23, r1
    58fa:	08 95       	ret
    58fc:	9b 01       	movw	r18, r22
    58fe:	ac 01       	movw	r20, r24
    5900:	0a 2e       	mov	r0, r26
    5902:	06 94       	lsr	r0
    5904:	57 95       	ror	r21
    5906:	47 95       	ror	r20
    5908:	37 95       	ror	r19
    590a:	27 95       	ror	r18
    590c:	ba 95       	dec	r27
    590e:	c9 f7       	brne	.-14     	; 0x5902 <__ultoa_invert+0xa2>
    5910:	62 0f       	add	r22, r18
    5912:	73 1f       	adc	r23, r19
    5914:	84 1f       	adc	r24, r20
    5916:	95 1f       	adc	r25, r21
    5918:	a0 1d       	adc	r26, r0
    591a:	08 95       	ret

0000591c <__eerd_byte_m128rfa1>:
    591c:	f9 99       	sbic	0x1f, 1	; 31
    591e:	fe cf       	rjmp	.-4      	; 0x591c <__eerd_byte_m128rfa1>
    5920:	92 bd       	out	0x22, r25	; 34
    5922:	81 bd       	out	0x21, r24	; 33
    5924:	f8 9a       	sbi	0x1f, 0	; 31
    5926:	99 27       	eor	r25, r25
    5928:	80 b5       	in	r24, 0x20	; 32
    592a:	08 95       	ret

0000592c <__eewr_byte_m128rfa1>:
    592c:	26 2f       	mov	r18, r22

0000592e <__eewr_r18_m128rfa1>:
    592e:	f9 99       	sbic	0x1f, 1	; 31
    5930:	fe cf       	rjmp	.-4      	; 0x592e <__eewr_r18_m128rfa1>
    5932:	1f ba       	out	0x1f, r1	; 31
    5934:	92 bd       	out	0x22, r25	; 34
    5936:	81 bd       	out	0x21, r24	; 33
    5938:	20 bd       	out	0x20, r18	; 32
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	f8 94       	cli
    593e:	fa 9a       	sbi	0x1f, 2	; 31
    5940:	f9 9a       	sbi	0x1f, 1	; 31
    5942:	0f be       	out	0x3f, r0	; 63
    5944:	01 96       	adiw	r24, 0x01	; 1
    5946:	08 95       	ret

00005948 <calloc>:
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	86 9f       	mul	r24, r22
    5952:	80 01       	movw	r16, r0
    5954:	87 9f       	mul	r24, r23
    5956:	10 0d       	add	r17, r0
    5958:	96 9f       	mul	r25, r22
    595a:	10 0d       	add	r17, r0
    595c:	11 24       	eor	r1, r1
    595e:	c8 01       	movw	r24, r16
    5960:	0e 94 c0 2c 	call	0x5980	; 0x5980 <malloc>
    5964:	ec 01       	movw	r28, r24
    5966:	00 97       	sbiw	r24, 0x00	; 0
    5968:	29 f0       	breq	.+10     	; 0x5974 <calloc+0x2c>
    596a:	a8 01       	movw	r20, r16
    596c:	60 e0       	ldi	r22, 0x00	; 0
    596e:	70 e0       	ldi	r23, 0x00	; 0
    5970:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <memset>
    5974:	ce 01       	movw	r24, r28
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	08 95       	ret

00005980 <malloc>:
    5980:	cf 93       	push	r28
    5982:	df 93       	push	r29
    5984:	82 30       	cpi	r24, 0x02	; 2
    5986:	91 05       	cpc	r25, r1
    5988:	10 f4       	brcc	.+4      	; 0x598e <malloc+0xe>
    598a:	82 e0       	ldi	r24, 0x02	; 2
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	e0 91 80 08 	lds	r30, 0x0880
    5992:	f0 91 81 08 	lds	r31, 0x0881
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	c0 e0       	ldi	r28, 0x00	; 0
    599c:	d0 e0       	ldi	r29, 0x00	; 0
    599e:	30 97       	sbiw	r30, 0x00	; 0
    59a0:	11 f1       	breq	.+68     	; 0x59e6 <malloc+0x66>
    59a2:	40 81       	ld	r20, Z
    59a4:	51 81       	ldd	r21, Z+1	; 0x01
    59a6:	48 17       	cp	r20, r24
    59a8:	59 07       	cpc	r21, r25
    59aa:	c0 f0       	brcs	.+48     	; 0x59dc <malloc+0x5c>
    59ac:	48 17       	cp	r20, r24
    59ae:	59 07       	cpc	r21, r25
    59b0:	61 f4       	brne	.+24     	; 0x59ca <malloc+0x4a>
    59b2:	82 81       	ldd	r24, Z+2	; 0x02
    59b4:	93 81       	ldd	r25, Z+3	; 0x03
    59b6:	20 97       	sbiw	r28, 0x00	; 0
    59b8:	19 f0       	breq	.+6      	; 0x59c0 <malloc+0x40>
    59ba:	9b 83       	std	Y+3, r25	; 0x03
    59bc:	8a 83       	std	Y+2, r24	; 0x02
    59be:	2b c0       	rjmp	.+86     	; 0x5a16 <malloc+0x96>
    59c0:	90 93 81 08 	sts	0x0881, r25
    59c4:	80 93 80 08 	sts	0x0880, r24
    59c8:	26 c0       	rjmp	.+76     	; 0x5a16 <malloc+0x96>
    59ca:	21 15       	cp	r18, r1
    59cc:	31 05       	cpc	r19, r1
    59ce:	19 f0       	breq	.+6      	; 0x59d6 <malloc+0x56>
    59d0:	42 17       	cp	r20, r18
    59d2:	53 07       	cpc	r21, r19
    59d4:	18 f4       	brcc	.+6      	; 0x59dc <malloc+0x5c>
    59d6:	9a 01       	movw	r18, r20
    59d8:	be 01       	movw	r22, r28
    59da:	df 01       	movw	r26, r30
    59dc:	ef 01       	movw	r28, r30
    59de:	02 80       	ldd	r0, Z+2	; 0x02
    59e0:	f3 81       	ldd	r31, Z+3	; 0x03
    59e2:	e0 2d       	mov	r30, r0
    59e4:	dc cf       	rjmp	.-72     	; 0x599e <malloc+0x1e>
    59e6:	21 15       	cp	r18, r1
    59e8:	31 05       	cpc	r19, r1
    59ea:	09 f1       	breq	.+66     	; 0x5a2e <malloc+0xae>
    59ec:	28 1b       	sub	r18, r24
    59ee:	39 0b       	sbc	r19, r25
    59f0:	24 30       	cpi	r18, 0x04	; 4
    59f2:	31 05       	cpc	r19, r1
    59f4:	90 f4       	brcc	.+36     	; 0x5a1a <malloc+0x9a>
    59f6:	12 96       	adiw	r26, 0x02	; 2
    59f8:	8d 91       	ld	r24, X+
    59fa:	9c 91       	ld	r25, X
    59fc:	13 97       	sbiw	r26, 0x03	; 3
    59fe:	61 15       	cp	r22, r1
    5a00:	71 05       	cpc	r23, r1
    5a02:	21 f0       	breq	.+8      	; 0x5a0c <malloc+0x8c>
    5a04:	fb 01       	movw	r30, r22
    5a06:	93 83       	std	Z+3, r25	; 0x03
    5a08:	82 83       	std	Z+2, r24	; 0x02
    5a0a:	04 c0       	rjmp	.+8      	; 0x5a14 <malloc+0x94>
    5a0c:	90 93 81 08 	sts	0x0881, r25
    5a10:	80 93 80 08 	sts	0x0880, r24
    5a14:	fd 01       	movw	r30, r26
    5a16:	32 96       	adiw	r30, 0x02	; 2
    5a18:	44 c0       	rjmp	.+136    	; 0x5aa2 <malloc+0x122>
    5a1a:	fd 01       	movw	r30, r26
    5a1c:	e2 0f       	add	r30, r18
    5a1e:	f3 1f       	adc	r31, r19
    5a20:	81 93       	st	Z+, r24
    5a22:	91 93       	st	Z+, r25
    5a24:	22 50       	subi	r18, 0x02	; 2
    5a26:	31 09       	sbc	r19, r1
    5a28:	2d 93       	st	X+, r18
    5a2a:	3c 93       	st	X, r19
    5a2c:	3a c0       	rjmp	.+116    	; 0x5aa2 <malloc+0x122>
    5a2e:	20 91 7e 08 	lds	r18, 0x087E
    5a32:	30 91 7f 08 	lds	r19, 0x087F
    5a36:	23 2b       	or	r18, r19
    5a38:	41 f4       	brne	.+16     	; 0x5a4a <malloc+0xca>
    5a3a:	20 91 06 02 	lds	r18, 0x0206
    5a3e:	30 91 07 02 	lds	r19, 0x0207
    5a42:	30 93 7f 08 	sts	0x087F, r19
    5a46:	20 93 7e 08 	sts	0x087E, r18
    5a4a:	20 91 04 02 	lds	r18, 0x0204
    5a4e:	30 91 05 02 	lds	r19, 0x0205
    5a52:	21 15       	cp	r18, r1
    5a54:	31 05       	cpc	r19, r1
    5a56:	41 f4       	brne	.+16     	; 0x5a68 <malloc+0xe8>
    5a58:	2d b7       	in	r18, 0x3d	; 61
    5a5a:	3e b7       	in	r19, 0x3e	; 62
    5a5c:	40 91 08 02 	lds	r20, 0x0208
    5a60:	50 91 09 02 	lds	r21, 0x0209
    5a64:	24 1b       	sub	r18, r20
    5a66:	35 0b       	sbc	r19, r21
    5a68:	e0 91 7e 08 	lds	r30, 0x087E
    5a6c:	f0 91 7f 08 	lds	r31, 0x087F
    5a70:	e2 17       	cp	r30, r18
    5a72:	f3 07       	cpc	r31, r19
    5a74:	a0 f4       	brcc	.+40     	; 0x5a9e <malloc+0x11e>
    5a76:	2e 1b       	sub	r18, r30
    5a78:	3f 0b       	sbc	r19, r31
    5a7a:	28 17       	cp	r18, r24
    5a7c:	39 07       	cpc	r19, r25
    5a7e:	78 f0       	brcs	.+30     	; 0x5a9e <malloc+0x11e>
    5a80:	ac 01       	movw	r20, r24
    5a82:	4e 5f       	subi	r20, 0xFE	; 254
    5a84:	5f 4f       	sbci	r21, 0xFF	; 255
    5a86:	24 17       	cp	r18, r20
    5a88:	35 07       	cpc	r19, r21
    5a8a:	48 f0       	brcs	.+18     	; 0x5a9e <malloc+0x11e>
    5a8c:	4e 0f       	add	r20, r30
    5a8e:	5f 1f       	adc	r21, r31
    5a90:	50 93 7f 08 	sts	0x087F, r21
    5a94:	40 93 7e 08 	sts	0x087E, r20
    5a98:	81 93       	st	Z+, r24
    5a9a:	91 93       	st	Z+, r25
    5a9c:	02 c0       	rjmp	.+4      	; 0x5aa2 <malloc+0x122>
    5a9e:	e0 e0       	ldi	r30, 0x00	; 0
    5aa0:	f0 e0       	ldi	r31, 0x00	; 0
    5aa2:	cf 01       	movw	r24, r30
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	08 95       	ret

00005aaa <free>:
    5aaa:	0f 93       	push	r16
    5aac:	1f 93       	push	r17
    5aae:	cf 93       	push	r28
    5ab0:	df 93       	push	r29
    5ab2:	00 97       	sbiw	r24, 0x00	; 0
    5ab4:	09 f4       	brne	.+2      	; 0x5ab8 <free+0xe>
    5ab6:	8c c0       	rjmp	.+280    	; 0x5bd0 <free+0x126>
    5ab8:	fc 01       	movw	r30, r24
    5aba:	32 97       	sbiw	r30, 0x02	; 2
    5abc:	13 82       	std	Z+3, r1	; 0x03
    5abe:	12 82       	std	Z+2, r1	; 0x02
    5ac0:	00 91 80 08 	lds	r16, 0x0880
    5ac4:	10 91 81 08 	lds	r17, 0x0881
    5ac8:	01 15       	cp	r16, r1
    5aca:	11 05       	cpc	r17, r1
    5acc:	81 f4       	brne	.+32     	; 0x5aee <free+0x44>
    5ace:	20 81       	ld	r18, Z
    5ad0:	31 81       	ldd	r19, Z+1	; 0x01
    5ad2:	82 0f       	add	r24, r18
    5ad4:	93 1f       	adc	r25, r19
    5ad6:	20 91 7e 08 	lds	r18, 0x087E
    5ada:	30 91 7f 08 	lds	r19, 0x087F
    5ade:	28 17       	cp	r18, r24
    5ae0:	39 07       	cpc	r19, r25
    5ae2:	79 f5       	brne	.+94     	; 0x5b42 <free+0x98>
    5ae4:	f0 93 7f 08 	sts	0x087F, r31
    5ae8:	e0 93 7e 08 	sts	0x087E, r30
    5aec:	71 c0       	rjmp	.+226    	; 0x5bd0 <free+0x126>
    5aee:	d8 01       	movw	r26, r16
    5af0:	40 e0       	ldi	r20, 0x00	; 0
    5af2:	50 e0       	ldi	r21, 0x00	; 0
    5af4:	ae 17       	cp	r26, r30
    5af6:	bf 07       	cpc	r27, r31
    5af8:	50 f4       	brcc	.+20     	; 0x5b0e <free+0x64>
    5afa:	12 96       	adiw	r26, 0x02	; 2
    5afc:	2d 91       	ld	r18, X+
    5afe:	3c 91       	ld	r19, X
    5b00:	13 97       	sbiw	r26, 0x03	; 3
    5b02:	ad 01       	movw	r20, r26
    5b04:	21 15       	cp	r18, r1
    5b06:	31 05       	cpc	r19, r1
    5b08:	09 f1       	breq	.+66     	; 0x5b4c <free+0xa2>
    5b0a:	d9 01       	movw	r26, r18
    5b0c:	f3 cf       	rjmp	.-26     	; 0x5af4 <free+0x4a>
    5b0e:	9d 01       	movw	r18, r26
    5b10:	da 01       	movw	r26, r20
    5b12:	33 83       	std	Z+3, r19	; 0x03
    5b14:	22 83       	std	Z+2, r18	; 0x02
    5b16:	60 81       	ld	r22, Z
    5b18:	71 81       	ldd	r23, Z+1	; 0x01
    5b1a:	86 0f       	add	r24, r22
    5b1c:	97 1f       	adc	r25, r23
    5b1e:	82 17       	cp	r24, r18
    5b20:	93 07       	cpc	r25, r19
    5b22:	69 f4       	brne	.+26     	; 0x5b3e <free+0x94>
    5b24:	ec 01       	movw	r28, r24
    5b26:	28 81       	ld	r18, Y
    5b28:	39 81       	ldd	r19, Y+1	; 0x01
    5b2a:	26 0f       	add	r18, r22
    5b2c:	37 1f       	adc	r19, r23
    5b2e:	2e 5f       	subi	r18, 0xFE	; 254
    5b30:	3f 4f       	sbci	r19, 0xFF	; 255
    5b32:	31 83       	std	Z+1, r19	; 0x01
    5b34:	20 83       	st	Z, r18
    5b36:	8a 81       	ldd	r24, Y+2	; 0x02
    5b38:	9b 81       	ldd	r25, Y+3	; 0x03
    5b3a:	93 83       	std	Z+3, r25	; 0x03
    5b3c:	82 83       	std	Z+2, r24	; 0x02
    5b3e:	45 2b       	or	r20, r21
    5b40:	29 f4       	brne	.+10     	; 0x5b4c <free+0xa2>
    5b42:	f0 93 81 08 	sts	0x0881, r31
    5b46:	e0 93 80 08 	sts	0x0880, r30
    5b4a:	42 c0       	rjmp	.+132    	; 0x5bd0 <free+0x126>
    5b4c:	13 96       	adiw	r26, 0x03	; 3
    5b4e:	fc 93       	st	X, r31
    5b50:	ee 93       	st	-X, r30
    5b52:	12 97       	sbiw	r26, 0x02	; 2
    5b54:	ed 01       	movw	r28, r26
    5b56:	49 91       	ld	r20, Y+
    5b58:	59 91       	ld	r21, Y+
    5b5a:	9e 01       	movw	r18, r28
    5b5c:	24 0f       	add	r18, r20
    5b5e:	35 1f       	adc	r19, r21
    5b60:	e2 17       	cp	r30, r18
    5b62:	f3 07       	cpc	r31, r19
    5b64:	71 f4       	brne	.+28     	; 0x5b82 <free+0xd8>
    5b66:	80 81       	ld	r24, Z
    5b68:	91 81       	ldd	r25, Z+1	; 0x01
    5b6a:	84 0f       	add	r24, r20
    5b6c:	95 1f       	adc	r25, r21
    5b6e:	02 96       	adiw	r24, 0x02	; 2
    5b70:	11 96       	adiw	r26, 0x01	; 1
    5b72:	9c 93       	st	X, r25
    5b74:	8e 93       	st	-X, r24
    5b76:	82 81       	ldd	r24, Z+2	; 0x02
    5b78:	93 81       	ldd	r25, Z+3	; 0x03
    5b7a:	13 96       	adiw	r26, 0x03	; 3
    5b7c:	9c 93       	st	X, r25
    5b7e:	8e 93       	st	-X, r24
    5b80:	12 97       	sbiw	r26, 0x02	; 2
    5b82:	e0 e0       	ldi	r30, 0x00	; 0
    5b84:	f0 e0       	ldi	r31, 0x00	; 0
    5b86:	d8 01       	movw	r26, r16
    5b88:	12 96       	adiw	r26, 0x02	; 2
    5b8a:	8d 91       	ld	r24, X+
    5b8c:	9c 91       	ld	r25, X
    5b8e:	13 97       	sbiw	r26, 0x03	; 3
    5b90:	00 97       	sbiw	r24, 0x00	; 0
    5b92:	19 f0       	breq	.+6      	; 0x5b9a <free+0xf0>
    5b94:	f8 01       	movw	r30, r16
    5b96:	8c 01       	movw	r16, r24
    5b98:	f6 cf       	rjmp	.-20     	; 0x5b86 <free+0xdc>
    5b9a:	8d 91       	ld	r24, X+
    5b9c:	9c 91       	ld	r25, X
    5b9e:	98 01       	movw	r18, r16
    5ba0:	2e 5f       	subi	r18, 0xFE	; 254
    5ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba4:	82 0f       	add	r24, r18
    5ba6:	93 1f       	adc	r25, r19
    5ba8:	20 91 7e 08 	lds	r18, 0x087E
    5bac:	30 91 7f 08 	lds	r19, 0x087F
    5bb0:	28 17       	cp	r18, r24
    5bb2:	39 07       	cpc	r19, r25
    5bb4:	69 f4       	brne	.+26     	; 0x5bd0 <free+0x126>
    5bb6:	30 97       	sbiw	r30, 0x00	; 0
    5bb8:	29 f4       	brne	.+10     	; 0x5bc4 <free+0x11a>
    5bba:	10 92 81 08 	sts	0x0881, r1
    5bbe:	10 92 80 08 	sts	0x0880, r1
    5bc2:	02 c0       	rjmp	.+4      	; 0x5bc8 <free+0x11e>
    5bc4:	13 82       	std	Z+3, r1	; 0x03
    5bc6:	12 82       	std	Z+2, r1	; 0x02
    5bc8:	10 93 7f 08 	sts	0x087F, r17
    5bcc:	00 93 7e 08 	sts	0x087E, r16
    5bd0:	df 91       	pop	r29
    5bd2:	cf 91       	pop	r28
    5bd4:	1f 91       	pop	r17
    5bd6:	0f 91       	pop	r16
    5bd8:	08 95       	ret

00005bda <memset>:
    5bda:	dc 01       	movw	r26, r24
    5bdc:	01 c0       	rjmp	.+2      	; 0x5be0 <memset+0x6>
    5bde:	6d 93       	st	X+, r22
    5be0:	41 50       	subi	r20, 0x01	; 1
    5be2:	50 40       	sbci	r21, 0x00	; 0
    5be4:	e0 f7       	brcc	.-8      	; 0x5bde <memset+0x4>
    5be6:	08 95       	ret

00005be8 <__mulshisi3>:
    5be8:	b7 ff       	sbrs	r27, 7
    5bea:	0c 94 ec 29 	jmp	0x53d8	; 0x53d8 <__muluhisi3>

00005bee <__mulohisi3>:
    5bee:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__muluhisi3>
    5bf2:	82 1b       	sub	r24, r18
    5bf4:	93 0b       	sbc	r25, r19
    5bf6:	08 95       	ret

00005bf8 <__divmodsi4>:
    5bf8:	05 2e       	mov	r0, r21
    5bfa:	97 fb       	bst	r25, 7
    5bfc:	1e f4       	brtc	.+6      	; 0x5c04 <__divmodsi4+0xc>
    5bfe:	00 94       	com	r0
    5c00:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__negsi2>
    5c04:	57 fd       	sbrc	r21, 7
    5c06:	07 d0       	rcall	.+14     	; 0x5c16 <__divmodsi4_neg2>
    5c08:	0e 94 2f 2a 	call	0x545e	; 0x545e <__udivmodsi4>
    5c0c:	07 fc       	sbrc	r0, 7
    5c0e:	03 d0       	rcall	.+6      	; 0x5c16 <__divmodsi4_neg2>
    5c10:	4e f4       	brtc	.+18     	; 0x5c24 <__divmodsi4_exit>
    5c12:	0c 94 13 2e 	jmp	0x5c26	; 0x5c26 <__negsi2>

00005c16 <__divmodsi4_neg2>:
    5c16:	50 95       	com	r21
    5c18:	40 95       	com	r20
    5c1a:	30 95       	com	r19
    5c1c:	21 95       	neg	r18
    5c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c20:	4f 4f       	sbci	r20, 0xFF	; 255
    5c22:	5f 4f       	sbci	r21, 0xFF	; 255

00005c24 <__divmodsi4_exit>:
    5c24:	08 95       	ret

00005c26 <__negsi2>:
    5c26:	90 95       	com	r25
    5c28:	80 95       	com	r24
    5c2a:	70 95       	com	r23
    5c2c:	61 95       	neg	r22
    5c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c30:	8f 4f       	sbci	r24, 0xFF	; 255
    5c32:	9f 4f       	sbci	r25, 0xFF	; 255
    5c34:	08 95       	ret

00005c36 <_exit>:
    5c36:	f8 94       	cli

00005c38 <__stop_program>:
    5c38:	ff cf       	rjmp	.-2      	; 0x5c38 <__stop_program>
